
;; Function kbd_init (kbd_init, funcdef_no=0, decl_uid=4487, cgraph_uid=1, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 7 3 4 5 6
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 7 }
;; 7 succs { 3 }
;; 3 succs { 3 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 78.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r125,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a3(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a4(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a7(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a12(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a13(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a17(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a19(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a20(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a21(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a22(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a24(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a26(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:25000
  a28(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a30(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a31(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a32(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a35(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a36(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a37(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a38(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a39(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a40(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a41(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a42(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 83(l0): point = 0
   Insn 80(l0): point = 2
   Insn 85(l0): point = 4
   Insn 82(l0): point = 6
   Insn 81(l0): point = 8
   Insn 78(l0): point = 10
   Insn 77(l0): point = 12
   Insn 76(l0): point = 14
   Insn 75(l0): point = 16
   Insn 74(l0): point = 18
   Insn 71(l0): point = 21
   Insn 70(l0): point = 23
   Insn 69(l0): point = 25
   Insn 67(l0): point = 28
   Insn 66(l0): point = 30
   Insn 65(l0): point = 32
   Insn 64(l0): point = 34
   Insn 63(l0): point = 36
   Insn 62(l0): point = 38
   Insn 61(l0): point = 40
   Insn 60(l0): point = 42
   Insn 59(l0): point = 44
   Insn 58(l0): point = 46
   Insn 57(l0): point = 48
   Insn 55(l0): point = 51
   Insn 54(l0): point = 53
   Insn 52(l0): point = 55
   Insn 51(l0): point = 57
   Insn 50(l0): point = 59
   Insn 49(l0): point = 61
   Insn 48(l0): point = 63
   Insn 47(l0): point = 65
   Insn 87(l0): point = 68
   Insn 45(l0): point = 71
   Insn 44(l0): point = 73
   Insn 43(l0): point = 75
   Insn 42(l0): point = 77
   Insn 41(l0): point = 79
   Insn 40(l0): point = 81
   Insn 39(l0): point = 83
   Insn 38(l0): point = 85
   Insn 37(l0): point = 87
   Insn 36(l0): point = 89
   Insn 35(l0): point = 91
   Insn 34(l0): point = 93
   Insn 33(l0): point = 95
   Insn 32(l0): point = 97
   Insn 31(l0): point = 99
   Insn 30(l0): point = 101
   Insn 29(l0): point = 103
   Insn 28(l0): point = 105
   Insn 27(l0): point = 107
   Insn 26(l0): point = 109
   Insn 25(l0): point = 111
   Insn 24(l0): point = 113
   Insn 23(l0): point = 115
   Insn 22(l0): point = 117
   Insn 21(l0): point = 119
   Insn 20(l0): point = 121
   Insn 19(l0): point = 123
   Insn 18(l0): point = 125
   Insn 17(l0): point = 127
   Insn 16(l0): point = 129
   Insn 15(l0): point = 131
   Insn 14(l0): point = 133
   Insn 13(l0): point = 135
   Insn 12(l0): point = 137
   Insn 11(l0): point = 139
   Insn 10(l0): point = 141
   Insn 9(l0): point = 143
   Insn 8(l0): point = 145
   Insn 7(l0): point = 147
   Insn 6(l0): point = 149
   Insn 5(l0): point = 151
 a0(r125): [3..6]
 a1(r124): [15..16]
 a2(r155): [17..18]
 a3(r153): [22..25]
 a4(r154): [22..23]
 a5(r152): [31..32]
 a6(r123): [39..40]
 a7(r151): [43..44]
 a8(r122): [45..46]
 a9(r150): [47..48]
 a10(r121): [54..55]
 a11(r120): [56..57]
 a12(r119): [58..59]
 a13(r118): [60..61]
 a14(r117): [62..63]
 a15(r149): [64..65]
 a16(r147): [76..79]
 a17(r148): [76..77]
 a18(r145): [82..85]
 a19(r146): [82..83]
 a20(r143): [88..91]
 a21(r144): [88..89]
 a22(r141): [94..97]
 a23(r142): [94..95]
 a24(r139): [100..103]
 a25(r140): [100..101]
 a26(r138): [106..107]
 a27(r116): [106..113]
 a28(r137): [110..111]
 a29(r115): [116..121]
 a30(r136): [116..117]
 a31(r135): [118..119]
 a32(r114): [122..123]
 a33(r134): [124..125]
 a34(r113): [128..133]
 a35(r133): [128..129]
 a36(r132): [130..131]
 a37(r131): [134..135]
 a38(r129): [138..141]
 a39(r130): [138..139]
 a40(r128): [144..145]
 a41(r126): [148..151]
 a42(r127): [148..149]
Compressing live ranges: from 154 to 64 - 41%
Ranges after the compression:
 a0(r125): [0..1]
 a1(r124): [2..3]
 a2(r155): [4..5]
 a3(r153): [6..7]
 a4(r154): [6..7]
 a5(r152): [8..9]
 a6(r123): [10..11]
 a7(r151): [12..13]
 a8(r122): [14..15]
 a9(r150): [16..17]
 a10(r121): [18..19]
 a11(r120): [20..21]
 a12(r119): [22..23]
 a13(r118): [24..25]
 a14(r117): [26..27]
 a15(r149): [28..29]
 a16(r147): [30..31]
 a17(r148): [30..31]
 a18(r145): [32..33]
 a19(r146): [32..33]
 a20(r143): [34..35]
 a21(r144): [34..35]
 a22(r141): [36..37]
 a23(r142): [36..37]
 a24(r139): [38..39]
 a25(r140): [38..39]
 a26(r138): [40..41]
 a27(r116): [40..43]
 a28(r137): [42..43]
 a29(r115): [44..47]
 a30(r136): [44..45]
 a31(r135): [46..47]
 a32(r114): [48..49]
 a33(r134): [50..51]
 a34(r113): [52..55]
 a35(r133): [52..53]
 a36(r132): [54..55]
 a37(r131): [56..57]
 a38(r129): [58..59]
 a39(r130): [58..59]
 a40(r128): [60..61]
 a41(r126): [62..63]
 a42(r127): [62..63]
  regions=1, blocks=8, points=64
    allocnos=43 (big 0), copies=0, conflicts=0, ranges=43
Disposition:
   34:r113 l0     3   32:r114 l0     3   29:r115 l0     3   27:r116 l0     3
   14:r117 l0     3   13:r118 l0     3   12:r119 l0     3   11:r120 l0     3
   10:r121 l0     3    8:r122 l0     3    6:r123 l0     3    1:r124 l0     3
    0:r125 l0     3   41:r126 l0     3   42:r127 l0     2   40:r128 l0     3
   38:r129 l0     3   39:r130 l0     2   37:r131 l0     3   36:r132 l0     2
   35:r133 l0     2   33:r134 l0     3   31:r135 l0     2   30:r136 l0     2
   28:r137 l0     2   26:r138 l0     2   24:r139 l0     3   25:r140 l0     2
   22:r141 l0     3   23:r142 l0     2   20:r143 l0     3   21:r144 l0     2
   18:r145 l0     3   19:r146 l0     2   16:r147 l0     3   17:r148 l0     2
   15:r149 l0     3    9:r150 l0     3    7:r151 l0     3    5:r152 l0     3
    3:r153 l0     3    4:r154 l0     2    2:r155 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kbd_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,5u} r1={6d,2u} r2={4d} r3={4d} r11={1d,7u} r12={6d} r13={1d,10u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={5d,2u} r101={3d} r102={1d,20u} r103={1d,6u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,2u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} 
;;    total ref usage 448{352d,96u,0e} in 74{71 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 7, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":58:10 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 127)
        (const_int 1 [0x1])) "kbd.c":58:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/v/c:SI (reg/f:SI 126) [3 keyset+0 S4 A32])
        (reg:SI 127)) "kbd.c":58:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 127)
        (expr_list:REG_DEAD (reg/f:SI 126)
            (nil))))
(insn 8 7 9 2 (set (reg/f:SI 128)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":60:8 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 128)) "kbd.c":60:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 128)
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":61:12 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 130)
        (const_int 268460032 [0x10006000])) "kbd.c":61:12 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/v/f:SI (reg/f:SI 129) [2 kp_16->base+0 S4 A32])
        (reg:SI 130)) "kbd.c":61:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg/f:SI 129)
            (nil))))
(insn 13 12 14 2 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":62:7 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 131) [2 kp_16->base+0 S4 A32])) "kbd.c":62:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 15 14 16 2 (set (reg:SI 132)
        (const_int 16 [0x10])) "kbd.c":62:23 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "kbd.c":62:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(insn 17 16 18 2 (set (mem:QI (reg/f:SI 113 [ _1 ]) [0 *_1+0 S1 A8])
        (reg:QI 133)) "kbd.c":62:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 133)
        (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
            (nil))))
(insn 18 17 19 2 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":63:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 114 [ _2 ])
        (mem/v/f:SI (reg/f:SI 134) [2 kp_16->base+0 S4 A32])) "kbd.c":63:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 134)
        (nil)))
(insn 20 19 21 2 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 114 [ _2 ])
            (const_int 12 [0xc]))) "kbd.c":63:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 114 [ _2 ])
        (nil)))
(insn 21 20 22 2 (set (reg:SI 135)
        (const_int 8 [0x8])) "kbd.c":63:23 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:QI 136)
        (subreg:QI (reg:SI 135) 0)) "kbd.c":63:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(insn 23 22 24 2 (set (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])
        (reg:QI 136)) "kbd.c":63:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 136)
        (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
            (nil))))
(insn 24 23 25 2 (set (reg:SI 116 [ _4 ])
        (const_int 0 [0])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 136 [0x88])) [3 kp_16->tail+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 27 26 28 2 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:12 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 132 [0x84])) [3 kp_16->head+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
            (nil))))
(insn 29 28 30 2 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:12 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 2 (set (reg:SI 140)
        (const_int 0 [0])) "kbd.c":65:12 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 2 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 140 [0x8c])) [3 kp_16->data+0 S4 A32])
        (reg:SI 140)) "kbd.c":65:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 140)
        (expr_list:REG_DEAD (reg/f:SI 139)
            (nil))))
(insn 32 31 33 2 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:26 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (reg:SI 142)
        (const_int 128 [0x80])) "kbd.c":65:26 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 2 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 144 [0x90])) [3 kp_16->room+0 S4 A32])
        (reg:SI 142)) "kbd.c":65:26 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 142)
        (expr_list:REG_DEAD (reg/f:SI 141)
            (nil))))
(insn 35 34 36 2 (set (reg/f:SI 143)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":66:11 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 144)
        (const_int 0 [0])) "kbd.c":66:11 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (mem/c:SI (reg/f:SI 143) [3 shifted+0 S4 A32])
        (reg:SI 144)) "kbd.c":66:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_DEAD (reg/f:SI 143)
            (nil))))
(insn 38 37 39 2 (set (reg/f:SI 145)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (mem/c:SI (reg/f:SI 145) [3 release+0 S4 A32])
        (reg:SI 146)) "kbd.c":67:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 146)
        (expr_list:REG_DEAD (reg/f:SI 145)
            (nil))))
(insn 41 40 42 2 (set (reg/f:SI 147)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":68:11 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 2 (set (reg:SI 148)
        (const_int 0 [0])) "kbd.c":68:11 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 2 (set (mem/c:SI (reg/f:SI 147) [3 control+0 S4 A32])
        (reg:SI 148)) "kbd.c":68:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 148)
        (expr_list:REG_DEAD (reg/f:SI 147)
            (nil))))
(insn 44 43 45 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fcdc0b61870 *.LC0>)) "kbd.c":70:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 45 44 86 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":70:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 2, next block 3, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 86 45 87 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 53 7 (const_int 0 [0]) "kbd.c":71:8 311 {nop}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 7, next block 4, flags: (RTL)
;;  pred:       7 [always]  (FALLTHRU)
;;              3 (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 117 118 119 120 121 149
(code_label 53 87 46 3 2 (nil) [1 uses])
(note 46 53 47 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 3 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 3 (set (reg/f:SI 117 [ _5 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_16->base+0 S4 A32])) "kbd.c":71:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 149)
        (nil)))
(insn 49 48 50 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 4 [0x4]))) "kbd.c":71:22 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
        (nil)))
(insn 50 49 51 3 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8]))) "kbd.c":71:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
        (nil)))
(insn 51 50 52 3 (set (reg:SI 120 [ _8 ])
        (reg:SI 119 [ _7 ])) "kbd.c":71:31 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(insn 52 51 54 3 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 16 [0x10]))) "kbd.c":71:31 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 54 52 55 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "kbd.c":71:39 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (nil)))
(jump_insn 55 54 56 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "kbd.c":71:39 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 53)
;;  succ:       3 (DFS_BACK)
;;              4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 150 151 152
(note 56 55 57 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 4 (set (reg/f:SI 150)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":72:15 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 4 (set (reg/f:SI 122 [ _10 ])
        (mem/v/f:SI (reg/f:SI 150) [2 kp_16->base+0 S4 A32])) "kbd.c":72:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 150)
        (nil)))
(insn 59 58 60 4 (set (reg:QI 151)
        (mem:QI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 8 [0x8])) [0 MEM[(char *)_10 + 8B]+0 S1 A8])) "kbd.c":72:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 122 [ _10 ])
        (nil)))
(insn 60 59 61 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8])
        (reg:QI 151)) "kbd.c":72:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 151)
        (nil)))
(insn 61 60 62 4 (set (reg:SI 123 [ _11 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":73:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 62 61 63 4 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "kbd.c":73:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 63 62 64 4 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7fcdc0b61900 *.LC1>)) "kbd.c":73:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 64 63 65 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":73:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 4 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":74:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 66 65 67 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 152)
            (const_int 90 [0x5a]))) "kbd.c":74:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(jump_insn 67 66 68 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "kbd.c":74:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 72)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 153 154
(note 68 67 69 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 5 (set (reg/f:SI 153)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":75:11 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 5 (set (reg:SI 154)
        (const_int 2 [0x2])) "kbd.c":75:11 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 5 (set (mem/v/c:SI (reg/f:SI 153) [3 keyset+0 S4 A32])
        (reg:SI 154)) "kbd.c":75:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 154)
        (expr_list:REG_DEAD (reg/f:SI 153)
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 155
(code_label 72 71 73 6 3 (nil) [1 uses])
(note 73 72 74 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 6 (set (reg/f:SI 155)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 6 (set (reg:SI 124 [ keyset.0_12 ])
        (mem/v/c:SI (reg/f:SI 155) [3 keyset+0 S4 A32])) "kbd.c":76:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 155)
        (nil)))
(insn 76 75 77 6 (set (reg:SI 1 r1)
        (reg:SI 124 [ keyset.0_12 ])) "kbd.c":76:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ keyset.0_12 ])
        (nil)))
(insn 77 76 78 6 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7fcdc0b61990 *.LC2>)) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 81 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":76:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 81 78 82 6 (clobber (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 82 81 85 6 (clobber (reg:SI 125 [ <retval> ])) "kbd.c":77:1 -1
     (nil))
(insn 85 82 80 6 (const_int 0 [0]) "kbd.c":77:1 311 {nop}
     (nil))
(insn 80 85 83 6 (set (reg/i:SI 0 r0)
        (reg:SI 125 [ <retval> ])) "kbd.c":77:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 125 [ <retval> ])
        (nil)))
(insn 83 80 0 6 (use (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function doF1 (doF1, funcdef_no=1, decl_uid=4503, cgraph_uid=2, symbol_order=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 15(l0): point = 0
   Insn 12(l0): point = 2
   Insn 17(l0): point = 4
   Insn 14(l0): point = 6
   Insn 13(l0): point = 8
   Insn 10(l0): point = 10
   Insn 9(l0): point = 12
   Insn 8(l0): point = 14
   Insn 7(l0): point = 16
   Insn 6(l0): point = 18
   Insn 5(l0): point = 20
 a0(r115): [3..6]
 a1(r114): [15..16]
 a2(r113): [17..18]
 a3(r116): [19..20]
Compressing live ranges: from 23 to 8 - 34%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r114): [2..3]
 a2(r113): [4..5]
 a3(r116): [6..7]
  regions=1, blocks=3, points=8
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4
Disposition:
    2:r113 l0     3    1:r114 l0     3    0:r115 l0     3    3:r116 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


doF1

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,3u} r1={3d,1u} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,2u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} 
;;    total ref usage 130{114d,16u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fcdc17fe7e0 running>)) "kbd.c":105:33 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ running.1_1 ])
        (mem/f/c:SI (reg/f:SI 116) [6 running+0 S4 A32])) "kbd.c":105:33 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 114 [ _2 ])
        (mem:SI (plus:SI (reg/f:SI 113 [ running.1_1 ])
                (const_int 24 [0x18])) [3 running.1_1->pid+0 S4 A32])) "kbd.c":105:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ running.1_1 ])
        (nil)))
(insn 8 7 9 2 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "kbd.c":105:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 9 8 10 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fcdc0b61ab0 *.LC3>)) "kbd.c":105:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 10 9 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":105:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 10 14 2 (clobber (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 14 13 17 2 (clobber (reg:SI 115 [ <retval> ])) "kbd.c":106:1 -1
     (nil))
(insn 17 14 12 2 (const_int 0 [0]) "kbd.c":106:1 311 {nop}
     (nil))
(insn 12 17 15 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "kbd.c":106:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 15 12 0 2 (use (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function doF2 (doF2, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
   Insn 15(l0): point = 4
   Insn 12(l0): point = 6
   Insn 11(l0): point = 8
   Insn 8(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 5(l0): point = 16
 a0(r114): [3..6]
 a1(r113): [13..14]
 a2(r115): [15..16]
Compressing live ranges: from 19 to 6 - 31%
Ranges after the compression:
 a0(r114): [0..1]
 a1(r113): [2..3]
 a2(r115): [4..5]
  regions=1, blocks=3, points=6
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3
Disposition:
    1:r113 l0     3    0:r114 l0     3    2:r115 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


doF2

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,2u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} 
;;    total ref usage 126{112d,14u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fcdc17fe6c0 readyQueue>)) "kbd.c":109:5 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ readyQueue.2_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 readyQueue+0 S4 A32])) "kbd.c":109:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ readyQueue.2_1 ])) "kbd.c":109:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ readyQueue.2_1 ])
        (nil)))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printQ") [flags 0x41]  <function_decl 0x7fcdc0b13200 printQ>) [0 printQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":109:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":110:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":110:1 311 {nop}
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":110:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ <retval> ])
        (nil)))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function doF3 (doF3, funcdef_no=3, decl_uid=4508, cgraph_uid=4, symbol_order=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 13(l0): point = 0
   Insn 10(l0): point = 2
   Insn 15(l0): point = 4
   Insn 12(l0): point = 6
   Insn 11(l0): point = 8
   Insn 8(l0): point = 10
   Insn 7(l0): point = 12
   Insn 6(l0): point = 14
   Insn 5(l0): point = 16
 a0(r114): [3..6]
 a1(r113): [13..14]
 a2(r115): [15..16]
Compressing live ranges: from 19 to 6 - 31%
Ranges after the compression:
 a0(r114): [0..1]
 a1(r113): [2..3]
 a2(r115): [4..5]
  regions=1, blocks=3, points=6
    allocnos=3 (big 0), copies=0, conflicts=0, ranges=3
Disposition:
    1:r113 l0     3    0:r114 l0     3    2:r115 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


doF3

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,2u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} 
;;    total ref usage 126{112d,14u,0e} in 9{8 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("sleepList") [flags 0x40]  <var_decl 0x7fcdc17fe750 sleepList>)) "kbd.c":113:3 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ sleepList.3_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 sleepList+0 S4 A32])) "kbd.c":113:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ sleepList.3_1 ])) "kbd.c":113:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ sleepList.3_1 ])
        (nil)))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printSleepList") [flags 0x41]  <function_decl 0x7fcdc0b13300 printSleepList>) [0 printSleepList S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":113:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":114:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":114:1 311 {nop}
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":114:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ <retval> ])
        (nil)))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function doF4 (doF4, funcdef_no=4, decl_uid=4510, cgraph_uid=5, symbol_order=19)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 5.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000

   Insn 10(l0): point = 0
   Insn 7(l0): point = 2
   Insn 12(l0): point = 4
   Insn 9(l0): point = 6
   Insn 8(l0): point = 8
   Insn 5(l0): point = 10
 a0(r113): [3..6]
Compressing live ranges: from 13 to 2 - 15%
Ranges after the compression:
 a0(r113): [0..1]
  regions=1, blocks=3, points=2
    allocnos=1 (big 0), copies=0, conflicts=0, ranges=1
Disposition:
    0:r113 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


doF4

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,2u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} 
;;    total ref usage 120{109d,11u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kps") [flags 0x41]  <function_decl 0x7fcdc0b26500 kps>) [0 kps S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":117:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 8 5 9 2 (clobber (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 9 8 12 2 (clobber (reg:SI 113 [ <retval> ])) "kbd.c":118:1 -1
     (nil))
(insn 12 9 7 2 (const_int 0 [0]) "kbd.c":118:1 311 {nop}
     (nil))
(insn 7 12 10 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "kbd.c":118:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 10 7 0 2 (use (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kbd_handler1 (kbd_handler1, funcdef_no=5, decl_uid=4514, cgraph_uid=6, symbol_order=20)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 85 n_edges 129 count 85 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 77 78 79 80 81 82 83 76 84
;;
;; Loop 1
;;  header 67, latch 66
;;  depth 1, outer 0
;;  nodes: 67 66 63 64 65
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 77 6 }
;; 6 succs { 7 22 }
;; 7 succs { 78 8 }
;; 8 succs { 79 9 }
;; 9 succs { 10 11 }
;; 10 succs { 76 }
;; 11 succs { 12 13 }
;; 12 succs { 76 }
;; 13 succs { 14 15 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 17 }
;; 17 succs { 18 19 }
;; 18 succs { 19 }
;; 19 succs { 20 21 }
;; 20 succs { 21 }
;; 21 succs { 76 }
;; 22 succs { 23 30 }
;; 23 succs { 25 24 }
;; 24 succs { 25 26 }
;; 25 succs { 26 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 80 }
;; 29 succs { 80 }
;; 30 succs { 32 31 }
;; 31 succs { 32 33 }
;; 32 succs { 76 }
;; 33 succs { 34 35 }
;; 34 succs { 76 }
;; 35 succs { 36 37 }
;; 36 succs { 76 }
;; 37 succs { 38 39 }
;; 38 succs { 76 }
;; 39 succs { 40 42 }
;; 40 succs { 41 42 }
;; 41 succs { 81 42 }
;; 42 succs { 43 44 }
;; 43 succs { 76 }
;; 44 succs { 45 46 }
;; 45 succs { 76 }
;; 46 succs { 47 48 }
;; 47 succs { 76 }
;; 48 succs { 49 50 }
;; 49 succs { 76 }
;; 50 succs { 51 52 }
;; 51 succs { 53 }
;; 52 succs { 53 }
;; 53 succs { 54 60 }
;; 54 succs { 55 57 }
;; 55 succs { 56 57 }
;; 56 succs { 60 }
;; 57 succs { 58 60 }
;; 58 succs { 59 60 }
;; 59 succs { 60 }
;; 60 succs { 61 69 }
;; 61 succs { 62 69 }
;; 62 succs { 67 }
;; 63 succs { 64 66 }
;; 64 succs { 65 66 }
;; 65 succs { 66 }
;; 66 succs { 67 }
;; 67 succs { 63 68 }
;; 68 succs { 69 }
;; 69 succs { 70 73 }
;; 70 succs { 72 71 }
;; 71 succs { 72 73 }
;; 72 succs { 73 }
;; 73 succs { 82 74 }
;; 74 succs { 75 83 }
;; 75 succs { 76 }
;; 77 succs { 76 }
;; 78 succs { 76 }
;; 79 succs { 76 }
;; 80 succs { 76 }
;; 81 succs { 76 }
;; 82 succs { 76 }
;; 83 succs { 76 }
;; 76 succs { 84 }
;; 84 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 178.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 316.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 457.
verify found no changes in insn with uid = 565.
verify found no changes in insn with uid = 576.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r345: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r345,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r344,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r343,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r342,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r341,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r340,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r339,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r338,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r337,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r336,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r335,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r334,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r333,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r332,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r331,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r330,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r329,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r328,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r327,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r326,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r325,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r324,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r323,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r322,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r321,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r320,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r319,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r318,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r317,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r316,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r315,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r314,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r313,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r312,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r311,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r310,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r309,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r308,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r307,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r306,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r305,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r304,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r303,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r302,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r301,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r300,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r299,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r298,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r297,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r296,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r295,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r294,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r293,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r292,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r291,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r290,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r289,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r288,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r287,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r286,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r285,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r282,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r279,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r278,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r277,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r276,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r273,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r270,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r269,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r268,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r267,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r266,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r265,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r264,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r263,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r262,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r261,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r260,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r259,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r258,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r257,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r256,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r255,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r254,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r253,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r252,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r251,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r250,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r249,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r248,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a135 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a136 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a139 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a138 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a141 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a142 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a145 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a146 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a149 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a150 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a152 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a153 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a155 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a157 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a158 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a156 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a160 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a161 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a163 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a164 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a167 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a168 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a170 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a171 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a173 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a175 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a174 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a178 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a180 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a182 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a183 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a185 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a184 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a186 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a188 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a187 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a189 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a191 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a190 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a192 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a194 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a193 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a195 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a197 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a196 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a198 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a200 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a199 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a201 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a202 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a203 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a204 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a205 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a206 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a208 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a210 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a212 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a213 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a216 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a217 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a218 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a221 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a222 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a137 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a140 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a143 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a144 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a147 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a148 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a151 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a154 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a162 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a159 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a165 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a166 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a169 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a172 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a176 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a181 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a177 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a179 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a207 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a209 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a211 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a214 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a215 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a219 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a220 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r168,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a1(r345,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r167,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r344,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a4(r343,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a5(r166,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r342,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r341,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a8(r165,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r164,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r340,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a11(r339,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r163,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a13(r338,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r337,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r336,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r335,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a20(r334,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r333,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a23(r332,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r330,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r331,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a27(r329,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r328,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a30(r327,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r326,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r325,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a34(r324,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a35(r323,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a36(r322,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a37(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a38(r321,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a39(r320,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a40(r319,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a41(r318,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a42(r316,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a43(r317,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a44(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a45(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a46(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a47(r315,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a48(r314,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a49(r312,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a50(r310,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a51(r313,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a52(r311,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a53(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a54(r309,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a55(r308,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a56(r306,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a57(r304,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a58(r307,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a59(r305,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a60(r150,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a61(r149,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a62(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a63(r303,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a64(r302,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a65(r300,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a66(r298,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a67(r301,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a68(r299,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a69(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a70(r297,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a71(r296,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a72(r294,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a73(r292,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a74(r295,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a75(r293,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a76(r291,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a77(r290,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a78(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a79(r289,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a80(r288,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a81(r287,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a82(r286,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a83(r285,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a84(r282,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a85(r279,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a86(r278,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a87(r277,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a88(r276,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a89(r273,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a90(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a91(r270,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a92(r269,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a93(r169,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:21000
  a94(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a95(r268,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a96(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a97(r267,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a98(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a99(r266,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a100(r265,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a101(r264,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a102(r263,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a103(r262,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a104(r261,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a105(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a106(r260,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a107(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a108(r259,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a109(r258,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a110(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a111(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a112(r257,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a113(r256,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a114(r254,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a115(r255,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a116(r253,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a117(r251,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a118(r252,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a119(r250,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a120(r248,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a121(r249,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a122(r247,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a123(r246,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a124(r244,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a125(r245,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a126(r243,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a127(r241,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a128(r242,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a129(r240,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a130(r238,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a131(r239,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a132(r237,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a133(r236,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a134(r235,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a135(r234,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a136(r233,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a137(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a138(r229,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a139(r230,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a140(r136,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a141(r228,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a142(r227,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a143(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a144(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a145(r226,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a146(r225,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a147(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a148(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a149(r224,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a150(r223,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a151(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a152(r222,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a153(r221,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a154(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a155(r220,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a156(r217,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a157(r219,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a158(r218,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a159(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a160(r216,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a161(r215,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a162(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a163(r214,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a164(r213,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a165(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a166(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a167(r212,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a168(r211,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a169(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a170(r210,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a171(r209,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a172(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a173(r208,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a174(r206,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a175(r207,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a176(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a177(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a178(r205,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a179(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a180(r204,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a181(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a182(r203,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a183(r202,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a184(r200,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a185(r201,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a186(r199,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a187(r197,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a188(r198,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a189(r196,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a190(r194,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a191(r195,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a192(r193,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a193(r191,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a194(r192,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a195(r190,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a196(r188,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a197(r189,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a198(r187,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a199(r185,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a200(r186,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a201(r184,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a202(r183,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a203(r182,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a204(r181,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a205(r180,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a206(r179,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a207(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a208(r178,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a209(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a210(r177,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a211(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a212(r176,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a213(r175,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a214(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a215(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a216(r174,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a217(r173,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a218(r172,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a219(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a220(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a221(r171,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a222(r170,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 656(l0): point = 0
   Insn 587(l0): point = 3
   Insn 586(l0): point = 5
   Insn 585(l0): point = 7
   Insn 584(l0): point = 9
   Insn 583(l0): point = 11
   Insn 582(l0): point = 13
   Insn 581(l0): point = 15
   Insn 580(l0): point = 17
   Insn 579(l0): point = 19
   Insn 654(l0): point = 22
   Insn 650(l0): point = 25
   Insn 649(l0): point = 27
   Insn 645(l0): point = 30
   Insn 644(l0): point = 32
   Insn 640(l0): point = 35
   Insn 639(l0): point = 37
   Insn 635(l0): point = 40
   Insn 634(l0): point = 42
   Insn 630(l0): point = 45
   Insn 629(l0): point = 47
   Insn 625(l0): point = 50
   Insn 624(l0): point = 52
   Insn 620(l0): point = 55
   Insn 576(l0): point = 57
   Insn 575(l0): point = 59
   Insn 574(l0): point = 61
   Insn 573(l0): point = 63
   Insn 572(l0): point = 65
   Insn 571(l0): point = 67
   Insn 570(l0): point = 69
   Insn 568(l0): point = 72
   Insn 567(l0): point = 74
   Insn 566(l0): point = 76
   Insn 565(l0): point = 78
   Insn 564(l0): point = 80
   Insn 563(l0): point = 82
   Insn 562(l0): point = 84
   Insn 561(l0): point = 86
   Insn 560(l0): point = 88
   Insn 559(l0): point = 90
   Insn 558(l0): point = 92
   Insn 557(l0): point = 94
   Insn 556(l0): point = 96
   Insn 555(l0): point = 98
   Insn 554(l0): point = 100
   Insn 553(l0): point = 103
   Insn 552(l0): point = 105
   Insn 551(l0): point = 107
   Insn 550(l0): point = 109
   Insn 549(l0): point = 111
   Insn 548(l0): point = 113
   Insn 547(l0): point = 115
   Insn 546(l0): point = 117
   Insn 545(l0): point = 119
   Insn 544(l0): point = 121
   Insn 543(l0): point = 123
   Insn 542(l0): point = 125
   Insn 541(l0): point = 127
   Insn 540(l0): point = 129
   Insn 534(l0): point = 132
   Insn 533(l0): point = 134
   Insn 532(l0): point = 136
   Insn 531(l0): point = 138
   Insn 528(l0): point = 141
   Insn 527(l0): point = 143
   Insn 526(l0): point = 145
   Insn 523(l0): point = 148
   Insn 522(l0): point = 150
   Insn 521(l0): point = 152
   Insn 519(l0): point = 155
   Insn 518(l0): point = 157
   Insn 517(l0): point = 159
   Insn 515(l0): point = 162
   Insn 514(l0): point = 164
   Insn 513(l0): point = 166
   Insn 512(l0): point = 168
   Insn 509(l0): point = 171
   Insn 508(l0): point = 173
   Insn 507(l0): point = 175
   Insn 438(l0): point = 178
   Insn 437(l0): point = 180
   Insn 436(l0): point = 182
   Insn 435(l0): point = 184
   Insn 434(l0): point = 186
   Insn 433(l0): point = 188
   Insn 432(l0): point = 190
   Insn 431(l0): point = 192
   Insn 430(l0): point = 194
   Insn 429(l0): point = 196
   Insn 428(l0): point = 198
   Insn 427(l0): point = 200
   Insn 426(l0): point = 202
   Insn 425(l0): point = 204
   Insn 424(l0): point = 206
   Insn 423(l0): point = 208
   Insn 505(l0): point = 211
   Insn 504(l0): point = 213
   Insn 503(l0): point = 215
   Insn 497(l0): point = 218
   Insn 496(l0): point = 220
   Insn 495(l0): point = 222
   Insn 460(l0): point = 225
   Insn 459(l0): point = 227
   Insn 458(l0): point = 229
   Insn 457(l0): point = 231
   Insn 456(l0): point = 233
   Insn 455(l0): point = 235
   Insn 454(l0): point = 237
   Insn 453(l0): point = 239
   Insn 452(l0): point = 241
   Insn 451(l0): point = 243
   Insn 450(l0): point = 245
   Insn 449(l0): point = 247
   Insn 448(l0): point = 249
   Insn 447(l0): point = 251
   Insn 446(l0): point = 253
   Insn 445(l0): point = 255
   Insn 444(l0): point = 257
   Insn 443(l0): point = 259
   Insn 442(l0): point = 261
   Insn 441(l0): point = 263
   Insn 440(l0): point = 265
   Insn 492(l0): point = 268
   Insn 491(l0): point = 270
   Insn 490(l0): point = 272
   Insn 489(l0): point = 274
   Insn 488(l0): point = 276
   Insn 487(l0): point = 278
   Insn 486(l0): point = 280
   Insn 485(l0): point = 282
   Insn 484(l0): point = 284
   Insn 483(l0): point = 286
   Insn 482(l0): point = 288
   Insn 481(l0): point = 290
   Insn 480(l0): point = 292
   Insn 479(l0): point = 294
   Insn 478(l0): point = 296
   Insn 477(l0): point = 298
   Insn 476(l0): point = 300
   Insn 475(l0): point = 302
   Insn 474(l0): point = 304
   Insn 473(l0): point = 306
   Insn 472(l0): point = 308
   Insn 471(l0): point = 310
   Insn 470(l0): point = 312
   Insn 469(l0): point = 314
   Insn 468(l0): point = 316
   Insn 467(l0): point = 318
   Insn 466(l0): point = 320
   Insn 465(l0): point = 322
   Insn 464(l0): point = 324
   Insn 463(l0): point = 326
   Insn 462(l0): point = 328
   Insn 618(l0): point = 331
   Insn 419(l0): point = 333
   Insn 418(l0): point = 335
   Insn 416(l0): point = 338
   Insn 415(l0): point = 340
   Insn 414(l0): point = 342
   Insn 412(l0): point = 345
   Insn 411(l0): point = 347
   Insn 410(l0): point = 349
   Insn 409(l0): point = 351
   Insn 406(l0): point = 354
   Insn 405(l0): point = 356
   Insn 404(l0): point = 358
   Insn 403(l0): point = 360
   Insn 401(l0): point = 363
   Insn 400(l0): point = 365
   Insn 399(l0): point = 367
   Insn 393(l0): point = 370
   Insn 392(l0): point = 372
   Insn 391(l0): point = 374
   Insn 616(l0): point = 377
   Insn 382(l0): point = 379
   Insn 381(l0): point = 381
   Insn 380(l0): point = 383
   Insn 379(l0): point = 385
   Insn 377(l0): point = 388
   Insn 376(l0): point = 390
   Insn 375(l0): point = 392
   Insn 369(l0): point = 395
   Insn 368(l0): point = 397
   Insn 367(l0): point = 399
   Insn 361(l0): point = 402
   Insn 360(l0): point = 404
   Insn 359(l0): point = 406
   Insn 358(l0): point = 408
   Insn 357(l0): point = 410
   Insn 356(l0): point = 412
   Insn 353(l0): point = 415
   Insn 352(l0): point = 417
   Insn 351(l0): point = 419
   Insn 614(l0): point = 422
   Insn 346(l0): point = 424
   Insn 345(l0): point = 426
   Insn 344(l0): point = 428
   Insn 342(l0): point = 431
   Insn 341(l0): point = 433
   Insn 340(l0): point = 435
   Insn 339(l0): point = 437
   Insn 612(l0): point = 440
   Insn 334(l0): point = 442
   Insn 332(l0): point = 445
   Insn 331(l0): point = 447
   Insn 330(l0): point = 449
   Insn 610(l0): point = 452
   Insn 325(l0): point = 454
   Insn 323(l0): point = 457
   Insn 322(l0): point = 459
   Insn 321(l0): point = 461
   Insn 608(l0): point = 464
   Insn 316(l0): point = 466
   Insn 314(l0): point = 469
   Insn 313(l0): point = 471
   Insn 312(l0): point = 473
   Insn 606(l0): point = 476
   Insn 307(l0): point = 478
   Insn 305(l0): point = 481
   Insn 304(l0): point = 483
   Insn 303(l0): point = 485
   Insn 297(l0): point = 488
   Insn 296(l0): point = 490
   Insn 295(l0): point = 492
   Insn 293(l0): point = 495
   Insn 292(l0): point = 497
   Insn 291(l0): point = 499
   Insn 290(l0): point = 501
   Insn 288(l0): point = 504
   Insn 287(l0): point = 506
   Insn 286(l0): point = 508
   Insn 285(l0): point = 510
   Insn 604(l0): point = 513
   Insn 280(l0): point = 515
   Insn 279(l0): point = 517
   Insn 278(l0): point = 519
   Insn 277(l0): point = 521
   Insn 276(l0): point = 523
   Insn 274(l0): point = 526
   Insn 273(l0): point = 528
   Insn 272(l0): point = 530
   Insn 602(l0): point = 533
   Insn 267(l0): point = 535
   Insn 266(l0): point = 537
   Insn 265(l0): point = 539
   Insn 263(l0): point = 542
   Insn 262(l0): point = 544
   Insn 261(l0): point = 546
   Insn 600(l0): point = 549
   Insn 256(l0): point = 551
   Insn 255(l0): point = 553
   Insn 254(l0): point = 555
   Insn 252(l0): point = 558
   Insn 251(l0): point = 560
   Insn 250(l0): point = 562
   Insn 598(l0): point = 565
   Insn 245(l0): point = 567
   Insn 244(l0): point = 569
   Insn 243(l0): point = 571
   Insn 240(l0): point = 574
   Insn 239(l0): point = 576
   Insn 238(l0): point = 578
   Insn 236(l0): point = 581
   Insn 235(l0): point = 583
   Insn 234(l0): point = 585
   Insn 596(l0): point = 588
   Insn 227(l0): point = 590
   Insn 226(l0): point = 592
   Insn 225(l0): point = 594
   Insn 223(l0): point = 597
   Insn 222(l0): point = 599
   Insn 221(l0): point = 601
   Insn 218(l0): point = 604
   Insn 217(l0): point = 606
   Insn 216(l0): point = 608
   Insn 214(l0): point = 611
   Insn 213(l0): point = 613
   Insn 212(l0): point = 615
   Insn 209(l0): point = 618
   Insn 208(l0): point = 620
   Insn 207(l0): point = 622
   Insn 204(l0): point = 625
   Insn 203(l0): point = 627
   Insn 202(l0): point = 629
   Insn 200(l0): point = 632
   Insn 199(l0): point = 634
   Insn 198(l0): point = 636
   Insn 197(l0): point = 638
   Insn 196(l0): point = 640
   Insn 195(l0): point = 642
   Insn 194(l0): point = 644
   Insn 192(l0): point = 647
   Insn 191(l0): point = 649
   Insn 186(l0): point = 651
   Insn 594(l0): point = 654
   Insn 181(l0): point = 656
   Insn 180(l0): point = 658
   Insn 179(l0): point = 660
   Insn 178(l0): point = 662
   Insn 177(l0): point = 664
   Insn 176(l0): point = 666
   Insn 175(l0): point = 668
   Insn 174(l0): point = 670
   Insn 173(l0): point = 672
   Insn 172(l0): point = 674
   Insn 171(l0): point = 676
   Insn 170(l0): point = 678
   Insn 169(l0): point = 680
   Insn 168(l0): point = 682
   Insn 167(l0): point = 684
   Insn 166(l0): point = 686
   Insn 165(l0): point = 688
   Insn 164(l0): point = 690
   Insn 163(l0): point = 692
   Insn 162(l0): point = 694
   Insn 161(l0): point = 697
   Insn 160(l0): point = 699
   Insn 159(l0): point = 701
   Insn 158(l0): point = 703
   Insn 157(l0): point = 705
   Insn 156(l0): point = 707
   Insn 155(l0): point = 709
   Insn 154(l0): point = 711
   Insn 153(l0): point = 713
   Insn 152(l0): point = 715
   Insn 151(l0): point = 717
   Insn 150(l0): point = 719
   Insn 149(l0): point = 721
   Insn 148(l0): point = 723
   Insn 147(l0): point = 725
   Insn 146(l0): point = 727
   Insn 145(l0): point = 729
   Insn 144(l0): point = 731
   Insn 143(l0): point = 733
   Insn 142(l0): point = 735
   Insn 141(l0): point = 737
   Insn 140(l0): point = 739
   Insn 139(l0): point = 741
   Insn 138(l0): point = 744
   Insn 137(l0): point = 746
   Insn 136(l0): point = 748
   Insn 135(l0): point = 750
   Insn 134(l0): point = 752
   Insn 133(l0): point = 754
   Insn 132(l0): point = 756
   Insn 131(l0): point = 758
   Insn 130(l0): point = 760
   Insn 129(l0): point = 762
   Insn 128(l0): point = 764
   Insn 127(l0): point = 766
   Insn 126(l0): point = 768
   Insn 125(l0): point = 770
   Insn 124(l0): point = 772
   Insn 123(l0): point = 774
   Insn 122(l0): point = 776
   Insn 119(l0): point = 779
   Insn 118(l0): point = 781
   Insn 117(l0): point = 783
   Insn 115(l0): point = 786
   Insn 114(l0): point = 788
   Insn 113(l0): point = 790
   Insn 110(l0): point = 793
   Insn 109(l0): point = 795
   Insn 108(l0): point = 797
   Insn 106(l0): point = 800
   Insn 105(l0): point = 802
   Insn 104(l0): point = 804
   Insn 101(l0): point = 807
   Insn 100(l0): point = 809
   Insn 99(l0): point = 811
   Insn 97(l0): point = 814
   Insn 96(l0): point = 816
   Insn 95(l0): point = 818
   Insn 92(l0): point = 821
   Insn 91(l0): point = 823
   Insn 90(l0): point = 825
   Insn 88(l0): point = 828
   Insn 87(l0): point = 830
   Insn 86(l0): point = 832
   Insn 592(l0): point = 835
   Insn 81(l0): point = 837
   Insn 80(l0): point = 839
   Insn 79(l0): point = 841
   Insn 77(l0): point = 844
   Insn 76(l0): point = 846
   Insn 75(l0): point = 848
   Insn 590(l0): point = 851
   Insn 70(l0): point = 853
   Insn 69(l0): point = 855
   Insn 68(l0): point = 857
   Insn 66(l0): point = 860
   Insn 65(l0): point = 862
   Insn 64(l0): point = 864
   Insn 58(l0): point = 867
   Insn 57(l0): point = 869
   Insn 56(l0): point = 871
   Insn 55(l0): point = 873
   Insn 54(l0): point = 875
   Insn 53(l0): point = 877
   Insn 52(l0): point = 879
   Insn 46(l0): point = 882
   Insn 45(l0): point = 884
   Insn 44(l0): point = 886
   Insn 42(l0): point = 889
   Insn 41(l0): point = 891
   Insn 40(l0): point = 893
   Insn 39(l0): point = 895
   Insn 33(l0): point = 898
   Insn 32(l0): point = 900
   Insn 29(l0): point = 902
   Insn 28(l0): point = 904
   Insn 26(l0): point = 907
   Insn 25(l0): point = 909
   Insn 24(l0): point = 911
   Insn 23(l0): point = 913
   Insn 20(l0): point = 916
   Insn 19(l0): point = 918
   Insn 18(l0): point = 920
   Insn 17(l0): point = 922
   Insn 16(l0): point = 924
   Insn 14(l0): point = 927
   Insn 13(l0): point = 929
   Insn 12(l0): point = 931
   Insn 11(l0): point = 933
   Insn 10(l0): point = 935
   Insn 9(l0): point = 937
   Insn 8(l0): point = 939
   Insn 7(l0): point = 941
   Insn 6(l0): point = 943
   Insn 5(l0): point = 945
 a0(r168): [4..7]
 a1(r345): [4..5]
 a2(r167): [10..15]
 a3(r344): [10..11]
 a4(r343): [12..13]
 a5(r166): [16..17]
 a6(r342): [18..19]
 a7(r341): [62..63]
 a8(r165): [62..65]
 a9(r164): [66..67]
 a10(r340): [68..69]
 a11(r339): [75..76]
 a12(r163): [81..82]
 a13(r338): [83..84]
 a14(r337): [87..88]
 a15(r162): [87..90]
 a16(r161): [91..92]
 a17(r336): [93..94]
 a18(r335): [97..98]
 a19(r160): [97..105]
 a20(r334): [101..103]
 a21(r333): [104..107]
 a22(r159): [106..109]
 a23(r332): [110..111]
 a24(r330): [114..117]
 a25(r331): [114..115]
 a26(r157): [118..127]
 a27(r329): [118..119]
 a28(r328): [122..123]
 a29(r158): [122..125]
 a30(r327): [128..129]
 a31(r156): [135..136]
 a32(r326): [137..138]
 a33(r325): [142..143]
 a34(r324): [144..145]
 a35(r323): [151..152]
 a36(r322): [158..159]
 a37(r155): [165..166]
 a38(r321): [167..168]
 a39(r320): [172..173]
 a40(r319): [174..175]
 a41(r318): [214..215]
 a42(r316): [219..220]
 a43(r317): [221..222]
 a44(r153): [269..272]
 a45(r154): [269..270]
 a46(r152): [271..300]
 a47(r315): [273..274]
 a48(r314): [275..276]
 a49(r312): [281..294] [277..278]
 a50(r310): [277..298]
 a51(r313): [279..280]
 a52(r311): [283..296]
 a53(r151): [301..302]
 a54(r309): [303..304]
 a55(r308): [305..306]
 a56(r306): [311..324] [307..308]
 a57(r304): [307..328]
 a58(r307): [309..310]
 a59(r305): [313..326]
 a60(r150): [228..229]
 a61(r149): [234..237]
 a62(r148): [238..239]
 a63(r303): [240..241]
 a64(r302): [242..243]
 a65(r300): [248..261] [244..245]
 a66(r298): [244..265]
 a67(r301): [246..247]
 a68(r299): [250..263]
 a69(r147): [181..182]
 a70(r297): [183..184]
 a71(r296): [185..186]
 a72(r294): [191..204] [187..188]
 a73(r292): [187..208]
 a74(r295): [189..190]
 a75(r293): [193..206]
 a76(r291): [334..335]
 a77(r290): [341..342]
 a78(r146): [348..349]
 a79(r289): [350..351]
 a80(r288): [355..356]
 a81(r287): [357..358]
 a82(r286): [359..360]
 a83(r285): [366..367]
 a84(r282): [373..374]
 a85(r279): [380..381]
 a86(r278): [382..383]
 a87(r277): [384..385]
 a88(r276): [391..392]
 a89(r273): [398..399]
 a90(r145): [405..406]
 a91(r270): [407..408]
 a92(r269): [411..412]
 a93(r169): [422..424] [413..415]
 a94(r144): [416..419]
 a95(r268): [416..417]
 a96(r143): [425..428]
 a97(r267): [425..426]
 a98(r142): [434..435]
 a99(r266): [436..437]
 a100(r265): [448..449]
 a101(r264): [460..461]
 a102(r263): [472..473]
 a103(r262): [484..485]
 a104(r261): [491..492]
 a105(r141): [498..499]
 a106(r260): [500..501]
 a107(r140): [507..508]
 a108(r259): [509..510]
 a109(r258): [516..517]
 a110(r139): [516..519]
 a111(r138): [520..521]
 a112(r257): [522..523]
 a113(r256): [529..530]
 a114(r254): [536..539]
 a115(r255): [536..537]
 a116(r253): [545..546]
 a117(r251): [552..555]
 a118(r252): [552..553]
 a119(r250): [561..562]
 a120(r248): [568..571]
 a121(r249): [568..569]
 a122(r247): [577..578]
 a123(r246): [584..585]
 a124(r244): [591..594]
 a125(r245): [591..592]
 a126(r243): [600..601]
 a127(r241): [605..608]
 a128(r242): [605..606]
 a129(r240): [614..615]
 a130(r238): [619..622]
 a131(r239): [619..620]
 a132(r237): [628..629]
 a133(r236): [635..636]
 a134(r235): [639..640]
 a135(r234): [641..642]
 a136(r233): [643..644]
 a137(r137): [650..651]
 a138(r229): [657..660]
 a139(r230): [657..658]
 a140(r136): [665..666]
 a141(r228): [667..668]
 a142(r227): [671..672]
 a143(r135): [671..674]
 a144(r134): [675..676]
 a145(r226): [677..678]
 a146(r225): [681..682]
 a147(r133): [681..684]
 a148(r132): [685..686]
 a149(r224): [687..688]
 a150(r223): [691..692]
 a151(r131): [691..699]
 a152(r222): [695..697]
 a153(r221): [698..701]
 a154(r130): [700..703]
 a155(r220): [704..705]
 a156(r217): [708..713]
 a157(r219): [708..709]
 a158(r218): [710..711]
 a159(r128): [714..723]
 a160(r216): [714..715]
 a161(r215): [718..719]
 a162(r129): [718..721]
 a163(r214): [724..725]
 a164(r213): [728..729]
 a165(r127): [728..731]
 a166(r126): [732..733]
 a167(r212): [734..735]
 a168(r211): [738..739]
 a169(r125): [738..746]
 a170(r210): [742..744]
 a171(r209): [745..748]
 a172(r124): [747..750]
 a173(r208): [751..752]
 a174(r206): [755..758]
 a175(r207): [755..756]
 a176(r123): [757..762]
 a177(r121): [759..770]
 a178(r205): [759..760]
 a179(r120): [763..774]
 a180(r204): [765..766]
 a181(r122): [765..768]
 a182(r203): [771..772]
 a183(r202): [775..776]
 a184(r200): [780..783]
 a185(r201): [780..781]
 a186(r199): [789..790]
 a187(r197): [794..797]
 a188(r198): [794..795]
 a189(r196): [803..804]
 a190(r194): [808..811]
 a191(r195): [808..809]
 a192(r193): [817..818]
 a193(r191): [822..825]
 a194(r192): [822..823]
 a195(r190): [831..832]
 a196(r188): [838..841]
 a197(r189): [838..839]
 a198(r187): [847..848]
 a199(r185): [854..857]
 a200(r186): [854..855]
 a201(r184): [863..864]
 a202(r183): [870..871]
 a203(r182): [874..875]
 a204(r181): [876..877]
 a205(r180): [878..879]
 a206(r179): [885..886]
 a207(r119): [892..893]
 a208(r178): [894..895]
 a209(r118): [901..902]
 a210(r177): [903..904]
 a211(r117): [910..911]
 a212(r176): [912..913]
 a213(r175): [917..918]
 a214(r116): [917..920]
 a215(r115): [921..922]
 a216(r174): [923..924]
 a217(r173): [930..931]
 a218(r172): [934..935]
 a219(r114): [936..937]
 a220(r113): [938..939]
 a221(r171): [940..941]
 a222(r170): [944..945]
Compressing live ranges: from 948 to 364 - 38%
Ranges after the compression:
 a0(r168): [0..1]
 a1(r345): [0..1]
 a2(r167): [2..5]
 a3(r344): [2..3]
 a4(r343): [4..5]
 a5(r166): [6..7]
 a6(r342): [8..9]
 a7(r341): [10..11]
 a8(r165): [10..11]
 a9(r164): [12..13]
 a10(r340): [14..15]
 a11(r339): [16..17]
 a12(r163): [18..19]
 a13(r338): [20..21]
 a14(r337): [22..23]
 a15(r162): [22..23]
 a16(r161): [24..25]
 a17(r336): [26..27]
 a18(r335): [28..29]
 a19(r160): [28..33]
 a20(r334): [30..31]
 a21(r333): [32..35]
 a22(r159): [34..35]
 a23(r332): [36..37]
 a24(r330): [38..39]
 a25(r331): [38..39]
 a26(r157): [40..43]
 a27(r329): [40..41]
 a28(r328): [42..43]
 a29(r158): [42..43]
 a30(r327): [44..45]
 a31(r156): [46..47]
 a32(r326): [48..49]
 a33(r325): [50..51]
 a34(r324): [52..53]
 a35(r323): [54..55]
 a36(r322): [56..57]
 a37(r155): [58..59]
 a38(r321): [60..61]
 a39(r320): [62..63]
 a40(r319): [64..65]
 a41(r318): [78..79]
 a42(r316): [80..81]
 a43(r317): [82..83]
 a44(r153): [100..103]
 a45(r154): [100..101]
 a46(r152): [102..113]
 a47(r315): [104..105]
 a48(r314): [106..107]
 a49(r312): [112..113] [108..109]
 a50(r310): [108..113]
 a51(r313): [110..111]
 a52(r311): [112..113]
 a53(r151): [114..115]
 a54(r309): [116..117]
 a55(r308): [118..119]
 a56(r306): [124..125] [120..121]
 a57(r304): [120..125]
 a58(r307): [122..123]
 a59(r305): [124..125]
 a60(r150): [84..85]
 a61(r149): [86..87]
 a62(r148): [88..89]
 a63(r303): [90..91]
 a64(r302): [92..93]
 a65(r300): [98..99] [94..95]
 a66(r298): [94..99]
 a67(r301): [96..97]
 a68(r299): [98..99]
 a69(r147): [66..67]
 a70(r297): [68..69]
 a71(r296): [70..71]
 a72(r294): [76..77] [72..73]
 a73(r292): [72..77]
 a74(r295): [74..75]
 a75(r293): [76..77]
 a76(r291): [126..127]
 a77(r290): [128..129]
 a78(r146): [130..131]
 a79(r289): [132..133]
 a80(r288): [134..135]
 a81(r287): [136..137]
 a82(r286): [138..139]
 a83(r285): [140..141]
 a84(r282): [142..143]
 a85(r279): [144..145]
 a86(r278): [146..147]
 a87(r277): [148..149]
 a88(r276): [150..151]
 a89(r273): [152..153]
 a90(r145): [154..155]
 a91(r270): [156..157]
 a92(r269): [158..159]
 a93(r169): [164..165] [160..161]
 a94(r144): [162..163]
 a95(r268): [162..163]
 a96(r143): [166..167]
 a97(r267): [166..167]
 a98(r142): [168..169]
 a99(r266): [170..171]
 a100(r265): [172..173]
 a101(r264): [174..175]
 a102(r263): [176..177]
 a103(r262): [178..179]
 a104(r261): [180..181]
 a105(r141): [182..183]
 a106(r260): [184..185]
 a107(r140): [186..187]
 a108(r259): [188..189]
 a109(r258): [190..191]
 a110(r139): [190..191]
 a111(r138): [192..193]
 a112(r257): [194..195]
 a113(r256): [196..197]
 a114(r254): [198..199]
 a115(r255): [198..199]
 a116(r253): [200..201]
 a117(r251): [202..203]
 a118(r252): [202..203]
 a119(r250): [204..205]
 a120(r248): [206..207]
 a121(r249): [206..207]
 a122(r247): [208..209]
 a123(r246): [210..211]
 a124(r244): [212..213]
 a125(r245): [212..213]
 a126(r243): [214..215]
 a127(r241): [216..217]
 a128(r242): [216..217]
 a129(r240): [218..219]
 a130(r238): [220..221]
 a131(r239): [220..221]
 a132(r237): [222..223]
 a133(r236): [224..225]
 a134(r235): [226..227]
 a135(r234): [228..229]
 a136(r233): [230..231]
 a137(r137): [232..233]
 a138(r229): [234..235]
 a139(r230): [234..235]
 a140(r136): [236..237]
 a141(r228): [238..239]
 a142(r227): [240..241]
 a143(r135): [240..241]
 a144(r134): [242..243]
 a145(r226): [244..245]
 a146(r225): [246..247]
 a147(r133): [246..247]
 a148(r132): [248..249]
 a149(r224): [250..251]
 a150(r223): [252..253]
 a151(r131): [252..257]
 a152(r222): [254..255]
 a153(r221): [256..259]
 a154(r130): [258..259]
 a155(r220): [260..261]
 a156(r217): [262..265]
 a157(r219): [262..263]
 a158(r218): [264..265]
 a159(r128): [266..269]
 a160(r216): [266..267]
 a161(r215): [268..269]
 a162(r129): [268..269]
 a163(r214): [270..271]
 a164(r213): [272..273]
 a165(r127): [272..273]
 a166(r126): [274..275]
 a167(r212): [276..277]
 a168(r211): [278..279]
 a169(r125): [278..283]
 a170(r210): [280..281]
 a171(r209): [282..285]
 a172(r124): [284..285]
 a173(r208): [286..287]
 a174(r206): [288..291]
 a175(r207): [288..289]
 a176(r123): [290..293]
 a177(r121): [292..295]
 a178(r205): [292..293]
 a179(r120): [294..297]
 a180(r204): [294..295]
 a181(r122): [294..295]
 a182(r203): [296..297]
 a183(r202): [298..299]
 a184(r200): [300..301]
 a185(r201): [300..301]
 a186(r199): [302..303]
 a187(r197): [304..305]
 a188(r198): [304..305]
 a189(r196): [306..307]
 a190(r194): [308..309]
 a191(r195): [308..309]
 a192(r193): [310..311]
 a193(r191): [312..313]
 a194(r192): [312..313]
 a195(r190): [314..315]
 a196(r188): [316..317]
 a197(r189): [316..317]
 a198(r187): [318..319]
 a199(r185): [320..321]
 a200(r186): [320..321]
 a201(r184): [322..323]
 a202(r183): [324..325]
 a203(r182): [326..327]
 a204(r181): [328..329]
 a205(r180): [330..331]
 a206(r179): [332..333]
 a207(r119): [334..335]
 a208(r178): [336..337]
 a209(r118): [338..339]
 a210(r177): [340..341]
 a211(r117): [342..343]
 a212(r176): [344..345]
 a213(r175): [346..347]
 a214(r116): [346..347]
 a215(r115): [348..349]
 a216(r174): [350..351]
 a217(r173): [352..353]
 a218(r172): [354..355]
 a219(r114): [356..357]
 a220(r113): [358..359]
 a221(r171): [360..361]
 a222(r170): [362..363]
  regions=1, blocks=85, points=364
    allocnos=223 (big 0), copies=0, conflicts=0, ranges=228
Disposition:
  220:r113 l0     3  219:r114 l0     3  215:r115 l0     3  214:r116 l0     3
  211:r117 l0     3  209:r118 l0     3  207:r119 l0     3  179:r120 l0     2
  177:r121 l0     3  181:r122 l0     0  176:r123 l0     1  172:r124 l0     3
  169:r125 l0     3  166:r126 l0     3  165:r127 l0     2  159:r128 l0     3
  162:r129 l0     1  154:r130 l0     3  151:r131 l0     3  148:r132 l0     3
  147:r133 l0     2  144:r134 l0     3  143:r135 l0     2  140:r136 l0     3
  137:r137 l0     3  111:r138 l0     3  110:r139 l0     3  107:r140 l0     3
  105:r141 l0     3   98:r142 l0     3   96:r143 l0     3   94:r144 l0     3
   90:r145 l0     3   78:r146 l0     3   69:r147 l0     3   62:r148 l0     3
   61:r149 l0     3   60:r150 l0     3   53:r151 l0     3   46:r152 l0     1
   44:r153 l0     3   45:r154 l0     2   37:r155 l0     3   31:r156 l0     3
   26:r157 l0     3   29:r158 l0     1   22:r159 l0     3   19:r160 l0     3
   16:r161 l0     3   15:r162 l0     2   12:r163 l0     3    9:r164 l0     3
    8:r165 l0     3    5:r166 l0     3    2:r167 l0     3    0:r168 l0     3
   93:r169 l0     3  222:r170 l0     3  221:r171 l0     3  218:r172 l0     3
  217:r173 l0     3  216:r174 l0     3  213:r175 l0     2  212:r176 l0     3
  210:r177 l0     3  208:r178 l0     3  206:r179 l0     3  205:r180 l0     3
  204:r181 l0     3  203:r182 l0     3  202:r183 l0     3  201:r184 l0     3
  199:r185 l0     3  200:r186 l0     2  198:r187 l0     3  196:r188 l0     3
  197:r189 l0     2  195:r190 l0     3  193:r191 l0     3  194:r192 l0     2
  192:r193 l0     3  190:r194 l0     3  191:r195 l0     2  189:r196 l0     3
  187:r197 l0     3  188:r198 l0     2  186:r199 l0     3  184:r200 l0     3
  185:r201 l0     2  183:r202 l0     3  182:r203 l0     3  180:r204 l0     1
  178:r205 l0     2  174:r206 l0     3  175:r207 l0     2  173:r208 l0     3
  171:r209 l0     2  170:r210 l0     2  168:r211 l0     2  167:r212 l0     3
  164:r213 l0     3  163:r214 l0     3  161:r215 l0     2  160:r216 l0     2
  156:r217 l0     3  158:r218 l0     2  157:r219 l0     2  155:r220 l0     3
  153:r221 l0     2  152:r222 l0     2  150:r223 l0     2  149:r224 l0     3
  146:r225 l0     3  145:r226 l0     3  142:r227 l0     3  141:r228 l0     3
  138:r229 l0     3  139:r230 l0     2  136:r233 l0     3  135:r234 l0     3
  134:r235 l0     3  133:r236 l0     3  132:r237 l0     3  130:r238 l0     3
  131:r239 l0     2  129:r240 l0     3  127:r241 l0     3  128:r242 l0     2
  126:r243 l0     3  124:r244 l0     3  125:r245 l0     2  123:r246 l0     3
  122:r247 l0     3  120:r248 l0     3  121:r249 l0     2  119:r250 l0     3
  117:r251 l0     3  118:r252 l0     2  116:r253 l0     3  114:r254 l0     3
  115:r255 l0     2  113:r256 l0     3  112:r257 l0     3  109:r258 l0     2
  108:r259 l0     3  106:r260 l0     3  104:r261 l0     3  103:r262 l0     3
  102:r263 l0     3  101:r264 l0     3  100:r265 l0     3   99:r266 l0     3
   97:r267 l0     2   95:r268 l0     2   92:r269 l0     3   91:r270 l0     3
   89:r273 l0     3   88:r276 l0     3   87:r277 l0     3   86:r278 l0     3
   85:r279 l0     3   84:r282 l0     3   83:r285 l0     3   82:r286 l0     3
   81:r287 l0     3   80:r288 l0     3   79:r289 l0     3   77:r290 l0     3
   76:r291 l0     3   73:r292 l0     1   75:r293 l0     2   72:r294 l0     3
   74:r295 l0     3   71:r296 l0     3   70:r297 l0     3   66:r298 l0     1
   68:r299 l0     2   65:r300 l0     3   67:r301 l0     3   64:r302 l0     3
   63:r303 l0     3   57:r304 l0     1   59:r305 l0     2   56:r306 l0     3
   58:r307 l0     3   55:r308 l0     3   54:r309 l0     3   50:r310 l0     0
   52:r311 l0     2   49:r312 l0     3   51:r313 l0     3   48:r314 l0     3
   47:r315 l0     3   42:r316 l0     3   43:r317 l0     3   41:r318 l0     3
   40:r319 l0     3   39:r320 l0     3   38:r321 l0     3   36:r322 l0     3
   35:r323 l0     3   34:r324 l0     3   33:r325 l0     3   32:r326 l0     3
   30:r327 l0     3   28:r328 l0     2   27:r329 l0     2   24:r330 l0     3
   25:r331 l0     2   23:r332 l0     3   21:r333 l0     2   20:r334 l0     2
   18:r335 l0     2   17:r336 l0     3   14:r337 l0     3   13:r338 l0     3
   11:r339 l0     3   10:r340 l0     3    7:r341 l0     2    6:r342 l0     3
    4:r343 l0     2    3:r344 l0     2    1:r345 l0     2
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kbd_handler1

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={13d,5u} r1={10d,1u} r2={9d} r3={9d} r11={1d,84u} r12={16d} r13={1d,92u} r14={9d} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={56d,48u} r101={8d} r102={1d,168u} r103={1d,83u} r104={8d} r105={8d} r106={8d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,2u} r122={1d,1u} r123={1d,1u} r124={1d,3u} r125={2d,2u} r126={1d,1u} r127={1d,1u} r128={1d,2u} r129={1d,1u} r130={1d,3u} r131={2d,2u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,2u} r158={1d,1u} r159={1d,3u} r160={2d,2u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={2d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,1u} r192={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,1u} r198={1d,1u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,1u} r204={1d,1u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,1u} r210={1d,1u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} r248={1d,1u} r249={1d,1u} r250={1d,1u} r251={1d,1u} r252={1d,1u} r253={1d,1u} r254={1d,1u} r255={1d,1u} r256={1d,1u} r257={1d,1u} r258={1d,1u} r259={1d,1u} r260={1d,1u} r261={1d,1u} r262={1d,1u} r263={1d,1u} r264={1d,1u} r265={1d,1u} r266={1d,1u} r267={1d,1u} r268={1d,1u} r269={1d,1u} r270={1d,1u} r273={1d,1u} r276={1d,1u} r277={1d,1u} r278={1d,1u} r279={1d,1u} r282={1d,1u} r285={1d,1u} r286={1d,1u} r287={1d,1u} r288={1d,1u} r289={1d,1u} r290={1d,1u} r291={1d,1u} r292={1d,1u} r293={1d,4u,3e} r294={8d,8u} r295={1d,1u} r296={1d,1u} r297={1d,1u} r298={1d,1u} r299={1d,4u,3e} r300={8d,8u} r301={1d,1u} r302={1d,1u} r303={1d,1u} r304={1d,1u} r305={1d,4u,3e} r306={8d,8u} r307={1d,1u} r308={1d,1u} r309={1d,1u} r310={1d,1u} r311={1d,4u,3e} r312={8d,8u} r313={1d,1u} r314={1d,1u} r315={1d,1u} r316={1d,1u} r317={1d,1u} r318={1d,1u} r319={1d,1u} r320={1d,1u} r321={1d,1u} r322={1d,1u} r323={1d,1u} r324={1d,1u} r325={1d,1u} r326={1d,1u} r327={1d,1u} r328={1d,1u} r329={1d,1u} r330={1d,1u} r331={1d,1u} r332={1d,1u} r333={1d,1u} r334={1d,1u} r335={1d,1u} r336={1d,1u} r337={1d,1u} r338={1d,1u} r339={1d,1u} r340={1d,1u} r341={1d,1u} r342={1d,1u} r343={1d,1u} r344={1d,1u} r345={1d,1u} 
;;    total ref usage 1861{1093d,756u,12e} in 431{423 regular + 8 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 170 171 172 173
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 170)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":124:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 170)) "kbd.c":124:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 170)
        (nil)))
(insn 7 6 8 2 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":126:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 171) [2 kp_77->base+0 S4 A32])) "kbd.c":126:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 171)
        (nil)))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":126:21 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
        (nil)))
(insn 10 9 11 2 (set (reg:QI 172)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":126:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 114 [ _2 ])
        (nil)))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 172)) "kbd.c":126:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 172)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 173)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":135:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 173)
            (const_int 224 [0xe0]))) "kbd.c":135:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 173)
        (nil)))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":135:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116 174 175
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:SI 174)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 115 [ esc.4_3 ])
        (mem/c:SI (reg/f:SI 174) [3 esc+0 S4 A32])) "kbd.c":136:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 174)
        (nil)))
(insn 18 17 19 3 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 115 [ esc.4_3 ])
            (const_int 1 [0x1]))) "kbd.c":136:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 115 [ esc.4_3 ])
        (nil)))
(insn 19 18 20 3 (set (reg/f:SI 175)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (mem/c:SI (reg/f:SI 175) [3 esc+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":136:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 175)
        (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
            (nil))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 117 176
(code_label 21 20 22 4 17 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 176)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 117 [ esc.5_5 ])
        (mem/c:SI (reg/f:SI 176) [3 esc+0 S4 A32])) "kbd.c":138:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 176)
        (nil)))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ esc.5_5 ])
            (const_int 0 [0]))) "kbd.c":138:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ esc.5_5 ])
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":138:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 37)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 177
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 177)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:18 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 32 5 (set (reg:SI 118 [ esc.6_6 ])
        (mem/c:SI (reg/f:SI 177) [3 esc+0 S4 A32])) "kbd.c":138:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 177)
        (nil)))
(insn 32 29 33 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ esc.6_6 ])
            (const_int 1 [0x1]))) "kbd.c":138:11 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ esc.6_6 ])
        (nil)))
(jump_insn 33 32 37 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 623)
            (pc))) "kbd.c":138:11 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 623)
;;  succ:       77
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 178
(code_label 37 33 38 6 18 (nil) [1 uses])
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:SI 178)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":141:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 6 (set (reg:SI 119 [ esc.7_7 ])
        (mem/c:SI (reg/f:SI 178) [3 esc+0 S4 A32])) "kbd.c":141:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 178)
        (nil)))
(insn 41 40 42 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ esc.7_7 ])
            (const_int 2 [0x2]))) "kbd.c":141:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ esc.7_7 ])
        (nil)))
(jump_insn 42 41 43 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "kbd.c":141:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 184)
;;  succ:       7 (FALLTHRU)
;;              22
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 179
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 179)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":142:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 45 44 46 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 179)
            (const_int 224 [0xe0]))) "kbd.c":142:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 179)
        (nil)))
(jump_insn 46 45 51 7 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 628)
            (pc))) "kbd.c":142:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 628)
;;  succ:       78
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 180 181 182 183
(note 51 46 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 8 (set (reg:QI 180)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":147:11 263 {*arm_movqi_insn}
     (nil))
(insn 53 52 54 8 (set (reg:SI 181)
        (and:SI (subreg:SI (reg:QI 180) 0)
            (const_int 127 [0x7f]))) "kbd.c":147:11 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:QI 180)
        (nil)))
(insn 54 53 55 8 (set (reg:QI 182)
        (subreg:QI (reg:SI 181) 0)) "kbd.c":147:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 181)
        (nil)))
(insn 55 54 56 8 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 182)) "kbd.c":147:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 182)
        (nil)))
(insn 56 55 57 8 (set (reg:SI 183)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":149:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 57 56 58 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 183)
            (const_int 83 [0x53]))) "kbd.c":149:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 183)
        (nil)))
(jump_insn 58 57 63 8 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 633)
            (pc))) "kbd.c":149:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 633)
;;  succ:       79
;;              9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 184
(note 63 58 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg:SI 184)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":155:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 65 64 66 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 184)
            (const_int 56 [0x38]))) "kbd.c":155:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 184)
        (nil)))
(jump_insn 66 65 67 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "kbd.c":155:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 73)
;;  succ:       10 (FALLTHRU)
;;              11
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 185 186
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg/f:SI 185)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":156:12 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (reg:SI 186)
        (const_int 0 [0])) "kbd.c":156:12 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 590 10 (set (mem/c:SI (reg/f:SI 185) [3 alt+0 S4 A32])
        (reg:SI 186)) "kbd.c":156:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 186)
        (expr_list:REG_DEAD (reg/f:SI 185)
            (nil))))
(jump_insn 590 70 591 10 (set (pc)
        (label_ref 577)) "kbd.c":157:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 591 590 73)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       9
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 187
(code_label 73 591 74 11 23 (nil) [1 uses])
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (reg:SI 187)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":160:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 76 75 77 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 187)
            (const_int 29 [0x1d]))) "kbd.c":160:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 187)
        (nil)))
(jump_insn 77 76 78 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "kbd.c":160:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 84)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 188 189
(note 78 77 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 12 (set (reg/f:SI 188)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":161:16 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 12 (set (reg:SI 189)
        (const_int 0 [0])) "kbd.c":161:16 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 592 12 (set (mem/c:SI (reg/f:SI 188) [3 control+0 S4 A32])
        (reg:SI 189)) "kbd.c":161:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 189)
        (expr_list:REG_DEAD (reg/f:SI 188)
            (nil))))
(jump_insn 592 81 593 12 (set (pc)
        (label_ref 577)) "kbd.c":162:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 593 592 84)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 190
(code_label 84 593 85 13 24 (nil) [1 uses])
(note 85 84 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 13 (set (reg:SI 190)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":165:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 87 86 88 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 190)
            (const_int 72 [0x48]))) "kbd.c":165:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 190)
        (nil)))
(jump_insn 88 87 89 13 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) "kbd.c":165:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 93)
;;  succ:       14 (FALLTHRU)
;;              15
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 191 192
(note 89 88 90 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 14 (set (reg/f:SI 191)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":166:15 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 14 (set (reg:SI 192)
        (const_int 11 [0xb])) "kbd.c":166:15 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 14 (set (mem/c:SI (reg/f:SI 191) [3 escKey+0 S4 A32])
        (reg:SI 192)) "kbd.c":166:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 192)
        (expr_list:REG_DEAD (reg/f:SI 191)
            (nil))))
;;  succ:       15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       13
;;              14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 193
(code_label 93 92 94 15 25 (nil) [1 uses])
(note 94 93 95 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 15 (set (reg:SI 193)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":167:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 96 95 97 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 193)
            (const_int 80 [0x50]))) "kbd.c":167:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(jump_insn 97 96 98 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "kbd.c":167:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 102)
;;  succ:       16 (FALLTHRU)
;;              17
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 194 195
(note 98 97 99 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 16 (set (reg/f:SI 194)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 16 (set (reg:SI 195)
        (const_int 12 [0xc])) "kbd.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 16 (set (mem/c:SI (reg/f:SI 194) [3 escKey+0 S4 A32])
        (reg:SI 195)) "kbd.c":168:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 195)
        (expr_list:REG_DEAD (reg/f:SI 194)
            (nil))))
;;  succ:       17 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       15
;;              16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 196
(code_label 102 101 103 17 26 (nil) [1 uses])
(note 103 102 104 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 17 (set (reg:SI 196)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":169:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 105 104 106 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 196)
            (const_int 75 [0x4b]))) "kbd.c":169:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 196)
        (nil)))
(jump_insn 106 105 107 17 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) "kbd.c":169:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 111)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 197 198
(note 107 106 108 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 18 (set (reg/f:SI 197)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 18 (set (reg:SI 198)
        (const_int 13 [0xd])) "kbd.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 18 (set (mem/c:SI (reg/f:SI 197) [3 escKey+0 S4 A32])
        (reg:SI 198)) "kbd.c":170:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 198)
        (expr_list:REG_DEAD (reg/f:SI 197)
            (nil))))
;;  succ:       19 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       17
;;              18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 199
(code_label 111 110 112 19 27 (nil) [1 uses])
(note 112 111 113 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 19 (set (reg:SI 199)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":171:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 114 113 115 19 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 199)
            (const_int 77 [0x4d]))) "kbd.c":171:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 199)
        (nil)))
(jump_insn 115 114 116 19 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "kbd.c":171:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 120)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 200 201
(note 116 115 117 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 20 (set (reg/f:SI 200)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":172:15 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 20 (set (reg:SI 201)
        (const_int 14 [0xe])) "kbd.c":172:15 253 {*arm_movsi_insn}
     (nil))
(insn 119 118 120 20 (set (mem/c:SI (reg/f:SI 200) [3 escKey+0 S4 A32])
        (reg:SI 201)) "kbd.c":172:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 201)
        (expr_list:REG_DEAD (reg/f:SI 200)
            (nil))))
;;  succ:       21 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19
;;              20 (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230
(code_label 120 119 121 21 28 (nil) [1 uses])
(note 121 120 122 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 21 (set (reg/f:SI 202)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":174:26 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 21 (set (reg:SI 120 [ escKey.8_8 ])
        (mem/c:SI (reg/f:SI 202) [3 escKey+0 S4 A32])) "kbd.c":174:26 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 202)
        (nil)))
(insn 124 123 125 21 (set (reg/f:SI 203)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:16 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 21 (set (reg:SI 121 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 203)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":174:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 203)
        (nil)))
(insn 126 125 127 21 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":174:22 7 {*arm_addsi3}
     (nil))
(insn 127 126 128 21 (set (reg/f:SI 204)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:22 253 {*arm_movsi_insn}
     (nil))
(insn 128 127 129 21 (set (mem/v:SI (plus:SI (reg/f:SI 204)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":174:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 204)
        (expr_list:REG_DEAD (reg:SI 122 [ _11 ])
            (nil))))
(insn 129 128 130 21 (set (reg:SI 123 [ _12 ])
        (and:SI (reg:SI 120 [ escKey.8_8 ])
            (const_int 255 [0xff]))) "kbd.c":174:26 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ escKey.8_8 ])
        (nil)))
(insn 130 129 131 21 (set (reg/f:SI 205)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:26 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 21 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 205)
            (reg:SI 121 [ _9 ]))) "kbd.c":174:26 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 205)
        (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
            (nil))))
(insn 132 131 133 21 (set (reg:QI 207)
        (subreg/s/v:QI (reg:SI 123 [ _12 ]) 0)) "kbd.c":174:26 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _12 ])
        (nil)))
(insn 133 132 134 21 (set (mem/v:QI (plus:SI (reg/f:SI 206)
                (const_int 4 [0x4])) [0 kp_77->buf[_10]+0 S1 A8])
        (reg:QI 207)) "kbd.c":174:26 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 207)
        (expr_list:REG_DEAD (reg/f:SI 206)
            (nil))))
(insn 134 133 135 21 (set (reg/f:SI 208)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 135 134 136 21 (set (reg:SI 124 [ _13 ])
        (mem/v:SI (plus:SI (reg/f:SI 208)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 208)
        (nil)))
(insn 136 135 137 21 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 124 [ _13 ]))
                    (const_int 0 [0])))
            (set (reg:SI 209)
                (minus:SI (const_int 0 [0])
                    (reg:SI 124 [ _13 ])))
        ]) "kbd.c":175:15 46 {subsi3_compare0}
     (nil))
(insn 137 136 138 21 (set (reg:SI 125 [ _14 ])
        (and:SI (reg:SI 124 [ _13 ])
            (const_int 127 [0x7f]))) "kbd.c":175:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ _13 ])
        (nil)))
(insn 138 137 139 21 (set (reg:SI 210)
        (and:SI (reg:SI 209)
            (const_int 127 [0x7f]))) "kbd.c":175:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 209)
        (nil)))
(insn 139 138 140 21 (set (reg:SI 125 [ _14 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 210))
            (reg:SI 125 [ _14 ]))) "kbd.c":175:15 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 210)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 140 139 141 21 (set (reg/f:SI 211)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 141 140 142 21 (set (mem/v:SI (plus:SI (reg/f:SI 211)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 211)
        (expr_list:REG_DEAD (reg:SI 125 [ _14 ])
            (nil))))
(insn 142 141 143 21 (set (reg/f:SI 212)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 21 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 212)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":177:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 212)
        (nil)))
(insn 144 143 145 21 (set (reg:SI 127 [ _16 ])
        (plus:SI (reg:SI 126 [ _15 ])
            (const_int 1 [0x1]))) "kbd.c":177:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 126 [ _15 ])
        (nil)))
(insn 145 144 146 21 (set (reg/f:SI 213)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:14 253 {*arm_movsi_insn}
     (nil))
(insn 146 145 147 21 (set (mem/v:SI (plus:SI (reg/f:SI 213)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 127 [ _16 ])) "kbd.c":177:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 213)
        (expr_list:REG_DEAD (reg:SI 127 [ _16 ])
            (nil))))
(insn 147 146 148 21 (set (reg/f:SI 214)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:16 253 {*arm_movsi_insn}
     (nil))
(insn 148 147 149 21 (set (reg:SI 128 [ _17 ])
        (mem/v:SI (plus:SI (reg/f:SI 214)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":179:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 214)
        (nil)))
(insn 149 148 150 21 (set (reg:SI 129 [ _19 ])
        (plus:SI (reg:SI 128 [ _17 ])
            (const_int 1 [0x1]))) "kbd.c":179:22 7 {*arm_addsi3}
     (nil))
(insn 150 149 151 21 (set (reg/f:SI 215)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:22 253 {*arm_movsi_insn}
     (nil))
(insn 151 150 152 21 (set (mem/v:SI (plus:SI (reg/f:SI 215)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 129 [ _19 ])) "kbd.c":179:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 215)
        (expr_list:REG_DEAD (reg:SI 129 [ _19 ])
            (nil))))
(insn 152 151 153 21 (set (reg/f:SI 216)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:26 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 21 (set (reg/f:SI 217)
        (plus:SI (reg/f:SI 216)
            (reg:SI 128 [ _17 ]))) "kbd.c":179:26 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 216)
        (expr_list:REG_DEAD (reg:SI 128 [ _17 ])
            (nil))))
(insn 154 153 155 21 (set (reg:SI 218)
        (const_int 10 [0xa])) "kbd.c":179:26 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 21 (set (reg:QI 219)
        (subreg:QI (reg:SI 218) 0)) "kbd.c":179:26 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 218)
        (nil)))
(insn 156 155 157 21 (set (mem/v:QI (plus:SI (reg/f:SI 217)
                (const_int 4 [0x4])) [0 kp_77->buf[_18]+0 S1 A8])
        (reg:QI 219)) "kbd.c":179:26 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 219)
        (expr_list:REG_DEAD (reg/f:SI 217)
            (nil))))
(insn 157 156 158 21 (set (reg/f:SI 220)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 158 157 159 21 (set (reg:SI 130 [ _20 ])
        (mem/v:SI (plus:SI (reg/f:SI 220)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 220)
        (nil)))
(insn 159 158 160 21 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 130 [ _20 ]))
                    (const_int 0 [0])))
            (set (reg:SI 221)
                (minus:SI (const_int 0 [0])
                    (reg:SI 130 [ _20 ])))
        ]) "kbd.c":180:15 46 {subsi3_compare0}
     (nil))
(insn 160 159 161 21 (set (reg:SI 131 [ _21 ])
        (and:SI (reg:SI 130 [ _20 ])
            (const_int 127 [0x7f]))) "kbd.c":180:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 130 [ _20 ])
        (nil)))
(insn 161 160 162 21 (set (reg:SI 222)
        (and:SI (reg:SI 221)
            (const_int 127 [0x7f]))) "kbd.c":180:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 221)
        (nil)))
(insn 162 161 163 21 (set (reg:SI 131 [ _21 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 222))
            (reg:SI 131 [ _21 ]))) "kbd.c":180:15 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 222)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 163 162 164 21 (set (reg/f:SI 223)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 164 163 165 21 (set (mem/v:SI (plus:SI (reg/f:SI 223)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 131 [ _21 ])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 223)
        (expr_list:REG_DEAD (reg:SI 131 [ _21 ])
            (nil))))
(insn 165 164 166 21 (set (reg/f:SI 224)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:8 253 {*arm_movsi_insn}
     (nil))
(insn 166 165 167 21 (set (reg:SI 132 [ _22 ])
        (mem/v:SI (plus:SI (reg/f:SI 224)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":181:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 224)
        (nil)))
(insn 167 166 168 21 (set (reg:SI 133 [ _23 ])
        (plus:SI (reg:SI 132 [ _22 ])
            (const_int 1 [0x1]))) "kbd.c":181:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 132 [ _22 ])
        (nil)))
(insn 168 167 169 21 (set (reg/f:SI 225)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:14 253 {*arm_movsi_insn}
     (nil))
(insn 169 168 170 21 (set (mem/v:SI (plus:SI (reg/f:SI 225)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 133 [ _23 ])) "kbd.c":181:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 225)
        (expr_list:REG_DEAD (reg:SI 133 [ _23 ])
            (nil))))
(insn 170 169 171 21 (set (reg/f:SI 226)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:20 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 172 21 (set (reg:SI 134 [ _24 ])
        (mem/v:SI (plus:SI (reg/f:SI 226)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])) "kbd.c":181:20 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 226)
        (nil)))
(insn 172 171 173 21 (set (reg:SI 135 [ _25 ])
        (plus:SI (reg:SI 134 [ _24 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":181:26 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 134 [ _24 ])
        (nil)))
(insn 173 172 174 21 (set (reg/f:SI 227)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:26 253 {*arm_movsi_insn}
     (nil))
(insn 174 173 175 21 (set (mem/v:SI (plus:SI (reg/f:SI 227)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])
        (reg:SI 135 [ _25 ])) "kbd.c":181:26 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 227)
        (expr_list:REG_DEAD (reg:SI 135 [ _25 ])
            (nil))))
(insn 175 174 176 21 (set (reg:SI 228)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":184:6 253 {*arm_movsi_insn}
     (nil))
(insn 176 175 177 21 (set (reg/f:SI 136 [ _26 ])
        (plus:SI (reg:SI 228)
            (const_int 140 [0x8c]))) "kbd.c":184:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 228)
        (nil)))
(insn 177 176 178 21 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ _26 ])) "kbd.c":184:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 136 [ _26 ])
        (nil)))
(call_insn 178 177 179 21 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":184:6 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 179 178 180 21 (set (reg/f:SI 229)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":186:10 253 {*arm_movsi_insn}
     (nil))
(insn 180 179 181 21 (set (reg:SI 230)
        (const_int 0 [0])) "kbd.c":186:10 253 {*arm_movsi_insn}
     (nil))
(insn 181 180 594 21 (set (mem/c:SI (reg/f:SI 229) [3 esc+0 S4 A32])
        (reg:SI 230)) "kbd.c":186:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 230)
        (expr_list:REG_DEAD (reg/f:SI 229)
            (nil))))
(jump_insn 594 181 595 21 (set (pc)
        (label_ref 577)) "kbd.c":187:6 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 595 594 184)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       6
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 137
(code_label 184 595 185 22 20 (nil) [1 uses])
(note 185 184 186 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 191 22 (set (reg:SI 137 [ code.9_27 ])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":190:7 183 {*arm_extendqisi}
     (nil))
(insn 191 186 192 22 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137 [ code.9_27 ])
            (const_int 0 [0]))) "kbd.c":190:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 137 [ code.9_27 ])
        (nil)))
(jump_insn 192 191 193 22 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 232)
            (pc))) "kbd.c":190:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 232)
;;  succ:       23 (FALLTHRU)
;;              30
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 233 234 235 236
(note 193 192 194 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 23 (set (reg:QI 233)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":192:10 263 {*arm_movqi_insn}
     (nil))
(insn 195 194 196 23 (set (reg:SI 234)
        (and:SI (subreg:SI (reg:QI 233) 0)
            (const_int 127 [0x7f]))) "kbd.c":192:10 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:QI 233)
        (nil)))
(insn 196 195 197 23 (set (reg:QI 235)
        (subreg:QI (reg:SI 234) 0)) "kbd.c":192:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 234)
        (nil)))
(insn 197 196 198 23 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 235)) "kbd.c":192:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 235)
        (nil)))
(insn 198 197 199 23 (set (reg:SI 236)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 199 198 200 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 236)
            (const_int 42 [0x2a]))) "kbd.c":193:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 236)
        (nil)))
(jump_insn 200 199 201 23 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "kbd.c":193:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 205)
;;  succ:       25
;;              24 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 237
(note 201 200 202 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 24 (set (reg:SI 237)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 203 202 204 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 237)
            (const_int 54 [0x36]))) "kbd.c":193:24 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 237)
        (nil)))
(jump_insn 204 203 205 24 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "kbd.c":193:24 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 210)
;;  succ:       25 (FALLTHRU)
;;              26
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       23
;;              24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 238 239
(code_label 205 204 206 25 30 (nil) [1 uses])
(note 206 205 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 25 (set (reg/f:SI 238)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":194:13 253 {*arm_movsi_insn}
     (nil))
(insn 208 207 209 25 (set (reg:SI 239)
        (const_int 0 [0])) "kbd.c":194:13 253 {*arm_movsi_insn}
     (nil))
(insn 209 208 210 25 (set (mem/c:SI (reg/f:SI 238) [3 shift+0 S4 A32])
        (reg:SI 239)) "kbd.c":194:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 239)
        (expr_list:REG_DEAD (reg/f:SI 238)
            (nil))))
;;  succ:       26 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       24
;;              25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 240
(code_label 210 209 211 26 31 (nil) [1 uses])
(note 211 210 212 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 26 (set (reg:SI 240)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":195:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 213 212 214 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 240)
            (const_int 29 [0x1d]))) "kbd.c":195:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 240)
        (nil)))
(jump_insn 214 213 215 26 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) "kbd.c":195:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 219)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 241 242
(note 215 214 216 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 27 (set (reg/f:SI 241)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":196:15 253 {*arm_movsi_insn}
     (nil))
(insn 217 216 218 27 (set (reg:SI 242)
        (const_int 0 [0])) "kbd.c":196:15 253 {*arm_movsi_insn}
     (nil))
(insn 218 217 219 27 (set (mem/c:SI (reg/f:SI 241) [3 control+0 S4 A32])
        (reg:SI 242)) "kbd.c":196:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 242)
        (expr_list:REG_DEAD (reg/f:SI 241)
            (nil))))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 243
(code_label 219 218 220 28 32 (nil) [1 uses])
(note 220 219 221 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 28 (set (reg:SI 243)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":197:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 222 221 223 28 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 243)
            (const_int 56 [0x38]))) "kbd.c":197:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 243)
        (nil)))
(jump_insn 223 222 224 28 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 638)
            (pc))) "kbd.c":197:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 638)
;;  succ:       29 (FALLTHRU)
;;              80
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 244 245
(note 224 223 225 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 29 (set (reg/f:SI 244)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":198:11 253 {*arm_movsi_insn}
     (nil))
(insn 226 225 227 29 (set (reg:SI 245)
        (const_int 0 [0])) "kbd.c":198:11 253 {*arm_movsi_insn}
     (nil))
(insn 227 226 596 29 (set (mem/c:SI (reg/f:SI 244) [3 alt+0 S4 A32])
        (reg:SI 245)) "kbd.c":198:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 245)
        (expr_list:REG_DEAD (reg/f:SI 244)
            (nil))))
(jump_insn 596 227 597 29 (set (pc)
        (label_ref:SI 638)) "kbd.c":199:5 284 {*arm_jump}
     (nil)
 -> 638)
;;  succ:       80 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 597 596 232)
;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       22
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 246
(code_label 232 597 233 30 29 (nil) [1 uses])
(note 233 232 234 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 30 (set (reg:SI 246)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 235 234 236 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 246)
            (const_int 42 [0x2a]))) "kbd.c":203:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 246)
        (nil)))
(jump_insn 236 235 237 30 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 241)
            (pc))) "kbd.c":203:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 241)
;;  succ:       32
;;              31 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 247
(note 237 236 238 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 31 (set (reg:SI 247)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 239 238 240 31 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 247)
            (const_int 54 [0x36]))) "kbd.c":203:22 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 247)
        (nil)))
(jump_insn 240 239 241 31 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "kbd.c":203:22 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 248)
;;  succ:       32 (FALLTHRU)
;;              33
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       30
;;              31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 248 249
(code_label 241 240 242 32 34 (nil) [1 uses])
(note 242 241 243 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 244 32 (set (reg/f:SI 248)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 244 243 245 32 (set (reg:SI 249)
        (const_int 1 [0x1])) "kbd.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 245 244 598 32 (set (mem/c:SI (reg/f:SI 248) [3 shift+0 S4 A32])
        (reg:SI 249)) "kbd.c":204:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 249)
        (expr_list:REG_DEAD (reg/f:SI 248)
            (nil))))
(jump_insn 598 245 599 32 (set (pc)
        (label_ref 577)) "kbd.c":205:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 599 598 248)
;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       31
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 250
(code_label 248 599 249 33 35 (nil) [1 uses])
(note 249 248 250 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 33 (set (reg:SI 250)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":207:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 251 250 252 33 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 250)
            (const_int 56 [0x38]))) "kbd.c":207:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 250)
        (nil)))
(jump_insn 252 251 253 33 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) "kbd.c":207:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 259)
;;  succ:       34 (FALLTHRU)
;;              35
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 251 252
(note 253 252 254 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 34 (set (reg/f:SI 251)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":208:9 253 {*arm_movsi_insn}
     (nil))
(insn 255 254 256 34 (set (reg:SI 252)
        (const_int 1 [0x1])) "kbd.c":208:9 253 {*arm_movsi_insn}
     (nil))
(insn 256 255 600 34 (set (mem/c:SI (reg/f:SI 251) [3 alt+0 S4 A32])
        (reg:SI 252)) "kbd.c":208:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 252)
        (expr_list:REG_DEAD (reg/f:SI 251)
            (nil))))
(jump_insn 600 256 601 34 (set (pc)
        (label_ref 577)) "kbd.c":209:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 601 600 259)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       33
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 253
(code_label 259 601 260 35 36 (nil) [1 uses])
(note 260 259 261 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 35 (set (reg:SI 253)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":211:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 262 261 263 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 253)
            (const_int 29 [0x1d]))) "kbd.c":211:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 253)
        (nil)))
(jump_insn 263 262 264 35 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) "kbd.c":211:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 270)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 254 255
(note 264 263 265 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 36 (set (reg/f:SI 254)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":212:13 253 {*arm_movsi_insn}
     (nil))
(insn 266 265 267 36 (set (reg:SI 255)
        (const_int 1 [0x1])) "kbd.c":212:13 253 {*arm_movsi_insn}
     (nil))
(insn 267 266 602 36 (set (mem/c:SI (reg/f:SI 254) [3 control+0 S4 A32])
        (reg:SI 255)) "kbd.c":212:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 255)
        (expr_list:REG_DEAD (reg/f:SI 254)
            (nil))))
(jump_insn 602 267 603 36 (set (pc)
        (label_ref 577)) "kbd.c":213:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 603 602 270)
;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       35
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 256
(code_label 270 603 271 37 37 (nil) [1 uses])
(note 271 270 272 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 37 (set (reg:SI 256)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":216:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 273 272 274 37 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 256)
            (const_int 58 [0x3a]))) "kbd.c":216:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 256)
        (nil)))
(jump_insn 274 273 275 37 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":216:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 283)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 138 139 257 258
(note 275 274 276 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 38 (set (reg/f:SI 257)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:18 253 {*arm_movsi_insn}
     (nil))
(insn 277 276 278 38 (set (reg:SI 138 [ capslock.10_28 ])
        (mem/c:SI (reg/f:SI 257) [3 capslock+0 S4 A32])) "kbd.c":217:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 257)
        (nil)))
(insn 278 277 279 38 (set (reg:SI 139 [ _29 ])
        (minus:SI (const_int 1 [0x1])
            (reg:SI 138 [ capslock.10_28 ]))) "kbd.c":217:18 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 138 [ capslock.10_28 ])
        (nil)))
(insn 279 278 280 38 (set (reg/f:SI 258)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:14 253 {*arm_movsi_insn}
     (nil))
(insn 280 279 604 38 (set (mem/c:SI (reg/f:SI 258) [3 capslock+0 S4 A32])
        (reg:SI 139 [ _29 ])) "kbd.c":217:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 258)
        (expr_list:REG_DEAD (reg:SI 139 [ _29 ])
            (nil))))
(jump_insn 604 280 605 38 (set (pc)
        (label_ref 577)) "kbd.c":218:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 605 604 283)
;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (RTL)
;;  pred:       37
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 140 259
(code_label 283 605 284 39 38 (nil) [1 uses])
(note 284 283 285 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 39 (set (reg/f:SI 259)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":221:7 253 {*arm_movsi_insn}
     (nil))
(insn 286 285 287 39 (set (reg:SI 140 [ control.11_30 ])
        (mem/c:SI (reg/f:SI 259) [3 control+0 S4 A32])) "kbd.c":221:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 259)
        (nil)))
(insn 287 286 288 39 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140 [ control.11_30 ])
            (const_int 0 [0]))) "kbd.c":221:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 140 [ control.11_30 ])
        (nil)))
(jump_insn 288 287 289 39 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 301)
;;  succ:       40 (FALLTHRU)
;;              42
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (RTL)
;;  pred:       39 (FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 141 260
(note 289 288 290 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 40 (set (reg/f:SI 260)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":221:15 253 {*arm_movsi_insn}
     (nil))
(insn 291 290 292 40 (set (reg:SI 141 [ alt.12_31 ])
        (mem/c:SI (reg/f:SI 260) [3 alt+0 S4 A32])) "kbd.c":221:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 260)
        (nil)))
(insn 292 291 293 40 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 141 [ alt.12_31 ])
            (const_int 0 [0]))) "kbd.c":221:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 141 [ alt.12_31 ])
        (nil)))
(jump_insn 293 292 294 40 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 301)
;;  succ:       41 (FALLTHRU)
;;              42
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (RTL)
;;  pred:       40 (FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 261
(note 294 293 295 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 41 (set (reg:SI 261)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":221:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 296 295 297 41 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 261)
            (const_int 83 [0x53]))) "kbd.c":221:22 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 261)
        (nil)))
(jump_insn 297 296 301 41 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 643)
            (pc))) "kbd.c":221:22 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 643)
;;  succ:       81
;;              42 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (RTL)
;;  pred:       39
;;              40
;;              41 (FALLTHRU)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 262
(code_label 301 297 302 42 39 (nil) [2 uses])
(note 302 301 303 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 303 302 304 42 (set (reg:SI 262)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":226:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 304 303 305 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 262)
            (const_int 59 [0x3b]))) "kbd.c":226:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 262)
        (nil)))
(jump_insn 305 304 306 42 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) "kbd.c":226:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 310)
;;  succ:       43 (FALLTHRU)
;;              44
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (RTL)
;;  pred:       42 (FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 306 305 307 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(call_insn 307 306 606 43 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF1") [flags 0x3]  <function_decl 0x7fcdc0b13c00 doF1>) [0 doF1 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":227:6 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 606 307 607 43 (set (pc)
        (label_ref 577)) "kbd.c":227:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 607 606 310)
;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (RTL)
;;  pred:       42
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 263
(code_label 310 607 311 44 40 (nil) [1 uses])
(note 311 310 312 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 44 (set (reg:SI 263)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":229:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 313 312 314 44 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 263)
            (const_int 60 [0x3c]))) "kbd.c":229:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 263)
        (nil)))
(jump_insn 314 313 315 44 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) "kbd.c":229:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 319)
;;  succ:       45 (FALLTHRU)
;;              46
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (RTL)
;;  pred:       44 (FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 315 314 316 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(call_insn 316 315 608 45 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF2") [flags 0x3]  <function_decl 0x7fcdc0b13f00 doF2>) [0 doF2 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":230:6 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 608 316 609 45 (set (pc)
        (label_ref 577)) "kbd.c":230:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 609 608 319)
;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (RTL)
;;  pred:       44
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 264
(code_label 319 609 320 46 41 (nil) [1 uses])
(note 320 319 321 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 46 (set (reg:SI 264)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":232:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 322 321 323 46 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 264)
            (const_int 61 [0x3d]))) "kbd.c":232:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 264)
        (nil)))
(jump_insn 323 322 324 46 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) "kbd.c":232:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 328)
;;  succ:       47 (FALLTHRU)
;;              48
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (RTL)
;;  pred:       46 (FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 324 323 325 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(call_insn 325 324 610 47 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF3") [flags 0x3]  <function_decl 0x7fcdc0b26100 doF3>) [0 doF3 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":233:6 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 610 325 611 47 (set (pc)
        (label_ref 577)) "kbd.c":233:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 611 610 328)
;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (RTL)
;;  pred:       46
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 265
(code_label 328 611 329 48 42 (nil) [1 uses])
(note 329 328 330 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 330 329 331 48 (set (reg:SI 265)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":235:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 331 330 332 48 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 265)
            (const_int 62 [0x3e]))) "kbd.c":235:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 265)
        (nil)))
(jump_insn 332 331 333 48 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 337)
            (pc))) "kbd.c":235:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 337)
;;  succ:       49 (FALLTHRU)
;;              50
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (RTL)
;;  pred:       48 (FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 333 332 334 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(call_insn 334 333 612 49 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF4") [flags 0x3]  <function_decl 0x7fcdc0b26300 doF4>) [0 doF4 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":236:6 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 612 334 613 49 (set (pc)
        (label_ref 577)) "kbd.c":236:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 613 612 337)
;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (RTL)
;;  pred:       48
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 142 266
(code_label 337 613 338 50 43 (nil) [1 uses])
(note 338 337 339 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 50 (set (reg/f:SI 266)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":239:14 253 {*arm_movsi_insn}
     (nil))
(insn 340 339 341 50 (set (reg:SI 142 [ shift.14_32 ])
        (mem/c:SI (reg/f:SI 266) [3 shift+0 S4 A32])) "kbd.c":239:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 266)
        (nil)))
(insn 341 340 342 50 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 142 [ shift.14_32 ])
            (const_int 0 [0]))) "kbd.c":239:5 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 142 [ shift.14_32 ])
        (nil)))
(jump_insn 342 341 343 50 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 349)
            (pc))) "kbd.c":239:5 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 349)
;;  succ:       51 (FALLTHRU)
;;              52
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (RTL)
;;  pred:       50 (FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 143 169 267
(note 343 342 344 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 51 (set (reg:SI 143 [ _33 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:18 175 {*arm_zero_extendqisi2}
     (nil))
(insn 345 344 346 51 (set (reg/f:SI 267)
        (symbol_ref:SI ("sh") [flags 0x2]  <var_decl 0x7fcdc0b1a090 sh>)) "kbd.c":239:5 253 {*arm_movsi_insn}
     (nil))
(insn 346 345 614 51 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 267)
                    (reg:SI 143 [ _33 ])) [0 sh[_33]+0 S1 A8]))) "kbd.c":239:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 267)
        (expr_list:REG_DEAD (reg:SI 143 [ _33 ])
            (nil))))
(jump_insn 614 346 615 51 (set (pc)
        (label_ref 354)) 284 {*arm_jump}
     (nil)
 -> 354)
;;  succ:       53 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 169

(barrier 615 614 349)
;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (RTL)
;;  pred:       50
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 144 169 268
(code_label 349 615 350 52 44 (nil) [1 uses])
(note 350 349 351 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 52 (set (reg:SI 144 [ _34 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:31 175 {*arm_zero_extendqisi2}
     (nil))
(insn 352 351 353 52 (set (reg/f:SI 268)
        (symbol_ref:SI ("unsh") [flags 0x2]  <var_decl 0x7fcdc0b165a0 unsh>)) "kbd.c":239:5 253 {*arm_movsi_insn}
     (nil))
(insn 353 352 354 52 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 268)
                    (reg:SI 144 [ _34 ])) [0 unsh[_34]+0 S1 A8]))) "kbd.c":239:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 268)
        (expr_list:REG_DEAD (reg:SI 144 [ _34 ])
            (nil))))
;;  succ:       53 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 169

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (RTL)
;;  pred:       52 (FALLTHRU)
;;              51 [always] 
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 169
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 169
;; lr  def 	 100 [cc] 145 269 270
(code_label 354 353 355 53 45 (nil) [1 uses])
(note 355 354 356 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 53 (set (reg:QI 269)
        (subreg/s/v:QI (reg:SI 169 [ iftmp.13_64 ]) 0)) "kbd.c":239:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 169 [ iftmp.13_64 ])
        (nil)))
(insn 357 356 358 53 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 269)) "kbd.c":239:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 269)
        (nil)))
(insn 358 357 359 53 (set (reg/f:SI 270)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":241:7 253 {*arm_movsi_insn}
     (nil))
(insn 359 358 360 53 (set (reg:SI 145 [ capslock.15_35 ])
        (mem/c:SI (reg/f:SI 270) [3 capslock+0 S4 A32])) "kbd.c":241:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 270)
        (nil)))
(insn 360 359 361 53 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145 [ capslock.15_35 ])
            (const_int 0 [0]))) "kbd.c":241:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 145 [ capslock.15_35 ])
        (nil)))
(jump_insn 361 360 362 53 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":241:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 407)
;;  succ:       54 (FALLTHRU)
;;              60
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (RTL)
;;  pred:       53 (FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 273
(note 362 361 367 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 367 362 368 54 (set (reg:SI 273)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 368 367 369 54 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 273)
            (const_int 64 [0x40]))) "kbd.c":242:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 273)
        (nil)))
(jump_insn 369 368 370 54 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 385)
;;  succ:       55 (FALLTHRU)
;;              57
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (RTL)
;;  pred:       54 (FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 276
(note 370 369 375 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn 375 370 376 55 (set (reg:SI 276)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:18 175 {*arm_zero_extendqisi2}
     (nil))
(insn 376 375 377 55 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 276)
            (const_int 90 [0x5a]))) "kbd.c":242:18 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 276)
        (nil)))
(jump_insn 377 376 378 55 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:18 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 385)
;;  succ:       56 (FALLTHRU)
;;              57
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (RTL)
;;  pred:       55 (FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 277 278 279
(note 378 377 379 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 56 (set (reg:QI 277)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":243:4 263 {*arm_movqi_insn}
     (nil))
(insn 380 379 381 56 (set (reg:SI 278)
        (plus:SI (subreg:SI (reg:QI 277) 0)
            (const_int 32 [0x20]))) "kbd.c":243:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:QI 277)
        (nil)))
(insn 381 380 382 56 (set (reg:QI 279)
        (subreg:QI (reg:SI 278) 0)) "kbd.c":243:4 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 278)
        (nil)))
(insn 382 381 616 56 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 279)) "kbd.c":243:4 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 279)
        (nil)))
(jump_insn 616 382 617 56 (set (pc)
        (label_ref 407)) "kbd.c":243:4 284 {*arm_jump}
     (nil)
 -> 407)
;;  succ:       60 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 617 616 385)
;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (RTL)
;;  pred:       54
;;              55
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 282
(code_label 385 617 386 57 47 (nil) [2 uses])
(note 386 385 391 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 391 386 392 57 (set (reg:SI 282)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:13 175 {*arm_zero_extendqisi2}
     (nil))
(insn 392 391 393 57 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 282)
            (const_int 96 [0x60]))) "kbd.c":244:13 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 282)
        (nil)))
(jump_insn 393 392 394 57 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:13 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 407)
;;  succ:       58 (FALLTHRU)
;;              60
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (RTL)
;;  pred:       57 (FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 285
(note 394 393 399 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 399 394 400 58 (set (reg:SI 285)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:23 175 {*arm_zero_extendqisi2}
     (nil))
(insn 400 399 401 58 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 285)
            (const_int 122 [0x7a]))) "kbd.c":244:23 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 285)
        (nil)))
(jump_insn 401 400 402 58 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:23 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 407)
;;  succ:       59 (FALLTHRU)
;;              60
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 60, flags: (RTL)
;;  pred:       58 (FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 286 287 288
(note 402 401 403 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 59 (set (reg:QI 286)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":245:4 263 {*arm_movqi_insn}
     (nil))
(insn 404 403 405 59 (set (reg:SI 287)
        (plus:SI (subreg:SI (reg:QI 286) 0)
            (const_int -32 [0xffffffffffffffe0]))) "kbd.c":245:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:QI 286)
        (nil)))
(insn 405 404 406 59 (set (reg:QI 288)
        (subreg:QI (reg:SI 287) 0)) "kbd.c":245:4 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 287)
        (nil)))
(insn 406 405 407 59 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 288)) "kbd.c":245:4 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 288)
        (nil)))
;;  succ:       60 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 60, loop depth 0, maybe hot
;;  prev block 59, next block 61, flags: (RTL)
;;  pred:       53
;;              59 (FALLTHRU)
;;              57
;;              58
;;              56 [always] 
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 146 289
(code_label 407 406 408 60 46 (nil) [4 uses])
(note 408 407 409 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 60 (set (reg/f:SI 289)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":248:7 253 {*arm_movsi_insn}
     (nil))
(insn 410 409 411 60 (set (reg:SI 146 [ control.16_36 ])
        (mem/c:SI (reg/f:SI 289) [3 control+0 S4 A32])) "kbd.c":248:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 289)
        (nil)))
(insn 411 410 412 60 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 146 [ control.16_36 ])
            (const_int 0 [0]))) "kbd.c":248:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 146 [ control.16_36 ])
        (nil)))
(jump_insn 412 411 413 60 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 510)
;;  succ:       61 (FALLTHRU)
;;              69
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 61, loop depth 0, maybe hot
;;  prev block 60, next block 62, flags: (RTL)
;;  pred:       60 (FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 290
(note 413 412 414 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 61 (set (reg:SI 290)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":248:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 415 414 416 61 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 290)
            (const_int 99 [0x63]))) "kbd.c":248:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 290)
        (nil)))
(jump_insn 416 415 417 61 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 510)
;;  succ:       62 (FALLTHRU)
;;              69
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 62, loop depth 0, maybe hot
;;  prev block 61, next block 63, flags: (RTL)
;;  pred:       61 (FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 291
(note 417 416 418 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 62 (set (reg:SI 291)
        (const_int 1 [0x1])) "kbd.c":250:11 253 {*arm_movsi_insn}
     (nil))
(insn 419 418 618 62 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 291)) "kbd.c":250:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 291)
        (nil)))
(jump_insn 618 419 619 62 (set (pc)
        (label_ref 498)) "kbd.c":250:5 284 {*arm_jump}
     (nil)
 -> 498)
;;  succ:       67 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 619 618 500)
;; basic block 63, loop depth 0, maybe hot
;;  prev block 62, next block 64, flags: (RTL)
;;  pred:       67
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 147 292 293 294 295 296 297
(code_label 500 619 422 63 51 (nil) [1 uses])
(note 422 500 423 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 63 (set (reg/f:SI 292)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 424 423 425 63 (set (reg:SI 293)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 425 424 426 63 (set (reg:SI 294)
        (reg:SI 293)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 426 425 427 63 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 6 [0x6]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 427 426 428 63 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 65 [0x41]))
        (nil)))
(insn 428 427 429 63 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 1 [0x1]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 429 428 430 63 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 131 [0x83]))
        (nil)))
(insn 430 429 431 63 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 3 [0x3]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 431 430 432 63 (set (reg:SI 294)
        (minus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 293)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
                (const_int 1047 [0x417]))
            (nil))))
(insn 432 431 433 63 (set (reg:SI 295)
        (ashift:SI (reg:SI 294)
            (const_int 2 [0x2]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 294)
        (nil)))
(insn 433 432 434 63 (set (reg:SI 294)
        (reg:SI 295)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 295)
        (nil)))
(insn 434 433 435 63 (set (reg:SI 296)
        (plus:SI (reg/f:SI 292)
            (reg:SI 294))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 294)
        (expr_list:REG_DEAD (reg/f:SI 292)
            (nil))))
(insn 435 434 436 63 (set (reg/f:SI 297)
        (plus:SI (reg:SI 296)
            (const_int 28 [0x1c]))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 296)
        (nil)))
(insn 436 435 437 63 (set (reg:SI 147 [ _37 ])
        (mem:SI (reg/f:SI 297) [3 proc[i_63].status+0 S4 A32])) "kbd.c":251:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 297)
        (nil)))
(insn 437 436 438 63 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 147 [ _37 ])
            (const_int 0 [0]))) "kbd.c":251:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 147 [ _37 ])
        (nil)))
(jump_insn 438 437 439 63 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 493)
;;  succ:       64 (FALLTHRU)
;;              66
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 64, loop depth 0, maybe hot
;;  prev block 63, next block 65, flags: (RTL)
;;  pred:       63 (FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 148 149 150 298 299 300 301 302 303
(note 439 438 440 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 64 (set (reg/f:SI 298)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 441 440 442 64 (set (reg:SI 299)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 442 441 443 64 (set (reg:SI 300)
        (reg:SI 299)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 443 442 444 64 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 6 [0x6]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 444 443 445 64 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 65 [0x41]))
        (nil)))
(insn 445 444 446 64 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 1 [0x1]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 446 445 447 64 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 131 [0x83]))
        (nil)))
(insn 447 446 448 64 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 3 [0x3]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 448 447 449 64 (set (reg:SI 300)
        (minus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 299)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
                (const_int 1047 [0x417]))
            (nil))))
(insn 449 448 450 64 (set (reg:SI 301)
        (ashift:SI (reg:SI 300)
            (const_int 2 [0x2]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 300)
        (nil)))
(insn 450 449 451 64 (set (reg:SI 300)
        (reg:SI 301)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 301)
        (nil)))
(insn 451 450 452 64 (set (reg:SI 302)
        (plus:SI (reg/f:SI 298)
            (reg:SI 300))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 300)
        (expr_list:REG_DEAD (reg/f:SI 298)
            (nil))))
(insn 452 451 453 64 (set (reg/f:SI 303)
        (plus:SI (reg:SI 302)
            (const_int 84 [0x54]))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 302)
        (nil)))
(insn 453 452 454 64 (set (reg/f:SI 148 [ _38 ])
        (mem/f:SI (reg/f:SI 303) [9 proc[i_63].res+0 S4 A32])) "kbd.c":251:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 303)
        (nil)))
(insn 454 453 455 64 (set (reg/f:SI 149 [ _39 ])
        (plus:SI (reg/f:SI 148 [ _38 ])
            (const_int 60 [0x3c]))) "kbd.c":251:55 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 148 [ _38 ])
        (nil)))
(insn 455 454 456 64 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":251:37 253 {*arm_movsi_insn}
     (nil))
(insn 456 455 457 64 (set (reg:SI 0 r0)
        (reg/f:SI 149 [ _39 ])) "kbd.c":251:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 149 [ _39 ])
        (nil)))
(call_insn/i 457 456 458 64 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":251:37 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 458 457 459 64 (set (reg:SI 150 [ _40 ])
        (reg:SI 0 r0)) "kbd.c":251:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 459 458 460 64 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 150 [ _40 ])
            (const_int 0 [0]))) "kbd.c":251:34 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 150 [ _40 ])
        (nil)))
(jump_insn 460 459 461 64 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:34 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 493)
;;  succ:       65 (FALLTHRU)
;;              66
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 65, loop depth 0, maybe hot
;;  prev block 64, next block 66, flags: (RTL)
;;  pred:       64 (FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 151 152 153 154 304 305 306 307 308 309 310 311 312 313 314 315
(note 461 460 462 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 65 (set (reg/f:SI 304)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 463 462 464 65 (set (reg:SI 305)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 464 463 465 65 (set (reg:SI 306)
        (reg:SI 305)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 465 464 466 65 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 6 [0x6]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 466 465 467 65 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 65 [0x41]))
        (nil)))
(insn 467 466 468 65 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 1 [0x1]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 468 467 469 65 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 131 [0x83]))
        (nil)))
(insn 469 468 470 65 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 3 [0x3]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 470 469 471 65 (set (reg:SI 306)
        (minus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 305)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
                (const_int 1047 [0x417]))
            (nil))))
(insn 471 470 472 65 (set (reg:SI 307)
        (ashift:SI (reg:SI 306)
            (const_int 2 [0x2]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 306)
        (nil)))
(insn 472 471 473 65 (set (reg:SI 306)
        (reg:SI 307)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 307)
        (nil)))
(insn 473 472 474 65 (set (reg:SI 308)
        (plus:SI (reg/f:SI 304)
            (reg:SI 306))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 306)
        (expr_list:REG_DEAD (reg/f:SI 304)
            (nil))))
(insn 474 473 475 65 (set (reg/f:SI 309)
        (plus:SI (reg:SI 308)
            (const_int 84 [0x54]))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 308)
        (nil)))
(insn 475 474 476 65 (set (reg/f:SI 151 [ _41 ])
        (mem/f:SI (reg/f:SI 309) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 309)
        (nil)))
(insn 476 475 477 65 (set (reg:SI 152 [ _42 ])
        (mem:SI (plus:SI (reg/f:SI 151 [ _41 ])
                (const_int 92 [0x5c])) [3 _41->signal+0 S4 A32])) "kbd.c":252:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 151 [ _41 ])
        (nil)))
(insn 477 476 478 65 (set (reg/f:SI 310)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 478 477 479 65 (set (reg:SI 311)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 479 478 480 65 (set (reg:SI 312)
        (reg:SI 311)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 480 479 481 65 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 6 [0x6]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 481 480 482 65 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 65 [0x41]))
        (nil)))
(insn 482 481 483 65 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 1 [0x1]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 483 482 484 65 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 131 [0x83]))
        (nil)))
(insn 484 483 485 65 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 3 [0x3]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 485 484 486 65 (set (reg:SI 312)
        (minus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 311)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
                (const_int 1047 [0x417]))
            (nil))))
(insn 486 485 487 65 (set (reg:SI 313)
        (ashift:SI (reg:SI 312)
            (const_int 2 [0x2]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 312)
        (nil)))
(insn 487 486 488 65 (set (reg:SI 312)
        (reg:SI 313)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 313)
        (nil)))
(insn 488 487 489 65 (set (reg:SI 314)
        (plus:SI (reg/f:SI 310)
            (reg:SI 312))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 312)
        (expr_list:REG_DEAD (reg/f:SI 310)
            (nil))))
(insn 489 488 490 65 (set (reg/f:SI 315)
        (plus:SI (reg:SI 314)
            (const_int 84 [0x54]))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 314)
        (nil)))
(insn 490 489 491 65 (set (reg/f:SI 153 [ _43 ])
        (mem/f:SI (reg/f:SI 315) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 315)
        (nil)))
(insn 491 490 492 65 (set (reg:SI 154 [ _44 ])
        (ior:SI (reg:SI 152 [ _42 ])
            (const_int 4 [0x4]))) "kbd.c":252:22 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 152 [ _42 ])
        (nil)))
(insn 492 491 493 65 (set (mem:SI (plus:SI (reg/f:SI 153 [ _43 ])
                (const_int 92 [0x5c])) [3 _43->signal+0 S4 A32])
        (reg:SI 154 [ _44 ])) "kbd.c":252:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 154 [ _44 ])
        (expr_list:REG_DEAD (reg/f:SI 153 [ _43 ])
            (nil))))
;;  succ:       66 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 66, loop depth 0, maybe hot
;;  prev block 65, next block 67, flags: (RTL)
;;  pred:       63
;;              64
;;              65 (FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 316 317
(code_label 493 492 494 66 50 (nil) [2 uses])
(note 494 493 495 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 496 66 (set (reg:SI 317)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:25 253 {*arm_movsi_insn}
     (nil))
(insn 496 495 497 66 (set (reg:SI 316)
        (plus:SI (reg:SI 317)
            (const_int 1 [0x1]))) "kbd.c":250:25 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 317)
        (nil)))
(insn 497 496 498 66 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 316)) "kbd.c":250:25 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 316)
        (nil)))
;;  succ:       67 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 67, loop depth 0, maybe hot
;;  prev block 66, next block 68, flags: (RTL)
;;  pred:       66 (FALLTHRU,DFS_BACK)
;;              62 [always] 
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 318
(code_label 498 497 499 67 49 (nil) [1 uses])
(note 499 498 503 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 503 499 504 67 (set (reg:SI 318)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:16 253 {*arm_movsi_insn}
     (nil))
(insn 504 503 505 67 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 318)
            (const_int 63 [0x3f]))) "kbd.c":250:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 318)
        (nil)))
(jump_insn 505 504 506 67 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 500)
            (pc))) "kbd.c":250:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 500)
;;  succ:       63
;;              68 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 68, loop depth 0, maybe hot
;;  prev block 67, next block 69, flags: (RTL)
;;  pred:       67 (FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 319 320
(note 506 505 507 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 68 (set (reg:SI 319)
        (const_int 10 [0xa])) "kbd.c":255:7 253 {*arm_movsi_insn}
     (nil))
(insn 508 507 509 68 (set (reg:QI 320)
        (subreg:QI (reg:SI 319) 0)) "kbd.c":255:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 319)
        (nil)))
(insn 509 508 510 68 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 320)) "kbd.c":255:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 320)
        (nil)))
;;  succ:       69 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 69, loop depth 0, maybe hot
;;  prev block 68, next block 70, flags: (RTL)
;;  pred:       60
;;              61
;;              68 (FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 155 321
(code_label 510 509 511 69 48 (nil) [2 uses])
(note 511 510 512 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 69 (set (reg/f:SI 321)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":258:7 253 {*arm_movsi_insn}
     (nil))
(insn 513 512 514 69 (set (reg:SI 155 [ control.17_45 ])
        (mem/c:SI (reg/f:SI 321) [3 control+0 S4 A32])) "kbd.c":258:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 321)
        (nil)))
(insn 514 513 515 69 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155 [ control.17_45 ])
            (const_int 0 [0]))) "kbd.c":258:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 155 [ control.17_45 ])
        (nil)))
(jump_insn 515 514 516 69 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 529)
;;  succ:       70 (FALLTHRU)
;;              73
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 70, loop depth 0, maybe hot
;;  prev block 69, next block 71, flags: (RTL)
;;  pred:       69 (FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 322
(note 516 515 517 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 70 (set (reg:SI 322)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 518 517 519 70 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 322)
            (const_int 100 [0x64]))) "kbd.c":258:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 322)
        (nil)))
(jump_insn 519 518 520 70 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 524)
            (pc))) "kbd.c":258:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 524)
;;  succ:       72
;;              71 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 71, loop depth 0, maybe hot
;;  prev block 70, next block 72, flags: (RTL)
;;  pred:       70 (FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 323
(note 520 519 521 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 71 (set (reg:SI 323)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:25 175 {*arm_zero_extendqisi2}
     (nil))
(insn 522 521 523 71 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 323)
            (const_int 68 [0x44]))) "kbd.c":258:25 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 323)
        (nil)))
(jump_insn 523 522 524 71 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:25 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 529)
;;  succ:       72 (FALLTHRU)
;;              73
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 72, loop depth 0, maybe hot
;;  prev block 71, next block 73, flags: (RTL)
;;  pred:       70
;;              71 (FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 324 325
(code_label 524 523 525 72 53 (nil) [1 uses])
(note 525 524 526 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 526 525 527 72 (set (reg:SI 324)
        (const_int 4 [0x4])) "kbd.c":259:7 253 {*arm_movsi_insn}
     (nil))
(insn 527 526 528 72 (set (reg:QI 325)
        (subreg:QI (reg:SI 324) 0)) "kbd.c":259:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 324)
        (nil)))
(insn 528 527 529 72 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 325)) "kbd.c":259:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 325)
        (nil)))
;;  succ:       73 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 73, loop depth 0, maybe hot
;;  prev block 72, next block 74, flags: (RTL)
;;  pred:       69
;;              71
;;              72 (FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 156 326
(code_label 529 528 530 73 52 (nil) [2 uses])
(note 530 529 531 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 532 73 (set (reg/f:SI 326)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":264:9 253 {*arm_movsi_insn}
     (nil))
(insn 532 531 533 73 (set (reg:SI 156 [ _46 ])
        (mem/v:SI (plus:SI (reg/f:SI 326)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":264:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 326)
        (nil)))
(insn 533 532 534 73 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 156 [ _46 ])
            (const_int 128 [0x80]))) "kbd.c":264:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 156 [ _46 ])
        (nil)))
(jump_insn 534 533 539 73 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 648)
            (pc))) "kbd.c":264:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 648)
;;  succ:       82
;;              74 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 74, loop depth 0, maybe hot
;;  prev block 73, next block 75, flags: (RTL)
;;  pred:       73 (FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 157 158 159 160 161 162 163 327 328 329 330 331 332 333 334 335 336 337 338 339
(note 539 534 540 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 74 (set (reg/f:SI 327)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:13 253 {*arm_movsi_insn}
     (nil))
(insn 541 540 542 74 (set (reg:SI 157 [ _47 ])
        (mem/v:SI (plus:SI (reg/f:SI 327)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":267:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 327)
        (nil)))
(insn 542 541 543 74 (set (reg:SI 158 [ _49 ])
        (plus:SI (reg:SI 157 [ _47 ])
            (const_int 1 [0x1]))) "kbd.c":267:19 7 {*arm_addsi3}
     (nil))
(insn 543 542 544 74 (set (reg/f:SI 328)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:19 253 {*arm_movsi_insn}
     (nil))
(insn 544 543 545 74 (set (mem/v:SI (plus:SI (reg/f:SI 328)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 158 [ _49 ])) "kbd.c":267:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 328)
        (expr_list:REG_DEAD (reg:SI 158 [ _49 ])
            (nil))))
(insn 545 544 546 74 (set (reg/f:SI 329)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:23 253 {*arm_movsi_insn}
     (nil))
(insn 546 545 547 74 (set (reg/f:SI 330)
        (plus:SI (reg/f:SI 329)
            (reg:SI 157 [ _47 ]))) "kbd.c":267:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 329)
        (expr_list:REG_DEAD (reg:SI 157 [ _47 ])
            (nil))))
(insn 547 546 548 74 (set (reg:QI 331)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":267:23 263 {*arm_movqi_insn}
     (nil))
(insn 548 547 549 74 (set (mem/v:QI (plus:SI (reg/f:SI 330)
                (const_int 4 [0x4])) [0 kp_77->buf[_48]+0 S1 A8])
        (reg:QI 331)) "kbd.c":267:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 331)
        (expr_list:REG_DEAD (reg/f:SI 330)
            (nil))))
(insn 549 548 550 74 (set (reg/f:SI 332)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 550 549 551 74 (set (reg:SI 159 [ _50 ])
        (mem/v:SI (plus:SI (reg/f:SI 332)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 332)
        (nil)))
(insn 551 550 552 74 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 159 [ _50 ]))
                    (const_int 0 [0])))
            (set (reg:SI 333)
                (minus:SI (const_int 0 [0])
                    (reg:SI 159 [ _50 ])))
        ]) "kbd.c":268:12 46 {subsi3_compare0}
     (nil))
(insn 552 551 553 74 (set (reg:SI 160 [ _51 ])
        (and:SI (reg:SI 159 [ _50 ])
            (const_int 127 [0x7f]))) "kbd.c":268:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 159 [ _50 ])
        (nil)))
(insn 553 552 554 74 (set (reg:SI 334)
        (and:SI (reg:SI 333)
            (const_int 127 [0x7f]))) "kbd.c":268:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 333)
        (nil)))
(insn 554 553 555 74 (set (reg:SI 160 [ _51 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 334))
            (reg:SI 160 [ _51 ]))) "kbd.c":268:12 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 334)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 555 554 556 74 (set (reg/f:SI 335)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 556 555 557 74 (set (mem/v:SI (plus:SI (reg/f:SI 335)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 160 [ _51 ])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 335)
        (expr_list:REG_DEAD (reg:SI 160 [ _51 ])
            (nil))))
(insn 557 556 558 74 (set (reg/f:SI 336)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:5 253 {*arm_movsi_insn}
     (nil))
(insn 558 557 559 74 (set (reg:SI 161 [ _52 ])
        (mem/v:SI (plus:SI (reg/f:SI 336)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":270:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 336)
        (nil)))
(insn 559 558 560 74 (set (reg:SI 162 [ _53 ])
        (plus:SI (reg:SI 161 [ _52 ])
            (const_int 1 [0x1]))) "kbd.c":270:11 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 161 [ _52 ])
        (nil)))
(insn 560 559 561 74 (set (reg/f:SI 337)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:11 253 {*arm_movsi_insn}
     (nil))
(insn 561 560 562 74 (set (mem/v:SI (plus:SI (reg/f:SI 337)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 162 [ _53 ])) "kbd.c":270:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 337)
        (expr_list:REG_DEAD (reg:SI 162 [ _53 ])
            (nil))))
(insn 562 561 563 74 (set (reg:SI 338)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":271:3 253 {*arm_movsi_insn}
     (nil))
(insn 563 562 564 74 (set (reg/f:SI 163 [ _54 ])
        (plus:SI (reg:SI 338)
            (const_int 140 [0x8c]))) "kbd.c":271:3 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 338)
        (nil)))
(insn 564 563 565 74 (set (reg:SI 0 r0)
        (reg/f:SI 163 [ _54 ])) "kbd.c":271:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 163 [ _54 ])
        (nil)))
(call_insn 565 564 566 74 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":271:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 566 565 567 74 (set (reg:SI 339)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":273:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 567 566 568 74 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 339)
            (const_int 13 [0xd]))) "kbd.c":273:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 339)
        (nil)))
(jump_insn 568 567 569 74 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 653)
            (pc))) "kbd.c":273:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 653)
;;  succ:       75 (FALLTHRU)
;;              83
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 75, loop depth 0, maybe hot
;;  prev block 74, next block 77, flags: (RTL)
;;  pred:       74 (FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 164 165 340 341
(note 569 568 570 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 570 569 571 75 (set (reg/f:SI 340)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 571 570 572 75 (set (reg:SI 164 [ kline.18_55 ])
        (mem/v/c:SI (reg/f:SI 340) [3 kline+0 S4 A32])) "kbd.c":274:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 340)
        (nil)))
(insn 572 571 573 75 (set (reg:SI 165 [ _56 ])
        (plus:SI (reg:SI 164 [ kline.18_55 ])
            (const_int 1 [0x1]))) "kbd.c":274:10 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 164 [ kline.18_55 ])
        (nil)))
(insn 573 572 574 75 (set (reg/f:SI 341)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 574 573 575 75 (set (mem/v/c:SI (reg/f:SI 341) [3 kline+0 S4 A32])
        (reg:SI 165 [ _56 ])) "kbd.c":274:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 341)
        (expr_list:REG_DEAD (reg:SI 165 [ _56 ])
            (nil))))
(insn 575 574 576 75 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":275:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 576 575 620 75 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":275:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 620 576 621 75 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 621 620 623)
;; basic block 77, loop depth 0, maybe hot
;;  prev block 75, next block 78, flags: (RTL)
;;  pred:       5
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 623 621 622 77 55 (nil) [1 uses])
(note 622 623 624 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 624 622 625 77 (const_int 0 [0]) "kbd.c":139:5 311 {nop}
     (nil))
(jump_insn 625 624 626 77 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 626 625 628)
;; basic block 78, loop depth 0, maybe hot
;;  prev block 77, next block 79, flags: (RTL)
;;  pred:       7
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 628 626 627 78 56 (nil) [1 uses])
(note 627 628 629 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 629 627 630 78 (const_int 0 [0]) "kbd.c":143:8 311 {nop}
     (nil))
(jump_insn 630 629 631 78 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 631 630 633)
;; basic block 79, loop depth 0, maybe hot
;;  prev block 78, next block 80, flags: (RTL)
;;  pred:       8
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 633 631 632 79 57 (nil) [1 uses])
(note 632 633 634 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 634 632 635 79 (const_int 0 [0]) "kbd.c":152:8 311 {nop}
     (nil))
(jump_insn 635 634 636 79 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 636 635 638)
;; basic block 80, loop depth 0, maybe hot
;;  prev block 79, next block 81, flags: (RTL)
;;  pred:       28
;;              29 [always] 
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 638 636 637 80 58 (nil) [2 uses])
(note 637 638 639 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn 639 637 640 80 (const_int 0 [0]) "kbd.c":199:5 311 {nop}
     (nil))
(jump_insn 640 639 641 80 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 641 640 643)
;; basic block 81, loop depth 0, maybe hot
;;  prev block 80, next block 82, flags: (RTL)
;;  pred:       41
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 643 641 642 81 59 (nil) [1 uses])
(note 642 643 644 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 644 642 645 81 (const_int 0 [0]) "kbd.c":223:7 311 {nop}
     (nil))
(jump_insn 645 644 646 81 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 646 645 648)
;; basic block 82, loop depth 0, maybe hot
;;  prev block 81, next block 83, flags: (RTL)
;;  pred:       73
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 648 646 647 82 60 (nil) [1 uses])
(note 647 648 649 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 649 647 650 82 (const_int 0 [0]) "kbd.c":265:6 311 {nop}
     (nil))
(jump_insn 650 649 651 82 (set (pc)
        (label_ref 577)) 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       76 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 651 650 653)
;; basic block 83, loop depth 0, maybe hot
;;  prev block 82, next block 76, flags: (RTL)
;;  pred:       74
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 653 651 652 83 61 (nil) [1 uses])
(note 652 653 654 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 654 652 577 83 (const_int 0 [0]) "kbd.c":277:2 311 {nop}
     (nil))
;;  succ:       76 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 76, loop depth 0, maybe hot
;;  prev block 83, next block 84, flags: (RTL)
;;  pred:       75
;;              77 [always] 
;;              78 [always] 
;;              49 [always] 
;;              10 [always] 
;;              12 [always] 
;;              21 [always] 
;;              79 [always] 
;;              32 [always] 
;;              34 [always] 
;;              36 [always] 
;;              80 [always] 
;;              38 [always] 
;;              43 [always] 
;;              45 [always] 
;;              47 [always] 
;;              81 [always] 
;;              83 [always]  (FALLTHRU)
;;              82 [always] 
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 166 167 168 342 343 344 345
(code_label 577 654 578 76 19 ("out") [18 uses])
(note 578 577 579 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 579 578 580 76 (set (reg/f:SI 342)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":278:7 253 {*arm_movsi_insn}
     (nil))
(insn 580 579 581 76 (set (reg/f:SI 166 [ _57 ])
        (mem/v/f:SI (reg/f:SI 342) [2 kp_77->base+0 S4 A32])) "kbd.c":278:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 342)
        (nil)))
(insn 581 580 582 76 (set (reg/f:SI 167 [ _58 ])
        (plus:SI (reg/f:SI 166 [ _57 ])
            (const_int 4 [0x4]))) "kbd.c":278:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 166 [ _57 ])
        (nil)))
(insn 582 581 583 76 (set (reg:SI 343)
        (const_int -1 [0xffffffffffffffff])) "kbd.c":278:23 253 {*arm_movsi_insn}
     (nil))
(insn 583 582 584 76 (set (reg:QI 344)
        (subreg:QI (reg:SI 343) 0)) "kbd.c":278:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 343)
        (nil)))
(insn 584 583 585 76 (set (mem:QI (reg/f:SI 167 [ _58 ]) [0 *_58+0 S1 A8])
        (reg:QI 344)) "kbd.c":278:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 344)
        (expr_list:REG_DEAD (reg/f:SI 167 [ _58 ])
            (nil))))
(insn 585 584 586 76 (set (reg/f:SI 168 [ _59 ])
        (const_int 269746224 [0x10140030])) "kbd.c":279:3 253 {*arm_movsi_insn}
     (nil))
(insn 586 585 587 76 (set (reg:SI 345)
        (const_int 255 [0xff])) "kbd.c":279:13 253 {*arm_movsi_insn}
     (nil))
(insn 587 586 655 76 (set (mem/v:SI (reg/f:SI 168 [ _59 ]) [3 *_59+0 S4 A32])
        (reg:SI 345)) "kbd.c":279:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 345)
        (expr_list:REG_DEAD (reg/f:SI 168 [ _59 ])
            (nil))))
;;  succ:       84 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 84, loop depth 0, maybe hot
;;  prev block 76, next block 1, flags: (RTL)
;;  pred:       76 [always]  (FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 655 587 656 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn 656 655 0 84 (const_int 0 [0]) "kbd.c":281:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kbd_handler2 (kbd_handler2, funcdef_no=6, decl_uid=4529, cgraph_uid=7, symbol_order=21)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 40 n_edges 61 count 40 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
;;
;; Loop 1
;;  header 29, latch 28
;;  depth 1, outer 0
;;  nodes: 29 28 25 26 27
;; 2 succs { 3 4 }
;; 3 succs { 39 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 39 }
;; 7 succs { 8 10 }
;; 8 succs { 9 10 }
;; 9 succs { 39 }
;; 10 succs { 11 13 }
;; 11 succs { 12 13 }
;; 12 succs { 39 }
;; 13 succs { 14 16 }
;; 14 succs { 15 16 }
;; 15 succs { 39 }
;; 16 succs { 17 19 }
;; 17 succs { 18 19 }
;; 18 succs { 39 }
;; 19 succs { 20 21 }
;; 20 succs { 22 }
;; 21 succs { 22 }
;; 22 succs { 23 31 }
;; 23 succs { 24 31 }
;; 24 succs { 29 }
;; 25 succs { 26 28 }
;; 26 succs { 27 28 }
;; 27 succs { 28 }
;; 28 succs { 29 }
;; 29 succs { 25 30 }
;; 30 succs { 31 }
;; 31 succs { 32 34 }
;; 32 succs { 33 34 }
;; 33 succs { 34 }
;; 34 succs { 35 37 }
;; 35 succs { 36 37 }
;; 36 succs { 37 }
;; 37 succs { 38 39 }
;; 38 succs { 39 }
;; 39 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 186.
verify found no changes in insn with uid = 237.
verify found no changes in insn with uid = 261.
verify found no changes in insn with uid = 282.
verify found no changes in insn with uid = 315.
verify found no changes in insn with uid = 326.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r247: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r247,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r246,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r245,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r244,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r243,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r242,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r241,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r240,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r239,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r238,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r237,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r236,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r235,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r234,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r233,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r232,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r231,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r230,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r229,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r228,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r227,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r226,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r225,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r224,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r223,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r222,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r221,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r220,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r219,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r218,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r217,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r216,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r215,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r214,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r213,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r212,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r211,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r210,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r209,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r208,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r207,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r206,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r205,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r204,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a64 (r203,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r202,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a68 (r201,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a69 (r200,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a72 (r199,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a70 (r198,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a73 (r197,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a71 (r196,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a75 (r195,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a76 (r194,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a79 (r193,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a77 (r192,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a80 (r191,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a78 (r190,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a81 (r189,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a83 (r188,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a85 (r187,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a86 (r186,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a88 (r185,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a89 (r184,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a91 (r183,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a93 (r182,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a95 (r181,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a94 (r180,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a97 (r179,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a96 (r178,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a98 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a100 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a102 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a101 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a104 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a103 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a105 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a107 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a109 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a108 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a111 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a110 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a112 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a114 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a116 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a115 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a118 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a117 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a119 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a121 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a123 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a122 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a124 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a126 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a128 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a127 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a129 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a130 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a133 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a134 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a65 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a66 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a67 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a74 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a82 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a84 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a87 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a90 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a92 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a99 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a106 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a113 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a120 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a125 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a131 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a132 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r247,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a1(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r246,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a4(r245,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r145,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a6(r244,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r243,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r242,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r241,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r240,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r239,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a17(r238,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r237,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a20(r236,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r234,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r235,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a24(r233,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r232,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r231,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r136,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a29(r230,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a30(r229,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a31(r228,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r227,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a34(r225,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a35(r226,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a36(r134,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a37(r224,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a38(r223,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a39(r222,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a40(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a41(r221,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a42(r219,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a43(r220,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a44(r218,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a45(r217,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a46(r216,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a47(r214,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a48(r215,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a49(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a50(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a51(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a52(r213,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a53(r212,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a54(r210,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a55(r208,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a56(r211,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a57(r209,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a58(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a59(r207,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a60(r206,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a61(r204,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a62(r202,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a63(r205,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a64(r203,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a65(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a66(r127,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a67(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a68(r201,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a69(r200,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a70(r198,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a71(r196,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a72(r199,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a73(r197,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a74(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a75(r195,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a76(r194,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a77(r192,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a78(r190,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a79(r193,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a80(r191,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a81(r189,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a82(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a83(r188,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a84(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a85(r187,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a86(r186,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a87(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a88(r185,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a89(r184,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a90(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a91(r183,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a92(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a93(r182,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a94(r180,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a95(r181,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a96(r178,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a97(r179,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a98(r177,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a99(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a100(r176,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a101(r174,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a102(r175,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a103(r172,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a104(r173,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a105(r171,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a106(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a107(r170,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a108(r168,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a109(r169,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a110(r166,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a111(r167,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a112(r165,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a113(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a114(r164,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a115(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a116(r163,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a117(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a118(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a119(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a120(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a121(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a122(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a123(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a124(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a125(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a126(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a127(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a128(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a129(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a130(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a131(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a132(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a133(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a134(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 326(l0): point = 1
   Insn 325(l0): point = 3
   Insn 324(l0): point = 5
   Insn 323(l0): point = 7
   Insn 322(l0): point = 9
   Insn 321(l0): point = 11
   Insn 320(l0): point = 13
   Insn 318(l0): point = 16
   Insn 317(l0): point = 18
   Insn 316(l0): point = 20
   Insn 315(l0): point = 22
   Insn 314(l0): point = 24
   Insn 313(l0): point = 26
   Insn 312(l0): point = 28
   Insn 311(l0): point = 30
   Insn 310(l0): point = 32
   Insn 309(l0): point = 34
   Insn 308(l0): point = 36
   Insn 307(l0): point = 38
   Insn 306(l0): point = 40
   Insn 305(l0): point = 42
   Insn 304(l0): point = 44
   Insn 303(l0): point = 46
   Insn 302(l0): point = 48
   Insn 301(l0): point = 50
   Insn 300(l0): point = 52
   Insn 299(l0): point = 54
   Insn 298(l0): point = 57
   Insn 297(l0): point = 59
   Insn 296(l0): point = 61
   Insn 295(l0): point = 63
   Insn 294(l0): point = 65
   Insn 293(l0): point = 67
   Insn 292(l0): point = 69
   Insn 291(l0): point = 71
   Insn 290(l0): point = 73
   Insn 289(l0): point = 75
   Insn 288(l0): point = 77
   Insn 287(l0): point = 79
   Insn 286(l0): point = 81
   Insn 285(l0): point = 83
   Insn 282(l0): point = 86
   Insn 281(l0): point = 88
   Insn 280(l0): point = 90
   Insn 279(l0): point = 92
   Insn 278(l0): point = 94
   Insn 277(l0): point = 96
   Insn 276(l0): point = 98
   Insn 274(l0): point = 101
   Insn 273(l0): point = 103
   Insn 272(l0): point = 105
   Insn 270(l0): point = 108
   Insn 269(l0): point = 110
   Insn 268(l0): point = 112
   Insn 267(l0): point = 114
   Insn 264(l0): point = 117
   Insn 263(l0): point = 119
   Insn 262(l0): point = 121
   Insn 261(l0): point = 123
   Insn 260(l0): point = 125
   Insn 259(l0): point = 127
   Insn 258(l0): point = 129
   Insn 257(l0): point = 131
   Insn 256(l0): point = 133
   Insn 255(l0): point = 135
   Insn 253(l0): point = 138
   Insn 252(l0): point = 140
   Insn 251(l0): point = 142
   Insn 249(l0): point = 145
   Insn 248(l0): point = 147
   Insn 247(l0): point = 149
   Insn 246(l0): point = 151
   Insn 243(l0): point = 154
   Insn 242(l0): point = 156
   Insn 241(l0): point = 158
   Insn 240(l0): point = 160
   Insn 239(l0): point = 162
   Insn 238(l0): point = 164
   Insn 237(l0): point = 166
   Insn 236(l0): point = 168
   Insn 167(l0): point = 171
   Insn 166(l0): point = 173
   Insn 165(l0): point = 175
   Insn 164(l0): point = 177
   Insn 163(l0): point = 179
   Insn 162(l0): point = 181
   Insn 161(l0): point = 183
   Insn 160(l0): point = 185
   Insn 159(l0): point = 187
   Insn 158(l0): point = 189
   Insn 157(l0): point = 191
   Insn 156(l0): point = 193
   Insn 155(l0): point = 195
   Insn 154(l0): point = 197
   Insn 153(l0): point = 199
   Insn 152(l0): point = 201
   Insn 234(l0): point = 204
   Insn 233(l0): point = 206
   Insn 232(l0): point = 208
   Insn 226(l0): point = 211
   Insn 225(l0): point = 213
   Insn 224(l0): point = 215
   Insn 189(l0): point = 218
   Insn 188(l0): point = 220
   Insn 187(l0): point = 222
   Insn 186(l0): point = 224
   Insn 185(l0): point = 226
   Insn 184(l0): point = 228
   Insn 183(l0): point = 230
   Insn 182(l0): point = 232
   Insn 181(l0): point = 234
   Insn 180(l0): point = 236
   Insn 179(l0): point = 238
   Insn 178(l0): point = 240
   Insn 177(l0): point = 242
   Insn 176(l0): point = 244
   Insn 175(l0): point = 246
   Insn 174(l0): point = 248
   Insn 173(l0): point = 250
   Insn 172(l0): point = 252
   Insn 171(l0): point = 254
   Insn 170(l0): point = 256
   Insn 169(l0): point = 258
   Insn 221(l0): point = 261
   Insn 220(l0): point = 263
   Insn 219(l0): point = 265
   Insn 218(l0): point = 267
   Insn 217(l0): point = 269
   Insn 216(l0): point = 271
   Insn 215(l0): point = 273
   Insn 214(l0): point = 275
   Insn 213(l0): point = 277
   Insn 212(l0): point = 279
   Insn 211(l0): point = 281
   Insn 210(l0): point = 283
   Insn 209(l0): point = 285
   Insn 208(l0): point = 287
   Insn 207(l0): point = 289
   Insn 206(l0): point = 291
   Insn 205(l0): point = 293
   Insn 204(l0): point = 295
   Insn 203(l0): point = 297
   Insn 202(l0): point = 299
   Insn 201(l0): point = 301
   Insn 200(l0): point = 303
   Insn 199(l0): point = 305
   Insn 198(l0): point = 307
   Insn 197(l0): point = 309
   Insn 196(l0): point = 311
   Insn 195(l0): point = 313
   Insn 194(l0): point = 315
   Insn 193(l0): point = 317
   Insn 192(l0): point = 319
   Insn 191(l0): point = 321
   Insn 345(l0): point = 324
   Insn 148(l0): point = 326
   Insn 147(l0): point = 328
   Insn 146(l0): point = 330
   Insn 145(l0): point = 332
   Insn 144(l0): point = 334
   Insn 143(l0): point = 336
   Insn 141(l0): point = 339
   Insn 140(l0): point = 341
   Insn 139(l0): point = 343
   Insn 137(l0): point = 346
   Insn 136(l0): point = 348
   Insn 135(l0): point = 350
   Insn 134(l0): point = 352
   Insn 131(l0): point = 355
   Insn 130(l0): point = 357
   Insn 129(l0): point = 359
   Insn 128(l0): point = 361
   Insn 343(l0): point = 364
   Insn 123(l0): point = 366
   Insn 122(l0): point = 368
   Insn 121(l0): point = 370
   Insn 120(l0): point = 372
   Insn 118(l0): point = 375
   Insn 117(l0): point = 377
   Insn 116(l0): point = 379
   Insn 115(l0): point = 381
   Insn 341(l0): point = 384
   Insn 110(l0): point = 386
   Insn 109(l0): point = 388
   Insn 108(l0): point = 390
   Insn 107(l0): point = 392
   Insn 106(l0): point = 394
   Insn 105(l0): point = 396
   Insn 103(l0): point = 399
   Insn 102(l0): point = 401
   Insn 101(l0): point = 403
   Insn 99(l0): point = 406
   Insn 98(l0): point = 408
   Insn 97(l0): point = 410
   Insn 96(l0): point = 412
   Insn 339(l0): point = 415
   Insn 91(l0): point = 417
   Insn 90(l0): point = 419
   Insn 89(l0): point = 421
   Insn 88(l0): point = 423
   Insn 87(l0): point = 425
   Insn 86(l0): point = 427
   Insn 84(l0): point = 430
   Insn 83(l0): point = 432
   Insn 82(l0): point = 434
   Insn 80(l0): point = 437
   Insn 79(l0): point = 439
   Insn 78(l0): point = 441
   Insn 77(l0): point = 443
   Insn 337(l0): point = 446
   Insn 72(l0): point = 448
   Insn 71(l0): point = 450
   Insn 70(l0): point = 452
   Insn 69(l0): point = 454
   Insn 68(l0): point = 456
   Insn 67(l0): point = 458
   Insn 65(l0): point = 461
   Insn 64(l0): point = 463
   Insn 63(l0): point = 465
   Insn 61(l0): point = 468
   Insn 60(l0): point = 470
   Insn 59(l0): point = 472
   Insn 58(l0): point = 474
   Insn 335(l0): point = 477
   Insn 53(l0): point = 479
   Insn 52(l0): point = 481
   Insn 51(l0): point = 483
   Insn 50(l0): point = 485
   Insn 49(l0): point = 487
   Insn 48(l0): point = 489
   Insn 46(l0): point = 492
   Insn 45(l0): point = 494
   Insn 44(l0): point = 496
   Insn 42(l0): point = 499
   Insn 41(l0): point = 501
   Insn 40(l0): point = 503
   Insn 39(l0): point = 505
   Insn 333(l0): point = 508
   Insn 34(l0): point = 510
   Insn 33(l0): point = 512
   Insn 32(l0): point = 514
   Insn 30(l0): point = 517
   Insn 29(l0): point = 519
   Insn 28(l0): point = 521
   Insn 26(l0): point = 524
   Insn 25(l0): point = 526
   Insn 24(l0): point = 528
   Insn 23(l0): point = 530
   Insn 331(l0): point = 533
   Insn 18(l0): point = 535
   Insn 17(l0): point = 537
   Insn 16(l0): point = 539
   Insn 14(l0): point = 542
   Insn 13(l0): point = 544
   Insn 12(l0): point = 546
   Insn 11(l0): point = 548
   Insn 10(l0): point = 550
   Insn 9(l0): point = 552
   Insn 8(l0): point = 554
   Insn 7(l0): point = 556
   Insn 6(l0): point = 558
   Insn 5(l0): point = 560
 a0(r247): [6..7]
 a1(r147): [6..9]
 a2(r146): [10..11]
 a3(r246): [12..13]
 a4(r245): [19..20]
 a5(r145): [25..26]
 a6(r244): [27..28]
 a7(r243): [31..32]
 a8(r144): [31..34]
 a9(r143): [35..36]
 a10(r242): [37..38]
 a11(r241): [41..42]
 a12(r142): [41..44]
 a13(r141): [45..46]
 a14(r240): [47..48]
 a15(r239): [51..52]
 a16(r140): [51..59]
 a17(r238): [55..57]
 a18(r237): [58..61]
 a19(r139): [60..63]
 a20(r236): [64..65]
 a21(r234): [68..71]
 a22(r235): [68..69]
 a23(r137): [72..81]
 a24(r233): [72..73]
 a25(r232): [76..77]
 a26(r138): [76..79]
 a27(r231): [82..83]
 a28(r136): [91..92]
 a29(r230): [95..96]
 a30(r229): [97..98]
 a31(r228): [104..105]
 a32(r135): [111..112]
 a33(r227): [113..114]
 a34(r225): [118..121]
 a35(r226): [118..119]
 a36(r134): [128..129]
 a37(r224): [132..133]
 a38(r223): [134..135]
 a39(r222): [141..142]
 a40(r133): [148..149]
 a41(r221): [150..151]
 a42(r219): [155..158]
 a43(r220): [155..156]
 a44(r218): [161..162]
 a45(r217): [163..164]
 a46(r216): [207..208]
 a47(r214): [212..213]
 a48(r215): [214..215]
 a49(r131): [262..265]
 a50(r132): [262..263]
 a51(r130): [264..293]
 a52(r213): [266..267]
 a53(r212): [268..269]
 a54(r210): [274..287] [270..271]
 a55(r208): [270..291]
 a56(r211): [272..273]
 a57(r209): [276..289]
 a58(r129): [294..295]
 a59(r207): [296..297]
 a60(r206): [298..299]
 a61(r204): [304..317] [300..301]
 a62(r202): [300..321]
 a63(r205): [302..303]
 a64(r203): [306..319]
 a65(r128): [221..222]
 a66(r127): [227..230]
 a67(r126): [231..232]
 a68(r201): [233..234]
 a69(r200): [235..236]
 a70(r198): [241..254] [237..238]
 a71(r196): [237..258]
 a72(r199): [239..240]
 a73(r197): [243..256]
 a74(r125): [174..175]
 a75(r195): [176..177]
 a76(r194): [178..179]
 a77(r192): [184..197] [180..181]
 a78(r190): [180..201]
 a79(r193): [182..183]
 a80(r191): [186..199]
 a81(r189): [327..328]
 a82(r124): [335..336]
 a83(r188): [342..343]
 a84(r123): [349..350]
 a85(r187): [351..352]
 a86(r186): [356..357]
 a87(r122): [358..361]
 a88(r185): [358..359]
 a89(r184): [367..368]
 a90(r121): [369..372]
 a91(r183): [369..370]
 a92(r120): [378..379]
 a93(r182): [380..381]
 a94(r180): [387..390]
 a95(r181): [387..388]
 a96(r178): [393..396]
 a97(r179): [393..394]
 a98(r177): [402..403]
 a99(r119): [409..410]
 a100(r176): [411..412]
 a101(r174): [418..421]
 a102(r175): [418..419]
 a103(r172): [424..427]
 a104(r173): [424..425]
 a105(r171): [433..434]
 a106(r118): [440..441]
 a107(r170): [442..443]
 a108(r168): [449..452]
 a109(r169): [449..450]
 a110(r166): [455..458]
 a111(r167): [455..456]
 a112(r165): [464..465]
 a113(r117): [471..472]
 a114(r164): [473..474]
 a115(r162): [480..483]
 a116(r163): [480..481]
 a117(r160): [486..489]
 a118(r161): [486..487]
 a119(r159): [495..496]
 a120(r116): [502..503]
 a121(r158): [504..505]
 a122(r156): [511..514]
 a123(r157): [511..512]
 a124(r155): [520..521]
 a125(r115): [527..528]
 a126(r154): [529..530]
 a127(r152): [536..539]
 a128(r153): [536..537]
 a129(r151): [545..546]
 a130(r150): [549..550]
 a131(r114): [551..552]
 a132(r113): [553..554]
 a133(r149): [555..556]
 a134(r148): [559..560]
Compressing live ranges: from 563 to 218 - 38%
Ranges after the compression:
 a0(r247): [0..1]
 a1(r147): [0..1]
 a2(r146): [2..3]
 a3(r246): [4..5]
 a4(r245): [6..7]
 a5(r145): [8..9]
 a6(r244): [10..11]
 a7(r243): [12..13]
 a8(r144): [12..13]
 a9(r143): [14..15]
 a10(r242): [16..17]
 a11(r241): [18..19]
 a12(r142): [18..19]
 a13(r141): [20..21]
 a14(r240): [22..23]
 a15(r239): [24..25]
 a16(r140): [24..29]
 a17(r238): [26..27]
 a18(r237): [28..31]
 a19(r139): [30..31]
 a20(r236): [32..33]
 a21(r234): [34..35]
 a22(r235): [34..35]
 a23(r137): [36..39]
 a24(r233): [36..37]
 a25(r232): [38..39]
 a26(r138): [38..39]
 a27(r231): [40..41]
 a28(r136): [42..43]
 a29(r230): [44..45]
 a30(r229): [46..47]
 a31(r228): [48..49]
 a32(r135): [50..51]
 a33(r227): [52..53]
 a34(r225): [54..55]
 a35(r226): [54..55]
 a36(r134): [56..57]
 a37(r224): [58..59]
 a38(r223): [60..61]
 a39(r222): [62..63]
 a40(r133): [64..65]
 a41(r221): [66..67]
 a42(r219): [68..69]
 a43(r220): [68..69]
 a44(r218): [70..71]
 a45(r217): [72..73]
 a46(r216): [86..87]
 a47(r214): [88..89]
 a48(r215): [90..91]
 a49(r131): [108..111]
 a50(r132): [108..109]
 a51(r130): [110..121]
 a52(r213): [112..113]
 a53(r212): [114..115]
 a54(r210): [120..121] [116..117]
 a55(r208): [116..121]
 a56(r211): [118..119]
 a57(r209): [120..121]
 a58(r129): [122..123]
 a59(r207): [124..125]
 a60(r206): [126..127]
 a61(r204): [132..133] [128..129]
 a62(r202): [128..133]
 a63(r205): [130..131]
 a64(r203): [132..133]
 a65(r128): [92..93]
 a66(r127): [94..95]
 a67(r126): [96..97]
 a68(r201): [98..99]
 a69(r200): [100..101]
 a70(r198): [106..107] [102..103]
 a71(r196): [102..107]
 a72(r199): [104..105]
 a73(r197): [106..107]
 a74(r125): [74..75]
 a75(r195): [76..77]
 a76(r194): [78..79]
 a77(r192): [84..85] [80..81]
 a78(r190): [80..85]
 a79(r193): [82..83]
 a80(r191): [84..85]
 a81(r189): [134..135]
 a82(r124): [136..137]
 a83(r188): [138..139]
 a84(r123): [140..141]
 a85(r187): [142..143]
 a86(r186): [144..145]
 a87(r122): [146..147]
 a88(r185): [146..147]
 a89(r184): [148..149]
 a90(r121): [150..151]
 a91(r183): [150..151]
 a92(r120): [152..153]
 a93(r182): [154..155]
 a94(r180): [156..157]
 a95(r181): [156..157]
 a96(r178): [158..159]
 a97(r179): [158..159]
 a98(r177): [160..161]
 a99(r119): [162..163]
 a100(r176): [164..165]
 a101(r174): [166..167]
 a102(r175): [166..167]
 a103(r172): [168..169]
 a104(r173): [168..169]
 a105(r171): [170..171]
 a106(r118): [172..173]
 a107(r170): [174..175]
 a108(r168): [176..177]
 a109(r169): [176..177]
 a110(r166): [178..179]
 a111(r167): [178..179]
 a112(r165): [180..181]
 a113(r117): [182..183]
 a114(r164): [184..185]
 a115(r162): [186..187]
 a116(r163): [186..187]
 a117(r160): [188..189]
 a118(r161): [188..189]
 a119(r159): [190..191]
 a120(r116): [192..193]
 a121(r158): [194..195]
 a122(r156): [196..197]
 a123(r157): [196..197]
 a124(r155): [198..199]
 a125(r115): [200..201]
 a126(r154): [202..203]
 a127(r152): [204..205]
 a128(r153): [204..205]
 a129(r151): [206..207]
 a130(r150): [208..209]
 a131(r114): [210..211]
 a132(r113): [212..213]
 a133(r149): [214..215]
 a134(r148): [216..217]
  regions=1, blocks=40, points=218
    allocnos=135 (big 0), copies=0, conflicts=0, ranges=139
Disposition:
  132:r113 l0     3  131:r114 l0     3  125:r115 l0     3  120:r116 l0     3
  113:r117 l0     3  106:r118 l0     3   99:r119 l0     3   92:r120 l0     3
   90:r121 l0     3   87:r122 l0     3   84:r123 l0     3   82:r124 l0     3
   74:r125 l0     3   67:r126 l0     3   66:r127 l0     3   65:r128 l0     3
   58:r129 l0     3   51:r130 l0     1   49:r131 l0     3   50:r132 l0     2
   40:r133 l0     3   36:r134 l0     3   32:r135 l0     3   28:r136 l0     3
   23:r137 l0     3   26:r138 l0     1   19:r139 l0     3   16:r140 l0     3
   13:r141 l0     3   12:r142 l0     2    9:r143 l0     3    8:r144 l0     2
    5:r145 l0     3    2:r146 l0     3    1:r147 l0     3  134:r148 l0     3
  133:r149 l0     3  130:r150 l0     3  129:r151 l0     3  127:r152 l0     3
  128:r153 l0     2  126:r154 l0     3  124:r155 l0     3  122:r156 l0     3
  123:r157 l0     2  121:r158 l0     3  119:r159 l0     3  117:r160 l0     3
  118:r161 l0     2  115:r162 l0     3  116:r163 l0     2  114:r164 l0     3
  112:r165 l0     3  110:r166 l0     3  111:r167 l0     2  108:r168 l0     3
  109:r169 l0     2  107:r170 l0     3  105:r171 l0     3  103:r172 l0     3
  104:r173 l0     2  101:r174 l0     3  102:r175 l0     2  100:r176 l0     3
   98:r177 l0     3   96:r178 l0     3   97:r179 l0     2   94:r180 l0     3
   95:r181 l0     2   93:r182 l0     3   91:r183 l0     2   89:r184 l0     3
   88:r185 l0     2   86:r186 l0     3   85:r187 l0     3   83:r188 l0     3
   81:r189 l0     3   78:r190 l0     1   80:r191 l0     2   77:r192 l0     3
   79:r193 l0     3   76:r194 l0     3   75:r195 l0     3   71:r196 l0     1
   73:r197 l0     2   70:r198 l0     3   72:r199 l0     3   69:r200 l0     3
   68:r201 l0     3   62:r202 l0     1   64:r203 l0     2   61:r204 l0     3
   63:r205 l0     3   60:r206 l0     3   59:r207 l0     3   55:r208 l0     0
   57:r209 l0     2   54:r210 l0     3   56:r211 l0     3   53:r212 l0     3
   52:r213 l0     3   47:r214 l0     3   48:r215 l0     3   46:r216 l0     3
   45:r217 l0     3   44:r218 l0     3   42:r219 l0     3   43:r220 l0     2
   41:r221 l0     3   39:r222 l0     3   38:r223 l0     3   37:r224 l0     3
   34:r225 l0     3   35:r226 l0     2   33:r227 l0     3   31:r228 l0     3
   30:r229 l0     3   29:r230 l0     3   27:r231 l0     3   25:r232 l0     2
   24:r233 l0     2   21:r234 l0     3   22:r235 l0     2   20:r236 l0     3
   18:r237 l0     2   17:r238 l0     2   15:r239 l0     2   14:r240 l0     3
   11:r241 l0     3   10:r242 l0     3    7:r243 l0     3    6:r244 l0     3
    4:r245 l0     3    3:r246 l0     3    0:r247 l0     2
+++Costs: overall 12000, reg 12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kbd_handler2

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={15d,8u} r1={12d,4u} r2={8d} r3={8d} r11={1d,39u} r12={14d} r13={1d,46u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={30d,23u} r101={7d} r102={1d,81u} r103={1d,38u} r104={7d} r105={7d} r106={7d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,3u} r140={2d,2u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} r178={1d,1u} r179={1d,1u} r180={1d,1u} r181={1d,1u} r182={1d,1u} r183={1d,1u} r184={1d,1u} r185={1d,1u} r186={1d,1u} r187={1d,1u} r188={1d,1u} r189={1d,1u} r190={1d,1u} r191={1d,4u,3e} r192={8d,8u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r196={1d,1u} r197={1d,4u,3e} r198={8d,8u} r199={1d,1u} r200={1d,1u} r201={1d,1u} r202={1d,1u} r203={1d,4u,3e} r204={8d,8u} r205={1d,1u} r206={1d,1u} r207={1d,1u} r208={1d,1u} r209={1d,4u,3e} r210={8d,8u} r211={1d,1u} r212={1d,1u} r213={1d,1u} r214={1d,1u} r215={1d,1u} r216={1d,1u} r217={1d,1u} r218={1d,1u} r219={1d,1u} r220={1d,1u} r221={1d,1u} r222={1d,1u} r223={1d,1u} r224={1d,1u} r225={1d,1u} r226={1d,1u} r227={1d,1u} r228={1d,1u} r229={1d,1u} r230={1d,1u} r231={1d,1u} r232={1d,1u} r233={1d,1u} r234={1d,1u} r235={1d,1u} r236={1d,1u} r237={1d,1u} r238={1d,1u} r239={1d,1u} r240={1d,1u} r241={1d,1u} r242={1d,1u} r243={1d,1u} r244={1d,1u} r245={1d,1u} r246={1d,1u} r247={1d,1u} 
;;    total ref usage 1316{886d,418u,12e} in 262{255 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 148 149 150 151
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 148)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":321:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 148)) "kbd.c":321:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))
(insn 7 6 8 2 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":323:15 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_48->base+0 S4 A32])) "kbd.c":323:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 149)
        (nil)))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":323:22 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
        (nil)))
(insn 10 9 11 2 (set (reg:QI 150)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":323:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 114 [ _2 ])
        (nil)))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8])
        (reg:QI 150)) "kbd.c":323:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 150)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 151)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":326:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 151)
            (const_int 240 [0xf0]))) "kbd.c":326:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":326:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 152 153
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 3 (set (reg/f:SI 152)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":327:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 153)
        (const_int 1 [0x1])) "kbd.c":327:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 331 3 (set (mem/c:SI (reg/f:SI 152) [3 release+0 S4 A32])
        (reg:SI 153)) "kbd.c":327:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_DEAD (reg/f:SI 152)
            (nil))))
(jump_insn 331 18 332 3 (set (pc)
        (label_ref 329)) "kbd.c":328:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 332 331 21)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115 154
(code_label 21 332 22 4 65 (nil) [1 uses])
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 154)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":331:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 115 [ release.19_3 ])
        (mem/c:SI (reg/f:SI 154) [3 release+0 S4 A32])) "kbd.c":331:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 154)
        (nil)))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ release.19_3 ])
            (const_int 0 [0]))) "kbd.c":331:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ release.19_3 ])
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 37)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 155
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:SI 155)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":331:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 29 28 30 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155)
            (const_int 18 [0x12]))) "kbd.c":331:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 155)
        (nil)))
(jump_insn 30 29 31 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 37)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 156 157
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 6 (set (reg/f:SI 156)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":332:13 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 6 (set (reg:SI 157)
        (const_int 0 [0])) "kbd.c":332:13 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 333 6 (set (mem/c:SI (reg/f:SI 156) [3 release+0 S4 A32])
        (reg:SI 157)) "kbd.c":332:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg/f:SI 156)
            (nil))))
(jump_insn 333 34 334 6 (set (pc)
        (label_ref 329)) "kbd.c":333:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 334 333 37)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       4
;;              5
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 158
(code_label 37 334 38 7 67 (nil) [2 uses])
(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 7 (set (reg/f:SI 158)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":336:7 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 7 (set (reg:SI 116 [ release.20_4 ])
        (mem/c:SI (reg/f:SI 158) [3 release+0 S4 A32])) "kbd.c":336:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 158)
        (nil)))
(insn 41 40 42 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ release.20_4 ])
            (const_int 0 [0]))) "kbd.c":336:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ release.20_4 ])
        (nil)))
(jump_insn 42 41 43 7 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 56)
;;  succ:       8 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 159
(note 43 42 44 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 8 (set (reg:SI 159)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":336:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 45 44 46 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 159)
            (const_int 18 [0x12]))) "kbd.c":336:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 159)
        (nil)))
(jump_insn 46 45 47 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 56)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 160 161 162 163
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 9 (set (reg/f:SI 160)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":337:13 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 9 (set (reg:SI 161)
        (const_int 0 [0])) "kbd.c":337:13 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 9 (set (mem/c:SI (reg/f:SI 160) [3 release+0 S4 A32])
        (reg:SI 161)) "kbd.c":337:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 161)
        (expr_list:REG_DEAD (reg/f:SI 160)
            (nil))))
(insn 51 50 52 9 (set (reg/f:SI 162)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":338:13 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 9 (set (reg:SI 163)
        (const_int 0 [0])) "kbd.c":338:13 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 335 9 (set (mem/c:SI (reg/f:SI 162) [3 shifted+0 S4 A32])
        (reg:SI 163)) "kbd.c":338:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_DEAD (reg/f:SI 162)
            (nil))))
(jump_insn 335 53 336 9 (set (pc)
        (label_ref 329)) "kbd.c":339:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 336 335 56)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7
;;              8
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 117 164
(code_label 56 336 57 10 68 (nil) [2 uses])
(note 57 56 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 10 (set (reg/f:SI 164)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":342:7 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 10 (set (reg:SI 117 [ release.21_5 ])
        (mem/c:SI (reg/f:SI 164) [3 release+0 S4 A32])) "kbd.c":342:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 164)
        (nil)))
(insn 60 59 61 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ release.21_5 ])
            (const_int 0 [0]))) "kbd.c":342:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ release.21_5 ])
        (nil)))
(jump_insn 61 60 62 10 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 75)
;;  succ:       11 (FALLTHRU)
;;              13
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 165
(note 62 61 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 11 (set (reg:SI 165)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":342:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 64 63 65 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 165)
            (const_int 18 [0x12]))) "kbd.c":342:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 165)
        (nil)))
(jump_insn 65 64 66 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 75)
;;  succ:       12 (FALLTHRU)
;;              13
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 166 167 168 169
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 12 (set (reg/f:SI 166)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":343:13 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 12 (set (reg:SI 167)
        (const_int 0 [0])) "kbd.c":343:13 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 12 (set (mem/c:SI (reg/f:SI 166) [3 release+0 S4 A32])
        (reg:SI 167)) "kbd.c":343:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 167)
        (expr_list:REG_DEAD (reg/f:SI 166)
            (nil))))
(insn 70 69 71 12 (set (reg/f:SI 168)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":344:13 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 12 (set (reg:SI 169)
        (const_int 1 [0x1])) "kbd.c":344:13 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 337 12 (set (mem/c:SI (reg/f:SI 168) [3 shifted+0 S4 A32])
        (reg:SI 169)) "kbd.c":344:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 169)
        (expr_list:REG_DEAD (reg/f:SI 168)
            (nil))))
(jump_insn 337 72 338 12 (set (pc)
        (label_ref 329)) "kbd.c":345:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 338 337 75)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       10
;;              11
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 170
(code_label 75 338 76 13 69 (nil) [2 uses])
(note 76 75 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 13 (set (reg/f:SI 170)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":348:7 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 13 (set (reg:SI 118 [ release.22_6 ])
        (mem/c:SI (reg/f:SI 170) [3 release+0 S4 A32])) "kbd.c":348:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 170)
        (nil)))
(insn 79 78 80 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ release.22_6 ])
            (const_int 0 [0]))) "kbd.c":348:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ release.22_6 ])
        (nil)))
(jump_insn 80 79 81 13 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 94)
;;  succ:       14 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 171
(note 81 80 82 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 14 (set (reg:SI 171)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":348:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 83 82 84 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 171)
            (const_int 20 [0x14]))) "kbd.c":348:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 171)
        (nil)))
(jump_insn 84 83 85 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 94)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 172 173 174 175
(note 85 84 86 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 15 (set (reg/f:SI 172)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 15 (set (reg:SI 173)
        (const_int 0 [0])) "kbd.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 15 (set (mem/c:SI (reg/f:SI 172) [3 release+0 S4 A32])
        (reg:SI 173)) "kbd.c":349:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg/f:SI 172)
            (nil))))
(insn 89 88 90 15 (set (reg/f:SI 174)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":350:13 253 {*arm_movsi_insn}
     (nil))
(insn 90 89 91 15 (set (reg:SI 175)
        (const_int 1 [0x1])) "kbd.c":350:13 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 339 15 (set (mem/c:SI (reg/f:SI 174) [3 control+0 S4 A32])
        (reg:SI 175)) "kbd.c":350:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 175)
        (expr_list:REG_DEAD (reg/f:SI 174)
            (nil))))
(jump_insn 339 91 340 15 (set (pc)
        (label_ref 329)) "kbd.c":351:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 340 339 94)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL)
;;  pred:       13
;;              14
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 176
(code_label 94 340 95 16 70 (nil) [2 uses])
(note 95 94 96 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 16 (set (reg/f:SI 176)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":354:7 253 {*arm_movsi_insn}
     (nil))
(insn 97 96 98 16 (set (reg:SI 119 [ release.23_7 ])
        (mem/c:SI (reg/f:SI 176) [3 release+0 S4 A32])) "kbd.c":354:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 176)
        (nil)))
(insn 98 97 99 16 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ release.23_7 ])
            (const_int 0 [0]))) "kbd.c":354:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ release.23_7 ])
        (nil)))
(jump_insn 99 98 100 16 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 113)
;;  succ:       17 (FALLTHRU)
;;              19
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 177
(note 100 99 101 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 17 (set (reg:SI 177)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":354:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 102 101 103 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 177)
            (const_int 20 [0x14]))) "kbd.c":354:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 177)
        (nil)))
(jump_insn 103 102 104 17 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 113)
;;  succ:       18 (FALLTHRU)
;;              19
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 178 179 180 181
(note 104 103 105 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 18 (set (reg/f:SI 178)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":355:13 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 18 (set (reg:SI 179)
        (const_int 0 [0])) "kbd.c":355:13 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 18 (set (mem/c:SI (reg/f:SI 178) [3 release+0 S4 A32])
        (reg:SI 179)) "kbd.c":355:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 179)
        (expr_list:REG_DEAD (reg/f:SI 178)
            (nil))))
(insn 108 107 109 18 (set (reg/f:SI 180)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":356:13 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 18 (set (reg:SI 181)
        (const_int 0 [0])) "kbd.c":356:13 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 341 18 (set (mem/c:SI (reg/f:SI 180) [3 control+0 S4 A32])
        (reg:SI 181)) "kbd.c":356:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 181)
        (expr_list:REG_DEAD (reg/f:SI 180)
            (nil))))
(jump_insn 341 110 342 18 (set (pc)
        (label_ref 329)) "kbd.c":357:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       39 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 342 341 113)
;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL)
;;  pred:       16
;;              17
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 120 182
(code_label 113 342 114 19 71 (nil) [2 uses])
(note 114 113 115 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 19 (set (reg/f:SI 182)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":360:7 253 {*arm_movsi_insn}
     (nil))
(insn 116 115 117 19 (set (reg:SI 120 [ shifted.24_8 ])
        (mem/c:SI (reg/f:SI 182) [3 shifted+0 S4 A32])) "kbd.c":360:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 182)
        (nil)))
(insn 117 116 118 19 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120 [ shifted.24_8 ])
            (const_int 0 [0]))) "kbd.c":360:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ shifted.24_8 ])
        (nil)))
(jump_insn 118 117 119 19 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "kbd.c":360:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 126)
;;  succ:       20 (FALLTHRU)
;;              21
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL)
;;  pred:       19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 121 183 184
(note 119 118 120 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 20 (set (reg:SI 121 [ _9 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":361:14 175 {*arm_zero_extendqisi2}
     (nil))
(insn 121 120 122 20 (set (reg/f:SI 183)
        (symbol_ref:SI ("ltab") [flags 0x2]  <var_decl 0x7fcdc0b1a1b0 ltab>)) "kbd.c":361:8 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 20 (set (reg:QI 184)
        (mem:QI (plus:SI (reg/f:SI 183)
                (reg:SI 121 [ _9 ])) [0 ltab[_9]+0 S1 A8])) "kbd.c":361:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 183)
        (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
            (nil))))
(insn 123 122 343 20 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 184)) "kbd.c":361:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 184)
        (nil)))
(jump_insn 343 123 344 20 (set (pc)
        (label_ref 132)) 284 {*arm_jump}
     (nil)
 -> 132)
;;  succ:       22 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 344 343 126)
;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL)
;;  pred:       19
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 122 185 186
(code_label 126 344 127 21 72 (nil) [1 uses])
(note 127 126 128 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 21 (set (reg:SI 122 [ _10 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":363:14 175 {*arm_zero_extendqisi2}
     (nil))
(insn 129 128 130 21 (set (reg/f:SI 185)
        (symbol_ref:SI ("utab") [flags 0x2]  <var_decl 0x7fcdc0b1a360 utab>)) "kbd.c":363:8 253 {*arm_movsi_insn}
     (nil))
(insn 130 129 131 21 (set (reg:QI 186)
        (mem:QI (plus:SI (reg/f:SI 185)
                (reg:SI 122 [ _10 ])) [0 utab[_10]+0 S1 A8])) "kbd.c":363:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 185)
        (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
            (nil))))
(insn 131 130 132 21 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 186)) "kbd.c":363:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 186)
        (nil)))
;;  succ:       22 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL)
;;  pred:       21 (FALLTHRU)
;;              20 [always] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 123 187
(code_label 132 131 133 22 73 (nil) [1 uses])
(note 133 132 134 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 22 (set (reg/f:SI 187)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":366:7 253 {*arm_movsi_insn}
     (nil))
(insn 135 134 136 22 (set (reg:SI 123 [ control.25_11 ])
        (mem/c:SI (reg/f:SI 187) [3 control+0 S4 A32])) "kbd.c":366:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 187)
        (nil)))
(insn 136 135 137 22 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123 [ control.25_11 ])
            (const_int 0 [0]))) "kbd.c":366:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ control.25_11 ])
        (nil)))
(jump_insn 137 136 138 22 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 244)
;;  succ:       23 (FALLTHRU)
;;              31
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 188
(note 138 137 139 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 23 (set (reg:SI 188)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":366:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 140 139 141 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 188)
            (const_int 33 [0x21]))) "kbd.c":366:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 188)
        (nil)))
(jump_insn 141 140 142 23 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 244)
;;  succ:       24 (FALLTHRU)
;;              31
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL)
;;  pred:       23 (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 189
(note 142 141 143 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 24 (set (reg:SI 124 [ _12 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":368:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 144 143 145 24 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "kbd.c":368:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
        (nil)))
(insn 145 144 146 24 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7fcdc0b61cf0 *.LC5>)) "kbd.c":368:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 146 145 147 24 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":368:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 147 146 148 24 (set (reg:SI 189)
        (const_int 1 [0x1])) "kbd.c":369:11 253 {*arm_movsi_insn}
     (nil))
(insn 148 147 345 24 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 189)) "kbd.c":369:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 189)
        (nil)))
(jump_insn 345 148 346 24 (set (pc)
        (label_ref 227)) "kbd.c":369:5 284 {*arm_jump}
     (nil)
 -> 227)
;;  succ:       29 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 346 345 229)
;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL)
;;  pred:       29
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 125 190 191 192 193 194 195
(code_label 229 346 151 25 77 (nil) [1 uses])
(note 151 229 152 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 25 (set (reg/f:SI 190)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 25 (set (reg:SI 191)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 154 153 155 25 (set (reg:SI 192)
        (reg:SI 191)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 25 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 6 [0x6]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 156 155 157 25 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 65 [0x41]))
        (nil)))
(insn 157 156 158 25 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 1 [0x1]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 158 157 159 25 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 131 [0x83]))
        (nil)))
(insn 159 158 160 25 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 3 [0x3]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 160 159 161 25 (set (reg:SI 192)
        (minus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 191)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
                (const_int 1047 [0x417]))
            (nil))))
(insn 161 160 162 25 (set (reg:SI 193)
        (ashift:SI (reg:SI 192)
            (const_int 2 [0x2]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 192)
        (nil)))
(insn 162 161 163 25 (set (reg:SI 192)
        (reg:SI 193)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 193)
        (nil)))
(insn 163 162 164 25 (set (reg:SI 194)
        (plus:SI (reg/f:SI 190)
            (reg:SI 192))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 192)
        (expr_list:REG_DEAD (reg/f:SI 190)
            (nil))))
(insn 164 163 165 25 (set (reg/f:SI 195)
        (plus:SI (reg:SI 194)
            (const_int 28 [0x1c]))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 194)
        (nil)))
(insn 165 164 166 25 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 195) [3 proc[i_41].status+0 S4 A32])) "kbd.c":370:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 195)
        (nil)))
(insn 166 165 167 25 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "kbd.c":370:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 125 [ _13 ])
        (nil)))
(jump_insn 167 166 168 25 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 222)
;;  succ:       26 (FALLTHRU)
;;              28
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (RTL)
;;  pred:       25 (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 126 127 128 196 197 198 199 200 201
(note 168 167 169 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 26 (set (reg/f:SI 196)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 170 169 171 26 (set (reg:SI 197)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 172 26 (set (reg:SI 198)
        (reg:SI 197)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 172 171 173 26 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 6 [0x6]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 173 172 174 26 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 65 [0x41]))
        (nil)))
(insn 174 173 175 26 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 1 [0x1]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 175 174 176 26 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 131 [0x83]))
        (nil)))
(insn 176 175 177 26 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 3 [0x3]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 177 176 178 26 (set (reg:SI 198)
        (minus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 197)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
                (const_int 1047 [0x417]))
            (nil))))
(insn 178 177 179 26 (set (reg:SI 199)
        (ashift:SI (reg:SI 198)
            (const_int 2 [0x2]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 198)
        (nil)))
(insn 179 178 180 26 (set (reg:SI 198)
        (reg:SI 199)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 199)
        (nil)))
(insn 180 179 181 26 (set (reg:SI 200)
        (plus:SI (reg/f:SI 196)
            (reg:SI 198))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 198)
        (expr_list:REG_DEAD (reg/f:SI 196)
            (nil))))
(insn 181 180 182 26 (set (reg/f:SI 201)
        (plus:SI (reg:SI 200)
            (const_int 84 [0x54]))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 200)
        (nil)))
(insn 182 181 183 26 (set (reg/f:SI 126 [ _14 ])
        (mem/f:SI (reg/f:SI 201) [9 proc[i_41].res+0 S4 A32])) "kbd.c":370:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 201)
        (nil)))
(insn 183 182 184 26 (set (reg/f:SI 127 [ _15 ])
        (plus:SI (reg/f:SI 126 [ _14 ])
            (const_int 60 [0x3c]))) "kbd.c":370:55 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 126 [ _14 ])
        (nil)))
(insn 184 183 185 26 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":370:37 253 {*arm_movsi_insn}
     (nil))
(insn 185 184 186 26 (set (reg:SI 0 r0)
        (reg/f:SI 127 [ _15 ])) "kbd.c":370:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127 [ _15 ])
        (nil)))
(call_insn/i 186 185 187 26 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":370:37 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 187 186 188 26 (set (reg:SI 128 [ _16 ])
        (reg:SI 0 r0)) "kbd.c":370:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 188 187 189 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 128 [ _16 ])
            (const_int 0 [0]))) "kbd.c":370:34 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 128 [ _16 ])
        (nil)))
(jump_insn 189 188 190 26 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:34 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 222)
;;  succ:       27 (FALLTHRU)
;;              28
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (RTL)
;;  pred:       26 (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 129 130 131 132 202 203 204 205 206 207 208 209 210 211 212 213
(note 190 189 191 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 27 (set (reg/f:SI 202)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 192 191 193 27 (set (reg:SI 203)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 193 192 194 27 (set (reg:SI 204)
        (reg:SI 203)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 194 193 195 27 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 6 [0x6]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 195 194 196 27 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 65 [0x41]))
        (nil)))
(insn 196 195 197 27 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 1 [0x1]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 197 196 198 27 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 131 [0x83]))
        (nil)))
(insn 198 197 199 27 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 3 [0x3]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 199 198 200 27 (set (reg:SI 204)
        (minus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 203)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
                (const_int 1047 [0x417]))
            (nil))))
(insn 200 199 201 27 (set (reg:SI 205)
        (ashift:SI (reg:SI 204)
            (const_int 2 [0x2]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 204)
        (nil)))
(insn 201 200 202 27 (set (reg:SI 204)
        (reg:SI 205)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 205)
        (nil)))
(insn 202 201 203 27 (set (reg:SI 206)
        (plus:SI (reg/f:SI 202)
            (reg:SI 204))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 204)
        (expr_list:REG_DEAD (reg/f:SI 202)
            (nil))))
(insn 203 202 204 27 (set (reg/f:SI 207)
        (plus:SI (reg:SI 206)
            (const_int 84 [0x54]))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 206)
        (nil)))
(insn 204 203 205 27 (set (reg/f:SI 129 [ _17 ])
        (mem/f:SI (reg/f:SI 207) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 207)
        (nil)))
(insn 205 204 206 27 (set (reg:SI 130 [ _18 ])
        (mem:SI (plus:SI (reg/f:SI 129 [ _17 ])
                (const_int 92 [0x5c])) [3 _17->signal+0 S4 A32])) "kbd.c":371:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129 [ _17 ])
        (nil)))
(insn 206 205 207 27 (set (reg/f:SI 208)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 207 206 208 27 (set (reg:SI 209)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 208 207 209 27 (set (reg:SI 210)
        (reg:SI 209)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 209 208 210 27 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 6 [0x6]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 210 209 211 27 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 65 [0x41]))
        (nil)))
(insn 211 210 212 27 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 1 [0x1]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 212 211 213 27 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 131 [0x83]))
        (nil)))
(insn 213 212 214 27 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 3 [0x3]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 214 213 215 27 (set (reg:SI 210)
        (minus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 209)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
                (const_int 1047 [0x417]))
            (nil))))
(insn 215 214 216 27 (set (reg:SI 211)
        (ashift:SI (reg:SI 210)
            (const_int 2 [0x2]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 210)
        (nil)))
(insn 216 215 217 27 (set (reg:SI 210)
        (reg:SI 211)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 211)
        (nil)))
(insn 217 216 218 27 (set (reg:SI 212)
        (plus:SI (reg/f:SI 208)
            (reg:SI 210))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 210)
        (expr_list:REG_DEAD (reg/f:SI 208)
            (nil))))
(insn 218 217 219 27 (set (reg/f:SI 213)
        (plus:SI (reg:SI 212)
            (const_int 84 [0x54]))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 212)
        (nil)))
(insn 219 218 220 27 (set (reg/f:SI 131 [ _19 ])
        (mem/f:SI (reg/f:SI 213) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 213)
        (nil)))
(insn 220 219 221 27 (set (reg:SI 132 [ _20 ])
        (ior:SI (reg:SI 130 [ _18 ])
            (const_int 4 [0x4]))) "kbd.c":371:22 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 130 [ _18 ])
        (nil)))
(insn 221 220 222 27 (set (mem:SI (plus:SI (reg/f:SI 131 [ _19 ])
                (const_int 92 [0x5c])) [3 _19->signal+0 S4 A32])
        (reg:SI 132 [ _20 ])) "kbd.c":371:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 132 [ _20 ])
        (expr_list:REG_DEAD (reg/f:SI 131 [ _19 ])
            (nil))))
;;  succ:       28 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL)
;;  pred:       25
;;              26
;;              27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 214 215
(code_label 222 221 223 28 76 (nil) [2 uses])
(note 223 222 224 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 28 (set (reg:SI 215)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:25 253 {*arm_movsi_insn}
     (nil))
(insn 225 224 226 28 (set (reg:SI 214)
        (plus:SI (reg:SI 215)
            (const_int 1 [0x1]))) "kbd.c":369:25 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 215)
        (nil)))
(insn 226 225 227 28 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 214)) "kbd.c":369:25 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 214)
        (nil)))
;;  succ:       29 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL)
;;  pred:       28 (FALLTHRU,DFS_BACK)
;;              24 [always] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 216
(code_label 227 226 228 29 75 (nil) [1 uses])
(note 228 227 232 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 232 228 233 29 (set (reg:SI 216)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:16 253 {*arm_movsi_insn}
     (nil))
(insn 233 232 234 29 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 216)
            (const_int 63 [0x3f]))) "kbd.c":369:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 216)
        (nil)))
(jump_insn 234 233 235 29 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 229)
            (pc))) "kbd.c":369:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 229)
;;  succ:       25
;;              30 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 217 218 219 220
(note 235 234 236 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 30 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7fcdc0b61d80 *.LC6>)) "kbd.c":374:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 237 236 238 30 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":374:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 238 237 239 30 (set (reg:SI 217)
        (const_int 13 [0xd])) "kbd.c":375:7 253 {*arm_movsi_insn}
     (nil))
(insn 239 238 240 30 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) "kbd.c":375:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 217)
        (nil)))
(insn 240 239 241 30 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 218)) "kbd.c":375:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 218)
        (nil)))
(insn 241 240 242 30 (set (reg/f:SI 219)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":377:13 253 {*arm_movsi_insn}
     (nil))
(insn 242 241 243 30 (set (reg:SI 220)
        (const_int 0 [0])) "kbd.c":377:13 253 {*arm_movsi_insn}
     (nil))
(insn 243 242 244 30 (set (mem/c:SI (reg/f:SI 219) [3 control+0 S4 A32])
        (reg:SI 220)) "kbd.c":377:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 220)
        (expr_list:REG_DEAD (reg/f:SI 219)
            (nil))))
;;  succ:       31 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL)
;;  pred:       22
;;              23
;;              30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 133 221
(code_label 244 243 245 31 74 (nil) [2 uses])
(note 245 244 246 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 31 (set (reg/f:SI 221)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":380:7 253 {*arm_movsi_insn}
     (nil))
(insn 247 246 248 31 (set (reg:SI 133 [ control.26_21 ])
        (mem/c:SI (reg/f:SI 221) [3 control+0 S4 A32])) "kbd.c":380:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 221)
        (nil)))
(insn 248 247 249 31 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133 [ control.26_21 ])
            (const_int 0 [0]))) "kbd.c":380:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 133 [ control.26_21 ])
        (nil)))
(jump_insn 249 248 250 31 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 265)
;;  succ:       32 (FALLTHRU)
;;              34
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (RTL)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 222
(note 250 249 251 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 32 (set (reg:SI 222)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":380:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 252 251 253 32 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 222)
            (const_int 35 [0x23]))) "kbd.c":380:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 222)
        (nil)))
(jump_insn 253 252 254 32 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 265)
;;  succ:       33 (FALLTHRU)
;;              34
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (RTL)
;;  pred:       32 (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 134 223 224 225 226
(note 254 253 255 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 33 (set (reg:SI 223)
        (const_int 4 [0x4])) "kbd.c":381:7 253 {*arm_movsi_insn}
     (nil))
(insn 256 255 257 33 (set (reg:QI 224)
        (subreg:QI (reg:SI 223) 0)) "kbd.c":381:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 223)
        (nil)))
(insn 257 256 258 33 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 224)) "kbd.c":381:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 224)
        (nil)))
(insn 258 257 259 33 (set (reg:SI 134 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":382:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 259 258 260 33 (set (reg:SI 1 r1)
        (reg:SI 134 [ _22 ])) "kbd.c":382:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134 [ _22 ])
        (nil)))
(insn 260 259 261 33 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":382:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 261 260 262 33 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":382:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 262 261 263 33 (set (reg/f:SI 225)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":383:13 253 {*arm_movsi_insn}
     (nil))
(insn 263 262 264 33 (set (reg:SI 226)
        (const_int 0 [0])) "kbd.c":383:13 253 {*arm_movsi_insn}
     (nil))
(insn 264 263 265 33 (set (mem/c:SI (reg/f:SI 225) [3 control+0 S4 A32])
        (reg:SI 226)) "kbd.c":383:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 226)
        (expr_list:REG_DEAD (reg/f:SI 225)
            (nil))))
;;  succ:       34 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (RTL)
;;  pred:       31
;;              32
;;              33 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 135 227
(code_label 265 264 266 34 78 (nil) [2 uses])
(note 266 265 267 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 34 (set (reg/f:SI 227)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":386:7 253 {*arm_movsi_insn}
     (nil))
(insn 268 267 269 34 (set (reg:SI 135 [ control.27_23 ])
        (mem/c:SI (reg/f:SI 227) [3 control+0 S4 A32])) "kbd.c":386:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 227)
        (nil)))
(insn 269 268 270 34 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135 [ control.27_23 ])
            (const_int 0 [0]))) "kbd.c":386:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 135 [ control.27_23 ])
        (nil)))
(jump_insn 270 269 271 34 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 283)
;;  succ:       35 (FALLTHRU)
;;              37
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (RTL)
;;  pred:       34 (FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 228
(note 271 270 272 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 35 (set (reg:SI 228)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":386:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 273 272 274 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 228)
            (const_int 35 [0x23]))) "kbd.c":386:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 228)
        (nil)))
(jump_insn 274 273 275 35 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 283)
;;  succ:       36 (FALLTHRU)
;;              37
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (RTL)
;;  pred:       35 (FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 136 229 230
(note 275 274 276 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 36 (set (reg:SI 229)
        (const_int 4 [0x4])) "kbd.c":387:7 253 {*arm_movsi_insn}
     (nil))
(insn 277 276 278 36 (set (reg:QI 230)
        (subreg:QI (reg:SI 229) 0)) "kbd.c":387:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 229)
        (nil)))
(insn 278 277 279 36 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 230)) "kbd.c":387:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 230)
        (nil)))
(insn 279 278 280 36 (set (reg:SI 136 [ _24 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":388:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 280 279 281 36 (set (reg:SI 1 r1)
        (reg:SI 136 [ _24 ])) "kbd.c":388:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136 [ _24 ])
        (nil)))
(insn 281 280 282 36 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":388:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 282 281 283 36 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":388:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       37 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (RTL)
;;  pred:       34
;;              35
;;              36 (FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 137 138 139 140 141 142 143 144 145 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245
(code_label 283 282 284 37 79 (nil) [2 uses])
(note 284 283 285 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 37 (set (reg/f:SI 231)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:13 253 {*arm_movsi_insn}
     (nil))
(insn 286 285 287 37 (set (reg:SI 137 [ _25 ])
        (mem/v:SI (plus:SI (reg/f:SI 231)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":391:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 231)
        (nil)))
(insn 287 286 288 37 (set (reg:SI 138 [ _27 ])
        (plus:SI (reg:SI 137 [ _25 ])
            (const_int 1 [0x1]))) "kbd.c":391:19 7 {*arm_addsi3}
     (nil))
(insn 288 287 289 37 (set (reg/f:SI 232)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:19 253 {*arm_movsi_insn}
     (nil))
(insn 289 288 290 37 (set (mem/v:SI (plus:SI (reg/f:SI 232)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 138 [ _27 ])) "kbd.c":391:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 232)
        (expr_list:REG_DEAD (reg:SI 138 [ _27 ])
            (nil))))
(insn 290 289 291 37 (set (reg/f:SI 233)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:23 253 {*arm_movsi_insn}
     (nil))
(insn 291 290 292 37 (set (reg/f:SI 234)
        (plus:SI (reg/f:SI 233)
            (reg:SI 137 [ _25 ]))) "kbd.c":391:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 233)
        (expr_list:REG_DEAD (reg:SI 137 [ _25 ])
            (nil))))
(insn 292 291 293 37 (set (reg:QI 235)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":391:23 263 {*arm_movqi_insn}
     (nil))
(insn 293 292 294 37 (set (mem/v:QI (plus:SI (reg/f:SI 234)
                (const_int 4 [0x4])) [0 kp_48->buf[_26]+0 S1 A8])
        (reg:QI 235)) "kbd.c":391:23 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 235)
        (expr_list:REG_DEAD (reg/f:SI 234)
            (nil))))
(insn 294 293 295 37 (set (reg/f:SI 236)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 295 294 296 37 (set (reg:SI 139 [ _28 ])
        (mem/v:SI (plus:SI (reg/f:SI 236)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 236)
        (nil)))
(insn 296 295 297 37 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 139 [ _28 ]))
                    (const_int 0 [0])))
            (set (reg:SI 237)
                (minus:SI (const_int 0 [0])
                    (reg:SI 139 [ _28 ])))
        ]) "kbd.c":392:12 46 {subsi3_compare0}
     (nil))
(insn 297 296 298 37 (set (reg:SI 140 [ _29 ])
        (and:SI (reg:SI 139 [ _28 ])
            (const_int 127 [0x7f]))) "kbd.c":392:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 139 [ _28 ])
        (nil)))
(insn 298 297 299 37 (set (reg:SI 238)
        (and:SI (reg:SI 237)
            (const_int 127 [0x7f]))) "kbd.c":392:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 237)
        (nil)))
(insn 299 298 300 37 (set (reg:SI 140 [ _29 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 238))
            (reg:SI 140 [ _29 ]))) "kbd.c":392:12 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 238)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 300 299 301 37 (set (reg/f:SI 239)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 301 300 302 37 (set (mem/v:SI (plus:SI (reg/f:SI 239)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 140 [ _29 ])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 239)
        (expr_list:REG_DEAD (reg:SI 140 [ _29 ])
            (nil))))
(insn 302 301 303 37 (set (reg/f:SI 240)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:5 253 {*arm_movsi_insn}
     (nil))
(insn 303 302 304 37 (set (reg:SI 141 [ _30 ])
        (mem/v:SI (plus:SI (reg/f:SI 240)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])) "kbd.c":393:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 240)
        (nil)))
(insn 304 303 305 37 (set (reg:SI 142 [ _31 ])
        (plus:SI (reg:SI 141 [ _30 ])
            (const_int 1 [0x1]))) "kbd.c":393:11 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 141 [ _30 ])
        (nil)))
(insn 305 304 306 37 (set (reg/f:SI 241)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:11 253 {*arm_movsi_insn}
     (nil))
(insn 306 305 307 37 (set (mem/v:SI (plus:SI (reg/f:SI 241)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])
        (reg:SI 142 [ _31 ])) "kbd.c":393:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 241)
        (expr_list:REG_DEAD (reg:SI 142 [ _31 ])
            (nil))))
(insn 307 306 308 37 (set (reg/f:SI 242)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:17 253 {*arm_movsi_insn}
     (nil))
(insn 308 307 309 37 (set (reg:SI 143 [ _32 ])
        (mem/v:SI (plus:SI (reg/f:SI 242)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])) "kbd.c":393:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 242)
        (nil)))
(insn 309 308 310 37 (set (reg:SI 144 [ _33 ])
        (plus:SI (reg:SI 143 [ _32 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":393:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 143 [ _32 ])
        (nil)))
(insn 310 309 311 37 (set (reg/f:SI 243)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:23 253 {*arm_movsi_insn}
     (nil))
(insn 311 310 312 37 (set (mem/v:SI (plus:SI (reg/f:SI 243)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])
        (reg:SI 144 [ _33 ])) "kbd.c":393:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 243)
        (expr_list:REG_DEAD (reg:SI 144 [ _33 ])
            (nil))))
(insn 312 311 313 37 (set (reg:SI 244)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":394:3 253 {*arm_movsi_insn}
     (nil))
(insn 313 312 314 37 (set (reg/f:SI 145 [ _34 ])
        (plus:SI (reg:SI 244)
            (const_int 140 [0x8c]))) "kbd.c":394:3 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 244)
        (nil)))
(insn 314 313 315 37 (set (reg:SI 0 r0)
        (reg/f:SI 145 [ _34 ])) "kbd.c":394:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 145 [ _34 ])
        (nil)))
(call_insn 315 314 316 37 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":394:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 316 315 317 37 (set (reg:SI 245)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":396:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 317 316 318 37 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 245)
            (const_int 13 [0xd]))) "kbd.c":396:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 245)
        (nil)))
(jump_insn 318 317 319 37 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 329)
            (pc))) "kbd.c":396:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 329)
;;  succ:       38 (FALLTHRU)
;;              39
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (RTL)
;;  pred:       37 (FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 146 147 246 247
(note 319 318 320 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 321 38 (set (reg/f:SI 246)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 321 320 322 38 (set (reg:SI 146 [ kline.28_35 ])
        (mem/v/c:SI (reg/f:SI 246) [3 kline+0 S4 A32])) "kbd.c":397:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 246)
        (nil)))
(insn 322 321 323 38 (set (reg:SI 147 [ _36 ])
        (plus:SI (reg:SI 146 [ kline.28_35 ])
            (const_int 1 [0x1]))) "kbd.c":397:10 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 146 [ kline.28_35 ])
        (nil)))
(insn 323 322 324 38 (set (reg/f:SI 247)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 324 323 325 38 (set (mem/v/c:SI (reg/f:SI 247) [3 kline+0 S4 A32])
        (reg:SI 147 [ _36 ])) "kbd.c":397:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 247)
        (expr_list:REG_DEAD (reg:SI 147 [ _36 ])
            (nil))))
(insn 325 324 326 38 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":398:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 326 325 329 38 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":398:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       39 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 1, flags: (RTL)
;;  pred:       38 (FALLTHRU)
;;              37
;;              3 [always] 
;;              6 [always] 
;;              9 [always] 
;;              12 [always] 
;;              15 [always] 
;;              18 [always] 
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 329 326 330 39 64 (nil) [7 uses])
(note 330 329 0 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kbd_handler (kbd_handler, funcdef_no=7, decl_uid=4544, cgraph_uid=8, symbol_order=22)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 7 count 7 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 6 5
;; 2 succs { 3 4 }
;; 3 succs { 6 }
;; 4 succs { 6 }
;; 6 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 15.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 23(l0): point = 1
   Insn 15(l0): point = 4
   Insn 20(l0): point = 7
   Insn 10(l0): point = 9
   Insn 8(l0): point = 12
   Insn 7(l0): point = 14
   Insn 6(l0): point = 16
   Insn 5(l0): point = 18
 a0(r113): [15..16]
 a1(r114): [17..18]
Compressing live ranges: from 21 to 4 - 19%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r114): [2..3]
  regions=1, blocks=7, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    0:r113 l0     3    1:r114 l0     3
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kbd_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={3d} r1={3d} r2={3d} r3={3d} r11={1d,6u} r12={4d} r13={1d,8u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,6u} r103={1d,5u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 234{206d,28u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 114)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":404:14 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ keyset.29_1 ])
        (mem/v/c:SI (reg/f:SI 114) [3 keyset+0 S4 A32])) "kbd.c":404:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 114)
        (nil)))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ keyset.29_1 ])
            (const_int 1 [0x1]))) "kbd.c":404:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ keyset.29_1 ])
        (nil)))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "kbd.c":404:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 13)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 10 9 20 3 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler1") [flags 0x3]  <function_decl 0x7fcdc0b26700 kbd_handler1>) [0 kbd_handler1 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":405:5 290 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 20 10 21 3 (set (pc)
        (label_ref:SI 24)) "kbd.c":408:1 284 {*arm_jump}
     (nil)
 -> 24)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 21 20 13)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 6, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 13 21 14 4 83 (nil) [1 uses])
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 24 4 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler2") [flags 0x3]  <function_decl 0x7fcdc0b26d00 kbd_handler2>) [0 kbd_handler2 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":407:5 290 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 24 15 22 6 85 (nil) [1 uses])
(note 22 24 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 18 6 (const_int 0 [0]) "kbd.c":408:1 311 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 [always]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 18 23 19 5 82 (nil) [0 uses])
(note 19 18 0 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kgetc (kgetc, funcdef_no=8, decl_uid=4546, cgraph_uid=9, symbol_order=23)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 52.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a1(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a2(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a12(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a15(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a19(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a26(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 61(l0): point = 0
   Insn 60(l0): point = 2
   Insn 56(l0): point = 4
   Insn 53(l0): point = 6
   Insn 52(l0): point = 8
   Insn 51(l0): point = 10
   Insn 50(l0): point = 12
   Insn 49(l0): point = 14
   Insn 48(l0): point = 16
   Insn 47(l0): point = 18
   Insn 46(l0): point = 20
   Insn 45(l0): point = 22
   Insn 44(l0): point = 24
   Insn 43(l0): point = 26
   Insn 42(l0): point = 28
   Insn 41(l0): point = 30
   Insn 40(l0): point = 32
   Insn 39(l0): point = 34
   Insn 38(l0): point = 37
   Insn 37(l0): point = 39
   Insn 36(l0): point = 41
   Insn 35(l0): point = 43
   Insn 34(l0): point = 45
   Insn 33(l0): point = 47
   Insn 32(l0): point = 49
   Insn 31(l0): point = 51
   Insn 30(l0): point = 53
   Insn 29(l0): point = 55
   Insn 28(l0): point = 57
   Insn 27(l0): point = 59
   Insn 26(l0): point = 61
   Insn 25(l0): point = 63
   Insn 16(l0): point = 66
   Insn 15(l0): point = 68
   Insn 14(l0): point = 70
   Insn 13(l0): point = 72
   Insn 12(l0): point = 74
   Insn 11(l0): point = 76
   Insn 23(l0): point = 79
   Insn 22(l0): point = 81
   Insn 20(l0): point = 83
   Insn 19(l0): point = 85
   Insn 63(l0): point = 88
   Insn 7(l0): point = 90
   Insn 6(l0): point = 92
   Insn 5(l0): point = 94
 a0(r124): [3..4]
 a1(r123): [5..6]
 a2(r140): [11..12]
 a3(r122): [11..14]
 a4(r121): [15..16]
 a5(r139): [17..18]
 a6(r138): [21..22]
 a7(r120): [21..24]
 a8(r119): [25..26]
 a9(r137): [27..28]
 a10(r136): [31..32]
 a11(r118): [31..39]
 a12(r135): [35..37]
 a13(r134): [38..41]
 a14(r117): [40..43]
 a15(r133): [44..45]
 a16(r132): [48..49]
 a17(r131): [50..51]
 a18(r115): [52..61]
 a19(r130): [52..53]
 a20(r129): [56..57]
 a21(r116): [56..59]
 a22(r128): [62..63]
 a23(r114): [82..83]
 a24(r127): [84..85]
 a25(r113): [71..72]
 a26(r126): [73..74]
 a27(r125): [93..94]
Compressing live ranges: from 97 to 46 - 47%
Ranges after the compression:
 a0(r124): [0..1]
 a1(r123): [2..3]
 a2(r140): [4..5]
 a3(r122): [4..5]
 a4(r121): [6..7]
 a5(r139): [8..9]
 a6(r138): [10..11]
 a7(r120): [10..11]
 a8(r119): [12..13]
 a9(r137): [14..15]
 a10(r136): [16..17]
 a11(r118): [16..21]
 a12(r135): [18..19]
 a13(r134): [20..23]
 a14(r117): [22..23]
 a15(r133): [24..25]
 a16(r132): [26..27]
 a17(r131): [28..29]
 a18(r115): [30..33]
 a19(r130): [30..31]
 a20(r129): [32..33]
 a21(r116): [32..33]
 a22(r128): [34..35]
 a23(r114): [40..41]
 a24(r127): [42..43]
 a25(r113): [36..37]
 a26(r126): [38..39]
 a27(r125): [44..45]
  regions=1, blocks=6, points=46
    allocnos=28 (big 0), copies=0, conflicts=0, ranges=28
Disposition:
   25:r113 l0     3   23:r114 l0     3   18:r115 l0     3   21:r116 l0     1
   14:r117 l0     3   11:r118 l0     3    8:r119 l0     3    7:r120 l0     2
    4:r121 l0     3    3:r122 l0     2    1:r123 l0     3    0:r124 l0     3
   27:r125 l0     3   26:r126 l0     3   24:r127 l0     3   22:r128 l0     3
   20:r129 l0     2   19:r130 l0     2   17:r131 l0     3   16:r132 l0     3
   15:r133 l0     3   13:r134 l0     2   12:r135 l0     2   10:r136 l0     2
    9:r137 l0     3    6:r138 l0     3    5:r139 l0     3    2:r140 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kgetc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={8d,3u} r1={6d} r2={6d} r3={6d} r11={1d,5u} r12={10d} r13={1d,10u} r14={6d} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={7d,2u} r101={5d} r102={1d,19u} r103={1d,4u} r104={5d} r105={5d} r106={5d} r113={1d,1u} r114={1d,1u} r115={1d,2u} r116={1d,1u} r117={1d,3u} r118={2d,2u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} 
;;    total ref usage 602{527d,75u,0e} in 46{41 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 125
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 125)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":414:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 125)) "kbd.c":414:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 125)
        (nil)))
(call_insn 7 6 63 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":416:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 63 7 64 2 (set (pc)
        (label_ref 17)) "kbd.c":418:8 284 {*arm_jump}
     (nil)
 -> 17)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 64 63 21)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 126
(code_label 21 64 10 3 90 (nil) [1 uses])
(note 10 21 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 11 10 12 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":419:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 12 11 13 3 (set (reg:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":420:5 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg/f:SI 113 [ _1 ])
        (plus:SI (reg:SI 126)
            (const_int 140 [0x8c]))) "kbd.c":420:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ _1 ])) "kbd.c":420:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
        (nil)))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":420:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":421:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 127
(code_label 17 16 18 4 89 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":418:11 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 22 4 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":418:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 22 20 23 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "kbd.c":418:18 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":418:18 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 117 118 119 120 121 122 123 124 128 129 130 131 132 133 134 135 136 137 138 139 140
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:17 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 5 (set (reg:SI 115 [ _3 ])
        (mem/v:SI (plus:SI (reg/f:SI 128)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":424:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 128)
        (nil)))
(insn 27 26 28 5 (set (reg:SI 116 [ _5 ])
        (plus:SI (reg:SI 115 [ _3 ])
            (const_int 1 [0x1]))) "kbd.c":424:23 7 {*arm_addsi3}
     (nil))
(insn 28 27 29 5 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:23 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 116 [ _5 ])) "kbd.c":424:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (expr_list:REG_DEAD (reg:SI 116 [ _5 ])
            (nil))))
(insn 30 29 31 5 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:5 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 5 (set (reg/f:SI 131)
        (plus:SI (reg/f:SI 130)
            (reg:SI 115 [ _3 ]))) "kbd.c":424:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 130)
        (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
            (nil))))
(insn 32 31 33 5 (set (reg:QI 132)
        (mem/v:QI (plus:SI (reg/f:SI 131)
                (const_int 4 [0x4])) [0 kp_13->buf[_4]+0 S1 A8])) "kbd.c":424:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 33 32 34 5 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 132)) "kbd.c":424:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 132)
        (nil)))
(insn 34 33 35 5 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 5 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 133)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))
(insn 36 35 37 5 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 134)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":425:12 46 {subsi3_compare0}
     (nil))
(insn 37 36 38 5 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":425:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ _6 ])
        (nil)))
(insn 38 37 39 5 (set (reg:SI 135)
        (and:SI (reg:SI 134)
            (const_int 127 [0x7f]))) "kbd.c":425:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 39 38 40 5 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 135))
            (reg:SI 118 [ _7 ]))) "kbd.c":425:12 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 135)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 40 39 41 5 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 136)
        (expr_list:REG_DEAD (reg:SI 118 [ _7 ])
            (nil))))
(insn 42 41 43 5 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:5 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":426:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 44 43 45 5 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":426:11 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 119 [ _8 ])
        (nil)))
(insn 45 44 46 5 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:11 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 5 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":426:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (expr_list:REG_DEAD (reg:SI 120 [ _9 ])
            (nil))))
(insn 47 46 48 5 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:17 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])) "kbd.c":426:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))
(insn 49 48 50 5 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":426:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 121 [ _10 ])
        (nil)))
(insn 50 49 51 5 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:23 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 5 (set (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":426:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_DEAD (reg:SI 122 [ _11 ])
            (nil))))
(call_insn 52 51 53 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":427:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 53 52 56 5 (set (reg:SI 123 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":428:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 56 53 60 5 (set (reg:SI 124 [ <retval> ])
        (reg:SI 123 [ _22 ])) "kbd.c":428:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _22 ])
        (nil)))
(insn 60 56 61 5 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "kbd.c":429:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ <retval> ])
        (nil)))
(insn 61 60 0 5 (use (reg/i:SI 0 r0)) "kbd.c":429:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kgets (kgets, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=24)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, multiple latches: 5 4
;;  depth 1, outer 0
;;  nodes: 6 5 4 3
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 41.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a1(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:2000
  a2(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a3(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a5(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a6(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a8(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a9(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a10(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 51(l0): point = 0
   Insn 50(l0): point = 2
   Insn 46(l0): point = 4
   Insn 43(l0): point = 6
   Insn 42(l0): point = 8
   Insn 41(l0): point = 10
   Insn 40(l0): point = 12
   Insn 39(l0): point = 14
   Insn 38(l0): point = 16
   Insn 37(l0): point = 18
   Insn 36(l0): point = 20
   Insn 11(l0): point = 23
   Insn 10(l0): point = 25
   Insn 9(l0): point = 27
   Insn 34(l0): point = 30
   Insn 33(l0): point = 32
   Insn 32(l0): point = 34
   Insn 30(l0): point = 36
   Insn 29(l0): point = 38
   Insn 28(l0): point = 40
   Insn 27(l0): point = 42
   Insn 24(l0): point = 45
   Insn 23(l0): point = 47
   Insn 22(l0): point = 49
   Insn 21(l0): point = 51
   Insn 20(l0): point = 53
   Insn 55(l0): point = 56
   Insn 15(l0): point = 58
   Insn 14(l0): point = 60
   Insn 13(l0): point = 62
   Insn 53(l0): point = 65
   Insn 2(l0): point = 67
 a0(r117): [3..4]
 a1(r116): [5..6]
 a2(r115): [7..8]
 a3(r125): [15..20]
 a4(r127): [15..16]
 a5(r126): [17..18]
 a6(r124): [33..34]
 a7(r123): [37..38]
 a8(r114): [39..40]
 a9(r113): [46..53]
 a10(r122): [46..47]
 a11(r121): [50..51]
 a12(r119): [59..60]
 a13(r120): [61..62]
 a14(r118): [26..27]
Compressing live ranges: from 70 to 26 - 37%
Ranges after the compression:
 a0(r117): [0..1]
 a1(r116): [2..3]
 a2(r115): [4..5]
 a3(r125): [6..9]
 a4(r127): [6..7]
 a5(r126): [8..9]
 a6(r124): [12..13]
 a7(r123): [14..15]
 a8(r114): [16..17]
 a9(r113): [18..21]
 a10(r122): [18..19]
 a11(r121): [20..21]
 a12(r119): [22..23]
 a13(r120): [24..25]
 a14(r118): [10..11]
  regions=1, blocks=8, points=26
    allocnos=15 (big 0), copies=0, conflicts=0, ranges=15
Disposition:
    9:r113 l0     3    8:r114 l0     3    2:r115 l0     3    1:r116 l0     3
    0:r117 l0     3   14:r118 l0     3   12:r119 l0     3   13:r120 l0     3
   11:r121 l0     2   10:r122 l0     2    7:r123 l0     3    6:r124 l0     3
    3:r125 l0     3    5:r126 l0     2    4:r127 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kgets

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,6u} r1={3d} r2={3d} r3={3d} r11={1d,7u} r12={4d} r13={1d,9u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,18u} r103={1d,6u} r104={2d} r105={2d} r106={2d} r113={1d,2u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} 
;;    total ref usage 286{222d,64u,0e} in 32{30 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":432:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 53 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 53 3 54 2 (set (pc)
        (label_ref 25)) "kbd.c":434:8 284 {*arm_jump}
     (nil)
 -> 25)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 54 53 31)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118
(code_label 31 54 8 3 97 (nil) [1 uses])
(note 8 31 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg:SI 118)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":435:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 10 9 11 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 8 [0x8]))) "kbd.c":435:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "kbd.c":435:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 18)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 119 120
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":436:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 4 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":436:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 15 14 55 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 119)) "kbd.c":436:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(jump_insn 55 15 56 4 (set (pc)
        (label_ref 25)) "kbd.c":437:7 284 {*arm_jump}
     (nil)
 -> 25)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 56 55 18)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 121 122
(code_label 18 56 19 5 96 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg/f:SI 113 [ s.30_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":439:7 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 5 (set (reg:SI 121)
        (plus:SI (reg/f:SI 113 [ s.30_1 ])
            (const_int 1 [0x1]))) "kbd.c":439:7 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 121)) "kbd.c":439:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 23 22 24 5 (set (reg:QI 122)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "kbd.c":439:10 263 {*arm_movqi_insn}
     (nil))
(insn 24 23 25 5 (set (mem:QI (reg/f:SI 113 [ s.30_1 ]) [0 *s.30_1+0 S1 A8])
        (reg:QI 122)) "kbd.c":439:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 122)
        (expr_list:REG_DEAD (reg/f:SI 113 [ s.30_1 ])
            (nil))))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              4 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 123 124
(code_label 25 24 26 6 95 (nil) [2 uses])
(note 26 25 27 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 27 26 28 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x3]  <function_decl 0x7fcdc0b31600 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":434:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 28 27 29 6 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "kbd.c":434:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 29 28 30 6 (set (reg:QI 123)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "kbd.c":434:13 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 30 29 32 6 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 123)) "kbd.c":434:13 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 123)
        (nil)))
(insn 32 30 33 6 (set (reg:SI 124)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":434:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124)
            (const_int 13 [0xd]))) "kbd.c":434:24 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(jump_insn 34 33 35 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "kbd.c":434:24 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 31)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 117 125 126 127
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 7 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":441:6 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 7 (set (reg:SI 126)
        (const_int 0 [0])) "kbd.c":441:6 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 7 (set (reg:QI 127)
        (subreg:QI (reg:SI 126) 0)) "kbd.c":441:6 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(insn 39 38 40 7 (set (mem:QI (reg/f:SI 125) [0 *s_4+0 S1 A8])
        (reg:QI 127)) "kbd.c":441:6 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 127)
        (expr_list:REG_DEAD (reg/f:SI 125)
            (nil))))
(insn 40 39 41 7 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 41 40 42 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7fcdc0d96100 strlen>) [0 __builtin_strlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":442:10 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 42 41 43 7 (set (reg:SI 115 [ _3 ])
        (reg:SI 0 r0)) "kbd.c":442:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 43 42 46 7 (set (reg:SI 116 [ _11 ])
        (reg:SI 115 [ _3 ])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 46 43 50 7 (set (reg:SI 117 [ <retval> ])
        (reg:SI 116 [ _11 ])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _11 ])
        (nil)))
(insn 50 46 51 7 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "kbd.c":443:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ <retval> ])
        (nil)))
(insn 51 50 0 7 (use (reg/i:SI 0 r0)) "kbd.c":443:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function mgetc (mgetc, funcdef_no=10, decl_uid=4568, cgraph_uid=11, symbol_order=25)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 5 }
;; 5 succs { 3 }
;; 3 succs { 3 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a1(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a2(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a12(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a15(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a19(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 52(l0): point = 0
   Insn 51(l0): point = 2
   Insn 47(l0): point = 4
   Insn 44(l0): point = 6
   Insn 43(l0): point = 8
   Insn 42(l0): point = 10
   Insn 41(l0): point = 12
   Insn 40(l0): point = 14
   Insn 39(l0): point = 16
   Insn 38(l0): point = 18
   Insn 37(l0): point = 20
   Insn 36(l0): point = 22
   Insn 35(l0): point = 24
   Insn 34(l0): point = 26
   Insn 33(l0): point = 28
   Insn 32(l0): point = 30
   Insn 31(l0): point = 32
   Insn 30(l0): point = 34
   Insn 29(l0): point = 37
   Insn 28(l0): point = 39
   Insn 27(l0): point = 41
   Insn 26(l0): point = 43
   Insn 25(l0): point = 45
   Insn 24(l0): point = 47
   Insn 23(l0): point = 49
   Insn 22(l0): point = 51
   Insn 21(l0): point = 53
   Insn 20(l0): point = 55
   Insn 19(l0): point = 57
   Insn 18(l0): point = 59
   Insn 17(l0): point = 61
   Insn 16(l0): point = 63
   Insn 15(l0): point = 65
   Insn 13(l0): point = 68
   Insn 12(l0): point = 70
   Insn 10(l0): point = 72
   Insn 9(l0): point = 74
   Insn 55(l0): point = 77
   Insn 7(l0): point = 80
   Insn 6(l0): point = 82
   Insn 5(l0): point = 84
 a0(r123): [3..4]
 a1(r122): [5..6]
 a2(r138): [11..12]
 a3(r121): [11..14]
 a4(r120): [15..16]
 a5(r137): [17..18]
 a6(r136): [21..22]
 a7(r119): [21..24]
 a8(r118): [25..26]
 a9(r135): [27..28]
 a10(r134): [31..32]
 a11(r117): [31..39]
 a12(r133): [35..37]
 a13(r132): [38..41]
 a14(r116): [40..43]
 a15(r131): [44..45]
 a16(r130): [48..49]
 a17(r129): [50..51]
 a18(r114): [52..61]
 a19(r128): [52..53]
 a20(r127): [56..57]
 a21(r115): [56..59]
 a22(r126): [62..63]
 a23(r113): [71..72]
 a24(r125): [73..74]
 a25(r124): [83..84]
Compressing live ranges: from 87 to 42 - 48%
Ranges after the compression:
 a0(r123): [0..1]
 a1(r122): [2..3]
 a2(r138): [4..5]
 a3(r121): [4..5]
 a4(r120): [6..7]
 a5(r137): [8..9]
 a6(r136): [10..11]
 a7(r119): [10..11]
 a8(r118): [12..13]
 a9(r135): [14..15]
 a10(r134): [16..17]
 a11(r117): [16..21]
 a12(r133): [18..19]
 a13(r132): [20..23]
 a14(r116): [22..23]
 a15(r131): [24..25]
 a16(r130): [26..27]
 a17(r129): [28..29]
 a18(r114): [30..33]
 a19(r128): [30..31]
 a20(r127): [32..33]
 a21(r115): [32..33]
 a22(r126): [34..35]
 a23(r113): [36..37]
 a24(r125): [38..39]
 a25(r124): [40..41]
  regions=1, blocks=6, points=42
    allocnos=26 (big 0), copies=0, conflicts=0, ranges=26
Disposition:
   23:r113 l0     3   18:r114 l0     3   21:r115 l0     1   14:r116 l0     3
   11:r117 l0     3    8:r118 l0     3    7:r119 l0     2    4:r120 l0     3
    3:r121 l0     2    1:r122 l0     3    0:r123 l0     3   25:r124 l0     3
   24:r125 l0     3   22:r126 l0     3   20:r127 l0     2   19:r128 l0     2
   17:r129 l0     3   16:r130 l0     3   15:r131 l0     3   13:r132 l0     2
   12:r133 l0     2   10:r134 l0     2    9:r135 l0     3    6:r136 l0     3
    5:r137 l0     3    2:r138 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


mgetc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,2u} r1={4d} r2={4d} r3={4d} r11={1d,5u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={5d,2u} r101={3d} r102={1d,18u} r103={1d,4u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,3u} r117={2d,2u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} 
;;    total ref usage 399{330d,69u,0e} in 41{38 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 5, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":464:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 124)) "kbd.c":464:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))
(call_insn 7 6 54 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":466:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 2, next block 3, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 54 7 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 55 54 11 5 (const_int 0 [0]) "kbd.c":467:8 311 {nop}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 5, next block 4, flags: (RTL)
;;  pred:       5 [always]  (FALLTHRU)
;;              3 (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 125
(code_label 11 55 8 3 100 (nil) [1 uses])
(note 8 11 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":467:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 12 3 (set (reg:SI 113 [ _1 ])
        (mem/v:SI (plus:SI (reg/f:SI 125)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":467:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 125)
        (nil)))
(insn 12 10 13 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 0 [0]))) "kbd.c":467:18 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(jump_insn 13 12 14 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "kbd.c":467:18 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 11)
;;  succ:       3 (DFS_BACK)
;;              4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 116 117 118 119 120 121 122 123 126 127 128 129 130 131 132 133 134 135 136 137 138
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 16 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":469:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 16 15 17 4 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:17 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 4 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 126)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":470:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))
(insn 18 17 19 4 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":470:23 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:23 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 4 (set (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":470:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (expr_list:REG_DEAD (reg:SI 115 [ _4 ])
            (nil))))
(insn 21 20 22 4 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:5 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg/f:SI 129)
        (plus:SI (reg/f:SI 128)
            (reg:SI 114 [ _2 ]))) "kbd.c":470:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 128)
        (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
            (nil))))
(insn 23 22 24 4 (set (reg:QI 130)
        (mem/v:QI (plus:SI (reg/f:SI 129)
                (const_int 4 [0x4])) [0 kp_11->buf[_3]+0 S1 A8])) "kbd.c":470:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(insn 24 23 25 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 130)) "kbd.c":470:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 130)
        (nil)))
(insn 25 24 26 4 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg:SI 116 [ _5 ])
        (mem/v:SI (plus:SI (reg/f:SI 131)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 27 26 28 4 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 116 [ _5 ]))
                    (const_int 0 [0])))
            (set (reg:SI 132)
                (minus:SI (const_int 0 [0])
                    (reg:SI 116 [ _5 ])))
        ]) "kbd.c":471:12 46 {subsi3_compare0}
     (nil))
(insn 28 27 29 4 (set (reg:SI 117 [ _6 ])
        (and:SI (reg:SI 116 [ _5 ])
            (const_int 127 [0x7f]))) "kbd.c":471:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _5 ])
        (nil)))
(insn 29 28 30 4 (set (reg:SI 133)
        (and:SI (reg:SI 132)
            (const_int 127 [0x7f]))) "kbd.c":471:12 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(insn 30 29 31 4 (set (reg:SI 117 [ _6 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 133))
            (reg:SI 117 [ _6 ]))) "kbd.c":471:12 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 31 30 32 4 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (mem/v:SI (plus:SI (reg/f:SI 134)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 117 [ _6 ])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 134)
        (expr_list:REG_DEAD (reg:SI 117 [ _6 ])
            (nil))))
(insn 33 32 34 4 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:5 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 118 [ _7 ])
        (mem/v:SI (plus:SI (reg/f:SI 135)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":472:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 135)
        (nil)))
(insn 35 34 36 4 (set (reg:SI 119 [ _8 ])
        (plus:SI (reg:SI 118 [ _7 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":472:11 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 118 [ _7 ])
        (nil)))
(insn 36 35 37 4 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:11 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 4 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])
        (reg:SI 119 [ _8 ])) "kbd.c":472:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 136)
        (expr_list:REG_DEAD (reg:SI 119 [ _8 ])
            (nil))))
(insn 38 37 39 4 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:17 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 4 (set (reg:SI 120 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])) "kbd.c":472:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 40 39 41 4 (set (reg:SI 121 [ _10 ])
        (plus:SI (reg:SI 120 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":472:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120 [ _9 ])
        (nil)))
(insn 41 40 42 4 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:23 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 4 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])
        (reg:SI 121 [ _10 ])) "kbd.c":472:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (expr_list:REG_DEAD (reg:SI 121 [ _10 ])
            (nil))))
(call_insn 43 42 44 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":473:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 44 43 47 4 (set (reg:SI 122 [ _21 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":474:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 47 44 51 4 (set (reg:SI 123 [ <retval> ])
        (reg:SI 122 [ _21 ])) "kbd.c":474:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _21 ])
        (nil)))
(insn 51 47 52 4 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "kbd.c":475:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ <retval> ])
        (nil)))
(insn 52 51 0 4 (use (reg/i:SI 0 r0)) "kbd.c":475:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kgetline (kgetline, funcdef_no=11, decl_uid=4578, cgraph_uid=12, symbol_order=26)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 11 count 10 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 9 8
;;
;; Loop 2
;;  header 6, latch 7
;;  depth 1, outer 0
;;  nodes: 6 7
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 9 7 }
;; 7 succs { 6 }
;; 9 succs { 8 }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 78.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r126,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a8(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a20(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a23(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a25(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a30(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a35(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a36(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 83(l0): point = 0
   Insn 80(l0): point = 2
   Insn 85(l0): point = 4
   Insn 82(l0): point = 6
   Insn 81(l0): point = 8
   Insn 78(l0): point = 10
   Insn 77(l0): point = 12
   Insn 76(l0): point = 14
   Insn 75(l0): point = 16
   Insn 74(l0): point = 18
   Insn 73(l0): point = 20
   Insn 72(l0): point = 22
   Insn 71(l0): point = 24
   Insn 70(l0): point = 26
   Insn 69(l0): point = 28
   Insn 68(l0): point = 30
   Insn 93(l0): point = 33
   Insn 57(l0): point = 36
   Insn 56(l0): point = 38
   Insn 55(l0): point = 40
   Insn 54(l0): point = 42
   Insn 53(l0): point = 44
   Insn 52(l0): point = 46
   Insn 51(l0): point = 48
   Insn 50(l0): point = 50
   Insn 49(l0): point = 52
   Insn 48(l0): point = 54
   Insn 47(l0): point = 56
   Insn 46(l0): point = 58
   Insn 45(l0): point = 60
   Insn 44(l0): point = 62
   Insn 43(l0): point = 64
   Insn 42(l0): point = 66
   Insn 41(l0): point = 69
   Insn 40(l0): point = 71
   Insn 39(l0): point = 73
   Insn 38(l0): point = 75
   Insn 37(l0): point = 77
   Insn 36(l0): point = 79
   Insn 35(l0): point = 81
   Insn 34(l0): point = 83
   Insn 33(l0): point = 85
   Insn 32(l0): point = 87
   Insn 31(l0): point = 89
   Insn 30(l0): point = 91
   Insn 29(l0): point = 93
   Insn 28(l0): point = 95
   Insn 27(l0): point = 97
   Insn 26(l0): point = 99
   Insn 25(l0): point = 101
   Insn 24(l0): point = 103
   Insn 23(l0): point = 105
   Insn 89(l0): point = 108
   Insn 21(l0): point = 111
   Insn 12(l0): point = 114
   Insn 11(l0): point = 116
   Insn 19(l0): point = 119
   Insn 18(l0): point = 121
   Insn 16(l0): point = 123
   Insn 15(l0): point = 125
   Insn 86(l0): point = 128
   Insn 7(l0): point = 130
   Insn 6(l0): point = 132
   Insn 2(l0): point = 134
 a0(r126): [3..6]
 a1(r149): [13..14]
 a2(r125): [13..16]
 a3(r124): [17..18]
 a4(r148): [19..20]
 a5(r123): [23..28]
 a6(r147): [23..24]
 a7(r146): [25..26]
 a8(r145): [29..30]
 a9(r144): [39..40]
 a10(r143): [43..44]
 a11(r122): [43..46]
 a12(r121): [47..48]
 a13(r142): [49..50]
 a14(r141): [53..54]
 a15(r120): [53..56]
 a16(r119): [57..58]
 a17(r140): [59..60]
 a18(r139): [63..64]
 a19(r118): [63..71]
 a20(r138): [67..69]
 a21(r137): [70..73]
 a22(r117): [72..75]
 a23(r136): [76..77]
 a24(r116): [80..87]
 a25(r135): [80..81]
 a26(r134): [84..85]
 a27(r133): [90..91]
 a28(r132): [92..93]
 a29(r114): [94..103]
 a30(r131): [94..95]
 a31(r130): [98..99]
 a32(r115): [98..101]
 a33(r129): [104..105]
 a34(r113): [122..123]
 a35(r128): [124..125]
 a36(r127): [131..132]
Compressing live ranges: from 137 to 58 - 42%
Ranges after the compression:
 a0(r126): [0..1]
 a1(r149): [2..3]
 a2(r125): [2..3]
 a3(r124): [4..5]
 a4(r148): [6..7]
 a5(r123): [8..11]
 a6(r147): [8..9]
 a7(r146): [10..11]
 a8(r145): [12..13]
 a9(r144): [14..15]
 a10(r143): [16..17]
 a11(r122): [16..17]
 a12(r121): [18..19]
 a13(r142): [20..21]
 a14(r141): [22..23]
 a15(r120): [22..23]
 a16(r119): [24..25]
 a17(r140): [26..27]
 a18(r139): [28..29]
 a19(r118): [28..33]
 a20(r138): [30..31]
 a21(r137): [32..35]
 a22(r117): [34..35]
 a23(r136): [36..37]
 a24(r116): [38..41]
 a25(r135): [38..39]
 a26(r134): [40..41]
 a27(r133): [42..43]
 a28(r132): [44..45]
 a29(r114): [46..49]
 a30(r131): [46..47]
 a31(r130): [48..49]
 a32(r115): [48..49]
 a33(r129): [50..51]
 a34(r113): [52..53]
 a35(r128): [54..55]
 a36(r127): [56..57]
  regions=1, blocks=10, points=58
    allocnos=37 (big 0), copies=0, conflicts=0, ranges=37
Disposition:
   34:r113 l0     3   29:r114 l0     3   32:r115 l0     1   24:r116 l0     3
   22:r117 l0     3   19:r118 l0     3   16:r119 l0     3   15:r120 l0     2
   12:r121 l0     3   11:r122 l0     2    5:r123 l0     3    3:r124 l0     3
    2:r125 l0     3    0:r126 l0     3   36:r127 l0     3   35:r128 l0     3
   33:r129 l0     3   31:r130 l0     2   30:r131 l0     2   28:r132 l0     3
   27:r133 l0     3   26:r134 l0     2   25:r135 l0     2   23:r136 l0     3
   21:r137 l0     2   20:r138 l0     2   18:r139 l0     2   17:r140 l0     3
   14:r141 l0     3   13:r142 l0     3   10:r143 l0     3    9:r144 l0     3
    8:r145 l0     3    7:r146 l0     2    6:r147 l0     2    4:r148 l0     3
    1:r149 l0     2
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kgetline

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,4u} r1={4d} r2={4d} r3={4d} r11={1d,9u} r12={6d} r13={1d,12u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={6d,3u} r101={3d} r102={1d,26u} r103={1d,8u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,2u} r117={1d,3u} r118={2d,2u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} 
;;    total ref usage 448{344d,104u,0e} in 64{61 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":478:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":480:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 86 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 127)) "kbd.c":480:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(jump_insn 86 7 87 2 (set (pc)
        (label_ref 13)) "kbd.c":482:9 284 {*arm_jump}
     (nil)
 -> 13)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 87 86 17)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 17 87 10 3 106 (nil) [1 uses])
(note 10 17 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":483:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":483:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 128
(code_label 13 12 14 4 105 (nil) [1 uses])
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 4 (set (reg/f:SI 128)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":482:15 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 18 4 (set (reg:SI 113 [ kline.31_1 ])
        (mem/v/c:SI (reg/f:SI 128) [3 kline+0 S4 A32])) "kbd.c":482:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 128)
        (nil)))
(insn 18 16 19 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ kline.31_1 ])
            (const_int 0 [0]))) "kbd.c":482:15 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ kline.31_1 ])
        (nil)))
(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kbd.c":482:15 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 17)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 21 20 63 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":486:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;;              7 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 115 116 117 118 119 120 121 122 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
(code_label 63 21 22 6 109 (nil) [1 uses])
(note 22 63 23 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 6 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:21 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 6 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":488:21 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(insn 25 24 26 6 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":488:27 7 {*arm_addsi3}
     (nil))
(insn 26 25 27 6 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:27 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 6 (set (mem/v:SI (plus:SI (reg/f:SI 130)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":488:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 130)
        (expr_list:REG_DEAD (reg:SI 115 [ _4 ])
            (nil))))
(insn 28 27 29 6 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 6 (set (reg/f:SI 132)
        (plus:SI (reg/f:SI 131)
            (reg:SI 114 [ _2 ]))) "kbd.c":488:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
            (nil))))
(insn 30 29 31 6 (set (reg:QI 133)
        (mem/v:QI (plus:SI (reg/f:SI 132)
                (const_int 4 [0x4])) [0 kp_18->buf[_3]+0 S1 A8])) "kbd.c":488:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))
(insn 31 30 32 6 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 133)) "kbd.c":488:9 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 133)
        (nil)))
(insn 32 31 33 6 (set (reg/f:SI 116 [ s.32_5 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":489:9 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 6 (set (reg:SI 134)
        (plus:SI (reg/f:SI 116 [ s.32_5 ])
            (const_int 1 [0x1]))) "kbd.c":489:9 7 {*arm_addsi3}
     (nil))
(insn 34 33 35 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 134)) "kbd.c":489:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 35 34 36 6 (set (reg:QI 135)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "kbd.c":489:12 263 {*arm_movqi_insn}
     (nil))
(insn 36 35 37 6 (set (mem:QI (reg/f:SI 116 [ s.32_5 ]) [0 *s.32_5+0 S1 A8])
        (reg:QI 135)) "kbd.c":489:12 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 135)
        (expr_list:REG_DEAD (reg/f:SI 116 [ s.32_5 ])
            (nil))))
(insn 37 36 38 6 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 6 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 136)
        (nil)))
(insn 39 38 40 6 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 137)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":490:16 46 {subsi3_compare0}
     (nil))
(insn 40 39 41 6 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":490:16 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ _6 ])
        (nil)))
(insn 41 40 42 6 (set (reg:SI 138)
        (and:SI (reg:SI 137)
            (const_int 127 [0x7f]))) "kbd.c":490:16 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 137)
        (nil)))
(insn 42 41 43 6 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 138))
            (reg:SI 118 [ _7 ]))) "kbd.c":490:16 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 43 42 44 6 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 6 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (expr_list:REG_DEAD (reg:SI 118 [ _7 ])
            (nil))))
(insn 45 44 46 6 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:9 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])) "kbd.c":491:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (nil)))
(insn 47 46 48 6 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":491:15 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 119 [ _8 ])
        (nil)))
(insn 48 47 49 6 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:15 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 6 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":491:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 141)
        (expr_list:REG_DEAD (reg:SI 120 [ _9 ])
            (nil))))
(insn 50 49 51 6 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:21 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 142)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])) "kbd.c":491:21 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 52 51 53 6 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":491:27 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 121 [ _10 ])
        (nil)))
(insn 53 52 54 6 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:27 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 6 (set (mem/v:SI (plus:SI (reg/f:SI 143)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":491:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 143)
        (expr_list:REG_DEAD (reg:SI 122 [ _11 ])
            (nil))))
(insn 55 54 56 6 (set (reg:SI 144)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":492:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 56 55 57 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144)
            (const_int 13 [0xd]))) "kbd.c":492:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 144)
        (nil)))
(jump_insn 57 56 62 6 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 92)
            (pc))) "kbd.c":492:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 92)
;;  succ:       9
;;              7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 9, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 62 57 89 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 89 62 90 7 (set (pc)
        (label_ref 63)) "kbd.c":488:9 284 {*arm_jump}
     (nil)
 -> 63)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 90 89 92)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 7, next block 8, flags: (RTL)
;;  pred:       6
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 92 90 91 9 111 (nil) [1 uses])
(note 91 92 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 93 91 88 9 (const_int 0 [0]) "kbd.c":493:2 311 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 [always]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 124 125 126 145 146 147 148 149
(code_label 88 93 67 8 110 (nil) [0 uses])
(note 67 88 68 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 8 (set (reg:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":495:6 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 8 (set (reg/f:SI 123 [ _12 ])
        (plus:SI (reg:SI 145)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":495:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 70 69 71 8 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":495:10 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 8 (set (reg:QI 147)
        (subreg:QI (reg:SI 146) 0)) "kbd.c":495:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 72 71 73 8 (set (mem:QI (reg/f:SI 123 [ _12 ]) [0 *_12+0 S1 A8])
        (reg:QI 147)) "kbd.c":495:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 147)
        (expr_list:REG_DEAD (reg/f:SI 123 [ _12 ])
            (nil))))
(insn 73 72 74 8 (set (reg/f:SI 148)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 8 (set (reg:SI 124 [ kline.33_13 ])
        (mem/v/c:SI (reg/f:SI 148) [3 kline+0 S4 A32])) "kbd.c":496:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))
(insn 75 74 76 8 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ kline.33_13 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":496:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 124 [ kline.33_13 ])
        (nil)))
(insn 76 75 77 8 (set (reg/f:SI 149)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 8 (set (mem/v/c:SI (reg/f:SI 149) [3 kline+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":496:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 149)
        (expr_list:REG_DEAD (reg:SI 125 [ _14 ])
            (nil))))
(call_insn 78 77 81 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":497:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 81 78 82 8 (clobber (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 82 81 85 8 (clobber (reg:SI 126 [ <retval> ])) "kbd.c":498:1 -1
     (nil))
(insn 85 82 80 8 (const_int 0 [0]) "kbd.c":498:1 311 {nop}
     (nil))
(insn 80 85 83 8 (set (reg/i:SI 0 r0)
        (reg:SI 126 [ <retval> ])) "kbd.c":498:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ <retval> ])
        (nil)))
(insn 83 80 0 8 (use (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

