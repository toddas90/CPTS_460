
;; Function do_command (do_command, funcdef_no=0, decl_uid=4478, cgraph_uid=1, symbol_order=1)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 10:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 15:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=0: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) r {*iorsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 21:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 29: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 31: point = 1, n_alt = -1
   Insn 28: point = 1, n_alt = -1
   Insn 27: point = 2, n_alt = -1
   Insn 24: point = 2, n_alt = 5
   Insn 23: point = 3, n_alt = -2
   Insn 22: point = 5, n_alt = -2
   Insn 21: point = 7, n_alt = 4
   Insn 20: point = 9, n_alt = 4
   Insn 19: point = 11, n_alt = 4
   Insn 18: point = 12, n_alt = 3
   Insn 17: point = 14, n_alt = 4
   Insn 16: point = 15, n_alt = 0
   Insn 15: point = 17, n_alt = 2
   Insn 14: point = 19, n_alt = 4
   Insn 13: point = 20, n_alt = 5
   Insn 12: point = 21, n_alt = 4
   Insn 11: point = 22, n_alt = -2
   Insn 10: point = 24, n_alt = 4
   Insn 9: point = 26, n_alt = 4
   Insn 8: point = 28, n_alt = 4
   Insn 4: point = 29, n_alt = 5
   Insn 3: point = 29, n_alt = 5
   Insn 2: point = 29, n_alt = 5
 r113: [25..26]
 r114: [23..24]
 r115: [20..22]
 r116: [20..21]
 r117: [16..17]
 r118: [13..15]
 r119: [4..12]
 r120: [8..9]
 r121: [6..7]
 r122: [2..5]
 r123: [2..3]
 r124: [0..1]
 r125: [27..28]
 r126: [18..19]
 r127: [13..14]
 r128: [10..11]
Compressing live ranges: from 29 to 26 - 89%
Ranges after the compression:
 r113: [22..23]
 r114: [20..21]
 r115: [18..19]
 r116: [18..19]
 r117: [14..15]
 r118: [12..13]
 r119: [4..11]
 r120: [8..9]
 r121: [6..7]
 r122: [2..5]
 r123: [2..3]
 r124: [0..1]
 r125: [24..25]
 r126: [16..17]
 r127: [12..13]
 r128: [10..11]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 23
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 8
changing reg in insn 9
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
deleting insn with uid = 22.
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns


do_command

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={4d,4u} r3={12d,11u} r11={1d,8u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 54{24d,30u,0e} in 23{23 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 cmd+0 S4 A32])
        (reg:SI 0 r0 [ cmd ])) "sdc.c":70:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 arg+0 S4 A32])
        (reg:SI 1 r1 [ arg ])) "sdc.c":70:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 resp+0 S4 A32])
        (reg:SI 2 r2 [ resp ])) "sdc.c":70:1 253 {*arm_movsi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 3 r3 [125])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":71:17 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 3 r3 [orig:113 base.0_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [125]) [1 base+0 S4 A32])) "sdc.c":71:17 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [orig:113 base.0_1 ] [113])
            (const_int 8 [0x8]))) "sdc.c":71:17 7 {*arm_addsi3}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 2 r2 [orig:115 _3 ] [115])
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "sdc.c":71:4 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 3 r3 [orig:116 arg.1_4 ] [116])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 arg+0 S4 A32])) "sdc.c":71:31 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (mem:SI (reg/f:SI 2 r2 [orig:115 _3 ] [115]) [1 *_3+0 S4 A32])
        (reg:SI 3 r3 [orig:116 arg.1_4 ] [116])) "sdc.c":71:29 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [126])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 resp+0 S4 A32])) "sdc.c":72:44 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (ashift:SI (reg:SI 3 r3 [126])
            (const_int 6 [0x6]))) "sdc.c":72:44 147 {*arm_shiftsi3}
     (nil))
(insn 16 15 17 2 (set (reg:SI 2 r2 [orig:118 _6 ] [118])
        (ior:SI (reg:SI 3 r3 [orig:117 _5 ] [117])
            (const_int 1024 [0x400]))) "sdc.c":72:37 106 {*iorsi3_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 3 r3 [127])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 cmd+0 S4 A32])) "sdc.c":72:49 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 2 r2 [orig:119 _7 ] [119])
        (ior:SI (reg:SI 2 r2 [orig:118 _6 ] [118])
            (reg:SI 3 r3 [127]))) "sdc.c":72:49 106 {*iorsi3_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 3 r3 [128])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":72:17 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 3 r3 [orig:120 base.2_8 ] [120])
        (mem/c:SI (reg/f:SI 3 r3 [128]) [1 base+0 S4 A32])) "sdc.c":72:17 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 24 2 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (plus:SI (reg:SI 3 r3 [orig:120 base.2_8 ] [120])
            (const_int 12 [0xc]))) "sdc.c":72:17 7 {*arm_addsi3}
     (nil))
(insn 24 21 27 2 (set (mem:SI (reg/f:SI 3 r3 [orig:122 _10 ] [122]) [1 *_10+0 S4 A32])
        (reg:SI 2 r2 [orig:123 _11 ] [123])) "sdc.c":72:29 253 {*arm_movsi_insn}
     (nil))
(insn 27 24 28 2 (clobber (reg/i:SI 0 r0)) "sdc.c":74:1 -1
     (nil))
(insn 28 27 31 2 (clobber (reg:SI 3 r3 [orig:124 <retval> ] [124])) "sdc.c":74:1 -1
     (nil))
(insn 31 28 26 2 (const_int 0 [0]) "sdc.c":74:1 311 {nop}
     (nil))
(insn 26 31 29 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:124 <retval> ] [124])) "sdc.c":74:1 253 {*arm_movsi_insn}
     (nil))
(insn 29 26 32 2 (use (reg/i:SI 0 r0)) "sdc.c":74:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 32 29 0 NOTE_INSN_DELETED)

;; Function sdc_handler (sdc_handler, funcdef_no=1, decl_uid=4488, cgraph_uid=2, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 7:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 26:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 44:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 51:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 53:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 65:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 66:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 69:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 71:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 72:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 74:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 79:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 82:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 87:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 90:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 93:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 95:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 98:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 99:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 107:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 108:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 113:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 115:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 116:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 118:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 120:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 121:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 125:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 126:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 129:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 130:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 134:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 135:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 138:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 140:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 142:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 143:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 144:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 145:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 146:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 152:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 153:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 157:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 158:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 159:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 160:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 161:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 162:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 163:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 164:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 165:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 166:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 167:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 168:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 169:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 171:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 174:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 177:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 178:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 179:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 180:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 181:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 182:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 185:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 186:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 187:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 189:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 190:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 191:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 192:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 196:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 197:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 198:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 200:  (0) r  (1) K {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 201:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3 4 5
EBB 6
EBB 7 8
EBB 9 10
EBB 11 12 13 14
EBB 15
EBB 16 17
EBB 18 19
EBB 20

********** Pseudo live ranges #1: **********

  BB 20
   Insn 206: point = 0, n_alt = -1
   Insn 203: point = 0, n_alt = -2
   Insn 208: point = 1, n_alt = -1
   Insn 205: point = 1, n_alt = -1
   Insn 204: point = 2, n_alt = -1
   Insn 201: point = 2, n_alt = 5
   Insn 200: point = 3, n_alt = 2
   Insn 199: point = 4, n_alt = -2
   Insn 198: point = 6, n_alt = 4
   Insn 197: point = 8, n_alt = 4
   Insn 196: point = 10, n_alt = 4
  BB 10
   Insn 211: point = 11, n_alt = -1
   Insn 101: point = 11, n_alt = -1
   Insn 100: point = 11, n_alt = 4
   Insn 99: point = 11, n_alt = 5
   Insn 98: point = 12, n_alt = 1
   Insn 97: point = 13, n_alt = 4
   Insn 96: point = 14, n_alt = -1
   Insn 95: point = 14, n_alt = 1
   Insn 94: point = 14, n_alt = 1
   Insn 93: point = 14, n_alt = 1
  BB 19
   Insn 193: point = 14, n_alt = -1
   Insn 192: point = 14, n_alt = 4
   Insn 191: point = 14, n_alt = 5
   Insn 190: point = 15, n_alt = 1
   Insn 189: point = 16, n_alt = 4
   Insn 188: point = 17, n_alt = -1
   Insn 187: point = 17, n_alt = 1
   Insn 186: point = 17, n_alt = 1
   Insn 185: point = 17, n_alt = 1
  BB 18
   Insn 183: point = 17, n_alt = -1
   Insn 182: point = 17, n_alt = 3
   Insn 181: point = 18, n_alt = 4
   Insn 180: point = 20, n_alt = 4
   Insn 179: point = 21, n_alt = 5
   Insn 178: point = 22, n_alt = 4
   Insn 177: point = 23, n_alt = 4
  BB 17
   Insn 174: point = 24, n_alt = 5
   Insn 173: point = 25, n_alt = 4
   Insn 172: point = 27, n_alt = -2
   Insn 171: point = 29, n_alt = 4
   Insn 170: point = 31, n_alt = 4
   Insn 169: point = 33, n_alt = 4
   Insn 168: point = 34, n_alt = 5
   Insn 167: point = 35, n_alt = 4
   Insn 166: point = 36, n_alt = 4
   Insn 165: point = 38, n_alt = 4
   Insn 164: point = 40, n_alt = 4
   Insn 163: point = 41, n_alt = 5
   Insn 162: point = 42, n_alt = 4
   Insn 161: point = 43, n_alt = 10
   Insn 160: point = 45, n_alt = 4
   Insn 159: point = 47, n_alt = 4
   Insn 158: point = 48, n_alt = 5
   Insn 157: point = 49, n_alt = 4
   Insn 156: point = 51, n_alt = 4
  BB 16
   Insn 154: point = 52, n_alt = -1
   Insn 153: point = 52, n_alt = 3
   Insn 152: point = 53, n_alt = 4
  BB 14
   Insn 213: point = 54, n_alt = -1
   Insn 130: point = 54, n_alt = 5
   Insn 129: point = 55, n_alt = 1
  BB 15
   Insn 146: point = 56, n_alt = 5
   Insn 145: point = 57, n_alt = 4
   Insn 144: point = 59, n_alt = 4
   Insn 143: point = 60, n_alt = 5
   Insn 142: point = 61, n_alt = 4
   Insn 141: point = 63, n_alt = -2
   Insn 140: point = 65, n_alt = 4
   Insn 139: point = 67, n_alt = 4
   Insn 138: point = 69, n_alt = 4
   Insn 137: point = 70, n_alt = 4
   Insn 136: point = 72, n_alt = 4
   Insn 135: point = 73, n_alt = 2
   Insn 134: point = 75, n_alt = 4
  BB 13
   Insn 127: point = 76, n_alt = -1
   Insn 126: point = 76, n_alt = 3
   Insn 125: point = 77, n_alt = 4
   Insn 124: point = 79, n_alt = 4
  BB 12
   Insn 122: point = 80, n_alt = -1
   Insn 121: point = 80, n_alt = 3
   Insn 120: point = 81, n_alt = 4
   Insn 119: point = 82, n_alt = 5
   Insn 118: point = 83, n_alt = 0
   Insn 117: point = 85, n_alt = 4
   Insn 116: point = 86, n_alt = 5
   Insn 115: point = 87, n_alt = 4
   Insn 114: point = 89, n_alt = 4
   Insn 113: point = 90, n_alt = 5
   Insn 112: point = 91, n_alt = 1
   Insn 111: point = 92, n_alt = 4
  BB 11
   Insn 109: point = 93, n_alt = -1
   Insn 108: point = 93, n_alt = 3
   Insn 107: point = 94, n_alt = 0
   Insn 106: point = 96, n_alt = 4
  BB 9
   Insn 91: point = 97, n_alt = -1
   Insn 90: point = 97, n_alt = 3
   Insn 89: point = 98, n_alt = 4
   Insn 88: point = 100, n_alt = 4
   Insn 87: point = 101, n_alt = 5
   Insn 86: point = 102, n_alt = 4
   Insn 85: point = 103, n_alt = 4
  BB 8
   Insn 82: point = 104, n_alt = 5
   Insn 81: point = 105, n_alt = 4
   Insn 80: point = 107, n_alt = -2
   Insn 79: point = 109, n_alt = 4
   Insn 78: point = 111, n_alt = 4
   Insn 77: point = 113, n_alt = 4
   Insn 76: point = 114, n_alt = 5
   Insn 75: point = 115, n_alt = 4
   Insn 74: point = 116, n_alt = 4
   Insn 73: point = 118, n_alt = 4
   Insn 72: point = 120, n_alt = 4
   Insn 71: point = 121, n_alt = 5
   Insn 70: point = 122, n_alt = 4
   Insn 69: point = 123, n_alt = 10
   Insn 68: point = 125, n_alt = 4
   Insn 67: point = 127, n_alt = 4
   Insn 66: point = 128, n_alt = 5
   Insn 65: point = 129, n_alt = 4
   Insn 64: point = 131, n_alt = 4
  BB 7
   Insn 62: point = 132, n_alt = -1
   Insn 61: point = 132, n_alt = 3
   Insn 60: point = 133, n_alt = 4
  BB 5
   Insn 209: point = 134, n_alt = -1
   Insn 38: point = 134, n_alt = 5
   Insn 37: point = 135, n_alt = 1
  BB 6
   Insn 54: point = 136, n_alt = 5
   Insn 53: point = 137, n_alt = 4
   Insn 52: point = 139, n_alt = 4
   Insn 51: point = 140, n_alt = 5
   Insn 50: point = 141, n_alt = 4
   Insn 49: point = 143, n_alt = 4
   Insn 48: point = 145, n_alt = 4
   Insn 47: point = 146, n_alt = 2
   Insn 46: point = 148, n_alt = 4
   Insn 45: point = 149, n_alt = -2
   Insn 44: point = 151, n_alt = 4
   Insn 43: point = 153, n_alt = 4
   Insn 42: point = 155, n_alt = 4
  BB 4
   Insn 35: point = 156, n_alt = -1
   Insn 34: point = 156, n_alt = 3
   Insn 33: point = 157, n_alt = 4
   Insn 32: point = 159, n_alt = 4
  BB 3
   Insn 30: point = 160, n_alt = -1
   Insn 29: point = 160, n_alt = 3
   Insn 28: point = 161, n_alt = 4
   Insn 27: point = 162, n_alt = 5
   Insn 26: point = 163, n_alt = 0
   Insn 25: point = 165, n_alt = 4
   Insn 24: point = 166, n_alt = 5
   Insn 23: point = 167, n_alt = 4
   Insn 22: point = 169, n_alt = 4
   Insn 21: point = 170, n_alt = 5
   Insn 20: point = 171, n_alt = 1
   Insn 19: point = 172, n_alt = 4
  BB 2
   Insn 17: point = 173, n_alt = -1
   Insn 16: point = 173, n_alt = 3
   Insn 15: point = 174, n_alt = 0
   Insn 14: point = 176, n_alt = 4
   Insn 13: point = 177, n_alt = 5
   Insn 12: point = 178, n_alt = 4
   Insn 11: point = 180, n_alt = 4
   Insn 10: point = 181, n_alt = 5
   Insn 9: point = 182, n_alt = 4
   Insn 8: point = 184, n_alt = -2
   Insn 7: point = 186, n_alt = 4
   Insn 6: point = 188, n_alt = 4
   Insn 5: point = 190, n_alt = 4
 r113: [187..188]
 r114: [185..186]
 r115: [183..184]
 r116: [173..174]
 r117: [156..157]
 r118: [152..153]
 r119: [150..151]
 r120: [142..149]
 r121: [147..148]
 r122: [144..146]
 r123: [140..143]
 r124: [140..141]
 r125: [124..125]
 r126: [121..123]
 r127: [117..118]
 r128: [114..116]
 r129: [110..111]
 r130: [108..109]
 r131: [106..107]
 r132: [97..98]
 r133: [93..94]
 r134: [76..77]
 r135: [74..75]
 r136: [71..73]
 r137: [62..70]
 r138: [66..67]
 r139: [64..65]
 r140: [60..63]
 r141: [60..61]
 r142: [44..45]
 r143: [41..43]
 r144: [37..38]
 r145: [34..36]
 r146: [30..31]
 r147: [28..29]
 r148: [26..27]
 r149: [17..18]
 r150: [7..8]
 r151: [5..6]
 r152: [2..4]
 r153: [0..1]
 r154: [189..190]
 r155: [181..182]
 r156: [179..180]
 r157: [177..178]
 r158: [175..176]
 r159: [170..172]
 r160: [170..171]
 r161: [168..169]
 r162: [166..167]
 r163: [162..163]
 r164: [164..165]
 r165: [160..161]
 r166: [158..159]
 r167: [134..135]
 r168: [154..155]
 r169: [144..145]
 r170: [136..137]
 r171: [138..139]
 r172: [132..133]
 r173: [128..129]
 r174: [130..131]
 r175: [126..127]
 r176: [121..122]
 r177: [119..120]
 r178: [114..115]
 r179: [112..113]
 r180: [104..105]
 r181: [101..103]
 r182: [101..102]
 r183: [99..100]
 r184: [11..13]
 r185: [11..12]
 r186: [95..96]
 r187: [90..92]
 r188: [90..91]
 r189: [88..89]
 r190: [86..87]
 r191: [82..83]
 r192: [84..85]
 r193: [80..81]
 r194: [78..79]
 r195: [54..55]
 r196: [71..72]
 r197: [68..69]
 r198: [56..57]
 r199: [58..59]
 r200: [52..53]
 r201: [48..49]
 r202: [50..51]
 r203: [46..47]
 r204: [41..42]
 r205: [39..40]
 r206: [34..35]
 r207: [32..33]
 r208: [24..25]
 r209: [21..23]
 r210: [21..22]
 r211: [19..20]
 r212: [14..16]
 r213: [14..15]
 r214: [9..10]
 r215: [2..3]
Compressing live ranges: from 191 to 176 - 92%
Ranges after the compression:
 r113: [172..173]
 r114: [170..171]
 r115: [168..169]
 r116: [158..159]
 r117: [142..143]
 r118: [138..139]
 r119: [136..137]
 r120: [130..135]
 r121: [134..135]
 r122: [132..133]
 r123: [128..131]
 r124: [128..129]
 r125: [112..113]
 r126: [110..111]
 r127: [106..107]
 r128: [104..105]
 r129: [100..101]
 r130: [98..99]
 r131: [96..97]
 r132: [88..89]
 r133: [84..85]
 r134: [68..69]
 r135: [66..67]
 r136: [64..65]
 r137: [56..63]
 r138: [60..61]
 r139: [58..59]
 r140: [54..57]
 r141: [54..55]
 r142: [38..39]
 r143: [36..37]
 r144: [32..33]
 r145: [30..31]
 r146: [26..27]
 r147: [24..25]
 r148: [22..23]
 r149: [14..15]
 r150: [6..7]
 r151: [4..5]
 r152: [2..3]
 r153: [0..1]
 r154: [174..175]
 r155: [166..167]
 r156: [164..165]
 r157: [162..163]
 r158: [160..161]
 r159: [156..157]
 r160: [156..157]
 r161: [154..155]
 r162: [152..153]
 r163: [148..149]
 r164: [150..151]
 r165: [146..147]
 r166: [144..145]
 r167: [122..123]
 r168: [140..141]
 r169: [132..133]
 r170: [124..125]
 r171: [126..127]
 r172: [120..121]
 r173: [116..117]
 r174: [118..119]
 r175: [114..115]
 r176: [110..111]
 r177: [108..109]
 r178: [104..105]
 r179: [102..103]
 r180: [94..95]
 r181: [92..93]
 r182: [92..93]
 r183: [90..91]
 r184: [10..11]
 r185: [10..11]
 r186: [86..87]
 r187: [82..83]
 r188: [82..83]
 r189: [80..81]
 r190: [78..79]
 r191: [74..75]
 r192: [76..77]
 r193: [72..73]
 r194: [70..71]
 r195: [48..49]
 r196: [64..65]
 r197: [62..63]
 r198: [50..51]
 r199: [52..53]
 r200: [46..47]
 r201: [42..43]
 r202: [44..45]
 r203: [40..41]
 r204: [36..37]
 r205: [34..35]
 r206: [30..31]
 r207: [28..29]
 r208: [20..21]
 r209: [18..19]
 r210: [18..19]
 r211: [16..17]
 r212: [12..13]
 r213: [12..13]
 r214: [8..9]
 r215: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 15
changing reg in insn 16
changing reg in insn 33
changing reg in insn 34
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 50
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 49
changing reg in insn 51
changing reg in insn 50
changing reg in insn 51
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 89
changing reg in insn 90
changing reg in insn 107
changing reg in insn 108
changing reg in insn 125
changing reg in insn 126
changing reg in insn 134
changing reg in insn 135
changing reg in insn 135
changing reg in insn 137
changing reg in insn 137
changing reg in insn 142
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 141
changing reg in insn 143
changing reg in insn 142
changing reg in insn 143
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 181
changing reg in insn 182
changing reg in insn 197
changing reg in insn 198
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 201
changing reg in insn 205
changing reg in insn 203
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 52
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 66
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 81
changing reg in insn 82
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 99
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 113
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 124
changing reg in insn 125
changing reg in insn 129
changing reg in insn 130
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 145
changing reg in insn 146
changing reg in insn 144
changing reg in insn 145
changing reg in insn 152
changing reg in insn 153
changing reg in insn 157
changing reg in insn 158
changing reg in insn 156
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 179
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 189
changing reg in insn 191
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 197
changing reg in insn 200
changing reg in insn 201
deleting insn with uid = 8.
deleting insn with uid = 80.
deleting insn with uid = 141.
deleting insn with uid = 172.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 96.
verify found no changes in insn with uid = 101.
verify found no changes in insn with uid = 188.
verify found no changes in insn with uid = 193.


sdc_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={11d,6u} r1={8d,3u} r2={24d,19u} r3={86d,81u} r11={1d,52u} r12={8d} r13={1d,24u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={14d,10u} r101={4d} r102={1d,1u} r104={4d} r105={4d} r106={4d} 
;;    total ref usage 711{515d,196u,0e} in 165{161 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 115 116 154 155 156 157 158
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [154])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":94:26 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 3 r3 [orig:113 base.3_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [154]) [1 base+0 S4 A32])) "sdc.c":94:26 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 9 2 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [orig:113 base.3_1 ] [113])
            (const_int 52 [0x34]))) "sdc.c":94:26 7 {*arm_addsi3}
     (nil))
(insn 9 7 10 2 (set (reg:SI 3 r3 [155])
        (mem:SI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [1 *_3+0 S4 A32])) "sdc.c":94:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])
        (reg:SI 3 r3 [155])) "sdc.c":94:10 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f2801b4c480 color>)) "sdc.c":95:12 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 3 r3 [157])
        (mem/c:SI (reg/f:SI 3 r3 [156]) [1 color+0 S4 A32])) "sdc.c":95:12 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 oldcolor+0 S4 A32])
        (reg:SI 3 r3 [157])) "sdc.c":95:12 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [158])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])) "sdc.c":97:14 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (and:SI (reg:SI 3 r3 [158])
            (const_int 131072 [0x20000]))) "sdc.c":97:14 90 {*arm_andsi3_insn}
     (nil))
(insn 16 15 17 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 0 [0]))) "sdc.c":97:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 104)
            (pc))) "sdc.c":97:6 273 {arm_cond_branch}
     (nil)
 -> 104)
;;  succ:       3 (FALLTHRU)
;;              11
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 159 160 161 162 163 164 165
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg/f:SI 3 r3 [159])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f2801b4c480 color>)) "sdc.c":98:12 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (reg:SI 2 r2 [160])
        (const_int 2 [0x2])) "sdc.c":98:12 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (mem/c:SI (reg/f:SI 3 r3 [159]) [1 color+0 S4 A32])
        (reg:SI 2 r2 [160])) "sdc.c":98:12 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg/f:SI 3 r3 [161])
        (symbol_ref:SI ("rxbuf") [flags 0x2]  <var_decl 0x7f2800e6a360 rxbuf>)) "sdc.c":100:9 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 3 r3 [162])
        (mem/f/c:SI (reg/f:SI 3 r3 [161]) [3 rxbuf+0 S4 A32])) "sdc.c":100:9 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])
        (reg/f:SI 3 r3 [162])) "sdc.c":100:9 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 3 r3 [164])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])) "sdc.c":101:17 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg:SI 3 r3 [163])
        (and:SI (reg:SI 3 r3 [164])
            (const_int 42 [0x2a]))) "sdc.c":101:17 90 {*arm_andsi3_insn}
     (nil))
(insn 27 26 28 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 status_err+0 S4 A32])
        (reg:SI 3 r3 [163])) "sdc.c":101:17 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 3 r3 [165])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 status_err+0 S4 A32])) "sdc.c":102:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [165])
            (const_int 0 [0]))) "sdc.c":102:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 30 29 31 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "sdc.c":102:9 273 {arm_cond_branch}
     (nil)
 -> 83)
;;  succ:       4 (FALLTHRU)
;;              9
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 117 166
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:SI 3 r3 [166])
        (symbol_ref:SI ("rxcount") [flags 0x2]  <var_decl 0x7f2800e6a480 rxcount>)) "sdc.c":102:22 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [orig:117 rxcount.4_5 ] [117])
        (mem/c:SI (reg/f:SI 3 r3 [166]) [1 rxcount+0 S4 A32])) "sdc.c":102:22 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:117 rxcount.4_5 ] [117])
            (const_int 0 [0]))) "sdc.c":102:22 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 35 34 36 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 83)
            (pc))) "sdc.c":102:22 273 {arm_cond_branch}
     (nil)
 -> 83)
;;  succ:       5 (FALLTHRU)
;;              9
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 167
(note 36 35 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 5 (set (reg:SI 3 r3 [167])
        (const_int 0 [0])) "sdc.c":104:16 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 209 5 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (reg:SI 3 r3 [167])) "sdc.c":104:16 253 {*arm_movsi_insn}
     (nil))
(jump_insn 209 38 210 5 (set (pc)
        (label_ref 55)) "sdc.c":104:9 284 {*arm_jump}
     (nil)
 -> 55)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 210 209 57)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 118 119 120 121 122 123 124 168 169 170 171
(code_label 57 210 41 6 8 (nil) [1 uses])
(note 41 57 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 6 (set (reg/f:SI 3 r3 [168])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":105:38 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 6 (set (reg:SI 3 r3 [orig:118 base.5_6 ] [118])
        (mem/c:SI (reg/f:SI 3 r3 [168]) [1 base+0 S4 A32])) "sdc.c":105:38 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 6 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (plus:SI (reg:SI 3 r3 [orig:118 base.5_6 ] [118])
            (const_int 128 [0x80]))) "sdc.c":105:38 7 {*arm_addsi3}
     (nil))
(insn 45 44 46 6 (set (reg/f:SI 1 r1 [orig:120 _8 ] [120])
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "sdc.c":105:25 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (reg:SI 3 r3 [orig:121 i.6_9 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":105:17 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 6 (set (reg:SI 3 r3 [orig:122 _10 ] [122])
        (ashift:SI (reg:SI 3 r3 [orig:121 i.6_9 ] [121])
            (const_int 2 [0x2]))) "sdc.c":105:17 147 {*arm_shiftsi3}
     (nil))
(insn 48 47 49 6 (set (reg:SI 2 r2 [169])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])) "sdc.c":105:17 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 6 (set (reg/f:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 2 r2 [169])
            (reg:SI 3 r3 [orig:122 _10 ] [122]))) "sdc.c":105:17 7 {*arm_addsi3}
     (nil))
(insn 50 49 51 6 (set (reg:SI 2 r2 [orig:124 _12 ] [124])
        (mem:SI (reg/f:SI 1 r1 [orig:120 _8 ] [120]) [1 *_8+0 S4 A32])) "sdc.c":105:24 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (mem:SI (reg/f:SI 3 r3 [orig:123 _11 ] [123]) [1 *_11+0 S4 A32])
        (reg:SI 2 r2 [orig:124 _12 ] [124])) "sdc.c":105:22 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 6 (set (reg:SI 3 r3 [171])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":104:30 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 6 (set (reg:SI 3 r3 [170])
        (plus:SI (reg:SI 3 r3 [171])
            (const_int 1 [0x1]))) "sdc.c":104:30 7 {*arm_addsi3}
     (nil))
(insn 54 53 55 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (reg:SI 3 r3 [170])) "sdc.c":104:30 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 172
(code_label 55 54 56 7 7 (nil) [1 uses])
(note 56 55 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 56 61 7 (set (reg:SI 3 r3 [172])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":104:23 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [172])
            (const_int 15 [0xf]))) "sdc.c":104:23 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 62 61 63 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "sdc.c":104:23 273 {arm_cond_branch}
     (nil)
 -> 57)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 125 126 127 128 129 130 131 173 174 175 176 177 178 179 180
(note 63 62 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 8 (set (reg:SI 3 r3 [174])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])) "sdc.c":106:12 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 8 (set (reg:SI 3 r3 [173])
        (plus:SI (reg:SI 3 r3 [174])
            (const_int 64 [0x40]))) "sdc.c":106:12 7 {*arm_addsi3}
     (nil))
(insn 66 65 67 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])
        (reg:SI 3 r3 [173])) "sdc.c":106:12 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 8 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("rxcount") [flags 0x2]  <var_decl 0x7f2800e6a480 rxcount>)) "sdc.c":107:17 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 8 (set (reg:SI 3 r3 [orig:125 rxcount.7_13 ] [125])
        (mem/c:SI (reg/f:SI 3 r3 [175]) [1 rxcount+0 S4 A32])) "sdc.c":107:17 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 8 (set (reg:SI 3 r3 [orig:126 _14 ] [126])
        (plus:SI (reg:SI 3 r3 [orig:125 rxcount.7_13 ] [125])
            (const_int -64 [0xffffffffffffffc0]))) "sdc.c":107:17 7 {*arm_addsi3}
     (nil))
(insn 70 69 71 8 (set (reg/f:SI 2 r2 [176])
        (symbol_ref:SI ("rxcount") [flags 0x2]  <var_decl 0x7f2800e6a480 rxcount>)) "sdc.c":107:17 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 8 (set (mem/c:SI (reg/f:SI 2 r2 [176]) [1 rxcount+0 S4 A32])
        (reg:SI 3 r3 [orig:126 _14 ] [126])) "sdc.c":107:17 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 8 (set (reg/f:SI 3 r3 [177])
        (symbol_ref:SI ("rxbuf") [flags 0x2]  <var_decl 0x7f2800e6a360 rxbuf>)) "sdc.c":108:15 253 {*arm_movsi_insn}
     (nil))
(insn 73 72 74 8 (set (reg/f:SI 3 r3 [orig:127 rxbuf.8_15 ] [127])
        (mem/f/c:SI (reg/f:SI 3 r3 [177]) [3 rxbuf+0 S4 A32])) "sdc.c":108:15 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 8 (set (reg/f:SI 3 r3 [orig:128 _16 ] [128])
        (plus:SI (reg/f:SI 3 r3 [orig:127 rxbuf.8_15 ] [127])
            (const_int 64 [0x40]))) "sdc.c":108:15 7 {*arm_addsi3}
     (nil))
(insn 75 74 76 8 (set (reg/f:SI 2 r2 [178])
        (symbol_ref:SI ("rxbuf") [flags 0x2]  <var_decl 0x7f2800e6a360 rxbuf>)) "sdc.c":108:15 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 8 (set (mem/f/c:SI (reg/f:SI 2 r2 [178]) [3 rxbuf+0 S4 A32])
        (reg/f:SI 3 r3 [orig:128 _16 ] [128])) "sdc.c":108:15 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 8 (set (reg/f:SI 3 r3 [179])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":109:25 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 8 (set (reg:SI 3 r3 [orig:129 base.9_17 ] [129])
        (mem/c:SI (reg/f:SI 3 r3 [179]) [1 base+0 S4 A32])) "sdc.c":109:25 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 81 8 (set (reg:SI 3 r3 [orig:130 _18 ] [130])
        (plus:SI (reg:SI 3 r3 [orig:129 base.9_17 ] [129])
            (const_int 52 [0x34]))) "sdc.c":109:25 7 {*arm_addsi3}
     (nil))
(insn 81 79 82 8 (set (reg:SI 3 r3 [180])
        (mem:SI (reg/f:SI 3 r3 [orig:131 _19 ] [131]) [1 *_19+0 S4 A32])) "sdc.c":109:9 253 {*arm_movsi_insn}
     (nil))
(insn 82 81 83 8 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])
        (reg:SI 3 r3 [180])) "sdc.c":109:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4
;;              8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 132 181 182 183
(code_label 83 82 84 9 6 (nil) [2 uses])
(note 84 83 85 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 9 (set (reg/f:SI 2 r2 [181])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f2801b4c480 color>)) "sdc.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 9 (set (reg:SI 3 r3 [182])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 oldcolor+0 S4 A32])) "sdc.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 9 (set (mem/c:SI (reg/f:SI 2 r2 [181]) [1 color+0 S4 A32])
        (reg:SI 3 r3 [182])) "sdc.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 9 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("rxcount") [flags 0x2]  <var_decl 0x7f2800e6a480 rxcount>)) "sdc.c":112:18 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 9 (set (reg:SI 3 r3 [orig:132 rxcount.10_20 ] [132])
        (mem/c:SI (reg/f:SI 3 r3 [183]) [1 rxcount+0 S4 A32])) "sdc.c":112:18 253 {*arm_movsi_insn}
     (nil))
(insn 90 89 91 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:132 rxcount.10_20 ] [132])
            (const_int 0 [0]))) "sdc.c":112:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 91 90 92 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) "sdc.c":112:9 273 {arm_cond_branch}
     (nil)
 -> 194)
;;  succ:       10 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 184 185
(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 10 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":113:9 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 10 (set (reg:SI 1 r1)
        (const_int 0 [0])) "sdc.c":113:9 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 10 (set (reg:SI 0 r0)
        (const_int 12 [0xc])) "sdc.c":113:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 96 95 97 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":113:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 97 96 98 10 (set (reg/f:SI 3 r3 [184])
        (symbol_ref:SI ("rxdone") [flags 0x2]  <var_decl 0x7f2800e6a5a0 rxdone>)) "sdc.c":114:16 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 10 (set (reg:SI 2 r2 [185])
        (const_int 1 [0x1])) "sdc.c":114:16 253 {*arm_movsi_insn}
     (nil))
(insn 99 98 100 10 (set (mem/c:SI (reg/f:SI 3 r3 [184]) [1 rxdone+0 S4 A32])
        (reg:SI 2 r2 [185])) "sdc.c":114:16 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 10 (set (reg:SI 0 r0)
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":116:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 101 100 211 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f2800e73200 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":116:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 211 101 212 10 (set (pc)
        (label_ref 194)) 284 {*arm_jump}
     (nil)
 -> 194)
;;  succ:       20 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 212 211 104)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 133 186
(code_label 104 212 105 11 5 (nil) [1 uses])
(note 105 104 106 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 11 (set (reg:SI 3 r3 [186])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])) "sdc.c":119:19 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 11 (set (reg:SI 3 r3 [orig:133 _21 ] [133])
        (and:SI (reg:SI 3 r3 [186])
            (const_int 262144 [0x40000]))) "sdc.c":119:19 90 {*arm_andsi3_insn}
     (nil))
(insn 108 107 109 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:133 _21 ] [133])
            (const_int 0 [0]))) "sdc.c":119:11 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 109 108 110 11 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) "sdc.c":119:11 273 {arm_cond_branch}
     (nil)
 -> 194)
;;  succ:       12 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 187 188 189 190 191 192 193
(note 110 109 111 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 12 (set (reg/f:SI 3 r3 [187])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f2801b4c480 color>)) "sdc.c":120:11 253 {*arm_movsi_insn}
     (nil))
(insn 112 111 113 12 (set (reg:SI 2 r2 [188])
        (const_int 3 [0x3])) "sdc.c":120:11 253 {*arm_movsi_insn}
     (nil))
(insn 113 112 114 12 (set (mem/c:SI (reg/f:SI 3 r3 [187]) [1 color+0 S4 A32])
        (reg:SI 2 r2 [188])) "sdc.c":120:11 253 {*arm_movsi_insn}
     (nil))
(insn 114 113 115 12 (set (reg/f:SI 3 r3 [189])
        (symbol_ref:SI ("txbuf") [flags 0x2]  <var_decl 0x7f2800e6a3f0 txbuf>)) "sdc.c":122:8 253 {*arm_movsi_insn}
     (nil))
(insn 115 114 116 12 (set (reg/f:SI 3 r3 [190])
        (mem/f/c:SI (reg/f:SI 3 r3 [189]) [3 txbuf+0 S4 A32])) "sdc.c":122:8 253 {*arm_movsi_insn}
     (nil))
(insn 116 115 117 12 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])
        (reg/f:SI 3 r3 [190])) "sdc.c":122:8 253 {*arm_movsi_insn}
     (nil))
(insn 117 116 118 12 (set (reg:SI 3 r3 [192])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])) "sdc.c":123:16 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 12 (set (reg:SI 3 r3 [191])
        (and:SI (reg:SI 3 r3 [192])
            (const_int 10 [0xa]))) "sdc.c":123:16 90 {*arm_andsi3_insn}
     (nil))
(insn 119 118 120 12 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 status_err+0 S4 A32])
        (reg:SI 3 r3 [191])) "sdc.c":123:16 253 {*arm_movsi_insn}
     (nil))
(insn 120 119 121 12 (set (reg:SI 3 r3 [193])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 status_err+0 S4 A32])) "sdc.c":125:8 253 {*arm_movsi_insn}
     (nil))
(insn 121 120 122 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [193])
            (const_int 0 [0]))) "sdc.c":125:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 122 121 123 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "sdc.c":125:8 273 {arm_cond_branch}
     (nil)
 -> 175)
;;  succ:       13 (FALLTHRU)
;;              18
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 134 194
(note 123 122 124 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 124 123 125 13 (set (reg/f:SI 3 r3 [194])
        (symbol_ref:SI ("txcount") [flags 0x2]  <var_decl 0x7f2800e6a510 txcount>)) "sdc.c":125:21 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 13 (set (reg:SI 3 r3 [orig:134 txcount.11_22 ] [134])
        (mem/c:SI (reg/f:SI 3 r3 [194]) [1 txcount+0 S4 A32])) "sdc.c":125:21 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 127 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:134 txcount.11_22 ] [134])
            (const_int 0 [0]))) "sdc.c":125:21 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 127 126 128 13 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 175)
            (pc))) "sdc.c":125:21 273 {arm_cond_branch}
     (nil)
 -> 175)
;;  succ:       14 (FALLTHRU)
;;              18
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 195
(note 128 127 129 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 129 128 130 14 (set (reg:SI 3 r3 [195])
        (const_int 0 [0])) "sdc.c":127:15 253 {*arm_movsi_insn}
     (nil))
(insn 130 129 213 14 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (reg:SI 3 r3 [195])) "sdc.c":127:15 253 {*arm_movsi_insn}
     (nil))
(jump_insn 213 130 214 14 (set (pc)
        (label_ref 147)) "sdc.c":127:8 284 {*arm_jump}
     (nil)
 -> 147)
;;  succ:       16 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 214 213 149)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       16
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 135 136 137 138 139 140 141 196 197 198 199
(code_label 149 214 133 15 12 (nil) [1 uses])
(note 133 149 134 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 15 (set (reg:SI 3 r3 [orig:135 i.12_23 ] [135])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":128:41 253 {*arm_movsi_insn}
     (nil))
(insn 135 134 136 15 (set (reg:SI 3 r3 [orig:136 _24 ] [136])
        (ashift:SI (reg:SI 3 r3 [orig:135 i.12_23 ] [135])
            (const_int 2 [0x2]))) "sdc.c":128:41 147 {*arm_shiftsi3}
     (nil))
(insn 136 135 137 15 (set (reg:SI 2 r2 [196])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])) "sdc.c":128:41 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 15 (set (reg/f:SI 3 r3 [orig:137 _25 ] [137])
        (plus:SI (reg:SI 2 r2 [196])
            (reg:SI 3 r3 [orig:136 _24 ] [136]))) "sdc.c":128:41 7 {*arm_addsi3}
     (nil))
(insn 138 137 139 15 (set (reg/f:SI 2 r2 [197])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":128:26 253 {*arm_movsi_insn}
     (nil))
(insn 139 138 140 15 (set (reg:SI 2 r2 [orig:138 base.13_26 ] [138])
        (mem/c:SI (reg/f:SI 2 r2 [197]) [1 base+0 S4 A32])) "sdc.c":128:26 253 {*arm_movsi_insn}
     (nil))
(insn 140 139 142 15 (set (reg:SI 2 r2 [orig:139 _27 ] [139])
        (plus:SI (reg:SI 2 r2 [orig:138 base.13_26 ] [138])
            (const_int 128 [0x80]))) "sdc.c":128:26 7 {*arm_addsi3}
     (nil))
(insn 142 140 143 15 (set (reg:SI 3 r3 [orig:141 _29 ] [141])
        (mem:SI (reg/f:SI 3 r3 [orig:137 _25 ] [137]) [1 *_25+0 S4 A32])) "sdc.c":128:36 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 15 (set (mem:SI (reg/f:SI 2 r2 [orig:140 _28 ] [140]) [1 *_28+0 S4 A32])
        (reg:SI 3 r3 [orig:141 _29 ] [141])) "sdc.c":128:34 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 145 15 (set (reg:SI 3 r3 [199])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":127:29 253 {*arm_movsi_insn}
     (nil))
(insn 145 144 146 15 (set (reg:SI 3 r3 [198])
        (plus:SI (reg:SI 3 r3 [199])
            (const_int 1 [0x1]))) "sdc.c":127:29 7 {*arm_addsi3}
     (nil))
(insn 146 145 147 15 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])
        (reg:SI 3 r3 [198])) "sdc.c":127:29 253 {*arm_movsi_insn}
     (nil))
;;  succ:       16 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       15 (FALLTHRU,DFS_BACK)
;;              14 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 200
(code_label 147 146 148 16 11 (nil) [1 uses])
(note 148 147 152 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 152 148 153 16 (set (reg:SI 3 r3 [200])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [1 i+0 S4 A32])) "sdc.c":127:22 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 16 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [200])
            (const_int 15 [0xf]))) "sdc.c":127:22 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 154 153 155 16 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 149)
            (pc))) "sdc.c":127:22 273 {arm_cond_branch}
     (nil)
 -> 149)
;;  succ:       15
;;              17 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 142 143 144 145 146 147 148 201 202 203 204 205 206 207 208
(note 155 154 156 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 156 155 157 17 (set (reg:SI 3 r3 [202])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])) "sdc.c":129:11 253 {*arm_movsi_insn}
     (nil))
(insn 157 156 158 17 (set (reg:SI 3 r3 [201])
        (plus:SI (reg:SI 3 r3 [202])
            (const_int 64 [0x40]))) "sdc.c":129:11 7 {*arm_addsi3}
     (nil))
(insn 158 157 159 17 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A64])
        (reg:SI 3 r3 [201])) "sdc.c":129:11 253 {*arm_movsi_insn}
     (nil))
(insn 159 158 160 17 (set (reg/f:SI 3 r3 [203])
        (symbol_ref:SI ("txcount") [flags 0x2]  <var_decl 0x7f2800e6a510 txcount>)) "sdc.c":130:16 253 {*arm_movsi_insn}
     (nil))
(insn 160 159 161 17 (set (reg:SI 3 r3 [orig:142 txcount.14_30 ] [142])
        (mem/c:SI (reg/f:SI 3 r3 [203]) [1 txcount+0 S4 A32])) "sdc.c":130:16 253 {*arm_movsi_insn}
     (nil))
(insn 161 160 162 17 (set (reg:SI 3 r3 [orig:143 _31 ] [143])
        (plus:SI (reg:SI 3 r3 [orig:142 txcount.14_30 ] [142])
            (const_int -64 [0xffffffffffffffc0]))) "sdc.c":130:16 7 {*arm_addsi3}
     (nil))
(insn 162 161 163 17 (set (reg/f:SI 2 r2 [204])
        (symbol_ref:SI ("txcount") [flags 0x2]  <var_decl 0x7f2800e6a510 txcount>)) "sdc.c":130:16 253 {*arm_movsi_insn}
     (nil))
(insn 163 162 164 17 (set (mem/c:SI (reg/f:SI 2 r2 [204]) [1 txcount+0 S4 A32])
        (reg:SI 3 r3 [orig:143 _31 ] [143])) "sdc.c":130:16 253 {*arm_movsi_insn}
     (nil))
(insn 164 163 165 17 (set (reg/f:SI 3 r3 [205])
        (symbol_ref:SI ("txbuf") [flags 0x2]  <var_decl 0x7f2800e6a3f0 txbuf>)) "sdc.c":131:14 253 {*arm_movsi_insn}
     (nil))
(insn 165 164 166 17 (set (reg/f:SI 3 r3 [orig:144 txbuf.15_32 ] [144])
        (mem/f/c:SI (reg/f:SI 3 r3 [205]) [3 txbuf+0 S4 A32])) "sdc.c":131:14 253 {*arm_movsi_insn}
     (nil))
(insn 166 165 167 17 (set (reg/f:SI 3 r3 [orig:145 _33 ] [145])
        (plus:SI (reg/f:SI 3 r3 [orig:144 txbuf.15_32 ] [144])
            (const_int 64 [0x40]))) "sdc.c":131:14 7 {*arm_addsi3}
     (nil))
(insn 167 166 168 17 (set (reg/f:SI 2 r2 [206])
        (symbol_ref:SI ("txbuf") [flags 0x2]  <var_decl 0x7f2800e6a3f0 txbuf>)) "sdc.c":131:14 253 {*arm_movsi_insn}
     (nil))
(insn 168 167 169 17 (set (mem/f/c:SI (reg/f:SI 2 r2 [206]) [3 txbuf+0 S4 A32])
        (reg/f:SI 3 r3 [orig:145 _33 ] [145])) "sdc.c":131:14 253 {*arm_movsi_insn}
     (nil))
(insn 169 168 170 17 (set (reg/f:SI 3 r3 [207])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":132:31 253 {*arm_movsi_insn}
     (nil))
(insn 170 169 171 17 (set (reg:SI 3 r3 [orig:146 base.16_34 ] [146])
        (mem/c:SI (reg/f:SI 3 r3 [207]) [1 base+0 S4 A32])) "sdc.c":132:31 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 173 17 (set (reg:SI 3 r3 [orig:147 _35 ] [147])
        (plus:SI (reg:SI 3 r3 [orig:146 base.16_34 ] [146])
            (const_int 52 [0x34]))) "sdc.c":132:31 7 {*arm_addsi3}
     (nil))
(insn 173 171 174 17 (set (reg:SI 3 r3 [208])
        (mem:SI (reg/f:SI 3 r3 [orig:148 _36 ] [148]) [1 *_36+0 S4 A32])) "sdc.c":132:15 253 {*arm_movsi_insn}
     (nil))
(insn 174 173 175 17 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [1 status+0 S4 A64])
        (reg:SI 3 r3 [208])) "sdc.c":132:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       18 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13
;;              17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 149 209 210 211
(code_label 175 174 176 18 10 (nil) [2 uses])
(note 176 175 177 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 177 176 178 18 (set (reg/f:SI 2 r2 [209])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f2801b4c480 color>)) "sdc.c":134:11 253 {*arm_movsi_insn}
     (nil))
(insn 178 177 179 18 (set (reg:SI 3 r3 [210])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 oldcolor+0 S4 A32])) "sdc.c":134:11 253 {*arm_movsi_insn}
     (nil))
(insn 179 178 180 18 (set (mem/c:SI (reg/f:SI 2 r2 [209]) [1 color+0 S4 A32])
        (reg:SI 3 r3 [210])) "sdc.c":134:11 253 {*arm_movsi_insn}
     (nil))
(insn 180 179 181 18 (set (reg/f:SI 3 r3 [211])
        (symbol_ref:SI ("txcount") [flags 0x2]  <var_decl 0x7f2800e6a510 txcount>)) "sdc.c":135:17 253 {*arm_movsi_insn}
     (nil))
(insn 181 180 182 18 (set (reg:SI 3 r3 [orig:149 txcount.17_37 ] [149])
        (mem/c:SI (reg/f:SI 3 r3 [211]) [1 txcount+0 S4 A32])) "sdc.c":135:17 253 {*arm_movsi_insn}
     (nil))
(insn 182 181 183 18 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:149 txcount.17_37 ] [149])
            (const_int 0 [0]))) "sdc.c":135:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 183 182 184 18 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 194)
            (pc))) "sdc.c":135:8 273 {arm_cond_branch}
     (nil)
 -> 194)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 212 213
(note 184 183 185 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 185 184 186 19 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":136:8 253 {*arm_movsi_insn}
     (nil))
(insn 186 185 187 19 (set (reg:SI 1 r1)
        (const_int 0 [0])) "sdc.c":136:8 253 {*arm_movsi_insn}
     (nil))
(insn 187 186 188 19 (set (reg:SI 0 r0)
        (const_int 12 [0xc])) "sdc.c":136:8 253 {*arm_movsi_insn}
     (nil))
(call_insn 188 187 189 19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":136:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 189 188 190 19 (set (reg/f:SI 3 r3 [212])
        (symbol_ref:SI ("txdone") [flags 0x2]  <var_decl 0x7f2800e6a630 txdone>)) "sdc.c":137:15 253 {*arm_movsi_insn}
     (nil))
(insn 190 189 191 19 (set (reg:SI 2 r2 [213])
        (const_int 1 [0x1])) "sdc.c":137:15 253 {*arm_movsi_insn}
     (nil))
(insn 191 190 192 19 (set (mem/c:SI (reg/f:SI 3 r3 [212]) [1 txdone+0 S4 A32])
        (reg:SI 2 r2 [213])) "sdc.c":137:15 253 {*arm_movsi_insn}
     (nil))
(insn 192 191 193 19 (set (reg:SI 0 r0)
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":138:8 253 {*arm_movsi_insn}
     (nil))
(call_insn 193 192 194 19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f2800e73200 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":138:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9
;;              11
;;              18
;;              19 (FALLTHRU)
;;              10 [always] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 150 151 152 153 214 215
(code_label 194 193 195 20 9 (nil) [4 uses])
(note 195 194 196 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 196 195 197 20 (set (reg/f:SI 3 r3 [214])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":142:17 253 {*arm_movsi_insn}
     (nil))
(insn 197 196 198 20 (set (reg:SI 3 r3 [orig:150 base.18_38 ] [150])
        (mem/c:SI (reg/f:SI 3 r3 [214]) [1 base+0 S4 A32])) "sdc.c":142:17 253 {*arm_movsi_insn}
     (nil))
(insn 198 197 199 20 (set (reg:SI 3 r3 [orig:151 _39 ] [151])
        (plus:SI (reg:SI 3 r3 [orig:150 base.18_38 ] [150])
            (const_int 56 [0x38]))) "sdc.c":142:17 7 {*arm_addsi3}
     (nil))
(insn 199 198 200 20 (set (reg/f:SI 2 r2 [orig:152 _40 ] [152])
        (reg:SI 3 r3 [orig:151 _39 ] [151])) "sdc.c":142:4 253 {*arm_movsi_insn}
     (nil))
(insn 200 199 201 20 (set (reg:SI 3 r3 [215])
        (const_int -1 [0xffffffffffffffff])) "sdc.c":142:33 253 {*arm_movsi_insn}
     (nil))
(insn 201 200 204 20 (set (mem:SI (reg/f:SI 2 r2 [orig:152 _40 ] [152]) [1 *_40+0 S4 A32])
        (reg:SI 3 r3 [215])) "sdc.c":142:33 253 {*arm_movsi_insn}
     (nil))
(insn 204 201 205 20 (clobber (reg/i:SI 0 r0)) "sdc.c":144:1 -1
     (nil))
(insn 205 204 208 20 (clobber (reg:SI 3 r3 [orig:153 <retval> ] [153])) "sdc.c":144:1 -1
     (nil))
(insn 208 205 203 20 (const_int 0 [0]) "sdc.c":144:1 311 {nop}
     (nil))
(insn 203 208 206 20 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:153 <retval> ] [153])) "sdc.c":144:1 253 {*arm_movsi_insn}
     (nil))
(insn 206 203 215 20 (use (reg/i:SI 0 r0)) "sdc.c":144:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 215 206 0 NOTE_INSN_DELETED)

;; Function sdc_init (sdc_init, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 19:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 51:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 55:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 60:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 66:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 69:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 77: point = 0, n_alt = -1
   Insn 74: point = 0, n_alt = -2
   Insn 79: point = 1, n_alt = -1
   Insn 76: point = 1, n_alt = -1
   Insn 75: point = 2, n_alt = -1
   Insn 72: point = 2, n_alt = -1
   Insn 71: point = 2, n_alt = 4
   Insn 70: point = 2, n_alt = 5
   Insn 69: point = 3, n_alt = 1
   Insn 68: point = 4, n_alt = 4
   Insn 67: point = 5, n_alt = 5
   Insn 66: point = 6, n_alt = 1
   Insn 65: point = 7, n_alt = 4
   Insn 64: point = 8, n_alt = 5
   Insn 63: point = 9, n_alt = 1
   Insn 62: point = 10, n_alt = 4
   Insn 61: point = 11, n_alt = 5
   Insn 60: point = 12, n_alt = 1
   Insn 59: point = 13, n_alt = 4
   Insn 58: point = 14, n_alt = 5
   Insn 57: point = 15, n_alt = 1
   Insn 56: point = 16, n_alt = -2
   Insn 55: point = 18, n_alt = 4
   Insn 54: point = 20, n_alt = 4
   Insn 53: point = 22, n_alt = 4
   Insn 52: point = 23, n_alt = -1
   Insn 51: point = 23, n_alt = 1
   Insn 50: point = 23, n_alt = 1
   Insn 49: point = 23, n_alt = 1
   Insn 48: point = 23, n_alt = -1
   Insn 47: point = 23, n_alt = 1
   Insn 46: point = 23, n_alt = -2
   Insn 45: point = 24, n_alt = 1
   Insn 44: point = 24, n_alt = 4
   Insn 43: point = 25, n_alt = -1
   Insn 42: point = 25, n_alt = 1
   Insn 41: point = 25, n_alt = -2
   Insn 40: point = 26, n_alt = 1
   Insn 39: point = 26, n_alt = 4
   Insn 38: point = 27, n_alt = -1
   Insn 37: point = 27, n_alt = 1
   Insn 36: point = 27, n_alt = 1
   Insn 35: point = 27, n_alt = 1
   Insn 34: point = 27, n_alt = -1
   Insn 33: point = 27, n_alt = 1
   Insn 32: point = 27, n_alt = 4
   Insn 31: point = 27, n_alt = 1
   Insn 30: point = 27, n_alt = -1
   Insn 29: point = 27, n_alt = 1
   Insn 28: point = 27, n_alt = 1
   Insn 27: point = 27, n_alt = 1
   Insn 26: point = 27, n_alt = -1
   Insn 25: point = 27, n_alt = 1
   Insn 24: point = 27, n_alt = 1
   Insn 23: point = 27, n_alt = 1
   Insn 22: point = 27, n_alt = 5
   Insn 21: point = 28, n_alt = 1
   Insn 20: point = 29, n_alt = -2
   Insn 19: point = 31, n_alt = 4
   Insn 18: point = 33, n_alt = 4
   Insn 17: point = 35, n_alt = 4
   Insn 16: point = 36, n_alt = 5
   Insn 15: point = 37, n_alt = 1
   Insn 14: point = 38, n_alt = -2
   Insn 13: point = 40, n_alt = 4
   Insn 12: point = 42, n_alt = 4
   Insn 11: point = 43, n_alt = -1
   Insn 10: point = 43, n_alt = 4
   Insn 9: point = 43, n_alt = 5
   Insn 8: point = 44, n_alt = 4
   Insn 7: point = 45, n_alt = 4
   Insn 6: point = 46, n_alt = 5
   Insn 5: point = 47, n_alt = 4
 r113: [39..40]
 r114: [36..38]
 r115: [32..33]
 r116: [30..31]
 r117: [27..29]
 r118: [25..26]
 r119: [23..24]
 r120: [19..20]
 r121: [17..18]
 r122: [14..16]
 r123: [0..1]
 r124: [46..47]
 r125: [43..45]
 r126: [43..44]
 r127: [41..42]
 r128: [36..37]
 r129: [34..35]
 r130: [27..28]
 r131: [21..22]
 r132: [14..15]
 r133: [11..13]
 r134: [11..12]
 r135: [8..10]
 r136: [8..9]
 r137: [5..7]
 r138: [5..6]
 r139: [2..4]
 r140: [2..3]
Compressing live ranges: from 48 to 40 - 83%
Ranges after the compression:
 r113: [32..33]
 r114: [30..31]
 r115: [26..27]
 r116: [24..25]
 r117: [22..23]
 r118: [20..21]
 r119: [18..19]
 r120: [14..15]
 r121: [12..13]
 r122: [10..11]
 r123: [0..1]
 r124: [38..39]
 r125: [36..37]
 r126: [36..37]
 r127: [34..35]
 r128: [30..31]
 r129: [28..29]
 r130: [22..23]
 r131: [16..17]
 r132: [10..11]
 r133: [8..9]
 r134: [8..9]
 r135: [6..7]
 r136: [6..7]
 r137: [4..5]
 r138: [4..5]
 r139: [2..3]
 r140: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 58
changing reg in insn 76
changing reg in insn 74
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 53
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 69
changing reg in insn 70
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 72.


sdc_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={21d,11u} r1={17d,7u} r2={25d,15u} r3={30d,20u} r11={1d,5u} r12={18d} r13={1d,11u} r14={10d} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={9d} r101={9d} r102={1d,1u} r104={9d} r105={9d} r106={9d} 
;;    total ref usage 1004{934d,70u,0e} in 73{64 regular + 9 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 3 r3 [124])
        (const_int 1164378112 [0x45670000])) "sdc.c":148:7 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 RCA+0 S4 A32])
        (reg:SI 3 r3 [124])) "sdc.c":148:7 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 3 r3 [125])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 2 r2 [126])
        (const_int 268455936 [0x10005000])) "sdc.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/c:SI (reg/f:SI 3 r3 [125]) [1 base+0 S4 A32])
        (reg:SI 2 r2 [126])) "sdc.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7f2800e83480 *.LC0>)) "sdc.c":150:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 11 10 12 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f2800e73700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":150:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [127])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":151:4 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [orig:113 base.19_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [127]) [1 base+0 S4 A32])) "sdc.c":151:4 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 2 r2 [orig:114 base.20_2 ] [114])
        (reg:SI 3 r3 [orig:113 base.19_1 ] [113])) "sdc.c":151:4 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [128])
        (const_int 191 [0xbf])) "sdc.c":151:26 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (mem:SI (reg/f:SI 2 r2 [orig:114 base.20_2 ] [114]) [1 *base.20_2+0 S4 A32])
        (reg:SI 3 r3 [128])) "sdc.c":151:26 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [129])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":152:17 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 3 r3 [orig:115 base.21_3 ] [115])
        (mem/c:SI (reg/f:SI 3 r3 [129]) [1 base+0 S4 A32])) "sdc.c":152:17 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (plus:SI (reg:SI 3 r3 [orig:115 base.21_3 ] [115])
            (const_int 4 [0x4]))) "sdc.c":152:17 7 {*arm_addsi3}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 2 r2 [orig:117 _5 ] [117])
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "sdc.c":152:4 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:SI 3 r3 [130])
        (const_int 198 [0xc6])) "sdc.c":152:26 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (mem:SI (reg/f:SI 2 r2 [orig:117 _5 ] [117]) [1 *_5+0 S4 A32])
        (reg:SI 3 r3 [130])) "sdc.c":152:26 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (reg:SI 2 r2)
        (const_int 0 [0])) "sdc.c":155:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 1 r1)
        (const_int 0 [0])) "sdc.c":155:3 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (reg:SI 0 r0)
        (const_int 0 [0])) "sdc.c":155:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 26 25 27 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":155:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 27 26 28 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":156:3 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (reg:SI 1 r1)
        (const_int 0 [0])) "sdc.c":156:3 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:SI 0 r0)
        (const_int 55 [0x37])) "sdc.c":156:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 30 29 31 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":156:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 31 30 32 2 (set (reg:SI 2 r2)
        (const_int 1 [0x1])) "sdc.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:SI 1 r1)
        (const_int 65535 [0xffff])) "sdc.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (reg:SI 0 r0)
        (const_int 41 [0x29])) "sdc.c":158:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":158:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 35 34 36 2 (set (reg:SI 2 r2)
        (const_int 7 [0x7])) "sdc.c":159:3 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 1 r1)
        (const_int 0 [0])) "sdc.c":159:3 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) "sdc.c":159:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 38 37 39 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":159:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 39 38 40 2 (set (reg:SI 3 r3 [orig:118 RCA.22_6 ] [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 RCA+0 S4 A32])) "sdc.c":160:3 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":160:3 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:118 RCA.22_6 ] [118])) "sdc.c":160:3 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 2 (set (reg:SI 0 r0)
        (const_int 3 [0x3])) "sdc.c":160:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 44 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":160:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 44 43 45 2 (set (reg:SI 3 r3 [orig:119 RCA.23_7 ] [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 RCA+0 S4 A32])) "sdc.c":161:3 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":161:3 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:119 RCA.23_7 ] [119])) "sdc.c":161:3 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 2 (set (reg:SI 0 r0)
        (const_int 7 [0x7])) "sdc.c":161:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 48 47 49 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":161:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 49 48 50 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":162:3 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 2 (set (reg:SI 1 r1)
        (const_int 512 [0x200])) "sdc.c":162:3 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 2 (set (reg:SI 0 r0)
        (const_int 16 [0x10])) "sdc.c":162:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 52 51 53 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":162:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 53 52 54 2 (set (reg/f:SI 3 r3 [131])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":165:17 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 2 (set (reg:SI 3 r3 [orig:120 base.24_8 ] [120])
        (mem/c:SI (reg/f:SI 3 r3 [131]) [1 base+0 S4 A32])) "sdc.c":165:17 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 2 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (plus:SI (reg:SI 3 r3 [orig:120 base.24_8 ] [120])
            (const_int 60 [0x3c]))) "sdc.c":165:17 7 {*arm_addsi3}
     (nil))
(insn 56 55 57 2 (set (reg/f:SI 2 r2 [orig:122 _10 ] [122])
        (reg:SI 3 r3 [orig:121 _9 ] [121])) "sdc.c":165:4 253 {*arm_movsi_insn}
     (nil))
(insn 57 56 58 2 (set (reg:SI 3 r3 [132])
        (const_int 393216 [0x60000])) "sdc.c":165:26 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 2 (set (mem:SI (reg/f:SI 2 r2 [orig:122 _10 ] [122]) [1 *_10+0 S4 A32])
        (reg:SI 3 r3 [132])) "sdc.c":165:26 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 2 (set (reg/f:SI 3 r3 [133])
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 2 (set (reg:SI 2 r2 [134])
        (const_int 0 [0])) "sdc.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 2 (set (mem/c:SI (reg/f:SI 3 r3 [133]) [1 rxsem.value+0 S4 A32])
        (reg:SI 2 r2 [134])) "sdc.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 2 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 2 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "sdc.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [5 rxsem.queue+0 S4 A32])
        (reg:SI 2 r2 [136])) "sdc.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 2 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":169:15 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 2 (set (reg:SI 2 r2 [138])
        (const_int 0 [0])) "sdc.c":169:15 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 2 (set (mem/c:SI (reg/f:SI 3 r3 [137]) [1 txsem.value+0 S4 A32])
        (reg:SI 2 r2 [138])) "sdc.c":169:15 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 2 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 2 (set (reg:SI 2 r2 [140])
        (const_int 0 [0])) "sdc.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [139])
                (const_int 4 [0x4])) [5 txsem.queue+0 S4 A32])
        (reg:SI 2 r2 [140])) "sdc.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f2800e83510 *.LC1>)) "sdc.c":172:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 72 71 75 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f2800e73700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":172:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 75 72 76 2 (clobber (reg/i:SI 0 r0)) "sdc.c":173:1 -1
     (nil))
(insn 76 75 79 2 (clobber (reg:SI 3 r3 [orig:123 <retval> ] [123])) "sdc.c":173:1 -1
     (nil))
(insn 79 76 74 2 (const_int 0 [0]) "sdc.c":173:1 311 {nop}
     (nil))
(insn 74 79 77 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:123 <retval> ] [123])) "sdc.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 77 74 83 2 (use (reg/i:SI 0 r0)) "sdc.c":173:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 83 77 0 NOTE_INSN_DELETED)

;; Function getblock (getblock, funcdef_no=3, decl_uid=4513, cgraph_uid=4, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 30:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 47:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 7
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 75: point = 0, n_alt = -1
   Insn 72: point = 0, n_alt = -2
   Insn 77: point = 1, n_alt = -1
   Insn 74: point = 1, n_alt = -1
   Insn 73: point = 2, n_alt = -1
  BB 3
   Insn 78: point = 2, n_alt = -1
   Insn 58: point = 2, n_alt = -1
   Insn 57: point = 2, n_alt = 4
  BB 5
   Insn 68: point = 2, n_alt = -1
   Insn 67: point = 2, n_alt = 3
   Insn 65: point = 3, n_alt = 4
   Insn 64: point = 5, n_alt = 4
  BB 7
   Insn 81: point = 6, n_alt = -1
  BB 4
  BB 2
   Insn 55: point = 6, n_alt = -1
   Insn 54: point = 6, n_alt = 3
   Insn 53: point = 7, n_alt = 4
   Insn 52: point = 9, n_alt = 4
   Insn 51: point = 11, n_alt = 4
   Insn 50: point = 12, n_alt = 5
   Insn 49: point = 13, n_alt = 1
   Insn 48: point = 14, n_alt = -2
   Insn 47: point = 16, n_alt = 4
   Insn 46: point = 18, n_alt = 4
   Insn 45: point = 20, n_alt = 4
   Insn 44: point = 21, n_alt = -1
   Insn 43: point = 21, n_alt = -2
   Insn 42: point = 22, n_alt = -2
   Insn 41: point = 23, n_alt = 1
   Insn 40: point = 23, n_alt = 4
   Insn 39: point = 24, n_alt = 4
   Insn 38: point = 25, n_alt = 5
   Insn 37: point = 26, n_alt = 2
   Insn 36: point = 28, n_alt = 4
   Insn 35: point = 29, n_alt = 5
   Insn 34: point = 30, n_alt = 1
   Insn 33: point = 31, n_alt = 5
   Insn 32: point = 32, n_alt = 1
   Insn 31: point = 33, n_alt = -2
   Insn 30: point = 35, n_alt = 4
   Insn 29: point = 37, n_alt = 4
   Insn 28: point = 39, n_alt = 4
   Insn 27: point = 40, n_alt = 5
   Insn 26: point = 41, n_alt = 4
   Insn 25: point = 42, n_alt = -2
   Insn 24: point = 44, n_alt = 4
   Insn 23: point = 46, n_alt = 4
   Insn 22: point = 48, n_alt = 4
   Insn 21: point = 49, n_alt = 5
   Insn 20: point = 50, n_alt = 1
   Insn 19: point = 51, n_alt = 4
   Insn 18: point = 52, n_alt = 5
   Insn 17: point = 53, n_alt = 1
   Insn 16: point = 54, n_alt = 4
   Insn 15: point = 55, n_alt = 5
   Insn 14: point = 56, n_alt = 1
   Insn 13: point = 57, n_alt = 4
   Insn 12: point = 58, n_alt = 5
   Insn 11: point = 59, n_alt = 1
   Insn 10: point = 60, n_alt = 4
   Insn 9: point = 61, n_alt = 5
   Insn 8: point = 62, n_alt = 4
   Insn 7: point = 63, n_alt = 4
   Insn 3: point = 64, n_alt = 5
   Insn 2: point = 64, n_alt = 5
 r113: [45..46]
 r114: [43..44]
 r115: [40..42]
 r116: [36..37]
 r117: [34..35]
 r118: [31..33]
 r119: [25..26]
 r120: [21..24]
 r121: [22..23]
 r122: [17..18]
 r123: [15..16]
 r124: [12..14]
 r125: [8..9]
 r126: [6..7]
 r127: [2..3]
 r128: [0..1]
 r129: [61..63]
 r130: [61..62]
 r131: [58..60]
 r132: [58..59]
 r133: [55..57]
 r134: [55..56]
 r135: [52..54]
 r136: [52..53]
 r137: [49..51]
 r138: [49..50]
 r139: [47..48]
 r140: [40..41]
 r141: [38..39]
 r142: [31..32]
 r143: [29..30]
 r144: [27..28]
 r145: [19..20]
 r146: [12..13]
 r147: [10..11]
 r148: [4..5]
Compressing live ranges: from 64 to 54 - 84%
Ranges after the compression:
 r113: [40..41]
 r114: [38..39]
 r115: [36..37]
 r116: [32..33]
 r117: [30..31]
 r118: [28..29]
 r119: [22..23]
 r120: [20..21]
 r121: [20..21]
 r122: [16..17]
 r123: [14..15]
 r124: [12..13]
 r125: [8..9]
 r126: [6..7]
 r127: [2..3]
 r128: [0..1]
 r129: [52..53]
 r130: [52..53]
 r131: [50..51]
 r132: [50..51]
 r133: [48..49]
 r134: [48..49]
 r135: [46..47]
 r136: [46..47]
 r137: [44..45]
 r138: [44..45]
 r139: [42..43]
 r140: [36..37]
 r141: [34..35]
 r142: [28..29]
 r143: [26..27]
 r144: [24..25]
 r145: [18..19]
 r146: [12..13]
 r147: [10..11]
 r148: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 65
changing reg in insn 67
changing reg in insn 74
changing reg in insn 72
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 64
changing reg in insn 65
deleting insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 58.


getblock

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={4d,2u} r2={12d,9u} r3={30d,27u} r11={1d,15u} r12={4d} r13={1d,9u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 315{245d,70u,0e} in 63{61 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 blk+0 S4 A32])
        (reg:SI 0 r0 [ blk ])) "sdc.c":176:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 buf+0 S4 A32])
        (reg:SI 1 r1 [ buf ])) "sdc.c":176:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 2 r2 [129])
        (symbol_ref:SI ("rxbuf") [flags 0x2]  <var_decl 0x7f2800e6a360 rxbuf>)) "sdc.c":180:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 buf+0 S4 A32])) "sdc.c":180:9 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (reg/f:SI 2 r2 [129]) [3 rxbuf+0 S4 A32])
        (reg/f:SI 3 r3 [130])) "sdc.c":180:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [131])
        (symbol_ref:SI ("rxcount") [flags 0x2]  <var_decl 0x7f2800e6a480 rxcount>)) "sdc.c":180:24 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [132])
        (const_int 1024 [0x400])) "sdc.c":180:24 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (reg/f:SI 3 r3 [131]) [1 rxcount+0 S4 A32])
        (reg:SI 2 r2 [132])) "sdc.c":180:24 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [133])
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":181:15 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 2 r2 [134])
        (const_int 0 [0])) "sdc.c":181:15 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (reg/f:SI 3 r3 [133]) [1 rxsem.value+0 S4 A32])
        (reg:SI 2 r2 [134])) "sdc.c":181:15 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":182:15 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "sdc.c":182:15 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [5 rxsem.queue+0 S4 A32])
        (reg:SI 2 r2 [136])) "sdc.c":182:15 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("rxdone") [flags 0x2]  <var_decl 0x7f2800e6a5a0 rxdone>)) "sdc.c":183:10 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 2 r2 [138])
        (const_int 0 [0])) "sdc.c":183:10 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (reg/f:SI 3 r3 [137]) [1 rxdone+0 S4 A32])
        (reg:SI 2 r2 [138])) "sdc.c":183:10 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":185:17 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (reg:SI 3 r3 [orig:113 base.25_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [139]) [1 base+0 S4 A32])) "sdc.c":185:17 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [orig:113 base.25_1 ] [113])
            (const_int 36 [0x24]))) "sdc.c":185:17 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 2 r2 [orig:115 _3 ] [115])
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "sdc.c":185:4 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg:SI 3 r3 [140])
        (const_int -65536 [0xffffffffffff0000])) "sdc.c":185:30 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (mem:SI (reg/f:SI 2 r2 [orig:115 _3 ] [115]) [1 *_3+0 S4 A32])
        (reg:SI 3 r3 [140])) "sdc.c":185:30 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":187:17 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:SI 3 r3 [orig:116 base.26_4 ] [116])
        (mem/c:SI (reg/f:SI 3 r3 [141]) [1 base+0 S4 A32])) "sdc.c":187:17 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 2 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (plus:SI (reg:SI 3 r3 [orig:116 base.26_4 ] [116])
            (const_int 40 [0x28]))) "sdc.c":187:17 7 {*arm_addsi3}
     (nil))
(insn 31 30 32 2 (set (reg/f:SI 2 r2 [orig:118 _6 ] [118])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "sdc.c":187:4 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:SI 3 r3 [142])
        (const_int 1024 [0x400])) "sdc.c":187:31 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (mem:SI (reg/f:SI 2 r2 [orig:118 _6 ] [118]) [1 *_6+0 S4 A32])
        (reg:SI 3 r3 [142])) "sdc.c":187:31 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 2 (set (reg:SI 3 r3 [143])
        (const_int 18 [0x12])) "sdc.c":189:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 cmd+0 S4 A64])
        (reg:SI 3 r3 [143])) "sdc.c":189:7 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 3 r3 [144])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 blk+0 S4 A32])) "sdc.c":190:17 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (ashift:SI (reg:SI 3 r3 [144])
            (const_int 10 [0xa]))) "sdc.c":190:17 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 arg+0 S4 A32])
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "sdc.c":190:7 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:SI 3 r3 [orig:120 cmd.27_8 ] [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 cmd+0 S4 A64])) "sdc.c":191:3 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (reg:SI 1 r1 [orig:121 arg.28_9 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 arg+0 S4 A32])) "sdc.c":191:3 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 43 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":191:3 253 {*arm_movsi_insn}
     (nil))
(insn 43 41 44 2 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:120 cmd.27_8 ] [120])) "sdc.c":191:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 44 43 45 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":191:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 45 44 46 2 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":195:17 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 2 (set (reg:SI 3 r3 [orig:122 base.29_10 ] [122])
        (mem/c:SI (reg/f:SI 3 r3 [145]) [1 base+0 S4 A32])) "sdc.c":195:17 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 2 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 3 r3 [orig:122 base.29_10 ] [122])
            (const_int 44 [0x2c]))) "sdc.c":195:17 7 {*arm_addsi3}
     (nil))
(insn 48 47 49 2 (set (reg/f:SI 2 r2 [orig:124 _12 ] [124])
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "sdc.c":195:4 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 2 (set (reg:SI 3 r3 [146])
        (const_int 147 [0x93])) "sdc.c":195:29 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 2 (set (mem:SI (reg/f:SI 2 r2 [orig:124 _12 ] [124]) [1 *_12+0 S4 A32])
        (reg:SI 3 r3 [146])) "sdc.c":195:29 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 2 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f2801b4c7e0 running>)) "sdc.c":198:14 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 2 (set (reg/f:SI 3 r3 [orig:125 running.30_13 ] [125])
        (mem/f/c:SI (reg/f:SI 3 r3 [147]) [5 running+0 S4 A32])) "sdc.c":198:14 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 2 (set (reg:SI 3 r3 [orig:126 _14 ] [126])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:125 running.30_13 ] [125])
                (const_int 24 [0x18])) [1 running.30_13->pid+0 S4 A32])) "sdc.c":198:14 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:126 _14 ] [126])
            (const_int 0 [0]))) "sdc.c":198:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 55 54 56 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "sdc.c":198:6 273 {arm_cond_branch}
     (nil)
 -> 61)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 56 55 57 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 3 (set (reg:SI 0 r0)
        (symbol_ref:SI ("rxsem") [flags 0x2]  <var_decl 0x7f2800e6a6c0 rxsem>)) "sdc.c":199:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 58 57 78 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("P") [flags 0x41]  <function_decl 0x7f2800e73b00 P>) [0 P S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":199:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 78 58 79 3 (set (pc)
        (label_ref 69)) 284 {*arm_jump}
     (nil)
 -> 69)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 79 78 61)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 7, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 61 79 62 4 19 (nil) [1 uses])
(note 62 61 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 80 62 81 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 66 7 (const_int 0 [0]) "sdc.c":201:10 311 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 7, next block 6, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              5 (DFS_BACK)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 148
(code_label 66 81 63 5 21 (nil) [1 uses])
(note 63 66 64 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 5 (set (reg/f:SI 3 r3 [148])
        (symbol_ref:SI ("rxdone") [flags 0x2]  <var_decl 0x7f2800e6a5a0 rxdone>)) "sdc.c":201:17 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 67 5 (set (reg:SI 3 r3 [orig:127 rxdone.31_15 ] [127])
        (mem/c:SI (reg/f:SI 3 r3 [148]) [1 rxdone+0 S4 A32])) "sdc.c":201:17 253 {*arm_movsi_insn}
     (nil))
(insn 67 65 68 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:127 rxdone.31_15 ] [127])
            (const_int 0 [0]))) "sdc.c":201:17 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 68 67 69 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "sdc.c":201:17 273 {arm_cond_branch}
     (nil)
 -> 66)
;;  succ:       5 (DFS_BACK)
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              3 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 128
(code_label 69 68 70 6 20 (nil) [1 uses])
(note 70 69 73 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 73 70 74 6 (clobber (reg/i:SI 0 r0)) "sdc.c":204:1 -1
     (nil))
(insn 74 73 77 6 (clobber (reg:SI 3 r3 [orig:128 <retval> ] [128])) "sdc.c":204:1 -1
     (nil))
(insn 77 74 72 6 (const_int 0 [0]) "sdc.c":204:1 311 {nop}
     (nil))
(insn 72 77 75 6 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:128 <retval> ] [128])) "sdc.c":204:1 253 {*arm_movsi_insn}
     (nil))
(insn 75 72 83 6 (use (reg/i:SI 0 r0)) "sdc.c":204:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 83 75 0 NOTE_INSN_DELETED)

;; Function putblock (putblock, funcdef_no=4, decl_uid=4524, cgraph_uid=5, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 30:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 47:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 49:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 50:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 7
EBB 5
EBB 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 75: point = 0, n_alt = -1
   Insn 72: point = 0, n_alt = -2
   Insn 77: point = 1, n_alt = -1
   Insn 74: point = 1, n_alt = -1
   Insn 73: point = 2, n_alt = -1
  BB 3
   Insn 78: point = 2, n_alt = -1
   Insn 58: point = 2, n_alt = -1
   Insn 57: point = 2, n_alt = 4
  BB 5
   Insn 68: point = 2, n_alt = -1
   Insn 67: point = 2, n_alt = 3
   Insn 65: point = 3, n_alt = 4
   Insn 64: point = 5, n_alt = 4
  BB 7
   Insn 81: point = 6, n_alt = -1
  BB 4
  BB 2
   Insn 55: point = 6, n_alt = -1
   Insn 54: point = 6, n_alt = 3
   Insn 53: point = 7, n_alt = 4
   Insn 52: point = 9, n_alt = 4
   Insn 51: point = 11, n_alt = 4
   Insn 50: point = 12, n_alt = 5
   Insn 49: point = 13, n_alt = 1
   Insn 48: point = 14, n_alt = -2
   Insn 47: point = 16, n_alt = 4
   Insn 46: point = 18, n_alt = 4
   Insn 45: point = 20, n_alt = 4
   Insn 44: point = 21, n_alt = -1
   Insn 43: point = 21, n_alt = -2
   Insn 42: point = 22, n_alt = -2
   Insn 41: point = 23, n_alt = 1
   Insn 40: point = 23, n_alt = 4
   Insn 39: point = 24, n_alt = 4
   Insn 38: point = 25, n_alt = 5
   Insn 37: point = 26, n_alt = 2
   Insn 36: point = 28, n_alt = 4
   Insn 35: point = 29, n_alt = 5
   Insn 34: point = 30, n_alt = 1
   Insn 33: point = 31, n_alt = 5
   Insn 32: point = 32, n_alt = 1
   Insn 31: point = 33, n_alt = -2
   Insn 30: point = 35, n_alt = 4
   Insn 29: point = 37, n_alt = 4
   Insn 28: point = 39, n_alt = 4
   Insn 27: point = 40, n_alt = 5
   Insn 26: point = 41, n_alt = 4
   Insn 25: point = 42, n_alt = -2
   Insn 24: point = 44, n_alt = 4
   Insn 23: point = 46, n_alt = 4
   Insn 22: point = 48, n_alt = 4
   Insn 21: point = 49, n_alt = 5
   Insn 20: point = 50, n_alt = 1
   Insn 19: point = 51, n_alt = 4
   Insn 18: point = 52, n_alt = 5
   Insn 17: point = 53, n_alt = 1
   Insn 16: point = 54, n_alt = 4
   Insn 15: point = 55, n_alt = 5
   Insn 14: point = 56, n_alt = 1
   Insn 13: point = 57, n_alt = 4
   Insn 12: point = 58, n_alt = 5
   Insn 11: point = 59, n_alt = 1
   Insn 10: point = 60, n_alt = 4
   Insn 9: point = 61, n_alt = 5
   Insn 8: point = 62, n_alt = 4
   Insn 7: point = 63, n_alt = 4
   Insn 3: point = 64, n_alt = 5
   Insn 2: point = 64, n_alt = 5
 r113: [45..46]
 r114: [43..44]
 r115: [40..42]
 r116: [36..37]
 r117: [34..35]
 r118: [31..33]
 r119: [25..26]
 r120: [21..24]
 r121: [22..23]
 r122: [17..18]
 r123: [15..16]
 r124: [12..14]
 r125: [8..9]
 r126: [6..7]
 r127: [2..3]
 r128: [0..1]
 r129: [61..63]
 r130: [61..62]
 r131: [58..60]
 r132: [58..59]
 r133: [55..57]
 r134: [55..56]
 r135: [52..54]
 r136: [52..53]
 r137: [49..51]
 r138: [49..50]
 r139: [47..48]
 r140: [40..41]
 r141: [38..39]
 r142: [31..32]
 r143: [29..30]
 r144: [27..28]
 r145: [19..20]
 r146: [12..13]
 r147: [10..11]
 r148: [4..5]
Compressing live ranges: from 64 to 54 - 84%
Ranges after the compression:
 r113: [40..41]
 r114: [38..39]
 r115: [36..37]
 r116: [32..33]
 r117: [30..31]
 r118: [28..29]
 r119: [22..23]
 r120: [20..21]
 r121: [20..21]
 r122: [16..17]
 r123: [14..15]
 r124: [12..13]
 r125: [8..9]
 r126: [6..7]
 r127: [2..3]
 r128: [0..1]
 r129: [52..53]
 r130: [52..53]
 r131: [50..51]
 r132: [50..51]
 r133: [48..49]
 r134: [48..49]
 r135: [46..47]
 r136: [46..47]
 r137: [44..45]
 r138: [44..45]
 r139: [42..43]
 r140: [36..37]
 r141: [34..35]
 r142: [28..29]
 r143: [26..27]
 r144: [24..25]
 r145: [18..19]
 r146: [12..13]
 r147: [10..11]
 r148: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 33
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 43
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 65
changing reg in insn 67
changing reg in insn 74
changing reg in insn 72
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 46
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 64
changing reg in insn 65
deleting insn with uid = 42.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 58.


putblock

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={4d,2u} r2={12d,9u} r3={30d,27u} r11={1d,15u} r12={4d} r13={1d,9u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 315{245d,70u,0e} in 63{61 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 blk+0 S4 A32])
        (reg:SI 0 r0 [ blk ])) "sdc.c":207:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 buf+0 S4 A32])
        (reg:SI 1 r1 [ buf ])) "sdc.c":207:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 2 r2 [129])
        (symbol_ref:SI ("txbuf") [flags 0x2]  <var_decl 0x7f2800e6a3f0 txbuf>)) "sdc.c":211:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 buf+0 S4 A32])) "sdc.c":211:9 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (reg/f:SI 2 r2 [129]) [3 txbuf+0 S4 A32])
        (reg/f:SI 3 r3 [130])) "sdc.c":211:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [131])
        (symbol_ref:SI ("txcount") [flags 0x2]  <var_decl 0x7f2800e6a510 txcount>)) "sdc.c":211:24 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [132])
        (const_int 1024 [0x400])) "sdc.c":211:24 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (reg/f:SI 3 r3 [131]) [1 txcount+0 S4 A32])
        (reg:SI 2 r2 [132])) "sdc.c":211:24 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [133])
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":212:15 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 2 r2 [134])
        (const_int 0 [0])) "sdc.c":212:15 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (reg/f:SI 3 r3 [133]) [1 txsem.value+0 S4 A32])
        (reg:SI 2 r2 [134])) "sdc.c":212:15 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":213:15 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "sdc.c":213:15 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [5 txsem.queue+0 S4 A32])
        (reg:SI 2 r2 [136])) "sdc.c":213:15 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("txdone") [flags 0x2]  <var_decl 0x7f2800e6a630 txdone>)) "sdc.c":214:10 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 2 r2 [138])
        (const_int 0 [0])) "sdc.c":214:10 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (mem/c:SI (reg/f:SI 3 r3 [137]) [1 txdone+0 S4 A32])
        (reg:SI 2 r2 [138])) "sdc.c":214:10 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":216:17 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (reg:SI 3 r3 [orig:113 base.32_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [139]) [1 base+0 S4 A32])) "sdc.c":216:17 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [orig:113 base.32_1 ] [113])
            (const_int 36 [0x24]))) "sdc.c":216:17 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 2 r2 [orig:115 _3 ] [115])
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "sdc.c":216:4 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg:SI 3 r3 [140])
        (const_int -65536 [0xffffffffffff0000])) "sdc.c":216:30 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (mem:SI (reg/f:SI 2 r2 [orig:115 _3 ] [115]) [1 *_3+0 S4 A32])
        (reg:SI 3 r3 [140])) "sdc.c":216:30 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":217:17 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:SI 3 r3 [orig:116 base.33_4 ] [116])
        (mem/c:SI (reg/f:SI 3 r3 [141]) [1 base+0 S4 A32])) "sdc.c":217:17 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 2 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (plus:SI (reg:SI 3 r3 [orig:116 base.33_4 ] [116])
            (const_int 40 [0x28]))) "sdc.c":217:17 7 {*arm_addsi3}
     (nil))
(insn 31 30 32 2 (set (reg/f:SI 2 r2 [orig:118 _6 ] [118])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "sdc.c":217:4 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg:SI 3 r3 [142])
        (const_int 1024 [0x400])) "sdc.c":217:31 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (mem:SI (reg/f:SI 2 r2 [orig:118 _6 ] [118]) [1 *_6+0 S4 A32])
        (reg:SI 3 r3 [142])) "sdc.c":217:31 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 2 (set (reg:SI 3 r3 [143])
        (const_int 25 [0x19])) "sdc.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 cmd+0 S4 A64])
        (reg:SI 3 r3 [143])) "sdc.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 3 r3 [144])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 blk+0 S4 A32])) "sdc.c":220:22 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (ashift:SI (reg:SI 3 r3 [144])
            (const_int 10 [0xa]))) "sdc.c":220:22 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 arg+0 S4 A32])
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "sdc.c":220:7 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:SI 3 r3 [orig:120 cmd.34_8 ] [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 cmd+0 S4 A64])) "sdc.c":221:3 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (reg:SI 1 r1 [orig:121 arg.35_9 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 arg+0 S4 A32])) "sdc.c":221:3 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 43 2 (set (reg:SI 2 r2)
        (const_int 21 [0x15])) "sdc.c":221:3 253 {*arm_movsi_insn}
     (nil))
(insn 43 41 44 2 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:120 cmd.34_8 ] [120])) "sdc.c":221:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 44 43 45 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_command") [flags 0x3]  <function_decl 0x7f2800e61e00 do_command>) [0 do_command S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":221:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 45 44 46 2 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("base") [flags 0x2]  <var_decl 0x7f2800e6a2d0 base>)) "sdc.c":225:17 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 2 (set (reg:SI 3 r3 [orig:122 base.36_10 ] [122])
        (mem/c:SI (reg/f:SI 3 r3 [145]) [1 base+0 S4 A32])) "sdc.c":225:17 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 2 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 3 r3 [orig:122 base.36_10 ] [122])
            (const_int 44 [0x2c]))) "sdc.c":225:17 7 {*arm_addsi3}
     (nil))
(insn 48 47 49 2 (set (reg/f:SI 2 r2 [orig:124 _12 ] [124])
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "sdc.c":225:4 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 2 (set (reg:SI 3 r3 [146])
        (const_int 145 [0x91])) "sdc.c":225:29 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 2 (set (mem:SI (reg/f:SI 2 r2 [orig:124 _12 ] [124]) [1 *_12+0 S4 A32])
        (reg:SI 3 r3 [146])) "sdc.c":225:29 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 2 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f2801b4c7e0 running>)) "sdc.c":228:14 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 2 (set (reg/f:SI 3 r3 [orig:125 running.37_13 ] [125])
        (mem/f/c:SI (reg/f:SI 3 r3 [147]) [5 running+0 S4 A32])) "sdc.c":228:14 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 2 (set (reg:SI 3 r3 [orig:126 _14 ] [126])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:125 running.37_13 ] [125])
                (const_int 24 [0x18])) [1 running.37_13->pid+0 S4 A32])) "sdc.c":228:14 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:126 _14 ] [126])
            (const_int 0 [0]))) "sdc.c":228:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 55 54 56 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "sdc.c":228:6 273 {arm_cond_branch}
     (nil)
 -> 61)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 56 55 57 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 3 (set (reg:SI 0 r0)
        (symbol_ref:SI ("txsem") [flags 0x2]  <var_decl 0x7f2800e6a750 txsem>)) "sdc.c":229:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 58 57 78 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("P") [flags 0x41]  <function_decl 0x7f2800e73b00 P>) [0 P S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "sdc.c":229:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 78 58 79 3 (set (pc)
        (label_ref 69)) 284 {*arm_jump}
     (nil)
 -> 69)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 79 78 61)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 7, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 61 79 62 4 26 (nil) [1 uses])
(note 62 61 80 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 4, next block 5, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 80 62 81 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 66 7 (const_int 0 [0]) "sdc.c":231:10 311 {nop}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 7, next block 6, flags: (RTL, MODIFIED)
;;  pred:       7 [always]  (FALLTHRU)
;;              5 (DFS_BACK)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 148
(code_label 66 81 63 5 28 (nil) [1 uses])
(note 63 66 64 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 5 (set (reg/f:SI 3 r3 [148])
        (symbol_ref:SI ("txdone") [flags 0x2]  <var_decl 0x7f2800e6a630 txdone>)) "sdc.c":231:17 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 67 5 (set (reg:SI 3 r3 [orig:127 txdone.38_15 ] [127])
        (mem/c:SI (reg/f:SI 3 r3 [148]) [1 txdone+0 S4 A32])) "sdc.c":231:17 253 {*arm_movsi_insn}
     (nil))
(insn 67 65 68 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:127 txdone.38_15 ] [127])
            (const_int 0 [0]))) "sdc.c":231:17 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 68 67 69 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) "sdc.c":231:17 273 {arm_cond_branch}
     (nil)
 -> 66)
;;  succ:       5 (DFS_BACK)
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;;              3 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 128
(code_label 69 68 70 6 27 (nil) [1 uses])
(note 70 69 73 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 73 70 74 6 (clobber (reg/i:SI 0 r0)) "sdc.c":233:1 -1
     (nil))
(insn 74 73 77 6 (clobber (reg:SI 3 r3 [orig:128 <retval> ] [128])) "sdc.c":233:1 -1
     (nil))
(insn 77 74 72 6 (const_int 0 [0]) "sdc.c":233:1 311 {nop}
     (nil))
(insn 72 77 75 6 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:128 <retval> ] [128])) "sdc.c":233:1 253 {*arm_movsi_insn}
     (nil))
(insn 75 72 83 6 (use (reg/i:SI 0 r0)) "sdc.c":233:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 83 75 0 NOTE_INSN_DELETED)
