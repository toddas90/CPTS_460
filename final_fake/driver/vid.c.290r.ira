
;; Function fbuf_init (fbuf_init, funcdef_no=0, decl_uid=4480, cgraph_uid=1, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a3(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a4(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a9(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a13(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a14(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a15(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a16(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a17(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a19(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a20(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a21(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a22(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a24(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a25(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a26(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a27(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a28(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a29(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 61(l0): point = 0
   Insn 58(l0): point = 2
   Insn 63(l0): point = 4
   Insn 60(l0): point = 6
   Insn 59(l0): point = 8
   Insn 56(l0): point = 10
   Insn 55(l0): point = 12
   Insn 54(l0): point = 14
   Insn 53(l0): point = 16
   Insn 43(l0): point = 19
   Insn 42(l0): point = 21
   Insn 41(l0): point = 23
   Insn 40(l0): point = 25
   Insn 39(l0): point = 27
   Insn 38(l0): point = 29
   Insn 37(l0): point = 31
   Insn 36(l0): point = 33
   Insn 35(l0): point = 35
   Insn 34(l0): point = 37
   Insn 51(l0): point = 40
   Insn 50(l0): point = 42
   Insn 49(l0): point = 44
   Insn 64(l0): point = 47
   Insn 30(l0): point = 49
   Insn 29(l0): point = 51
   Insn 28(l0): point = 53
   Insn 27(l0): point = 55
   Insn 26(l0): point = 57
   Insn 25(l0): point = 59
   Insn 24(l0): point = 61
   Insn 23(l0): point = 63
   Insn 22(l0): point = 65
   Insn 21(l0): point = 67
   Insn 20(l0): point = 69
   Insn 19(l0): point = 71
   Insn 18(l0): point = 73
   Insn 17(l0): point = 75
   Insn 16(l0): point = 77
   Insn 15(l0): point = 79
   Insn 14(l0): point = 81
   Insn 13(l0): point = 83
   Insn 12(l0): point = 85
   Insn 11(l0): point = 87
   Insn 10(l0): point = 89
   Insn 9(l0): point = 91
   Insn 8(l0): point = 93
   Insn 7(l0): point = 95
   Insn 6(l0): point = 97
   Insn 5(l0): point = 99
 a0(r123): [3..6]
 a1(r140): [11..16]
 a2(r142): [11..12]
 a3(r141): [13..14]
 a4(r139): [43..44]
 a5(r137): [20..21]
 a6(r138): [22..23]
 a7(r122): [26..29]
 a8(r136): [26..27]
 a9(r121): [30..31]
 a10(r119): [30..35]
 a11(r120): [32..33]
 a12(r135): [36..37]
 a13(r134): [50..51]
 a14(r118): [54..57]
 a15(r133): [54..55]
 a16(r117): [60..63]
 a17(r132): [60..61]
 a18(r116): [66..69]
 a19(r131): [66..67]
 a20(r115): [72..75]
 a21(r130): [72..73]
 a22(r114): [78..81]
 a23(r129): [78..79]
 a24(r113): [84..87]
 a25(r128): [84..85]
 a26(r126): [90..93]
 a27(r127): [90..91]
 a28(r124): [96..99]
 a29(r125): [96..97]
Compressing live ranges: from 102 to 38 - 37%
Ranges after the compression:
 a0(r123): [0..1]
 a1(r140): [2..5]
 a2(r142): [2..3]
 a3(r141): [4..5]
 a4(r139): [18..19]
 a5(r137): [6..7]
 a6(r138): [8..9]
 a7(r122): [10..11]
 a8(r136): [10..11]
 a9(r121): [12..13]
 a10(r119): [12..15]
 a11(r120): [14..15]
 a12(r135): [16..17]
 a13(r134): [20..21]
 a14(r118): [22..23]
 a15(r133): [22..23]
 a16(r117): [24..25]
 a17(r132): [24..25]
 a18(r116): [26..27]
 a19(r131): [26..27]
 a20(r115): [28..29]
 a21(r130): [28..29]
 a22(r114): [30..31]
 a23(r129): [30..31]
 a24(r113): [32..33]
 a25(r128): [32..33]
 a26(r126): [34..35]
 a27(r127): [34..35]
 a28(r124): [36..37]
 a29(r125): [36..37]
  regions=1, blocks=6, points=38
    allocnos=30 (big 0), copies=0, conflicts=0, ranges=30
Disposition:
   24:r113 l0     3   22:r114 l0     3   20:r115 l0     3   18:r116 l0     3
   16:r117 l0     3   14:r118 l0     3   10:r119 l0     2   11:r120 l0     3
    9:r121 l0     3    7:r122 l0     3    0:r123 l0     3   28:r124 l0     3
   29:r125 l0     2   26:r126 l0     3   27:r127 l0     2   25:r128 l0     2
   23:r129 l0     2   21:r130 l0     2   19:r131 l0     2   17:r132 l0     2
   15:r133 l0     2   13:r134 l0     3   12:r135 l0     3    8:r136 l0     2
    5:r137 l0     3    6:r138 l0     3    4:r139 l0     3    1:r140 l0     3
    3:r141 l0     2    2:r142 l0     2
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


fbuf_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d} r3={1d} r11={1d,5u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,10u} r103={1d,4u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} 
;;    total ref usage 99{42d,57u,0e} in 49{49 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 124 125 126 127 128 129 130 131 132 133 134
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 125)
        (const_int 3145728 [0x300000])) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])
        (reg:SI 125)) "vid.c":53:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg/f:SI 124)
            (nil))))
(insn 8 7 9 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("fonts0") [flags 0x2]  <var_decl 0x7fd417ce45a0 fonts0>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (reg/f:SI 126) [2 font+0 S4 A32])
        (reg/f:SI 127)) "vid.c":54:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (expr_list:REG_DEAD (reg/f:SI 126)
            (nil))))
(insn 11 10 12 2 (set (reg/f:SI 113 [ _1 ])
        (const_int 268435484 [0x1000001c])) "vid.c":58:3 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 128)
        (const_int 11383 [0x2c77])) "vid.c":58:42 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (mem/v:SI (reg/f:SI 113 [ _1 ]) [3 *_1+0 S4 A32])
        (reg:SI 128)) "vid.c":58:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
            (nil))))
(insn 14 13 15 2 (set (reg/f:SI 114 [ _2 ])
        (const_int 269615104 [0x10120000])) "vid.c":59:3 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 129)
        (const_int 1059012508 [0x3f1f3f9c])) "vid.c":59:42 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (mem/v:SI (reg/f:SI 114 [ _2 ]) [3 *_2+0 S4 A32])
        (reg:SI 129)) "vid.c":59:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 129)
        (expr_list:REG_DEAD (reg/f:SI 114 [ _2 ])
            (nil))))
(insn 17 16 18 2 (set (reg/f:SI 115 [ _3 ])
        (const_int 269615108 [0x10120004])) "vid.c":60:3 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 130)
        (const_int 151740895 [0x90b61df])) "vid.c":60:42 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (mem/v:SI (reg/f:SI 115 [ _3 ]) [3 *_3+0 S4 A32])
        (reg:SI 130)) "vid.c":60:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
            (nil))))
(insn 20 19 21 2 (set (reg/f:SI 116 [ _4 ])
        (const_int 269615112 [0x10120008])) "vid.c":61:3 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:SI 131)
        (const_int 108992512 [0x67f1800])) "vid.c":61:42 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (mem/v:SI (reg/f:SI 116 [ _4 ]) [3 *_4+0 S4 A32])
        (reg:SI 131)) "vid.c":61:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 131)
        (expr_list:REG_DEAD (reg/f:SI 116 [ _4 ])
            (nil))))
(insn 23 22 24 2 (set (reg/f:SI 117 [ _5 ])
        (const_int 269615120 [0x10120010])) "vid.c":65:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 132)
        (const_int 3145728 [0x300000])) "vid.c":65:42 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 132)) "vid.c":65:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
            (nil))))
(insn 26 25 27 2 (set (reg/f:SI 118 [ _6 ])
        (const_int 269615128 [0x10120018])) "vid.c":66:3 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (reg:SI 133)
        (const_int 2091 [0x82b])) "vid.c":66:42 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 133)) "vid.c":66:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
            (nil))))
(insn 29 28 30 2 (set (reg:SI 134)
        (const_int 0 [0])) "vid.c":89:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 64 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 134)) "vid.c":89:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(jump_insn 64 30 65 2 (set (pc)
        (label_ref 44)) "vid.c":89:3 284 {*arm_jump}
     (nil)
 -> 44)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 65 64 46)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 119 120 121 122 135 136 137 138
(code_label 46 65 33 3 3 (nil) [1 uses])
(note 33 46 34 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 3 (set (reg/f:SI 135)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 3 (set (reg/f:SI 119 [ fb.0_7 ])
        (mem/f/c:SI (reg/f:SI 135) [1 fb+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 135)
        (nil)))
(insn 36 35 37 3 (set (reg:SI 120 [ x.1_8 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 3 (set (reg:SI 121 [ _9 ])
        (ashift:SI (reg:SI 120 [ x.1_8 ])
            (const_int 2 [0x2]))) "vid.c":90:7 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 120 [ x.1_8 ])
        (nil)))
(insn 38 37 39 3 (set (reg/f:SI 122 [ _10 ])
        (plus:SI (reg/f:SI 119 [ fb.0_7 ])
            (reg:SI 121 [ _9 ]))) "vid.c":90:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (expr_list:REG_DEAD (reg/f:SI 119 [ fb.0_7 ])
            (nil))))
(insn 39 38 40 3 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":90:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 3 (set (mem/v:SI (reg/f:SI 122 [ _10 ]) [3 *_10+0 S4 A32])
        (reg:SI 136)) "vid.c":90:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_DEAD (reg/f:SI 122 [ _10 ])
            (nil))))
(insn 41 40 42 3 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:25 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 3 (set (reg:SI 137)
        (plus:SI (reg:SI 138)
            (const_int 1 [0x1]))) "vid.c":89:25 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
(insn 43 42 44 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 137)) "vid.c":89:25 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 137)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 139
(code_label 44 43 45 4 2 (nil) [1 uses])
(note 45 44 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 45 50 4 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:14 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139)
            (const_int 307200 [0x4b000]))) "vid.c":89:14 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "vid.c":89:14 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 46)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 123 140 141 142
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:SI 140)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 5 (set (reg:SI 141)
        (const_int 127 [0x7f])) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 5 (set (reg:QI 142)
        (subreg:QI (reg:SI 141) 0)) "vid.c":91:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
(insn 56 55 59 5 (set (mem/c:QI (reg/f:SI 140) [0 cursor+0 S1 A8])
        (reg:QI 142)) "vid.c":91:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 142)
        (expr_list:REG_DEAD (reg/f:SI 140)
            (nil))))
(insn 59 56 60 5 (clobber (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 60 59 63 5 (clobber (reg:SI 123 [ <retval> ])) "vid.c":92:1 -1
     (nil))
(insn 63 60 58 5 (const_int 0 [0]) "vid.c":92:1 311 {nop}
     (nil))
(insn 58 63 61 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":92:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ <retval> ])
        (nil)))
(insn 61 58 0 5 (use (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function clrpix (clrpix, funcdef_no=1, decl_uid=4490, cgraph_uid=2, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r118,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a3(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a7(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a9(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:53000
  a11(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a12(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:21000

   Insn 28(l0): point = 0
   Insn 25(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 21(l0): point = 14
   Insn 20(l0): point = 16
   Insn 19(l0): point = 18
   Insn 18(l0): point = 20
   Insn 17(l0): point = 22
   Insn 16(l0): point = 24
   Insn 15(l0): point = 26
   Insn 14(l0): point = 28
   Insn 13(l0): point = 30
   Insn 12(l0): point = 32
   Insn 11(l0): point = 34
   Insn 10(l0): point = 36
   Insn 9(l0): point = 38
   Insn 8(l0): point = 40
   Insn 7(l0): point = 42
   Insn 3(l0): point = 44
   Insn 2(l0): point = 46
 a0(r118): [3..6]
 a1(r117): [11..14]
 a2(r125): [11..12]
 a3(r116): [15..16]
 a4(r114): [15..20]
 a5(r115): [17..18]
 a6(r124): [21..22]
 a7(r122): [25..26]
 a8(r113): [27..30]
 a9(r123): [27..28]
 a10(r120): [35..40] [31..32]
 a11(r121): [33..34]
 a12(r119): [37..42]
Compressing live ranges: from 49 to 20 - 40%
Ranges after the compression:
 a0(r118): [0..1]
 a1(r117): [2..3]
 a2(r125): [2..3]
 a3(r116): [4..5]
 a4(r114): [4..7]
 a5(r115): [6..7]
 a6(r124): [8..9]
 a7(r122): [10..11]
 a8(r113): [12..13]
 a9(r123): [12..13]
 a10(r120): [18..19] [14..15]
 a11(r121): [16..17]
 a12(r119): [18..19]
  regions=1, blocks=3, points=20
    allocnos=13 (big 0), copies=0, conflicts=0, ranges=14
Disposition:
    8:r113 l0     2    4:r114 l0     2    5:r115 l0     3    3:r116 l0     3
    1:r117 l0     3    0:r118 l0     3   12:r119 l0     2   10:r120 l0     3
   11:r121 l0     3    7:r122 l0     3    9:r123 l0     3    6:r124 l0     3
    2:r125 l0     2
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


clrpix

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,2u} r13={1d,2u} r14={1d} r102={1d,8u} r103={1d,1u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,2u,1e} r120={4d,4u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} 
;;    total ref usage 62{27d,34u,1e} in 24{24 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118 119 120 121 122 123 124 125
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ y ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 120)
        (reg:SI 119)) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 120)
        (ashift:SI (reg:SI 120)
            (const_int 2 [0x2]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 120)
        (plus:SI (reg:SI 120)
            (reg:SI 119))) "vid.c":96:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 119)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
                (const_int 5 [0x5]))
            (nil))))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 120)
            (const_int 7 [0x7]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 120)
        (reg:SI 121)) "vid.c":96:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 120)) "vid.c":96:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 14 13 15 2 (set (reg:SI 123)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":96:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 122)
        (plus:SI (reg:SI 123)
            (reg:SI 113 [ _1 ]))) "vid.c":96:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
            (nil))))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 122)) "vid.c":96:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 17 16 18 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 114 [ fb.2_2 ])
        (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 115 [ pix.3_3 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ pix.3_3 ])
            (const_int 2 [0x2]))) "vid.c":97:5 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 115 [ pix.3_3 ])
        (nil)))
(insn 21 20 22 2 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 114 [ fb.2_2 ])
            (reg:SI 116 [ _4 ]))) "vid.c":97:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (expr_list:REG_DEAD (reg/f:SI 114 [ fb.2_2 ])
            (nil))))
(insn 22 21 23 2 (set (reg:SI 125)
        (const_int 0 [0])) "vid.c":97:11 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 125)) "vid.c":97:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
            (nil))))
(insn 26 23 27 2 (clobber (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 27 26 30 2 (clobber (reg:SI 118 [ <retval> ])) "vid.c":98:1 -1
     (nil))
(insn 30 27 25 2 (const_int 0 [0]) "vid.c":98:1 311 {nop}
     (nil))
(insn 25 30 28 2 (set (reg/i:SI 0 r0)
        (reg:SI 118 [ <retval> ])) "vid.c":98:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ <retval> ])
        (nil)))
(insn 28 25 0 2 (use (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function setpix (setpix, funcdef_no=2, decl_uid=4495, cgraph_uid=3, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 23 count 17 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 10 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r149,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r175,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a3(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r174,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a7(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r173,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a9(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r172,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a11(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r171,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a15(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r170,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a17(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r169,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a19(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r168,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r167,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a25(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r166,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a27(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a30(r165,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a31(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r164,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a33(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r163,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a35(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a36(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a37(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a38(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a39(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a40(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a41(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a42(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a43(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a44(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a45(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a46(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a47(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a48(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a49(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a50(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a51(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a52(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a53(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a54(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a55(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a56(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a57(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a58(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a59(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a60(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:53000
  a61(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a62(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:21000

   Insn 119(l0): point = 0
   Insn 116(l0): point = 2
   Insn 121(l0): point = 4
   Insn 118(l0): point = 6
   Insn 117(l0): point = 8
   Insn 112(l0): point = 11
   Insn 111(l0): point = 13
   Insn 110(l0): point = 15
   Insn 109(l0): point = 17
   Insn 108(l0): point = 19
   Insn 107(l0): point = 21
   Insn 106(l0): point = 23
   Insn 104(l0): point = 26
   Insn 103(l0): point = 28
   Insn 102(l0): point = 30
   Insn 101(l0): point = 32
   Insn 98(l0): point = 35
   Insn 97(l0): point = 37
   Insn 96(l0): point = 39
   Insn 95(l0): point = 41
   Insn 94(l0): point = 43
   Insn 93(l0): point = 45
   Insn 92(l0): point = 47
   Insn 90(l0): point = 50
   Insn 89(l0): point = 52
   Insn 88(l0): point = 54
   Insn 87(l0): point = 56
   Insn 84(l0): point = 59
   Insn 83(l0): point = 61
   Insn 82(l0): point = 63
   Insn 81(l0): point = 65
   Insn 80(l0): point = 67
   Insn 79(l0): point = 69
   Insn 78(l0): point = 71
   Insn 76(l0): point = 74
   Insn 75(l0): point = 76
   Insn 74(l0): point = 78
   Insn 73(l0): point = 80
   Insn 70(l0): point = 83
   Insn 69(l0): point = 85
   Insn 68(l0): point = 87
   Insn 67(l0): point = 89
   Insn 66(l0): point = 91
   Insn 65(l0): point = 93
   Insn 64(l0): point = 95
   Insn 62(l0): point = 98
   Insn 61(l0): point = 100
   Insn 60(l0): point = 102
   Insn 59(l0): point = 104
   Insn 56(l0): point = 107
   Insn 55(l0): point = 109
   Insn 54(l0): point = 111
   Insn 53(l0): point = 113
   Insn 52(l0): point = 115
   Insn 51(l0): point = 117
   Insn 50(l0): point = 119
   Insn 48(l0): point = 122
   Insn 47(l0): point = 124
   Insn 46(l0): point = 126
   Insn 45(l0): point = 128
   Insn 42(l0): point = 131
   Insn 41(l0): point = 133
   Insn 40(l0): point = 135
   Insn 39(l0): point = 137
   Insn 38(l0): point = 139
   Insn 37(l0): point = 141
   Insn 36(l0): point = 143
   Insn 34(l0): point = 146
   Insn 33(l0): point = 148
   Insn 32(l0): point = 150
   Insn 31(l0): point = 152
   Insn 28(l0): point = 155
   Insn 27(l0): point = 157
   Insn 26(l0): point = 159
   Insn 25(l0): point = 161
   Insn 24(l0): point = 163
   Insn 23(l0): point = 165
   Insn 22(l0): point = 167
   Insn 20(l0): point = 170
   Insn 19(l0): point = 172
   Insn 18(l0): point = 174
   Insn 17(l0): point = 176
   Insn 16(l0): point = 178
   Insn 15(l0): point = 180
   Insn 14(l0): point = 182
   Insn 13(l0): point = 184
   Insn 12(l0): point = 186
   Insn 11(l0): point = 188
   Insn 10(l0): point = 190
   Insn 9(l0): point = 192
   Insn 8(l0): point = 194
   Insn 7(l0): point = 196
   Insn 3(l0): point = 198
   Insn 2(l0): point = 200
 a0(r149): [3..6]
 a1(r148): [12..15]
 a2(r175): [12..13]
 a3(r147): [16..17]
 a4(r145): [16..21]
 a5(r146): [18..19]
 a6(r174): [22..23]
 a7(r144): [29..30]
 a8(r173): [31..32]
 a9(r143): [36..39]
 a10(r172): [36..37]
 a11(r142): [40..41]
 a12(r140): [40..45]
 a13(r141): [42..43]
 a14(r171): [46..47]
 a15(r139): [53..54]
 a16(r170): [55..56]
 a17(r138): [60..63]
 a18(r169): [60..61]
 a19(r137): [64..65]
 a20(r135): [64..69]
 a21(r136): [66..67]
 a22(r168): [70..71]
 a23(r134): [77..78]
 a24(r167): [79..80]
 a25(r133): [84..87]
 a26(r166): [84..85]
 a27(r132): [88..89]
 a28(r130): [88..93]
 a29(r131): [90..91]
 a30(r165): [94..95]
 a31(r129): [101..102]
 a32(r164): [103..104]
 a33(r128): [108..111]
 a34(r163): [108..109]
 a35(r127): [112..113]
 a36(r125): [112..117]
 a37(r126): [114..115]
 a38(r162): [118..119]
 a39(r124): [125..126]
 a40(r161): [127..128]
 a41(r123): [132..135]
 a42(r160): [132..133]
 a43(r122): [136..137]
 a44(r120): [136..141]
 a45(r121): [138..139]
 a46(r159): [142..143]
 a47(r119): [149..150]
 a48(r158): [151..152]
 a49(r118): [156..159]
 a50(r157): [156..157]
 a51(r117): [160..161]
 a52(r115): [160..165]
 a53(r116): [162..163]
 a54(r156): [166..167]
 a55(r114): [173..174]
 a56(r155): [175..176]
 a57(r153): [179..180]
 a58(r113): [181..184]
 a59(r154): [181..182]
 a60(r151): [189..194] [185..186]
 a61(r152): [187..188]
 a62(r150): [191..196]
Compressing live ranges: from 203 to 96 - 47%
Ranges after the compression:
 a0(r149): [0..1]
 a1(r148): [2..3]
 a2(r175): [2..3]
 a3(r147): [4..5]
 a4(r145): [4..7]
 a5(r146): [6..7]
 a6(r174): [8..9]
 a7(r144): [10..11]
 a8(r173): [12..13]
 a9(r143): [14..15]
 a10(r172): [14..15]
 a11(r142): [16..17]
 a12(r140): [16..19]
 a13(r141): [18..19]
 a14(r171): [20..21]
 a15(r139): [22..23]
 a16(r170): [24..25]
 a17(r138): [26..27]
 a18(r169): [26..27]
 a19(r137): [28..29]
 a20(r135): [28..31]
 a21(r136): [30..31]
 a22(r168): [32..33]
 a23(r134): [34..35]
 a24(r167): [36..37]
 a25(r133): [38..39]
 a26(r166): [38..39]
 a27(r132): [40..41]
 a28(r130): [40..43]
 a29(r131): [42..43]
 a30(r165): [44..45]
 a31(r129): [46..47]
 a32(r164): [48..49]
 a33(r128): [50..51]
 a34(r163): [50..51]
 a35(r127): [52..53]
 a36(r125): [52..55]
 a37(r126): [54..55]
 a38(r162): [56..57]
 a39(r124): [58..59]
 a40(r161): [60..61]
 a41(r123): [62..63]
 a42(r160): [62..63]
 a43(r122): [64..65]
 a44(r120): [64..67]
 a45(r121): [66..67]
 a46(r159): [68..69]
 a47(r119): [70..71]
 a48(r158): [72..73]
 a49(r118): [74..75]
 a50(r157): [74..75]
 a51(r117): [76..77]
 a52(r115): [76..79]
 a53(r116): [78..79]
 a54(r156): [80..81]
 a55(r114): [82..83]
 a56(r155): [84..85]
 a57(r153): [86..87]
 a58(r113): [88..89]
 a59(r154): [88..89]
 a60(r151): [94..95] [90..91]
 a61(r152): [92..93]
 a62(r150): [94..95]
  regions=1, blocks=17, points=96
    allocnos=63 (big 0), copies=0, conflicts=0, ranges=64
Disposition:
   58:r113 l0     2   55:r114 l0     3   52:r115 l0     2   53:r116 l0     3
   51:r117 l0     3   49:r118 l0     3   47:r119 l0     3   44:r120 l0     2
   45:r121 l0     3   43:r122 l0     3   41:r123 l0     3   39:r124 l0     3
   36:r125 l0     2   37:r126 l0     3   35:r127 l0     3   33:r128 l0     3
   31:r129 l0     3   28:r130 l0     2   29:r131 l0     3   27:r132 l0     3
   25:r133 l0     3   23:r134 l0     3   20:r135 l0     2   21:r136 l0     3
   19:r137 l0     3   17:r138 l0     3   15:r139 l0     3   12:r140 l0     2
   13:r141 l0     3   11:r142 l0     3    9:r143 l0     3    7:r144 l0     3
    4:r145 l0     2    5:r146 l0     3    3:r147 l0     3    1:r148 l0     3
    0:r149 l0     3   62:r150 l0     2   60:r151 l0     3   61:r152 l0     3
   57:r153 l0     3   59:r154 l0     3   56:r155 l0     3   54:r156 l0     3
   50:r157 l0     2   48:r158 l0     3   46:r159 l0     3   42:r160 l0     2
   40:r161 l0     3   38:r162 l0     3   34:r163 l0     2   32:r164 l0     3
   30:r165 l0     3   26:r166 l0     2   24:r167 l0     3   22:r168 l0     3
   18:r169 l0     2   16:r170 l0     3   14:r171 l0     3   10:r172 l0     2
    8:r173 l0     3    6:r174 l0     3    2:r175 l0     2
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


setpix

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,16u} r13={1d,16u} r14={1d} r100={7d,7u} r102={1d,28u} r103={1d,15u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,2u,1e} r151={4d,4u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} 
;;    total ref usage 238{84d,153u,1e} in 94{94 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 150 151 152 153 154 155
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ y ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 151)
        (reg:SI 150)) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "vid.c":102:14 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
                (const_int 5 [0x5]))
            (nil))))
(insn 11 10 12 2 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 7 [0x7]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 151)
        (reg:SI 152)) "vid.c":102:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 151)) "vid.c":102:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 14 13 15 2 (set (reg:SI 154)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":102:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 153)
        (plus:SI (reg:SI 154)
            (reg:SI 113 [ _1 ]))) "vid.c":102:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 154)
        (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
            (nil))))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 153)) "vid.c":102:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(insn 17 16 18 2 (set (reg/f:SI 155)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":103:12 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 114 [ color.4_2 ])
        (mem/c:SI (reg/f:SI 155) [3 color+0 S4 A32])) "vid.c":103:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 155)
        (nil)))
(insn 19 18 20 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ color.4_2 ])
            (const_int 6 [0x6]))) "vid.c":103:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ color.4_2 ])
        (nil)))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "vid.c":103:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116 117 118 156 157
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 156)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 115 [ fb.5_3 ])
        (mem/f/c:SI (reg/f:SI 156) [1 fb+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 156)
        (nil)))
(insn 24 23 25 3 (set (reg:SI 116 [ pix.6_4 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 117 [ _5 ])
        (ashift:SI (reg:SI 116 [ pix.6_4 ])
            (const_int 2 [0x2]))) "vid.c":104:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 116 [ pix.6_4 ])
        (nil)))
(insn 26 25 27 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 115 [ fb.5_3 ])
            (reg:SI 117 [ _5 ]))) "vid.c":104:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (expr_list:REG_DEAD (reg/f:SI 115 [ fb.5_3 ])
            (nil))))
(insn 27 26 28 3 (set (reg:SI 157)
        (const_int 255 [0xff])) "vid.c":104:14 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 157)) "vid.c":104:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
            (nil))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 158
(code_label 29 28 30 4 10 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:SI 158)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":105:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 119 [ color.7_7 ])
        (mem/c:SI (reg/f:SI 158) [3 color+0 S4 A32])) "vid.c":105:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 158)
        (nil)))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ color.7_7 ])
            (const_int 0 [0]))) "vid.c":105:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ color.7_7 ])
        (nil)))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "vid.c":105:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 43)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 159 160
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg/f:SI 159)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 5 (set (reg/f:SI 120 [ fb.8_8 ])
        (mem/f/c:SI (reg/f:SI 159) [1 fb+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 159)
        (nil)))
(insn 38 37 39 5 (set (reg:SI 121 [ pix.9_9 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 5 (set (reg:SI 122 [ _10 ])
        (ashift:SI (reg:SI 121 [ pix.9_9 ])
            (const_int 2 [0x2]))) "vid.c":106:7 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 121 [ pix.9_9 ])
        (nil)))
(insn 40 39 41 5 (set (reg/f:SI 123 [ _11 ])
        (plus:SI (reg/f:SI 120 [ fb.8_8 ])
            (reg:SI 122 [ _10 ]))) "vid.c":106:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (expr_list:REG_DEAD (reg/f:SI 120 [ fb.8_8 ])
            (nil))))
(insn 41 40 42 5 (set (reg:SI 160)
        (const_int 16777215 [0xffffff])) "vid.c":106:13 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (mem/v:SI (reg/f:SI 123 [ _11 ]) [3 *_11+0 S4 A32])
        (reg:SI 160)) "vid.c":106:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 160)
        (expr_list:REG_DEAD (reg/f:SI 123 [ _11 ])
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 124 161
(code_label 43 42 44 6 11 (nil) [1 uses])
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg/f:SI 161)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":107:12 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (reg:SI 124 [ color.10_12 ])
        (mem/c:SI (reg/f:SI 161) [3 color+0 S4 A32])) "vid.c":107:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 161)
        (nil)))
(insn 47 46 48 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124 [ color.10_12 ])
            (const_int 1 [0x1]))) "vid.c":107:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ color.10_12 ])
        (nil)))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "vid.c":107:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 57)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 125 126 127 128 162 163
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:SI 162)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (reg/f:SI 125 [ fb.11_13 ])
        (mem/f/c:SI (reg/f:SI 162) [1 fb+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 162)
        (nil)))
(insn 52 51 53 7 (set (reg:SI 126 [ pix.12_14 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:SI 127 [ _15 ])
        (ashift:SI (reg:SI 126 [ pix.12_14 ])
            (const_int 2 [0x2]))) "vid.c":108:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 126 [ pix.12_14 ])
        (nil)))
(insn 54 53 55 7 (set (reg/f:SI 128 [ _16 ])
        (plus:SI (reg/f:SI 125 [ fb.11_13 ])
            (reg:SI 127 [ _15 ]))) "vid.c":108:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 127 [ _15 ])
        (expr_list:REG_DEAD (reg/f:SI 125 [ fb.11_13 ])
            (nil))))
(insn 55 54 56 7 (set (reg:SI 163)
        (const_int 65280 [0xff00])) "vid.c":108:14 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 7 (set (mem/v:SI (reg/f:SI 128 [ _16 ]) [3 *_16+0 S4 A32])
        (reg:SI 163)) "vid.c":108:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 163)
        (expr_list:REG_DEAD (reg/f:SI 128 [ _16 ])
            (nil))))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 129 164
(code_label 57 56 58 8 12 (nil) [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:SI 164)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":109:12 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 8 (set (reg:SI 129 [ color.13_17 ])
        (mem/c:SI (reg/f:SI 164) [3 color+0 S4 A32])) "vid.c":109:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 164)
        (nil)))
(insn 61 60 62 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ color.13_17 ])
            (const_int 2 [0x2]))) "vid.c":109:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 129 [ color.13_17 ])
        (nil)))
(jump_insn 62 61 63 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "vid.c":109:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 130 131 132 133 165 166
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 165)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg/f:SI 130 [ fb.14_18 ])
        (mem/f/c:SI (reg/f:SI 165) [1 fb+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 165)
        (nil)))
(insn 66 65 67 9 (set (reg:SI 131 [ pix.15_19 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (reg:SI 132 [ _20 ])
        (ashift:SI (reg:SI 131 [ pix.15_19 ])
            (const_int 2 [0x2]))) "vid.c":110:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 131 [ pix.15_19 ])
        (nil)))
(insn 68 67 69 9 (set (reg/f:SI 133 [ _21 ])
        (plus:SI (reg/f:SI 130 [ fb.14_18 ])
            (reg:SI 132 [ _20 ]))) "vid.c":110:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 132 [ _20 ])
        (expr_list:REG_DEAD (reg/f:SI 130 [ fb.14_18 ])
            (nil))))
(insn 69 68 70 9 (set (reg:SI 166)
        (const_int 16776960 [0xffff00])) "vid.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 9 (set (mem/v:SI (reg/f:SI 133 [ _21 ]) [3 *_21+0 S4 A32])
        (reg:SI 166)) "vid.c":110:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_DEAD (reg/f:SI 133 [ _21 ])
            (nil))))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 134 167
(code_label 71 70 72 10 13 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg/f:SI 167)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 134 [ color.16_22 ])
        (mem/c:SI (reg/f:SI 167) [3 color+0 S4 A32])) "vid.c":111:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 167)
        (nil)))
(insn 75 74 76 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134 [ color.16_22 ])
            (const_int 4 [0x4]))) "vid.c":111:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 134 [ color.16_22 ])
        (nil)))
(jump_insn 76 75 77 10 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "vid.c":111:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 85)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 135 136 137 138 168 169
(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 11 (set (reg/f:SI 168)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 11 (set (reg/f:SI 135 [ fb.17_23 ])
        (mem/f/c:SI (reg/f:SI 168) [1 fb+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 168)
        (nil)))
(insn 80 79 81 11 (set (reg:SI 136 [ pix.18_24 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 82 11 (set (reg:SI 137 [ _25 ])
        (ashift:SI (reg:SI 136 [ pix.18_24 ])
            (const_int 2 [0x2]))) "vid.c":112:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 136 [ pix.18_24 ])
        (nil)))
(insn 82 81 83 11 (set (reg/f:SI 138 [ _26 ])
        (plus:SI (reg/f:SI 135 [ fb.17_23 ])
            (reg:SI 137 [ _25 ]))) "vid.c":112:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 137 [ _25 ])
        (expr_list:REG_DEAD (reg/f:SI 135 [ fb.17_23 ])
            (nil))))
(insn 83 82 84 11 (set (reg:SI 169)
        (const_int 16711935 [0xff00ff])) "vid.c":112:14 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (mem/v:SI (reg/f:SI 138 [ _26 ]) [3 *_26+0 S4 A32])
        (reg:SI 169)) "vid.c":112:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 169)
        (expr_list:REG_DEAD (reg/f:SI 138 [ _26 ])
            (nil))))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 139 170
(code_label 85 84 86 12 14 (nil) [1 uses])
(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 12 (set (reg/f:SI 170)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":113:12 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 12 (set (reg:SI 139 [ color.19_27 ])
        (mem/c:SI (reg/f:SI 170) [3 color+0 S4 A32])) "vid.c":113:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 170)
        (nil)))
(insn 89 88 90 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139 [ color.19_27 ])
            (const_int 3 [0x3]))) "vid.c":113:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 139 [ color.19_27 ])
        (nil)))
(jump_insn 90 89 91 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "vid.c":113:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 99)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 140 141 142 143 171 172
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg/f:SI 171)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg/f:SI 140 [ fb.20_28 ])
        (mem/f/c:SI (reg/f:SI 171) [1 fb+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 171)
        (nil)))
(insn 94 93 95 13 (set (reg:SI 141 [ pix.21_29 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 13 (set (reg:SI 142 [ _30 ])
        (ashift:SI (reg:SI 141 [ pix.21_29 ])
            (const_int 2 [0x2]))) "vid.c":114:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 141 [ pix.21_29 ])
        (nil)))
(insn 96 95 97 13 (set (reg/f:SI 143 [ _31 ])
        (plus:SI (reg/f:SI 140 [ fb.20_28 ])
            (reg:SI 142 [ _30 ]))) "vid.c":114:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 142 [ _30 ])
        (expr_list:REG_DEAD (reg/f:SI 140 [ fb.20_28 ])
            (nil))))
(insn 97 96 98 13 (set (reg:SI 172)
        (const_int 65535 [0xffff])) "vid.c":114:14 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 13 (set (mem/v:SI (reg/f:SI 143 [ _31 ]) [3 *_31+0 S4 A32])
        (reg:SI 172)) "vid.c":114:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 172)
        (expr_list:REG_DEAD (reg/f:SI 143 [ _31 ])
            (nil))))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 144 173
(code_label 99 98 100 14 15 (nil) [1 uses])
(note 100 99 101 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 14 (set (reg/f:SI 173)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 14 (set (reg:SI 144 [ color.22_32 ])
        (mem/c:SI (reg/f:SI 173) [3 color+0 S4 A32])) "vid.c":115:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 173)
        (nil)))
(insn 103 102 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144 [ color.22_32 ])
            (const_int 5 [0x5]))) "vid.c":115:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 144 [ color.22_32 ])
        (nil)))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "vid.c":115:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 113)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 145 146 147 148 174 175
(note 105 104 106 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 15 (set (reg/f:SI 174)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 15 (set (reg/f:SI 145 [ fb.23_33 ])
        (mem/f/c:SI (reg/f:SI 174) [1 fb+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 174)
        (nil)))
(insn 108 107 109 15 (set (reg:SI 146 [ pix.24_34 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 15 (set (reg:SI 147 [ _35 ])
        (ashift:SI (reg:SI 146 [ pix.24_34 ])
            (const_int 2 [0x2]))) "vid.c":116:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 146 [ pix.24_34 ])
        (nil)))
(insn 110 109 111 15 (set (reg/f:SI 148 [ _36 ])
        (plus:SI (reg/f:SI 145 [ fb.23_33 ])
            (reg:SI 147 [ _35 ]))) "vid.c":116:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 147 [ _35 ])
        (expr_list:REG_DEAD (reg/f:SI 145 [ fb.23_33 ])
            (nil))))
(insn 111 110 112 15 (set (reg:SI 175)
        (const_int 16777215 [0xffffff])) "vid.c":116:14 253 {*arm_movsi_insn}
     (nil))
(insn 112 111 113 15 (set (mem/v:SI (reg/f:SI 148 [ _36 ]) [3 *_36+0 S4 A32])
        (reg:SI 175)) "vid.c":116:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 175)
        (expr_list:REG_DEAD (reg/f:SI 148 [ _36 ])
            (nil))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 149
(code_label 113 112 114 16 16 (nil) [1 uses])
(note 114 113 117 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 117 114 118 16 (clobber (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 118 117 121 16 (clobber (reg:SI 149 [ <retval> ])) "vid.c":117:1 -1
     (nil))
(insn 121 118 116 16 (const_int 0 [0]) "vid.c":117:1 311 {nop}
     (nil))
(insn 116 121 119 16 (set (reg/i:SI 0 r0)
        (reg:SI 149 [ <retval> ])) "vid.c":117:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 149 [ <retval> ])
        (nil)))
(insn 119 116 0 16 (use (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function dchar (dchar, funcdef_no=3, decl_uid=4501, cgraph_uid=4, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 11 n_edges 13 count 11 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 6 3 4 5
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 4 5
;; 2 succs { 9 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 4 8 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a9(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a25(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a27(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a29(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a30(r125,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 78(l0): point = 0
   Insn 75(l0): point = 2
   Insn 80(l0): point = 4
   Insn 77(l0): point = 6
   Insn 76(l0): point = 8
   Insn 83(l0): point = 11
   Insn 28(l0): point = 13
   Insn 27(l0): point = 15
   Insn 26(l0): point = 17
   Insn 25(l0): point = 19
   Insn 24(l0): point = 21
   Insn 23(l0): point = 23
   Insn 22(l0): point = 25
   Insn 72(l0): point = 28
   Insn 71(l0): point = 30
   Insn 70(l0): point = 32
   Insn 64(l0): point = 35
   Insn 63(l0): point = 37
   Insn 62(l0): point = 39
   Insn 60(l0): point = 42
   Insn 59(l0): point = 44
   Insn 58(l0): point = 46
   Insn 52(l0): point = 49
   Insn 51(l0): point = 51
   Insn 50(l0): point = 53
   Insn 37(l0): point = 56
   Insn 36(l0): point = 58
   Insn 35(l0): point = 60
   Insn 34(l0): point = 62
   Insn 33(l0): point = 64
   Insn 32(l0): point = 66
   Insn 47(l0): point = 69
   Insn 46(l0): point = 71
   Insn 45(l0): point = 73
   Insn 44(l0): point = 75
   Insn 43(l0): point = 77
   Insn 42(l0): point = 79
   Insn 41(l0): point = 81
   Insn 40(l0): point = 83
   Insn 39(l0): point = 85
   Insn 81(l0): point = 88
   Insn 18(l0): point = 90
   Insn 17(l0): point = 92
   Insn 16(l0): point = 94
   Insn 15(l0): point = 96
   Insn 14(l0): point = 98
   Insn 13(l0): point = 100
   Insn 12(l0): point = 102
   Insn 11(l0): point = 104
   Insn 10(l0): point = 106
   Insn 4(l0): point = 108
   Insn 3(l0): point = 110
   Insn 6(l0): point = 112
   Insn 5(l0): point = 114
   Insn 2(l0): point = 116
 a0(r124): [3..6]
 a1(r143): [31..32]
 a2(r141): [36..37]
 a3(r142): [38..39]
 a4(r140): [45..46]
 a5(r138): [50..51]
 a6(r139): [52..53]
 a7(r122): [72..81]
 a8(r123): [74..75]
 a9(r137): [76..77]
 a10(r136): [76..79]
 a11(r135): [82..83]
 a12(r134): [82..85]
 a13(r121): [59..60]
 a14(r120): [61..62]
 a15(r133): [63..64]
 a16(r119): [63..66]
 a17(r132): [14..15]
 a18(r131): [18..19]
 a19(r118): [20..21]
 a20(r117): [22..25]
 a21(r130): [22..23]
 a22(r129): [91..92]
 a23(r128): [95..96]
 a24(r116): [97..98]
 a25(r113): [97..104]
 a26(r115): [99..100]
 a27(r114): [101..102]
 a28(r127): [105..106]
 a29(r126): [109..110]
 a30(r125): [111..116]
Compressing live ranges: from 119 to 50 - 42%
Ranges after the compression:
 a0(r124): [0..1]
 a1(r143): [10..11]
 a2(r141): [12..13]
 a3(r142): [14..15]
 a4(r140): [16..17]
 a5(r138): [18..19]
 a6(r139): [20..21]
 a7(r122): [28..31]
 a8(r123): [28..29]
 a9(r137): [30..31]
 a10(r136): [30..31]
 a11(r135): [32..33]
 a12(r134): [32..33]
 a13(r121): [22..23]
 a14(r120): [24..25]
 a15(r133): [26..27]
 a16(r119): [26..27]
 a17(r132): [2..3]
 a18(r131): [4..5]
 a19(r118): [6..7]
 a20(r117): [8..9]
 a21(r130): [8..9]
 a22(r129): [34..35]
 a23(r128): [36..37]
 a24(r116): [38..39]
 a25(r113): [38..43]
 a26(r115): [40..41]
 a27(r114): [42..43]
 a28(r127): [44..45]
 a29(r126): [46..47]
 a30(r125): [48..49]
  regions=1, blocks=11, points=50
    allocnos=31 (big 0), copies=0, conflicts=0, ranges=31
Disposition:
   25:r113 l0     3   27:r114 l0     2   26:r115 l0     2   24:r116 l0     2
   20:r117 l0     3   19:r118 l0     3   16:r119 l0     2   14:r120 l0     3
   13:r121 l0     3    7:r122 l0     0    8:r123 l0     3    0:r124 l0     3
   30:r125 l0     3   29:r126 l0     3   28:r127 l0     3   23:r128 l0     3
   22:r129 l0     3   21:r130 l0     2   18:r131 l0     3   17:r132 l0     3
   15:r133 l0     3   12:r134 l0     2   11:r135 l0     3   10:r136 l0     2
    9:r137 l0     3    5:r138 l0     3    6:r139 l0     3    4:r140 l0     3
    2:r141 l0     3    3:r142 l0     3    1:r143 l0     3
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={2d} r11={1d,10u} r12={2d} r13={1d,11u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={4d,3u} r101={1d} r102={1d,32u} r103={1d,9u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} 
;;    total ref usage 247{144d,103u,0e} in 55{54 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 125 126 127 128 129
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [ y ])
        (nil)))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":120:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":120:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 126)
        (nil)))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":124:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.25_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":124:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":124:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":124:22 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":124:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.25_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":124:12 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ font.25_1 ])
            (nil))))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":124:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":127:9 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 81 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 129)) "vid.c":127:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(jump_insn 81 18 82 2 (set (pc)
        (label_ref 65)) "vid.c":127:3 284 {*arm_jump}
     (nil)
 -> 65)
;;  succ:       9 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 82 81 67)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       9
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 117 118 130 131 132
(code_label 67 82 21 3 24 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 117 [ r.26_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ r.26_5 ]))) "vid.c":128:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg:SI 117 [ r.26_5 ])
            (nil))))
(insn 25 24 26 3 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":128:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
        (nil)))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":128:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 131)
        (nil)))
(insn 27 26 28 3 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":130:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 83 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":130:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(jump_insn 83 28 84 3 (set (pc)
        (label_ref 53)) "vid.c":130:5 284 {*arm_jump}
     (nil)
 -> 53)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 84 83 55)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 120 121 133
(code_label 55 84 31 4 23 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":131:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":131:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":131:11 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
            (nil))))
(insn 35 34 36 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":131:11 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":131:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":131:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 134 135 136 137
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":132:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 135)
        (expr_list:REG_DEAD (reg:SI 134)
            (nil))))
(insn 42 41 43 5 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":132:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 137)
        (expr_list:REG_DEAD (reg:SI 136)
            (nil))))
(insn 45 44 46 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":132:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 46 45 47 5 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":132:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (nil)))
(call_insn 47 46 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setpix") [flags 0x3]  <function_decl 0x7fd417ce1b00 setpix>) [0 setpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":132:4 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 138 139
(code_label 48 47 49 6 22 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":130:27 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":130:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 140
(code_label 53 52 54 7 21 (nil) [1 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":130:20 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 140)
        (nil)))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":130:20 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 141 142
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:20 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":127:20 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 142)
        (nil)))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 141)) "vid.c":127:20 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 143
(code_label 65 64 66 9 20 (nil) [1 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":127:14 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":127:14 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 124
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 77 76 80 10 (clobber (reg:SI 124 [ <retval> ])) "vid.c":135:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":135:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":135:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ <retval> ])
        (nil)))
(insn 78 75 0 10 (use (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function undchar (undchar, funcdef_no=4, decl_uid=4518, cgraph_uid=5, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 11 n_edges 13 count 11 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 9, latch 8
;;  depth 1, outer 0
;;  nodes: 9 8 7 6 3 4 5
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 2, outer 1
;;  nodes: 7 6 4 5
;; 2 succs { 9 }
;; 3 succs { 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 4 8 }
;; 8 succs { 9 }
;; 9 succs { 3 10 }
;; 10 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a9(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a25(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a27(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a29(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a30(r125,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 78(l0): point = 0
   Insn 75(l0): point = 2
   Insn 80(l0): point = 4
   Insn 77(l0): point = 6
   Insn 76(l0): point = 8
   Insn 83(l0): point = 11
   Insn 28(l0): point = 13
   Insn 27(l0): point = 15
   Insn 26(l0): point = 17
   Insn 25(l0): point = 19
   Insn 24(l0): point = 21
   Insn 23(l0): point = 23
   Insn 22(l0): point = 25
   Insn 72(l0): point = 28
   Insn 71(l0): point = 30
   Insn 70(l0): point = 32
   Insn 64(l0): point = 35
   Insn 63(l0): point = 37
   Insn 62(l0): point = 39
   Insn 60(l0): point = 42
   Insn 59(l0): point = 44
   Insn 58(l0): point = 46
   Insn 52(l0): point = 49
   Insn 51(l0): point = 51
   Insn 50(l0): point = 53
   Insn 37(l0): point = 56
   Insn 36(l0): point = 58
   Insn 35(l0): point = 60
   Insn 34(l0): point = 62
   Insn 33(l0): point = 64
   Insn 32(l0): point = 66
   Insn 47(l0): point = 69
   Insn 46(l0): point = 71
   Insn 45(l0): point = 73
   Insn 44(l0): point = 75
   Insn 43(l0): point = 77
   Insn 42(l0): point = 79
   Insn 41(l0): point = 81
   Insn 40(l0): point = 83
   Insn 39(l0): point = 85
   Insn 81(l0): point = 88
   Insn 18(l0): point = 90
   Insn 17(l0): point = 92
   Insn 16(l0): point = 94
   Insn 15(l0): point = 96
   Insn 14(l0): point = 98
   Insn 13(l0): point = 100
   Insn 12(l0): point = 102
   Insn 11(l0): point = 104
   Insn 10(l0): point = 106
   Insn 4(l0): point = 108
   Insn 3(l0): point = 110
   Insn 6(l0): point = 112
   Insn 5(l0): point = 114
   Insn 2(l0): point = 116
 a0(r124): [3..6]
 a1(r143): [31..32]
 a2(r141): [36..37]
 a3(r142): [38..39]
 a4(r140): [45..46]
 a5(r138): [50..51]
 a6(r139): [52..53]
 a7(r122): [72..81]
 a8(r123): [74..75]
 a9(r137): [76..77]
 a10(r136): [76..79]
 a11(r135): [82..83]
 a12(r134): [82..85]
 a13(r121): [59..60]
 a14(r120): [61..62]
 a15(r133): [63..64]
 a16(r119): [63..66]
 a17(r132): [14..15]
 a18(r131): [18..19]
 a19(r118): [20..21]
 a20(r117): [22..25]
 a21(r130): [22..23]
 a22(r129): [91..92]
 a23(r128): [95..96]
 a24(r116): [97..98]
 a25(r113): [97..104]
 a26(r115): [99..100]
 a27(r114): [101..102]
 a28(r127): [105..106]
 a29(r126): [109..110]
 a30(r125): [111..116]
Compressing live ranges: from 119 to 50 - 42%
Ranges after the compression:
 a0(r124): [0..1]
 a1(r143): [10..11]
 a2(r141): [12..13]
 a3(r142): [14..15]
 a4(r140): [16..17]
 a5(r138): [18..19]
 a6(r139): [20..21]
 a7(r122): [28..31]
 a8(r123): [28..29]
 a9(r137): [30..31]
 a10(r136): [30..31]
 a11(r135): [32..33]
 a12(r134): [32..33]
 a13(r121): [22..23]
 a14(r120): [24..25]
 a15(r133): [26..27]
 a16(r119): [26..27]
 a17(r132): [2..3]
 a18(r131): [4..5]
 a19(r118): [6..7]
 a20(r117): [8..9]
 a21(r130): [8..9]
 a22(r129): [34..35]
 a23(r128): [36..37]
 a24(r116): [38..39]
 a25(r113): [38..43]
 a26(r115): [40..41]
 a27(r114): [42..43]
 a28(r127): [44..45]
 a29(r126): [46..47]
 a30(r125): [48..49]
  regions=1, blocks=11, points=50
    allocnos=31 (big 0), copies=0, conflicts=0, ranges=31
Disposition:
   25:r113 l0     3   27:r114 l0     2   26:r115 l0     2   24:r116 l0     2
   20:r117 l0     3   19:r118 l0     3   16:r119 l0     2   14:r120 l0     3
   13:r121 l0     3    7:r122 l0     0    8:r123 l0     3    0:r124 l0     3
   30:r125 l0     3   29:r126 l0     3   28:r127 l0     3   23:r128 l0     3
   22:r129 l0     3   21:r130 l0     2   18:r131 l0     3   17:r132 l0     3
   15:r133 l0     3   12:r134 l0     2   11:r135 l0     3   10:r136 l0     2
    9:r137 l0     3    5:r138 l0     3    6:r139 l0     3    4:r140 l0     3
    2:r141 l0     3    3:r142 l0     3    1:r143 l0     3
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


undchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={2d} r11={1d,10u} r12={2d} r13={1d,11u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={4d,3u} r101={1d} r102={1d,32u} r103={1d,9u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} 
;;    total ref usage 247{144d,103u,0e} in 55{54 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 125 126 127 128 129
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [ y ])
        (nil)))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":138:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":138:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 126)
        (nil)))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":142:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.27_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":142:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":142:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":142:22 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":142:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.27_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":142:12 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ font.27_1 ])
            (nil))))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":142:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":145:11 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 81 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 129)) "vid.c":145:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(jump_insn 81 18 82 2 (set (pc)
        (label_ref 65)) "vid.c":145:3 284 {*arm_jump}
     (nil)
 -> 65)
;;  succ:       9 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 82 81 67)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       9
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 117 118 130 131 132
(code_label 67 82 21 3 32 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 117 [ row.28_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ row.28_5 ]))) "vid.c":146:23 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg:SI 117 [ row.28_5 ])
            (nil))))
(insn 25 24 26 3 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":146:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
        (nil)))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":146:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 131)
        (nil)))
(insn 27 26 28 3 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":148:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 83 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":148:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(jump_insn 83 28 84 3 (set (pc)
        (label_ref 53)) "vid.c":148:5 284 {*arm_jump}
     (nil)
 -> 53)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 84 83 55)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 120 121 133
(code_label 55 84 31 4 31 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":149:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":149:11 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
            (nil))))
(insn 35 34 36 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":149:11 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":149:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (nil)))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":149:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 134 135 136 137
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":150:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 135)
        (expr_list:REG_DEAD (reg:SI 134)
            (nil))))
(insn 42 41 43 5 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":150:4 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 137)
        (expr_list:REG_DEAD (reg:SI 136)
            (nil))))
(insn 45 44 46 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":150:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 46 45 47 5 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":150:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (nil)))
(call_insn 47 46 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":150:4 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 138 139
(code_label 48 47 49 6 30 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":148:27 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":148:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 140
(code_label 53 52 54 7 29 (nil) [1 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":148:20 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 140)
        (nil)))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":148:20 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 141 142
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:26 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":145:26 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 142)
        (nil)))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 141)) "vid.c":145:26 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 143
(code_label 65 64 66 9 28 (nil) [1 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:18 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":145:18 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":145:18 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 124
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 77 76 80 10 (clobber (reg:SI 124 [ <retval> ])) "vid.c":153:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":153:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":153:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ <retval> ])
        (nil)))
(insn 78 75 0 10 (use (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function dstring (dstring, funcdef_no=5, decl_uid=4535, cgraph_uid=6, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 35(l0): point = 0
   Insn 32(l0): point = 2
   Insn 37(l0): point = 4
   Insn 34(l0): point = 6
   Insn 33(l0): point = 8
   Insn 22(l0): point = 11
   Insn 21(l0): point = 13
   Insn 20(l0): point = 15
   Insn 19(l0): point = 17
   Insn 18(l0): point = 19
   Insn 17(l0): point = 21
   Insn 16(l0): point = 23
   Insn 15(l0): point = 25
   Insn 14(l0): point = 27
   Insn 13(l0): point = 29
   Insn 12(l0): point = 31
   Insn 11(l0): point = 33
   Insn 29(l0): point = 36
   Insn 28(l0): point = 38
   Insn 26(l0): point = 40
   Insn 25(l0): point = 42
   Insn 38(l0): point = 45
   Insn 4(l0): point = 47
   Insn 3(l0): point = 49
   Insn 2(l0): point = 51
 a0(r115): [3..6]
 a1(r114): [39..40]
 a2(r121): [41..42]
 a3(r119): [12..13]
 a4(r120): [14..15]
 a5(r117): [18..19]
 a6(r118): [20..21]
 a7(r113): [26..31]
 a8(r116): [32..33]
Compressing live ranges: from 54 to 18 - 33%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r114): [14..15]
 a2(r121): [16..17]
 a3(r119): [2..3]
 a4(r120): [4..5]
 a5(r117): [6..7]
 a6(r118): [8..9]
 a7(r113): [10..11]
 a8(r116): [12..13]
  regions=1, blocks=6, points=18
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9
Disposition:
    7:r113 l0     3    1:r114 l0     3    0:r115 l0     3    8:r116 l0     3
    5:r117 l0     3    6:r118 l0     3    3:r119 l0     3    4:r120 l0     3
    2:r121 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


dstring

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,16u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} 
;;    total ref usage 170{121d,49u,0e} in 25{24 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(insn 4 3 5 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [ y ])
        (nil)))
(note 5 4 38 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 38 5 39 2 (set (pc)
        (label_ref 23)) "vid.c":157:8 284 {*arm_jump}
     (nil)
 -> 23)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 39 38 27)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118 119 120
(code_label 27 39 10 3 37 (nil) [1 uses])
(note 10 27 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":158:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":158:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":158:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 17 16 18 3 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 8 [0x8]))) "vid.c":159:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 19 18 20 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 117)) "vid.c":159:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 20 19 21 3 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":160:6 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int 1 [0x1]))) "vid.c":160:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 22 21 23 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 119)) "vid.c":160:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 121
(code_label 23 22 24 4 36 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":157:9 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 28 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 121) [0 *s_3+0 S1 A8]))) "vid.c":157:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 121)
        (nil)))
(insn 28 26 29 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":157:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "vid.c":157:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 27)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 30 34 5 (clobber (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 34 33 37 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":162:1 -1
     (nil))
(insn 37 34 32 5 (const_int 0 [0]) "vid.c":162:1 311 {nop}
     (nil))
(insn 32 37 35 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":162:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 35 32 0 5 (use (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function scroll (scroll, funcdef_no=6, decl_uid=4540, cgraph_uid=7, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a12(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a17(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 40(l0): point = 0
   Insn 37(l0): point = 2
   Insn 42(l0): point = 4
   Insn 39(l0): point = 6
   Insn 38(l0): point = 8
   Insn 25(l0): point = 11
   Insn 24(l0): point = 13
   Insn 23(l0): point = 15
   Insn 22(l0): point = 17
   Insn 21(l0): point = 19
   Insn 20(l0): point = 21
   Insn 19(l0): point = 23
   Insn 18(l0): point = 25
   Insn 17(l0): point = 27
   Insn 16(l0): point = 29
   Insn 15(l0): point = 31
   Insn 14(l0): point = 33
   Insn 13(l0): point = 35
   Insn 12(l0): point = 37
   Insn 11(l0): point = 39
   Insn 10(l0): point = 41
   Insn 34(l0): point = 44
   Insn 33(l0): point = 46
   Insn 32(l0): point = 48
   Insn 31(l0): point = 50
   Insn 43(l0): point = 53
   Insn 6(l0): point = 55
   Insn 5(l0): point = 57
 a0(r123): [3..6]
 a1(r130): [47..48]
 a2(r129): [47..50]
 a3(r127): [12..13]
 a4(r128): [14..15]
 a5(r121): [18..21]
 a6(r122): [18..19]
 a7(r117): [20..31]
 a8(r120): [22..23]
 a9(r118): [22..27]
 a10(r119): [24..25]
 a11(r126): [28..29]
 a12(r116): [32..33]
 a13(r113): [32..39]
 a14(r115): [34..35]
 a15(r114): [36..37]
 a16(r125): [40..41]
 a17(r124): [56..57]
Compressing live ranges: from 60 to 28 - 46%
Ranges after the compression:
 a0(r123): [0..1]
 a1(r130): [24..25]
 a2(r129): [24..25]
 a3(r127): [2..3]
 a4(r128): [4..5]
 a5(r121): [6..9]
 a6(r122): [6..7]
 a7(r117): [8..15]
 a8(r120): [10..11]
 a9(r118): [10..13]
 a10(r119): [12..13]
 a11(r126): [14..15]
 a12(r116): [16..17]
 a13(r113): [16..21]
 a14(r115): [18..19]
 a15(r114): [20..21]
 a16(r125): [22..23]
 a17(r124): [26..27]
  regions=1, blocks=6, points=28
    allocnos=18 (big 0), copies=0, conflicts=0, ranges=18
Disposition:
   13:r113 l0     2   15:r114 l0     3   14:r115 l0     3   12:r116 l0     3
    7:r117 l0     2    9:r118 l0     1   10:r119 l0     3    8:r120 l0     3
    5:r121 l0     3    6:r122 l0     2    0:r123 l0     3   17:r124 l0     3
   16:r125 l0     3   11:r126 l0     3    3:r127 l0     3    4:r128 l0     3
    2:r129 l0     3    1:r130 l0     2
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


scroll

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d} r3={1d} r11={1d,5u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,11u} r103={1d,4u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} 
;;    total ref usage 76{30d,46u,0e} in 28{28 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 124
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 124)
        (const_int 0 [0])) "vid.c":167:9 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 43 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 124)) "vid.c":167:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(jump_insn 43 6 44 2 (set (pc)
        (label_ref 26)) "vid.c":167:3 284 {*arm_jump}
     (nil)
 -> 26)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 28)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 119 120 121 122 125 126 127 128
(code_label 28 44 9 3 40 (nil) [1 uses])
(note 9 28 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 125)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 113 [ fb.29_1 ])
        (mem/f/c:SI (reg/f:SI 125) [1 fb+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 125)
        (nil)))
(insn 12 11 13 3 (set (reg:SI 114 [ i.30_2 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ i.30_2 ])
            (const_int 10240 [0x2800]))) "vid.c":168:15 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ i.30_2 ])
        (nil)))
(insn 14 13 15 3 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ _3 ])
            (const_int 2 [0x2]))) "vid.c":168:15 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 15 14 16 3 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 113 [ fb.29_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":168:15 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ fb.29_1 ])
            (nil))))
(insn 16 15 17 3 (set (reg/f:SI 126)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 118 [ fb.31_6 ])
        (mem/f/c:SI (reg/f:SI 126) [1 fb+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))
(insn 18 17 19 3 (set (reg:SI 119 [ i.32_7 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg:SI 120 [ _8 ])
        (ashift:SI (reg:SI 119 [ i.32_7 ])
            (const_int 2 [0x2]))) "vid.c":168:7 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 119 [ i.32_7 ])
        (nil)))
(insn 20 19 21 3 (set (reg/f:SI 121 [ _9 ])
        (plus:SI (reg/f:SI 118 [ fb.31_6 ])
            (reg:SI 120 [ _8 ]))) "vid.c":168:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (expr_list:REG_DEAD (reg/f:SI 118 [ fb.31_6 ])
            (nil))))
(insn 21 20 22 3 (set (reg:SI 122 [ _10 ])
        (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
        (nil)))
(insn 22 21 23 3 (set (mem/v:SI (reg/f:SI 121 [ _9 ]) [3 *_9+0 S4 A32])
        (reg:SI 122 [ _10 ])) "vid.c":168:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (expr_list:REG_DEAD (reg/f:SI 121 [ _9 ])
            (nil))))
(insn 23 22 24 3 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:32 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 127)
        (plus:SI (reg:SI 128)
            (const_int 1 [0x1]))) "vid.c":167:32 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 25 24 26 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 127)) "vid.c":167:32 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 129 130
(code_label 26 25 27 4 39 (nil) [1 uses])
(note 27 26 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 27 32 4 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 130)
        (const_int 296960 [0x48800])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129)
            (reg:SI 130))) "vid.c":167:14 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg:SI 129)
            (nil))))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":167:14 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 28)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 123
(note 35 34 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 5 (clobber (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 39 38 42 5 (clobber (reg:SI 123 [ <retval> ])) "vid.c":170:1 -1
     (nil))
(insn 42 39 37 5 (const_int 0 [0]) "vid.c":170:1 311 {nop}
     (nil))
(insn 37 42 40 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":170:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ <retval> ])
        (nil)))
(insn 40 37 0 5 (use (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kpchar (kpchar, funcdef_no=7, decl_uid=4550, cgraph_uid=8, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r120,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 25(l0): point = 0
   Insn 22(l0): point = 2
   Insn 27(l0): point = 4
   Insn 24(l0): point = 6
   Insn 23(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 18(l0): point = 14
   Insn 17(l0): point = 16
   Insn 16(l0): point = 18
   Insn 15(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 11(l0): point = 28
   Insn 10(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 6(l0): point = 36
   Insn 5(l0): point = 38
   Insn 2(l0): point = 40
 a0(r113): [3..6]
 a1(r120): [13..18]
 a2(r118): [21..22]
 a3(r119): [23..24]
 a4(r116): [27..28]
 a5(r117): [29..30]
 a6(r115): [33..34]
 a7(r114): [35..40]
Compressing live ranges: from 43 to 16 - 37%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r120): [2..3]
 a2(r118): [4..5]
 a3(r119): [6..7]
 a4(r116): [8..9]
 a5(r117): [10..11]
 a6(r115): [12..13]
 a7(r114): [14..15]
  regions=1, blocks=3, points=16
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    0:r113 l0     3    7:r114 l0     3    6:r115 l0     3    4:r116 l0     3
    5:r117 l0     3    2:r118 l0     3    3:r119 l0     3    1:r120 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kpchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,12u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 153{119d,34u,0e} in 21{20 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ ro ])
        (nil)))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [ co ])
        (nil)))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":173:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":173:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 115)
        (nil)))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":175:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":175:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":175:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":176:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":176:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":176:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":178:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":178:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":178:4 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":180:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":180:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":180:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function unkpchar (unkpchar, funcdef_no=8, decl_uid=4557, cgraph_uid=9, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r120,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 25(l0): point = 0
   Insn 22(l0): point = 2
   Insn 27(l0): point = 4
   Insn 24(l0): point = 6
   Insn 23(l0): point = 8
   Insn 20(l0): point = 10
   Insn 19(l0): point = 12
   Insn 18(l0): point = 14
   Insn 17(l0): point = 16
   Insn 16(l0): point = 18
   Insn 15(l0): point = 20
   Insn 14(l0): point = 22
   Insn 13(l0): point = 24
   Insn 12(l0): point = 26
   Insn 11(l0): point = 28
   Insn 10(l0): point = 30
   Insn 4(l0): point = 32
   Insn 3(l0): point = 34
   Insn 6(l0): point = 36
   Insn 5(l0): point = 38
   Insn 2(l0): point = 40
 a0(r113): [3..6]
 a1(r120): [13..18]
 a2(r118): [21..22]
 a3(r119): [23..24]
 a4(r116): [27..28]
 a5(r117): [29..30]
 a6(r115): [33..34]
 a7(r114): [35..40]
Compressing live ranges: from 43 to 16 - 37%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r120): [2..3]
 a2(r118): [4..5]
 a3(r119): [6..7]
 a4(r116): [8..9]
 a5(r117): [10..11]
 a6(r115): [12..13]
 a7(r114): [14..15]
  regions=1, blocks=3, points=16
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    0:r113 l0     3    7:r114 l0     3    6:r115 l0     3    4:r116 l0     3
    5:r117 l0     3    2:r118 l0     3    3:r119 l0     3    1:r120 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


unkpchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,12u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 153{119d,34u,0e} in 21{20 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ ro ])
        (nil)))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 2 r2 [ co ])
        (nil)))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":183:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":183:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 115)
        (nil)))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":185:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":185:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":185:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":186:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":186:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":186:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":188:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":188:4 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("undchar") [flags 0x3]  <function_decl 0x7fd417ce1f00 undchar>) [0 undchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":188:4 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":189:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":189:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":189:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function erasechar (erasechar, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=15)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 9 n_edges 10 count 9 (    1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 5 4 3
;;
;; Loop 2
;;  header 5, latch 4
;;  depth 2, outer 1
;;  nodes: 5 4
;; 2 succs { 7 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 4 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a9(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a14(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a15(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 60(l0): point = 0
   Insn 57(l0): point = 2
   Insn 62(l0): point = 4
   Insn 59(l0): point = 6
   Insn 58(l0): point = 8
   Insn 65(l0): point = 11
   Insn 19(l0): point = 13
   Insn 18(l0): point = 15
   Insn 54(l0): point = 18
   Insn 53(l0): point = 20
   Insn 52(l0): point = 22
   Insn 46(l0): point = 25
   Insn 45(l0): point = 27
   Insn 44(l0): point = 29
   Insn 42(l0): point = 32
   Insn 41(l0): point = 34
   Insn 40(l0): point = 36
   Insn 34(l0): point = 39
   Insn 33(l0): point = 41
   Insn 32(l0): point = 43
   Insn 31(l0): point = 45
   Insn 30(l0): point = 47
   Insn 29(l0): point = 49
   Insn 28(l0): point = 51
   Insn 27(l0): point = 53
   Insn 26(l0): point = 55
   Insn 25(l0): point = 57
   Insn 24(l0): point = 59
   Insn 23(l0): point = 61
   Insn 63(l0): point = 64
   Insn 14(l0): point = 66
   Insn 13(l0): point = 68
   Insn 12(l0): point = 70
   Insn 11(l0): point = 72
   Insn 10(l0): point = 74
   Insn 9(l0): point = 76
   Insn 8(l0): point = 78
   Insn 7(l0): point = 80
   Insn 6(l0): point = 82
   Insn 5(l0): point = 84
 a0(r117): [3..6]
 a1(r133): [21..22]
 a2(r131): [26..27]
 a3(r132): [28..29]
 a4(r130): [35..36]
 a5(r128): [40..41]
 a6(r129): [42..43]
 a7(r115): [48..57]
 a8(r116): [50..51]
 a9(r127): [52..53]
 a10(r126): [52..55]
 a11(r125): [58..59]
 a12(r124): [58..61]
 a13(r123): [14..15]
 a14(r122): [67..68]
 a15(r121): [71..72]
 a16(r114): [73..74]
 a17(r120): [75..76]
 a18(r119): [79..80]
 a19(r113): [81..82]
 a20(r118): [83..84]
Compressing live ranges: from 87 to 36 - 41%
Ranges after the compression:
 a0(r117): [0..1]
 a1(r133): [4..5]
 a2(r131): [6..7]
 a3(r132): [8..9]
 a4(r130): [10..11]
 a5(r128): [12..13]
 a6(r129): [14..15]
 a7(r115): [16..19]
 a8(r116): [16..17]
 a9(r127): [18..19]
 a10(r126): [18..19]
 a11(r125): [20..21]
 a12(r124): [20..21]
 a13(r123): [2..3]
 a14(r122): [22..23]
 a15(r121): [24..25]
 a16(r114): [26..27]
 a17(r120): [28..29]
 a18(r119): [30..31]
 a19(r113): [32..33]
 a20(r118): [34..35]
  regions=1, blocks=9, points=36
    allocnos=21 (big 0), copies=0, conflicts=0, ranges=21
Disposition:
   19:r113 l0     3   16:r114 l0     3    7:r115 l0     0    8:r116 l0     3
    0:r117 l0     3   20:r118 l0     3   18:r119 l0     3   17:r120 l0     3
   15:r121 l0     3   14:r122 l0     3   13:r123 l0     3   12:r124 l0     2
   11:r125 l0     3   10:r126 l0     2    9:r127 l0     3    5:r128 l0     3
    6:r129 l0     3    4:r130 l0     3    2:r131 l0     3    3:r132 l0     3
    1:r133 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


erasechar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,3u} r1={3d,1u} r2={2d} r3={2d} r11={1d,8u} r12={2d} r13={1d,9u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={3d,2u} r101={1d} r102={1d,22u} r103={1d,7u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} 
;;    total ref usage 206{133d,73u,0e} in 40{39 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 118 119 120 121 122
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":197:10 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ col.33_1 ])
        (mem/c:SI (reg/f:SI 118) [3 col+0 S4 A32])) "vid.c":197:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 119)
        (ashift:SI (reg:SI 113 [ col.33_1 ])
            (const_int 3 [0x3]))) "vid.c":197:5 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 113 [ col.33_1 ])
        (nil)))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 119)) "vid.c":197:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(insn 9 8 10 2 (set (reg/f:SI 120)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":198:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ row.34_2 ])
        (mem/c:SI (reg/f:SI 120) [3 row+0 S4 A32])) "vid.c":198:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 114 [ row.34_2 ])
            (const_int 4 [0x4]))) "vid.c":198:5 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ row.34_2 ])
        (nil)))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 121)) "vid.c":198:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 13 12 14 2 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":202:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 63 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 122)) "vid.c":202:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(jump_insn 63 14 64 2 (set (pc)
        (label_ref 47)) "vid.c":202:3 284 {*arm_jump}
     (nil)
 -> 47)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 64 63 49)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 123
(code_label 49 64 17 3 49 (nil) [1 uses])
(note 17 49 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 123)
        (const_int 0 [0])) "vid.c":203:14 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 65 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 123)) "vid.c":203:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(jump_insn 65 19 66 3 (set (pc)
        (label_ref 35)) "vid.c":203:6 284 {*arm_jump}
     (nil)
 -> 35)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 66 65 37)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 124 125 126 127 128 129
(code_label 37 66 22 4 48 (nil) [1 uses])
(note 22 37 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 124)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 124)
            (reg:SI 125))) "vid.c":204:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg:SI 124)
            (nil))))
(insn 26 25 27 4 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (reg:SI 127)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 4 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 126)
            (reg:SI 127))) "vid.c":204:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 127)
        (expr_list:REG_DEAD (reg:SI 126)
            (nil))))
(insn 29 28 30 4 (set (reg:SI 1 r1)
        (reg:SI 116 [ _4 ])) "vid.c":204:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(insn 30 29 31 4 (set (reg:SI 0 r0)
        (reg:SI 115 [ _3 ])) "vid.c":204:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(call_insn 31 30 32 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":204:9 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 32 31 33 4 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:28 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 128)
        (plus:SI (reg:SI 129)
            (const_int 1 [0x1]))) "vid.c":203:28 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(insn 34 33 35 4 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 128)) "vid.c":203:28 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 130
(code_label 35 34 36 5 47 (nil) [1 uses])
(note 36 35 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 36 41 5 (set (reg:SI 130)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:21 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (const_int 7 [0x7]))) "vid.c":203:21 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (nil)))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "vid.c":203:21 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 37)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 131 132
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (reg:SI 132)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:20 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 6 (set (reg:SI 131)
        (plus:SI (reg:SI 132)
            (const_int 1 [0x1]))) "vid.c":202:20 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(insn 46 45 47 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 131)) "vid.c":202:20 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 131)
        (nil)))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 133
(code_label 47 46 48 7 46 (nil) [1 uses])
(note 48 47 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 48 53 7 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:14 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133)
            (const_int 15 [0xf]))) "vid.c":202:14 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 133)
        (nil)))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "vid.c":202:14 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 49)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(note 55 54 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 55 59 8 (clobber (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 59 58 62 8 (clobber (reg:SI 117 [ <retval> ])) "vid.c":207:1 -1
     (nil))
(insn 62 59 57 8 (const_int 0 [0]) "vid.c":207:1 311 {nop}
     (nil))
(insn 57 62 60 8 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":207:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ <retval> ])
        (nil)))
(insn 60 57 0 8 (use (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function clrcursor (clrcursor, funcdef_no=10, decl_uid=4577, cgraph_uid=11, symbol_order=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a4(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 17(l0): point = 0
   Insn 14(l0): point = 2
   Insn 19(l0): point = 4
   Insn 16(l0): point = 6
   Insn 15(l0): point = 8
   Insn 12(l0): point = 10
   Insn 11(l0): point = 12
   Insn 10(l0): point = 14
   Insn 9(l0): point = 16
   Insn 8(l0): point = 18
   Insn 7(l0): point = 20
   Insn 6(l0): point = 22
   Insn 5(l0): point = 24
 a0(r115): [3..6]
 a1(r113): [15..22]
 a2(r114): [17..18]
 a3(r117): [19..20]
 a4(r116): [23..24]
Compressing live ranges: from 27 to 8 - 29%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r113): [2..5]
 a2(r114): [2..3]
 a3(r117): [4..5]
 a4(r116): [6..7]
  regions=1, blocks=3, points=8
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5
Disposition:
    1:r113 l0     3    2:r114 l0     2    0:r115 l0     3    4:r116 l0     3
    3:r117 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


clrcursor

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,3u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,2u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} 
;;    total ref usage 134{116d,18u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ row.35_1 ])
        (mem/c:SI (reg/f:SI 116) [3 row+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 7 6 8 2 (set (reg/f:SI 117)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 114 [ col.36_2 ])
        (mem/c:SI (reg/f:SI 117) [3 col+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 117)
        (nil)))
(insn 9 8 10 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.36_2 ])) "vid.c":211:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ col.36_2 ])
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.35_1 ])) "vid.c":211:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ row.35_1 ])
        (nil)))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (const_int 127 [0x7f])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x3]  <function_decl 0x7fd417cfe700 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":211:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 16 15 19 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":212:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "vid.c":212:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":212:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 17 14 0 2 (use (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function putcursor (putcursor, funcdef_no=11, decl_uid=4580, cgraph_uid=12, symbol_order=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r120,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a4(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a6(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 21(l0): point = 0
   Insn 18(l0): point = 2
   Insn 23(l0): point = 4
   Insn 20(l0): point = 6
   Insn 19(l0): point = 8
   Insn 16(l0): point = 10
   Insn 15(l0): point = 12
   Insn 14(l0): point = 14
   Insn 13(l0): point = 16
   Insn 12(l0): point = 18
   Insn 11(l0): point = 20
   Insn 10(l0): point = 22
   Insn 9(l0): point = 24
   Insn 8(l0): point = 26
   Insn 4(l0): point = 28
   Insn 3(l0): point = 30
   Insn 2(l0): point = 32
 a0(r115): [3..6]
 a1(r120): [13..18]
 a2(r113): [15..24]
 a3(r114): [17..20]
 a4(r119): [21..22]
 a5(r118): [25..26]
 a6(r117): [29..30]
 a7(r116): [31..32]
Compressing live ranges: from 35 to 12 - 34%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r120): [2..3]
 a2(r113): [2..5]
 a3(r114): [2..3]
 a4(r119): [4..5]
 a5(r118): [6..7]
 a6(r117): [8..9]
 a7(r116): [10..11]
  regions=1, blocks=3, points=12
    allocnos=8 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    2:r113 l0     1    3:r114 l0     2    0:r115 l0     3    7:r116 l0     3
    6:r117 l0     3    5:r118 l0     3    4:r119 l0     3    1:r120 l0     3
+++Costs: overall 10000, reg 10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


putcursor

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,1u} r2={3d,1u} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,4u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} 
;;    total ref usage 143{119d,24u,0e} in 17{16 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 116)
        (reg:SI 0 r0 [ c ])) "vid.c":215:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 3 2 4 2 (set (reg:QI 117)
        (subreg:QI (reg:SI 116) 0)) "vid.c":215:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 117)) "vid.c":215:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 117)
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ row.37_1 ])
        (mem/c:SI (reg/f:SI 118) [3 row+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118)
        (nil)))
(insn 10 9 11 2 (set (reg/f:SI 119)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 114 [ col.38_2 ])
        (mem/c:SI (reg/f:SI 119) [3 col+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":216:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.38_2 ])) "vid.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ col.38_2 ])
        (nil)))
(insn 14 13 15 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.37_1 ])) "vid.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ row.37_1 ])
        (nil)))
(insn 15 14 16 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(call_insn 16 15 19 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":216:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 19 16 20 2 (clobber (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 20 19 23 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":217:1 -1
     (nil))
(insn 23 20 18 2 (const_int 0 [0]) "vid.c":217:1 311 {nop}
     (nil))
(insn 18 23 21 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":217:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 21 18 0 2 (use (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kputc (kputc, funcdef_no=12, decl_uid=4583, cgraph_uid=13, symbol_order=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 23 count 17 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 15
;; 2 succs { 3 4 }
;; 3 succs { 15 }
;; 4 succs { 5 8 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 15 }
;; 8 succs { 9 11 }
;; 9 succs { 10 16 }
;; 10 succs { 16 }
;; 11 succs { 12 14 }
;; 12 succs { 13 14 }
;; 13 succs { 14 }
;; 14 succs { 15 }
;; 16 succs { 15 }
;; 15 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 126.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r131,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r130,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r163,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a3(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a4(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a7(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a8(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a11(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a12(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a13(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a15(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a16(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a19(r152,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a20(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a21(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a22(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a24(r121,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a25(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a26(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a27(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a30(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a32(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a34(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a35(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a36(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a37(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a38(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a39(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a40(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a41(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a42(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a43(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a44(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a45(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a46(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a47(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a48(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a49(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a50(r132,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 133(l0): point = 0
   Insn 130(l0): point = 2
   Insn 132(l0): point = 4
   Insn 131(l0): point = 6
   Insn 145(l0): point = 9
   Insn 141(l0): point = 12
   Insn 126(l0): point = 14
   Insn 125(l0): point = 16
   Insn 124(l0): point = 18
   Insn 123(l0): point = 20
   Insn 120(l0): point = 23
   Insn 119(l0): point = 25
   Insn 118(l0): point = 27
   Insn 117(l0): point = 29
   Insn 115(l0): point = 32
   Insn 114(l0): point = 34
   Insn 111(l0): point = 36
   Insn 110(l0): point = 38
   Insn 109(l0): point = 40
   Insn 108(l0): point = 42
   Insn 107(l0): point = 44
   Insn 106(l0): point = 46
   Insn 105(l0): point = 48
   Insn 104(l0): point = 50
   Insn 103(l0): point = 52
   Insn 102(l0): point = 54
   Insn 100(l0): point = 57
   Insn 99(l0): point = 59
   Insn 96(l0): point = 61
   Insn 95(l0): point = 63
   Insn 94(l0): point = 65
   Insn 93(l0): point = 67
   Insn 92(l0): point = 69
   Insn 91(l0): point = 71
   Insn 90(l0): point = 73
   Insn 89(l0): point = 75
   Insn 88(l0): point = 77
   Insn 87(l0): point = 79
   Insn 86(l0): point = 81
   Insn 85(l0): point = 83
   Insn 84(l0): point = 85
   Insn 83(l0): point = 87
   Insn 82(l0): point = 89
   Insn 81(l0): point = 91
   Insn 139(l0): point = 94
   Insn 74(l0): point = 96
   Insn 73(l0): point = 98
   Insn 72(l0): point = 100
   Insn 71(l0): point = 102
   Insn 70(l0): point = 104
   Insn 69(l0): point = 106
   Insn 68(l0): point = 108
   Insn 67(l0): point = 110
   Insn 66(l0): point = 112
   Insn 65(l0): point = 114
   Insn 63(l0): point = 117
   Insn 62(l0): point = 119
   Insn 59(l0): point = 121
   Insn 58(l0): point = 123
   Insn 56(l0): point = 126
   Insn 55(l0): point = 128
   Insn 54(l0): point = 130
   Insn 137(l0): point = 133
   Insn 49(l0): point = 135
   Insn 48(l0): point = 137
   Insn 47(l0): point = 139
   Insn 46(l0): point = 141
   Insn 43(l0): point = 144
   Insn 42(l0): point = 146
   Insn 41(l0): point = 148
   Insn 40(l0): point = 150
   Insn 38(l0): point = 153
   Insn 37(l0): point = 155
   Insn 34(l0): point = 157
   Insn 33(l0): point = 159
   Insn 32(l0): point = 161
   Insn 31(l0): point = 163
   Insn 30(l0): point = 165
   Insn 29(l0): point = 167
   Insn 28(l0): point = 169
   Insn 26(l0): point = 172
   Insn 25(l0): point = 174
   Insn 24(l0): point = 176
   Insn 135(l0): point = 179
   Insn 19(l0): point = 181
   Insn 18(l0): point = 183
   Insn 17(l0): point = 185
   Insn 16(l0): point = 187
   Insn 15(l0): point = 189
   Insn 14(l0): point = 191
   Insn 13(l0): point = 193
   Insn 11(l0): point = 196
   Insn 10(l0): point = 198
   Insn 9(l0): point = 200
   Insn 8(l0): point = 202
   Insn 4(l0): point = 204
   Insn 3(l0): point = 206
   Insn 2(l0): point = 208
 a0(r131): [3..4]
 a1(r130): [17..18]
 a2(r163): [19..20]
 a3(r161): [26..29]
 a4(r162): [26..27]
 a5(r129): [35..36]
 a6(r160): [37..38]
 a7(r159): [41..42]
 a8(r128): [41..44]
 a9(r127): [45..46]
 a10(r158): [47..48]
 a11(r156): [51..54]
 a12(r157): [51..52]
 a13(r126): [60..61]
 a14(r155): [62..63]
 a15(r154): [66..67]
 a16(r125): [66..69]
 a17(r124): [70..71]
 a18(r153): [72..73]
 a19(r152): [78..83]
 a20(r122): [80..89]
 a21(r123): [82..85]
 a22(r151): [86..87]
 a23(r150): [90..91]
 a24(r121): [99..100]
 a25(r149): [101..102]
 a26(r148): [107..108]
 a27(r120): [107..110]
 a28(r119): [111..112]
 a29(r147): [113..114]
 a30(r118): [120..121]
 a31(r146): [122..123]
 a32(r145): [129..130]
 a33(r117): [138..139]
 a34(r144): [140..141]
 a35(r142): [147..150]
 a36(r143): [147..148]
 a37(r116): [156..157]
 a38(r141): [158..159]
 a39(r140): [162..163]
 a40(r115): [162..165]
 a41(r114): [166..167]
 a42(r139): [168..169]
 a43(r138): [175..176]
 a44(r113): [184..185]
 a45(r137): [186..187]
 a46(r135): [190..193]
 a47(r136): [190..191]
 a48(r134): [199..200]
 a49(r133): [205..206]
 a50(r132): [207..208]
Compressing live ranges: from 211 to 82 - 38%
Ranges after the compression:
 a0(r131): [0..1]
 a1(r130): [2..3]
 a2(r163): [4..5]
 a3(r161): [6..7]
 a4(r162): [6..7]
 a5(r129): [8..9]
 a6(r160): [10..11]
 a7(r159): [12..13]
 a8(r128): [12..13]
 a9(r127): [14..15]
 a10(r158): [16..17]
 a11(r156): [18..19]
 a12(r157): [18..19]
 a13(r126): [20..21]
 a14(r155): [22..23]
 a15(r154): [24..25]
 a16(r125): [24..25]
 a17(r124): [26..27]
 a18(r153): [28..29]
 a19(r152): [30..31]
 a20(r122): [30..33]
 a21(r123): [30..31]
 a22(r151): [32..33]
 a23(r150): [34..35]
 a24(r121): [36..37]
 a25(r149): [38..39]
 a26(r148): [40..41]
 a27(r120): [40..41]
 a28(r119): [42..43]
 a29(r147): [44..45]
 a30(r118): [46..47]
 a31(r146): [48..49]
 a32(r145): [50..51]
 a33(r117): [52..53]
 a34(r144): [54..55]
 a35(r142): [56..57]
 a36(r143): [56..57]
 a37(r116): [58..59]
 a38(r141): [60..61]
 a39(r140): [62..63]
 a40(r115): [62..63]
 a41(r114): [64..65]
 a42(r139): [66..67]
 a43(r138): [68..69]
 a44(r113): [70..71]
 a45(r137): [72..73]
 a46(r135): [74..75]
 a47(r136): [74..75]
 a48(r134): [76..77]
 a49(r133): [78..79]
 a50(r132): [80..81]
  regions=1, blocks=17, points=82
    allocnos=51 (big 0), copies=0, conflicts=0, ranges=51
Disposition:
   44:r113 l0     3   41:r114 l0     3   40:r115 l0     3   37:r116 l0     3
   33:r117 l0     3   30:r118 l0     3   28:r119 l0     3   27:r120 l0     3
   24:r121 l0     3   20:r122 l0     1   21:r123 l0     2   17:r124 l0     3
   16:r125 l0     3   13:r126 l0     3    9:r127 l0     3    8:r128 l0     3
    5:r129 l0     3    1:r130 l0     3    0:r131 l0     3   50:r132 l0     3
   49:r133 l0     3   48:r134 l0     3   46:r135 l0     3   47:r136 l0     2
   45:r137 l0     3   43:r138 l0     3   42:r139 l0     3   39:r140 l0     2
   38:r141 l0     3   35:r142 l0     3   36:r143 l0     2   34:r144 l0     3
   32:r145 l0     3   31:r146 l0     3   29:r147 l0     3   26:r148 l0     2
   25:r149 l0     3   23:r150 l0     3   22:r151 l0     3   19:r152 l0     3
   18:r153 l0     3   15:r154 l0     2   14:r155 l0     3   11:r156 l0     3
   12:r157 l0     2   10:r158 l0     3    7:r159 l0     2    6:r160 l0     3
    3:r161 l0     3    4:r162 l0     2    2:r163 l0     3
+++Costs: overall 18000, reg 18000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kputc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,8u} r1={11d,1u} r2={11d,1u} r3={10d} r11={1d,16u} r12={18d} r13={1d,25u} r14={10d} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={16d,7u} r101={9d} r102={1d,21u} r103={1d,15u} r104={9d} r105={9d} r106={9d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} 
;;    total ref usage 1094{949d,145u,0e} in 98{89 regular + 9 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 132 133 134
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 132)
        (reg:SI 0 r0 [ c ])) "vid.c":220:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ c ])
        (nil)))
(insn 3 2 4 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "vid.c":220:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 133)) "vid.c":220:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 133)
        (nil)))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 9 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrcursor") [flags 0x3]  <function_decl 0x7fd417cfeb00 clrcursor>) [0 clrcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":221:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 134)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":222:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134)
            (const_int 13 [0xd]))) "vid.c":222:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "vid.c":222:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 135 136 137
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 135)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (mem/c:SI (reg/f:SI 135) [3 col+0 S4 A32])
        (reg:SI 136)) "vid.c":223:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_DEAD (reg/f:SI 135)
            (nil))))
(insn 16 15 17 3 (set (reg/f:SI 137)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":225:5 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 113 [ cursor.39_1 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 137) [0 cursor+0 S1 A8]))) "vid.c":225:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 18 17 19 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ cursor.39_1 ])) "vid.c":225:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ cursor.39_1 ])
        (nil)))
(call_insn 19 18 135 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":225:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 135 19 136 3 (set (pc)
        (label_ref 127)) "vid.c":226:5 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 136 135 22)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 138
(code_label 22 136 23 4 59 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 138)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":228:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 138)
            (const_int 10 [0xa]))) "vid.c":228:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 138)
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "vid.c":228:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 52)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 115 116 139 140 141
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 139)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 114 [ row.40_2 ])
        (mem/c:SI (reg/f:SI 139) [3 row+0 S4 A32])) "vid.c":229:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))
(insn 30 29 31 5 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ row.40_2 ])
            (const_int 1 [0x1]))) "vid.c":229:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ row.40_2 ])
        (nil)))
(insn 31 30 32 5 (set (reg/f:SI 140)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 5 (set (mem/c:SI (reg/f:SI 140) [3 row+0 S4 A32])
        (reg:SI 115 [ _3 ])) "vid.c":229:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
            (nil))))
(insn 33 32 34 5 (set (reg/f:SI 141)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":230:12 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 37 5 (set (reg:SI 116 [ row.41_4 ])
        (mem/c:SI (reg/f:SI 141) [3 row+0 S4 A32])) "vid.c":230:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))
(insn 37 34 38 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ row.41_4 ])
            (const_int 24 [0x18]))) "vid.c":230:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ row.41_4 ])
        (nil)))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "vid.c":230:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 44)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 142 143
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:SI 142)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (reg:SI 143)
        (const_int 24 [0x18])) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 6 (set (mem/c:SI (reg/f:SI 142) [3 row+0 S4 A32])
        (reg:SI 143)) "vid.c":231:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_DEAD (reg/f:SI 142)
            (nil))))
(call_insn 43 42 44 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":232:7 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 144
(code_label 44 43 45 7 62 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg/f:SI 144)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":235:5 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 7 (set (reg:SI 117 [ cursor.42_5 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 144) [0 cursor+0 S1 A8]))) "vid.c":235:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))
(insn 48 47 49 7 (set (reg:SI 0 r0)
        (reg:SI 117 [ cursor.42_5 ])) "vid.c":235:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ cursor.42_5 ])
        (nil)))
(call_insn 49 48 137 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":235:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 137 49 138 7 (set (pc)
        (label_ref 127)) "vid.c":236:5 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 138 137 52)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 145
(code_label 52 138 53 8 61 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:SI 145)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":238:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 55 54 56 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145)
            (const_int 8 [0x8]))) "vid.c":238:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(jump_insn 56 55 57 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "vid.c":238:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 79)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 146
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg/f:SI 146)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 62 9 (set (reg:SI 118 [ col.43_6 ])
        (mem/c:SI (reg/f:SI 146) [3 col+0 S4 A32])) "vid.c":239:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 146)
        (nil)))
(insn 62 59 63 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ col.43_6 ])
            (const_int 0 [0]))) "vid.c":239:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ col.43_6 ])
        (nil)))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 144)
            (pc))) "vid.c":239:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 144)
;;  succ:       10 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 119 120 121 147 148 149
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg/f:SI 147)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 10 (set (reg:SI 119 [ col.44_7 ])
        (mem/c:SI (reg/f:SI 147) [3 col+0 S4 A32])) "vid.c":240:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))
(insn 67 66 68 10 (set (reg:SI 120 [ _8 ])
        (plus:SI (reg:SI 119 [ col.44_7 ])
            (const_int -1 [0xffffffffffffffff]))) "vid.c":240:10 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 119 [ col.44_7 ])
        (nil)))
(insn 68 67 69 10 (set (reg/f:SI 148)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (mem/c:SI (reg/f:SI 148) [3 col+0 S4 A32])
        (reg:SI 120 [ _8 ])) "vid.c":240:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
            (nil))))
(call_insn 70 69 71 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("erasechar") [flags 0x3]  <function_decl 0x7fd417cfe900 erasechar>) [0 erasechar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":241:7 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 71 70 72 10 (set (reg/f:SI 149)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":242:7 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 10 (set (reg:SI 121 [ cursor.45_9 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 149) [0 cursor+0 S1 A8]))) "vid.c":242:7 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 149)
        (nil)))
(insn 73 72 74 10 (set (reg:SI 0 r0)
        (reg:SI 121 [ cursor.45_9 ])) "vid.c":242:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ cursor.45_9 ])
        (nil)))
(call_insn 74 73 139 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":242:7 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 139 74 140 10 (set (pc)
        (label_ref:SI 144)) "vid.c":244:5 284 {*arm_jump}
     (nil)
 -> 144)
;;  succ:       16 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 140 139 79)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       8
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 124 125 126 150 151 152 153 154 155
(code_label 79 140 80 11 63 (nil) [1 uses])
(note 80 79 81 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 11 (set (reg/f:SI 150)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 82 81 83 11 (set (reg:SI 122 [ row.46_10 ])
        (mem/c:SI (reg/f:SI 150) [3 row+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 150)
        (nil)))
(insn 83 82 84 11 (set (reg/f:SI 151)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 123 [ col.47_11 ])
        (mem/c:SI (reg/f:SI 151) [3 col+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 151)
        (nil)))
(insn 85 84 86 11 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":247:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 86 85 87 11 (set (reg:SI 2 r2)
        (reg:SI 123 [ col.47_11 ])) "vid.c":247:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ col.47_11 ])
        (nil)))
(insn 87 86 88 11 (set (reg:SI 1 r1)
        (reg:SI 122 [ row.46_10 ])) "vid.c":247:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ row.46_10 ])
        (nil)))
(insn 88 87 89 11 (set (reg:SI 0 r0)
        (reg:SI 152)) "vid.c":247:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(call_insn 89 88 90 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":247:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 90 89 91 11 (set (reg/f:SI 153)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 11 (set (reg:SI 124 [ col.48_12 ])
        (mem/c:SI (reg/f:SI 153) [3 col+0 S4 A32])) "vid.c":248:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 153)
        (nil)))
(insn 92 91 93 11 (set (reg:SI 125 [ _13 ])
        (plus:SI (reg:SI 124 [ col.48_12 ])
            (const_int 1 [0x1]))) "vid.c":248:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 124 [ col.48_12 ])
        (nil)))
(insn 93 92 94 11 (set (reg/f:SI 154)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 11 (set (mem/c:SI (reg/f:SI 154) [3 col+0 S4 A32])
        (reg:SI 125 [ _13 ])) "vid.c":248:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 154)
        (expr_list:REG_DEAD (reg:SI 125 [ _13 ])
            (nil))))
(insn 95 94 96 11 (set (reg/f:SI 155)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":249:10 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 99 11 (set (reg:SI 126 [ col.49_14 ])
        (mem/c:SI (reg/f:SI 155) [3 col+0 S4 A32])) "vid.c":249:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 155)
        (nil)))
(insn 99 96 100 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 126 [ col.49_14 ])
            (const_int 79 [0x4f]))) "vid.c":249:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ col.49_14 ])
        (nil)))
(jump_insn 100 99 101 11 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":249:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 121)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 128 129 156 157 158 159 160
(note 101 100 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 12 (set (reg/f:SI 156)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 12 (set (reg:SI 157)
        (const_int 0 [0])) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 12 (set (mem/c:SI (reg/f:SI 156) [3 col+0 S4 A32])
        (reg:SI 157)) "vid.c":250:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg/f:SI 156)
            (nil))))
(insn 105 104 106 12 (set (reg/f:SI 158)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 12 (set (reg:SI 127 [ row.50_15 ])
        (mem/c:SI (reg/f:SI 158) [3 row+0 S4 A32])) "vid.c":251:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 158)
        (nil)))
(insn 107 106 108 12 (set (reg:SI 128 [ _16 ])
        (plus:SI (reg:SI 127 [ row.50_15 ])
            (const_int 1 [0x1]))) "vid.c":251:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 127 [ row.50_15 ])
        (nil)))
(insn 108 107 109 12 (set (reg/f:SI 159)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 12 (set (mem/c:SI (reg/f:SI 159) [3 row+0 S4 A32])
        (reg:SI 128 [ _16 ])) "vid.c":251:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 159)
        (expr_list:REG_DEAD (reg:SI 128 [ _16 ])
            (nil))))
(insn 110 109 111 12 (set (reg/f:SI 160)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":252:13 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 114 12 (set (reg:SI 129 [ row.51_17 ])
        (mem/c:SI (reg/f:SI 160) [3 row+0 S4 A32])) "vid.c":252:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 160)
        (nil)))
(insn 114 111 115 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ row.51_17 ])
            (const_int 24 [0x18]))) "vid.c":252:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 129 [ row.51_17 ])
        (nil)))
(jump_insn 115 114 116 12 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":252:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 121)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 161 162
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg/f:SI 161)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 13 (set (reg:SI 162)
        (const_int 24 [0x18])) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 119 118 120 13 (set (mem/c:SI (reg/f:SI 161) [3 row+0 S4 A32])
        (reg:SI 162)) "vid.c":253:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 162)
        (expr_list:REG_DEAD (reg/f:SI 161)
            (nil))))
(call_insn 120 119 121 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":254:7 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 16, flags: (RTL)
;;  pred:       11
;;              12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 130 163
(code_label 121 120 122 14 65 (nil) [2 uses])
(note 122 121 123 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 14 (set (reg/f:SI 163)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":257:3 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 14 (set (reg:SI 130 [ cursor.52_18 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 163) [0 cursor+0 S1 A8]))) "vid.c":257:3 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 163)
        (nil)))
(insn 125 124 126 14 (set (reg:SI 0 r0)
        (reg:SI 130 [ cursor.52_18 ])) "vid.c":257:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130 [ cursor.52_18 ])
        (nil)))
(call_insn 126 125 141 14 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":257:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 141 126 142 14 (set (pc)
        (label_ref 127)) 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 142 141 144)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 14, next block 15, flags: (RTL)
;;  pred:       9
;;              10 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 144 142 143 16 66 (nil) [2 uses])
(note 143 144 145 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 145 143 127 16 (const_int 0 [0]) "vid.c":244:5 311 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 16, next block 1, flags: (RTL)
;;  pred:       16 [always]  (FALLTHRU)
;;              3 [always] 
;;              7 [always] 
;;              14
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 131
(code_label 127 145 128 15 60 (nil) [3 uses])
(note 128 127 131 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 131 128 132 15 (clobber (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 132 131 130 15 (clobber (reg:SI 131 [ <retval> ])) "vid.c":259:1 -1
     (nil))
(insn 130 132 133 15 (set (reg/i:SI 0 r0)
        (reg:SI 131 [ <retval> ])) "vid.c":259:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 131 [ <retval> ])
        (nil)))
(insn 133 130 0 15 (use (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kprints (kprints, funcdef_no=13, decl_uid=4586, cgraph_uid=14, symbol_order=19)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a6(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 28(l0): point = 0
   Insn 25(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 15(l0): point = 11
   Insn 14(l0): point = 13
   Insn 13(l0): point = 15
   Insn 12(l0): point = 17
   Insn 11(l0): point = 19
   Insn 10(l0): point = 21
   Insn 9(l0): point = 23
   Insn 22(l0): point = 26
   Insn 21(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 31(l0): point = 35
   Insn 2(l0): point = 37
 a0(r115): [3..6]
 a1(r114): [29..30]
 a2(r119): [31..32]
 a3(r117): [12..13]
 a4(r118): [14..15]
 a5(r113): [20..21]
 a6(r116): [22..23]
Compressing live ranges: from 40 to 14 - 35%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r114): [10..11]
 a2(r119): [12..13]
 a3(r117): [2..3]
 a4(r118): [4..5]
 a5(r113): [6..7]
 a6(r116): [8..9]
  regions=1, blocks=6, points=14
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7
Disposition:
    5:r113 l0     3    1:r114 l0     3    0:r115 l0     3    6:r116 l0     3
    3:r117 l0     3    4:r118 l0     3    2:r119 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kprints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,10u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 154{117d,37u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":262:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 31 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 31 3 32 2 (set (pc)
        (label_ref 16)) "vid.c":263:8 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 32 31 20)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118
(code_label 20 32 8 3 71 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":264:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":264:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":264:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":264:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":265:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":265:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":265:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 119
(code_label 16 15 17 4 70 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":263:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":263:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":263:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":263:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 27 26 30 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":267:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":267:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":267:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 28 25 0 5 (use (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function prints (prints, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=20)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a6(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 28(l0): point = 0
   Insn 25(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 15(l0): point = 11
   Insn 14(l0): point = 13
   Insn 13(l0): point = 15
   Insn 12(l0): point = 17
   Insn 11(l0): point = 19
   Insn 10(l0): point = 21
   Insn 9(l0): point = 23
   Insn 22(l0): point = 26
   Insn 21(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 31(l0): point = 35
   Insn 2(l0): point = 37
 a0(r115): [3..6]
 a1(r114): [29..30]
 a2(r119): [31..32]
 a3(r117): [12..13]
 a4(r118): [14..15]
 a5(r113): [20..21]
 a6(r116): [22..23]
Compressing live ranges: from 40 to 14 - 35%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r114): [10..11]
 a2(r119): [12..13]
 a3(r117): [2..3]
 a4(r118): [4..5]
 a5(r113): [6..7]
 a6(r116): [8..9]
  regions=1, blocks=6, points=14
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=7
Disposition:
    5:r113 l0     3    1:r114 l0     3    0:r115 l0     3    6:r116 l0     3
    3:r117 l0     3    4:r118 l0     3    2:r119 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


prints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,10u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} 
;;    total ref usage 154{117d,37u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":269:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 31 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 31 3 32 2 (set (pc)
        (label_ref 16)) "vid.c":270:8 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 32 31 20)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118
(code_label 20 32 8 3 74 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":271:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":271:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":271:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":271:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":272:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":272:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":272:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 119
(code_label 16 15 17 4 73 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":270:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":270:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":270:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":270:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 27 26 30 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":274:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":274:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":274:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 28 25 0 5 (use (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function krpx (krpx, funcdef_no=15, decl_uid=4598, cgraph_uid=16, symbol_order=21)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 5 4
;; 2 succs { 5 3 }
;; 3 succs { 4 }
;; 5 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a10(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 34(l0): point = 0
   Insn 31(l0): point = 2
   Insn 33(l0): point = 4
   Insn 32(l0): point = 6
   Insn 40(l0): point = 9
   Insn 36(l0): point = 12
   Insn 27(l0): point = 14
   Insn 26(l0): point = 16
   Insn 25(l0): point = 18
   Insn 24(l0): point = 20
   Insn 23(l0): point = 22
   Insn 22(l0): point = 24
   Insn 21(l0): point = 26
   Insn 20(l0): point = 28
   Insn 19(l0): point = 30
   Insn 18(l0): point = 32
   Insn 17(l0): point = 34
   Insn 16(l0): point = 36
   Insn 15(l0): point = 38
   Insn 14(l0): point = 40
   Insn 8(l0): point = 43
   Insn 7(l0): point = 45
   Insn 6(l0): point = 47
   Insn 2(l0): point = 49
 a0(r117): [3..4]
 a1(r123): [17..18]
 a2(r116): [23..24]
 a3(r122): [25..26]
 a4(r121): [29..30]
 a5(r115): [31..32]
 a6(r114): [33..34]
 a7(r113): [33..38]
 a8(r120): [35..36]
 a9(r119): [39..40]
 a10(r118): [46..47]
Compressing live ranges: from 52 to 20 - 38%
Ranges after the compression:
 a0(r117): [0..1]
 a1(r123): [2..3]
 a2(r116): [4..5]
 a3(r122): [6..7]
 a4(r121): [8..9]
 a5(r115): [10..11]
 a6(r114): [12..13]
 a7(r113): [12..15]
 a8(r120): [14..15]
 a9(r119): [16..17]
 a10(r118): [18..19]
  regions=1, blocks=6, points=20
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    7:r113 l0     2    6:r114 l0     3    5:r115 l0     3    2:r116 l0     3
    0:r117 l0     3   10:r118 l0     3    9:r119 l0     3    8:r120 l0     3
    4:r121 l0     3    3:r122 l0     3    1:r123 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


krpx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={3d} r2={3d} r3={3d} r11={1d,5u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,11u} r103={1d,4u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u,1e} r123={1d,1u} 
;;    total ref usage 264{219d,44u,1e} in 24{22 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":277:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":279:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":279:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 39)
            (pc))) "vid.c":279:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 39)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 119 120 121 122 123
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":281:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 113 [ tab.53_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":281:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 16 15 17 3 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":281:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 114 [ _2 ])
        (and:SI (reg:SI 120)
            (const_int 15 [0xf]))) "vid.c":281:13 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 18 17 19 3 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.53_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":281:10 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ tab.53_1 ])
            (nil))))
(insn 19 18 20 3 (set (reg:QI 121)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":281:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
        (nil)))
(insn 20 19 21 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 121)) "vid.c":281:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 121)
        (nil)))
(insn 21 20 22 3 (set (reg:SI 122)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":282:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 122)
            (const_int 4 [0x4]))) "vid.c":282:3 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 122)
        (expr_list:REG_EQUAL (udiv:SI (reg:SI 122)
                (const_int 16 [0x10]))
            (nil))))
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":282:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":282:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 123)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":283:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 r0)
        (reg:SI 123)) "vid.c":283:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(call_insn 27 26 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":283:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 36 27 37 3 (set (pc)
        (label_ref 28)) 284 {*arm_jump}
     (nil)
 -> 28)
;;  succ:       4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 37 36 39)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 39 37 38 5 78 (nil) [1 uses])
(note 38 39 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 28 5 (const_int 0 [0]) "vid.c":280:6 311 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       5 [always]  (FALLTHRU)
;;              3
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(code_label 28 40 29 4 77 (nil) [1 uses])
(note 29 28 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 29 33 4 (clobber (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 33 32 31 4 (clobber (reg:SI 117 [ <retval> ])) "vid.c":284:1 -1
     (nil))
(insn 31 33 34 4 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":284:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ <retval> ])
        (nil)))
(insn 34 31 0 4 (use (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kprintx (kprintx, funcdef_no=16, decl_uid=4602, cgraph_uid=17, symbol_order=22)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 25.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 30(l0): point = 0
   Insn 27(l0): point = 2
   Insn 32(l0): point = 4
   Insn 29(l0): point = 6
   Insn 28(l0): point = 8
   Insn 25(l0): point = 10
   Insn 24(l0): point = 12
   Insn 21(l0): point = 15
   Insn 20(l0): point = 17
   Insn 33(l0): point = 20
   Insn 15(l0): point = 22
   Insn 14(l0): point = 24
   Insn 12(l0): point = 27
   Insn 11(l0): point = 29
   Insn 10(l0): point = 31
   Insn 9(l0): point = 33
   Insn 8(l0): point = 35
   Insn 7(l0): point = 37
   Insn 6(l0): point = 39
   Insn 2(l0): point = 41
 a0(r113): [3..6]
 a1(r114): [30..31]
Compressing live ranges: from 44 to 4 - 9%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r114): [2..3]
  regions=1, blocks=6, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    0:r113 l0     3    1:r114 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kprintx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={13d,8u} r1={6d} r2={6d} r3={6d} r11={1d,5u} r12={10d} r13={1d,10u} r14={6d} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={6d,1u} r101={5d} r102={1d,8u} r103={1d,4u} r104={5d} r105={5d} r106={5d} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 542{504d,38u,0e} in 20{15 regular + 5 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":287:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":288:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (const_int 120 [0x78])) "vid.c":288:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":289:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":289:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "vid.c":289:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":290:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 33 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":290:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 33 15 34 3 (set (pc)
        (label_ref 22)) 284 {*arm_jump}
     (nil)
 -> 22)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 34 33 18)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 18 34 19 4 82 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":292:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":292:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 22 21 23 5 83 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":293:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 25 24 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":293:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 28 25 29 5 (clobber (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 29 28 32 5 (clobber (reg:SI 113 [ <retval> ])) "vid.c":294:1 -1
     (nil))
(insn 32 29 27 5 (const_int 0 [0]) "vid.c":294:1 311 {nop}
     (nil))
(insn 27 32 30 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":294:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 30 27 0 5 (use (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function krpu (krpu, funcdef_no=17, decl_uid=4605, cgraph_uid=18, symbol_order=23)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 5 4
;; 2 succs { 5 3 }
;; 3 succs { 4 }
;; 5 succs { 4 }
;; 4 succs { 1 }
Removing SCRATCH to p130 in insn #18 (nop 3)
rescanning insn with uid = 18.
Removing SCRATCH to p131 in insn #31 (nop 3)
rescanning insn with uid = 31.
Building IRA IR
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)

Pass 0 for finding pseudo/allocno costs

    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r129,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a7(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a10(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:62000
  a12(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a13(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a14(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a16(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a17(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 44(l0): point = 0
   Insn 41(l0): point = 2
   Insn 43(l0): point = 4
   Insn 42(l0): point = 6
   Insn 50(l0): point = 9
   Insn 46(l0): point = 12
   Insn 37(l0): point = 14
   Insn 36(l0): point = 16
   Insn 35(l0): point = 18
   Insn 34(l0): point = 20
   Insn 33(l0): point = 22
   Insn 32(l0): point = 24
   Insn 31(l0): point = 26
   Insn 30(l0): point = 31
   Insn 29(l0): point = 33
   Insn 28(l0): point = 35
   Insn 27(l0): point = 37
   Insn 26(l0): point = 39
   Insn 25(l0): point = 41
   Insn 24(l0): point = 43
   Insn 23(l0): point = 45
   Insn 22(l0): point = 47
   Insn 21(l0): point = 49
   Insn 20(l0): point = 51
   Insn 19(l0): point = 53
   Insn 18(l0): point = 55
   Insn 17(l0): point = 60
   Insn 16(l0): point = 62
   Insn 15(l0): point = 64
   Insn 14(l0): point = 66
   Insn 8(l0): point = 69
   Insn 7(l0): point = 71
   Insn 6(l0): point = 73
   Insn 2(l0): point = 75
 a0(r117): [3..4]
 a1(r129): [17..18]
 a2(r116): [23..24]
 a3(r127): [25..26]
 a4(r128): [27..31]
 a5(r126): [27..33]
 a6(r131): [28..29] [26..26]
 a7(r125): [36..37]
 a8(r115): [38..39]
 a9(r114): [48..53] [40..41]
 a10(r113): [40..64]
 a11(r123): [46..51] [42..43]
 a12(r120): [42..62]
 a13(r124): [44..45]
 a14(r121): [54..55]
 a15(r122): [56..60]
 a16(r130): [57..58] [55..55]
 a17(r119): [65..66]
 a18(r118): [72..73]
Compressing live ranges: from 78 to 30 - 38%
Ranges after the compression:
 a0(r117): [0..1]
 a1(r129): [2..3]
 a2(r116): [4..5]
 a3(r127): [6..7]
 a4(r128): [8..9]
 a5(r126): [8..9]
 a6(r131): [7..9]
 a7(r125): [10..11]
 a8(r115): [12..13]
 a9(r114): [20..21] [14..15]
 a10(r113): [14..25]
 a11(r123): [20..21] [16..17]
 a12(r120): [16..25]
 a13(r124): [18..19]
 a14(r121): [22..23]
 a15(r122): [24..25]
 a16(r130): [23..25]
 a17(r119): [26..27]
 a18(r118): [28..29]
  regions=1, blocks=6, points=30
    allocnos=19 (big 0), copies=0, conflicts=0, ranges=21
Disposition:
   10:r113 l0     0    9:r114 l0     2    8:r115 l0     3    2:r116 l0     3
    0:r117 l0     3   18:r118 l0     3   17:r119 l0     3   12:r120 l0     1
   14:r121 l0     3   15:r122 l0     3   11:r123 l0     3   13:r124 l0     3
    7:r125 l0     3    5:r126 l0     3    3:r127 l0     3    4:r128 l0     2
    1:r129 l0     3   16:r130 l0     2    6:r131 l0     1
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


krpu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={3d} r2={3d} r3={3d} r11={1d,5u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,11u} r103={1d,4u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={2d,3u,1e} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,2u,1e} r121={1d,1u} r122={1d,1u} r123={4d,4u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d} r131={1d} 
;;    total ref usage 289{231d,56u,2e} in 34{32 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":297:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":299:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":299:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 49)
            (pc))) "vid.c":299:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 49)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 119 120 121 122 123 124 125 126 127 128 129 130 131
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":301:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 113 [ tab.54_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":301:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 119)
        (nil)))
(insn 16 15 17 3 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 122)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:SI 121)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 120))
                            (zero_extend:DI (reg:SI 122)))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 130))
        ]) "vid.c":301:13 72 {*umull_high}
     (expr_list:REG_DEAD (reg:SI 122)
        (expr_list:REG_UNUSED (reg:SI 130)
            (nil))))
(insn 19 18 20 3 (set (reg:SI 114 [ _2 ])
        (lshiftrt:SI (reg:SI 121)
            (const_int 3 [0x3]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 121)
        (expr_list:REG_EQUAL (udiv:SI (reg:SI 120)
                (const_int 10 [0xa]))
            (nil))))
(insn 20 19 21 3 (set (reg:SI 123)
        (reg:SI 114 [ _2 ])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 123)
        (ashift:SI (reg:SI 123)
            (const_int 2 [0x2]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (nil))
(insn 22 21 23 3 (set (reg:SI 123)
        (plus:SI (reg:SI 123)
            (reg:SI 114 [ _2 ]))) "vid.c":301:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
                (const_int 5 [0x5]))
            (nil))))
(insn 23 22 24 3 (set (reg:SI 124)
        (ashift:SI (reg:SI 123)
            (const_int 1 [0x1]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(insn 24 23 25 3 (set (reg:SI 123)
        (reg:SI 124)) "vid.c":301:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(insn 25 24 26 3 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 120)
            (reg:SI 123))) "vid.c":301:13 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_DEAD (reg:SI 120)
            (nil))))
(insn 26 25 27 3 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.54_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":301:10 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ tab.54_1 ])
            (nil))))
(insn 27 26 28 3 (set (reg:QI 125)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":301:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
        (nil)))
(insn 28 27 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 125)) "vid.c":301:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 125)
        (nil)))
(insn 29 28 30 3 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 128)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 127)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 126))
                            (zero_extend:DI (reg:SI 128)))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 131))
        ]) "vid.c":302:3 72 {*umull_high}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_DEAD (reg:SI 126)
            (expr_list:REG_UNUSED (reg:SI 131)
                (nil)))))
(insn 32 31 33 3 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 127)
            (const_int 3 [0x3]))) "vid.c":302:3 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 33 32 34 3 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":302:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(call_insn 34 33 35 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":302:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 35 34 36 3 (set (reg:SI 129)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":303:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 r0)
        (reg:SI 129)) "vid.c":303:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(call_insn 37 36 46 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":303:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 46 37 47 3 (set (pc)
        (label_ref 38)) 284 {*arm_jump}
     (nil)
 -> 38)
;;  succ:       4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 47 46 49)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 49 47 48 5 87 (nil) [1 uses])
(note 48 49 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 48 38 5 (const_int 0 [0]) "vid.c":300:6 311 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       5 [always]  (FALLTHRU)
;;              3
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(code_label 38 50 39 4 86 (nil) [1 uses])
(note 39 38 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 39 43 4 (clobber (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 43 42 41 4 (clobber (reg:SI 117 [ <retval> ])) "vid.c":304:1 -1
     (nil))
(insn 41 43 44 4 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":304:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ <retval> ])
        (nil)))
(insn 44 41 0 4 (use (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kprintu (kprintu, funcdef_no=18, decl_uid=4609, cgraph_uid=19, symbol_order=24)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 26(l0): point = 0
   Insn 23(l0): point = 2
   Insn 28(l0): point = 4
   Insn 25(l0): point = 6
   Insn 24(l0): point = 8
   Insn 21(l0): point = 10
   Insn 20(l0): point = 12
   Insn 17(l0): point = 15
   Insn 16(l0): point = 17
   Insn 29(l0): point = 20
   Insn 11(l0): point = 22
   Insn 10(l0): point = 24
   Insn 8(l0): point = 27
   Insn 7(l0): point = 29
   Insn 6(l0): point = 31
   Insn 2(l0): point = 33
 a0(r113): [3..6]
 a1(r114): [30..31]
Compressing live ranges: from 36 to 4 - 11%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r114): [2..3]
  regions=1, blocks=6, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    0:r113 l0     3    1:r114 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kprintu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={4d} r2={4d} r3={4d} r11={1d,5u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,8u} r103={1d,4u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 342{308d,34u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":307:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":308:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":308:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "vid.c":308:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":309:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 11 10 29 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":309:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 29 11 30 3 (set (pc)
        (label_ref 18)) 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 30 29 14)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 14 30 15 4 91 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":312:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":312:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 18 17 19 5 92 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":313:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 24 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":313:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 24 21 25 5 (clobber (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 25 24 28 5 (clobber (reg:SI 113 [ <retval> ])) "vid.c":314:1 -1
     (nil))
(insn 28 25 23 5 (const_int 0 [0]) "vid.c":314:1 311 {nop}
     (nil))
(insn 23 28 26 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":314:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 26 23 0 5 (use (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kprinti (kprinti, funcdef_no=19, decl_uid=4612, cgraph_uid=20, symbol_order=25)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 28(l0): point = 0
   Insn 25(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 21(l0): point = 14
   Insn 18(l0): point = 17
   Insn 17(l0): point = 19
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 13(l0): point = 27
   Insn 12(l0): point = 29
   Insn 10(l0): point = 32
   Insn 9(l0): point = 34
   Insn 8(l0): point = 36
   Insn 2(l0): point = 38
 a0(r114): [3..6]
 a1(r113): [13..14]
 a2(r116): [18..19]
 a3(r117): [20..21]
 a4(r115): [35..36]
Compressing live ranges: from 41 to 10 - 24%
Ranges after the compression:
 a0(r114): [0..1]
 a1(r113): [2..3]
 a2(r116): [4..5]
 a3(r117): [6..7]
 a4(r115): [8..9]
  regions=1, blocks=5, points=10
    allocnos=5 (big 0), copies=0, conflicts=0, ranges=5
Disposition:
    1:r113 l0     3    0:r114 l0     3    4:r115 l0     3    2:r116 l0     3
    3:r117 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kprinti

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={4d} r2={4d} r3={4d} r11={1d,4u} r12={6d} r13={1d,7u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,9u} r103={1d,3u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} 
;;    total ref usage 346{311d,35u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":317:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ x ])
        (nil)))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":318:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115)
            (const_int 0 [0]))) "vid.c":318:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "vid.c":318:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 116 117
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":319:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 13 12 14 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":319:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 45 [0x2d])) "vid.c":320:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":320:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 16 15 17 3 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":321:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 116)
        (neg:SI (reg:SI 117))) "vid.c":321:7 164 {*arm_negsi2}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 18 17 19 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 116)) "vid.c":321:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114
(code_label 19 18 20 4 94 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 113 [ x.55_1 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":323:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ x.55_1 ])) "vid.c":323:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ x.55_1 ])
        (nil)))
(call_insn 23 22 26 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":323:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 26 23 27 4 (clobber (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 27 26 30 4 (clobber (reg:SI 114 [ <retval> ])) "vid.c":324:1 -1
     (nil))
(insn 30 27 25 4 (const_int 0 [0]) "vid.c":324:1 311 {nop}
     (nil))
(insn 25 30 28 4 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":324:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ <retval> ])
        (nil)))
(insn 28 25 0 4 (use (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function kprintf (kprintf, funcdef_no=20, decl_uid=4615, cgraph_uid=21, symbol_order=26)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 24 count 17 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 16 13 14 15
;;
;; Loop 1
;;  header 14, multiple latches: 13 6
;;  depth 1, outer 0
;;  nodes: 14 13 6 4 5 3 7 16 8 9 10 11 12
;; 2 succs { 14 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 14 }
;; 7 succs { 13 8 10 9 11 12 }
;; 8 succs { 13 }
;; 9 succs { 13 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 16 }
;; 16 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 3 15 }
;; 15 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 89.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r126,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a8(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a9(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a11(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a12(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a14(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r121,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a16(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a17(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a19(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a23(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a24(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a30(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a32(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a35(r130,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:22000
  a36(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 110(l0): point = 0
   Insn 107(l0): point = 2
   Insn 112(l0): point = 4
   Insn 109(l0): point = 6
   Insn 108(l0): point = 8
   Insn 15(l0): point = 11
   Insn 14(l0): point = 13
   Insn 13(l0): point = 15
   Insn 12(l0): point = 17
   Insn 104(l0): point = 20
   Insn 103(l0): point = 22
   Insn 101(l0): point = 24
   Insn 100(l0): point = 26
   Insn 97(l0): point = 29
   Insn 96(l0): point = 31
   Insn 95(l0): point = 33
   Insn 94(l0): point = 35
   Insn 93(l0): point = 37
   Insn 92(l0): point = 39
   Insn 44(l0): point = 42
   Insn 43(l0): point = 44
   Insn 42(l0): point = 46
   Insn 41(l0): point = 48
   Insn 40(l0): point = 50
   Insn 39(l0): point = 52
   Insn 38(l0): point = 54
   Insn 37(l0): point = 56
   Insn 126(l0): point = 59
   Insn 89(l0): point = 62
   Insn 88(l0): point = 64
   Insn 87(l0): point = 66
   Insn 86(l0): point = 68
   Insn 85(l0): point = 70
   Insn 117(l0): point = 73
   Insn 54(l0): point = 75
   Insn 53(l0): point = 77
   Insn 52(l0): point = 79
   Insn 51(l0): point = 81
   Insn 50(l0): point = 83
   Insn 119(l0): point = 86
   Insn 63(l0): point = 88
   Insn 62(l0): point = 90
   Insn 61(l0): point = 92
   Insn 60(l0): point = 94
   Insn 59(l0): point = 96
   Insn 121(l0): point = 99
   Insn 71(l0): point = 101
   Insn 70(l0): point = 103
   Insn 69(l0): point = 105
   Insn 68(l0): point = 107
   Insn 123(l0): point = 110
   Insn 80(l0): point = 112
   Insn 79(l0): point = 114
   Insn 78(l0): point = 116
   Insn 77(l0): point = 118
   Insn 76(l0): point = 120
   Insn 115(l0): point = 123
   Insn 32(l0): point = 125
   Insn 31(l0): point = 127
   Insn 30(l0): point = 129
   Insn 24(l0): point = 132
   Insn 23(l0): point = 134
   Insn 22(l0): point = 136
   Insn 21(l0): point = 138
   Insn 20(l0): point = 140
   Insn 19(l0): point = 142
   Insn 18(l0): point = 144
   Insn 17(l0): point = 146
   Insn 27(l0): point = 149
   Insn 26(l0): point = 151
   Insn 113(l0): point = 154
   Insn 8(l0): point = 156
   Insn 7(l0): point = 158
   Insn 6(l0): point = 160
   Insn 5(l0): point = 162
 a0(r128): [3..6]
 a1(r127): [23..24]
 a2(r149): [25..26]
 a3(r147): [30..31]
 a4(r148): [32..33]
 a5(r145): [36..37]
 a6(r146): [38..39]
 a7(r126): [65..66]
 a8(r125): [67..68]
 a9(r144): [69..70]
 a10(r124): [115..116]
 a11(r123): [117..118]
 a12(r143): [119..120]
 a13(r122): [104..105]
 a14(r142): [106..107]
 a15(r121): [91..92]
 a16(r120): [93..94]
 a17(r141): [95..96]
 a18(r119): [78..79]
 a19(r118): [80..81]
 a20(r140): [82..83]
 a21(r139): [43..44]
 a22(r117): [45..46]
 a23(r116): [47..48]
 a24(r138): [49..50]
 a25(r136): [53..54]
 a26(r137): [55..56]
 a27(r134): [126..127]
 a28(r135): [128..129]
 a29(r115): [135..136]
 a30(r133): [137..138]
 a31(r114): [143..144]
 a32(r132): [145..146]
 a33(r113): [14..15]
 a34(r131): [16..17]
 a35(r130): [157..158]
 a36(r129): [161..162]
Compressing live ranges: from 165 to 74 - 44%
Ranges after the compression:
 a0(r128): [0..1]
 a1(r127): [6..7]
 a2(r149): [8..9]
 a3(r147): [10..11]
 a4(r148): [12..13]
 a5(r145): [14..15]
 a6(r146): [16..17]
 a7(r126): [30..31]
 a8(r125): [32..33]
 a9(r144): [34..35]
 a10(r124): [52..53]
 a11(r123): [54..55]
 a12(r143): [56..57]
 a13(r122): [48..49]
 a14(r142): [50..51]
 a15(r121): [42..43]
 a16(r120): [44..45]
 a17(r141): [46..47]
 a18(r119): [36..37]
 a19(r118): [38..39]
 a20(r140): [40..41]
 a21(r139): [18..19]
 a22(r117): [20..21]
 a23(r116): [22..23]
 a24(r138): [24..25]
 a25(r136): [26..27]
 a26(r137): [28..29]
 a27(r134): [58..59]
 a28(r135): [60..61]
 a29(r115): [62..63]
 a30(r133): [64..65]
 a31(r114): [66..67]
 a32(r132): [68..69]
 a33(r113): [2..3]
 a34(r131): [4..5]
 a35(r130): [70..71]
 a36(r129): [72..73]
  regions=1, blocks=17, points=74
    allocnos=37 (big 0), copies=0, conflicts=0, ranges=37
Disposition:
   33:r113 l0     3   31:r114 l0     3   29:r115 l0     3   23:r116 l0     3
   22:r117 l0     3   19:r118 l0     3   18:r119 l0     3   16:r120 l0     3
   15:r121 l0     3   13:r122 l0     3   11:r123 l0     3   10:r124 l0     3
    8:r125 l0     3    7:r126 l0     3    1:r127 l0     3    0:r128 l0     3
   36:r129 l0     3   35:r130 l0     3   34:r131 l0     3   32:r132 l0     3
   30:r133 l0     3   27:r134 l0     3   28:r135 l0     3   25:r136 l0     3
   26:r137 l0     3   24:r138 l0     3   21:r139 l0     3   20:r140 l0     3
   17:r141 l0     3   14:r142 l0     3   12:r143 l0     3    9:r144 l0     3
    5:r145 l0     3    6:r146 l0     3    3:r147 l0     3    4:r148 l0     3
    2:r149 l0     3
+++Costs: overall 16000, reg 16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


kprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,9u} r1={8d} r2={8d} r3={8d} r11={1d,16u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,36u} r103={1d,17u} r104={7d} r105={7d} r106={7d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,2u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} 
;;    total ref usage 880{738d,142u,0e} in 75{68 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 129 130
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 103 afp)
                (const_int 4 [0x4])) [5 fmt+0 S4 A64])) "vid.c":330:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg/f:SI 129)) "vid.c":330:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 130)
        (plus:SI (reg/f:SI 103 afp)
            (const_int 8 [0x8]))) "vid.c":331:6 7 {*arm_addsi3}
     (nil))
(insn 8 7 113 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 130)) "vid.c":331:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (nil)))
(jump_insn 113 8 114 2 (set (pc)
        (label_ref 98)) "vid.c":333:8 284 {*arm_jump}
     (nil)
 -> 98)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 114 113 102)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 131
(code_label 102 114 11 3 106 (nil) [1 uses])
(note 11 102 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":334:9 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_17+0 S1 A8]))) "vid.c":334:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 14 13 15 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "vid.c":334:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "vid.c":334:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 132 133
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":335:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 132) [0 *cp_17+0 S1 A8]))) "vid.c":335:7 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))
(insn 19 18 20 4 (set (reg:SI 0 r0)
        (reg:SI 114 [ _2 ])) "vid.c":335:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(call_insn 20 19 21 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":335:7 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 21 20 22 4 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":336:11 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 133) [0 *cp_17+0 S1 A8]))) "vid.c":336:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "vid.c":336:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":336:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 28)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 r0)
        (const_int 13 [0xd])) "vid.c":337:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":337:2 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 134 135
(code_label 28 27 29 6 98 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":338:9 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 6 (set (reg:SI 134)
        (plus:SI (reg:SI 135)
            (const_int 1 [0x1]))) "vid.c":338:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(insn 32 31 115 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 134)) "vid.c":338:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(jump_insn 115 32 116 6 (set (pc)
        (label_ref 98)) "vid.c":339:7 284 {*arm_jump}
     (nil)
 -> 98)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 116 115 35)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 136 137 138 139
(code_label 35 116 36 7 97 (nil) [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":341:7 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 7 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 1 [0x1]))) "vid.c":341:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 137)
        (nil)))
(insn 39 38 40 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 136)) "vid.c":341:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (nil)))
(insn 40 39 41 7 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":342:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 7 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 138) [0 *cp_24+0 S1 A8]))) "vid.c":342:12 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (nil)))
(insn 42 41 43 7 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "vid.c":342:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(insn 43 42 44 7 (set (reg:SI 139)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "vid.c":342:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (nil)))
(jump_insn 44 43 45 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 139)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 139)
                                (const_int 4 [0x4]))
                            (label_ref:SI 45)) [0  S4 A32])
                    (label_ref:SI 90)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 45))
        ]) "vid.c":342:5 308 {*arm_casesi_internal}
     (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_UNUSED (reg:CC 100 cc)
            (insn_list:REG_LABEL_TARGET 90 (nil))))
 -> 45)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 45 44 46 101 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 46 45 47 (addr_vec:SI [
            (label_ref:SI 48)
            (label_ref:SI 66)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 57)
            (label_ref:SI 90)
            (label_ref:SI 74)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 83)
        ]))
(barrier 47 46 48)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 140
(code_label 48 47 49 8 105 (nil) [1 uses])
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":343:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 8 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 140) [3 *ip_16+0 S4 A32])) "vid.c":343:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (nil)))
(insn 52 51 53 8 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "vid.c":343:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _6 ])
        (nil)))
(insn 53 52 54 8 (set (reg:SI 0 r0)
        (reg:SI 119 [ _7 ])) "vid.c":343:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(call_insn 54 53 117 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":343:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 117 54 118 8 (set (pc)
        (label_ref 90)) "vid.c":343:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 118 117 57)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 141
(code_label 57 118 58 9 103 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":344:31 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 9 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 141) [3 *ip_16+0 S4 A32])) "vid.c":344:31 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))
(insn 61 60 62 9 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "vid.c":344:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 62 61 63 9 (set (reg:SI 0 r0)
        (reg/f:SI 121 [ _9 ])) "vid.c":344:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 121 [ _9 ])
        (nil)))
(call_insn 63 62 119 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprints") [flags 0x3]  <function_decl 0x7fd417d04100 kprints>) [0 kprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":344:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 119 63 120 9 (set (pc)
        (label_ref 90)) "vid.c":344:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 120 119 66)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 142
(code_label 66 120 67 10 104 (nil) [1 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 142) [3 *ip_16+0 S4 A32])) "vid.c":345:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 70 69 71 10 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":345:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (nil)))
(call_insn 71 70 121 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprinti") [flags 0x3]  <function_decl 0x7fd417d04d00 kprinti>) [0 kprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":345:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 121 71 122 10 (set (pc)
        (label_ref 90)) "vid.c":345:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 122 121 74)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 124 143
(code_label 74 122 75 11 102 (nil) [1 uses])
(note 75 74 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 11 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":346:23 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 11 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 143) [3 *ip_16+0 S4 A32])) "vid.c":346:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 143)
        (nil)))
(insn 78 77 79 11 (set (reg:SI 124 [ _12 ])
        (reg:SI 123 [ _11 ])) "vid.c":346:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 79 78 80 11 (set (reg:SI 0 r0)
        (reg:SI 124 [ _12 ])) "vid.c":346:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
        (nil)))
(call_insn 80 79 123 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":346:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 123 80 124 11 (set (pc)
        (label_ref 90)) "vid.c":346:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 124 123 83)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 125 126 144
(code_label 83 124 84 12 100 (nil) [1 uses])
(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 12 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":347:23 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 12 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 144) [3 *ip_16+0 S4 A32])) "vid.c":347:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))
(insn 87 86 88 12 (set (reg:SI 126 [ _14 ])
        (reg:SI 125 [ _13 ])) "vid.c":347:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 125 [ _13 ])
        (nil)))
(insn 88 87 89 12 (set (reg:SI 0 r0)
        (reg:SI 126 [ _14 ])) "vid.c":347:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ _14 ])
        (nil)))
(call_insn 89 88 125 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintx") [flags 0x3]  <function_decl 0x7fd417d04700 kprintx>) [0 kprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":347:15 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 125 89 126 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 90 16 (const_int 0 [0]) "vid.c":347:38 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 145 146 147 148
(code_label 90 126 91 13 99 (nil) [22 uses])
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":349:7 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg:SI 145)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) "vid.c":349:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 94 93 95 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 145)) "vid.c":349:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 95 94 96 13 (set (reg:SI 148)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 97 13 (set (reg:SI 147)
        (plus:SI (reg:SI 148)
            (const_int 4 [0x4]))) "vid.c":349:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 148)
        (nil)))
(insn 97 96 98 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 147)) "vid.c":349:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 149
(code_label 98 97 99 14 96 (nil) [2 uses])
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":333:9 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 103 14 (set (reg:SI 127 [ _15 ])
        (zero_extend:SI (mem:QI (reg/f:SI 149) [0 *cp_17+0 S1 A8]))) "vid.c":333:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 149)
        (nil)))
(insn 103 101 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 127 [ _15 ])
            (const_int 0 [0]))) "vid.c":333:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 127 [ _15 ])
        (nil)))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "vid.c":333:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 102)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 128
(note 105 104 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 108 105 109 15 (clobber (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 109 108 112 15 (clobber (reg:SI 128 [ <retval> ])) "vid.c":351:1 -1
     (nil))
(insn 112 109 107 15 (const_int 0 [0]) "vid.c":351:1 311 {nop}
     (nil))
(insn 107 112 110 15 (set (reg/i:SI 0 r0)
        (reg:SI 128 [ <retval> ])) "vid.c":351:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128 [ <retval> ])
        (nil)))
(insn 110 107 0 15 (use (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function stestring (stestring, funcdef_no=21, decl_uid=4629, cgraph_uid=22, symbol_order=27)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a3(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a4(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a6(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a7(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 34(l0): point = 0
   Insn 31(l0): point = 2
   Insn 36(l0): point = 4
   Insn 33(l0): point = 6
   Insn 32(l0): point = 8
   Insn 29(l0): point = 10
   Insn 28(l0): point = 12
   Insn 27(l0): point = 14
   Insn 26(l0): point = 16
   Insn 14(l0): point = 19
   Insn 13(l0): point = 21
   Insn 12(l0): point = 23
   Insn 11(l0): point = 25
   Insn 10(l0): point = 27
   Insn 9(l0): point = 29
   Insn 24(l0): point = 32
   Insn 23(l0): point = 34
   Insn 22(l0): point = 36
   Insn 20(l0): point = 38
   Insn 19(l0): point = 40
   Insn 18(l0): point = 42
   Insn 17(l0): point = 44
   Insn 37(l0): point = 47
   Insn 2(l0): point = 49
 a0(r114): [3..6]
 a1(r121): [11..16]
 a2(r123): [11..12]
 a3(r122): [13..14]
 a4(r120): [35..36]
 a5(r119): [39..40]
 a6(r113): [41..42]
 a7(r117): [20..21]
 a8(r118): [22..23]
 a9(r115): [26..29]
 a10(r116): [26..27]
Compressing live ranges: from 52 to 18 - 34%
Ranges after the compression:
 a0(r114): [0..1]
 a1(r121): [2..5]
 a2(r123): [2..3]
 a3(r122): [4..5]
 a4(r120): [12..13]
 a5(r119): [14..15]
 a6(r113): [16..17]
 a7(r117): [6..7]
 a8(r118): [8..9]
 a9(r115): [10..11]
 a10(r116): [10..11]
  regions=1, blocks=6, points=18
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    6:r113 l0     3    0:r114 l0     3    9:r115 l0     3   10:r116 l0     2
    7:r117 l0     3    8:r118 l0     3    5:r119 l0     3    4:r120 l0     3
    1:r121 l0     3    3:r122 l0     2    2:r123 l0     2
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


stestring

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,13u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} 
;;    total ref usage 164{120d,44u,0e} in 24{23 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":354:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 37 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 37 3 38 2 (set (pc)
        (label_ref 15)) "vid.c":356:8 284 {*arm_jump}
     (nil)
 -> 15)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 38 37 21)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116 117 118
(code_label 21 38 8 3 109 (nil) [1 uses])
(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 115)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":357:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:QI 116)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "vid.c":357:8 263 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 3 (set (mem:QI (reg/f:SI 115) [0 *s_2+0 S1 A8])
        (reg:QI 116)) "vid.c":357:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 116)
        (expr_list:REG_DEAD (reg/f:SI 115)
            (nil))))
(insn 12 11 13 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":358:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":358:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 118)
        (nil)))
(insn 14 13 15 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":358:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 119 120
(code_label 15 14 16 4 108 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x41]  <function_decl 0x7fd417d0a300 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":356:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 18 17 19 4 (set (reg:SI 113 [ _1 ])
        (reg:SI 0 r0)) "vid.c":356:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 19 18 20 4 (set (reg:QI 119)
        (subreg:QI (reg:SI 113 [ _1 ]) 0)) "vid.c":356:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(insn 20 19 22 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 119)) "vid.c":356:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 119)
        (nil)))
(insn 22 20 23 4 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":356:21 175 {*arm_zero_extendqisi2}
     (nil))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "vid.c":356:21 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "vid.c":356:21 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 114 121 122 123
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 5 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 5 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "vid.c":360:6 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 29 28 32 5 (set (mem:QI (reg/f:SI 121) [0 *s_2+0 S1 A8])
        (reg:QI 123)) "vid.c":360:6 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 123)
        (expr_list:REG_DEAD (reg/f:SI 121)
            (nil))))
(insn 32 29 33 5 (clobber (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 33 32 36 5 (clobber (reg:SI 114 [ <retval> ])) "vid.c":361:1 -1
     (nil))
(insn 36 33 31 5 (const_int 0 [0]) "vid.c":361:1 311 {nop}
     (nil))
(insn 31 36 34 5 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":361:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ <retval> ])
        (nil)))
(insn 34 31 0 5 (use (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

