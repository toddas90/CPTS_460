
;; Function uart_init (uart_init, funcdef_no=0, decl_uid=4478, cgraph_uid=1, symbol_order=2)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5 3 4
;; 2 succs { 6 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 3 7 }
;; 7 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 6.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:35000
  a6(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a10(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a12(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:35000
  a14(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a18(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a20(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:25000
  a22(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a25(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a28(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a29(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:35000
  a30(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a33(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:102000
  a34(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a35(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:31000
  a36(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 86(l0): point = 0
   Insn 83(l0): point = 2
   Insn 88(l0): point = 4
   Insn 85(l0): point = 6
   Insn 84(l0): point = 8
   Insn 32(l0): point = 11
   Insn 31(l0): point = 13
   Insn 30(l0): point = 15
   Insn 29(l0): point = 17
   Insn 28(l0): point = 19
   Insn 27(l0): point = 21
   Insn 26(l0): point = 23
   Insn 25(l0): point = 25
   Insn 24(l0): point = 27
   Insn 23(l0): point = 29
   Insn 22(l0): point = 31
   Insn 21(l0): point = 33
   Insn 20(l0): point = 35
   Insn 19(l0): point = 37
   Insn 18(l0): point = 39
   Insn 17(l0): point = 41
   Insn 16(l0): point = 43
   Insn 15(l0): point = 45
   Insn 14(l0): point = 47
   Insn 13(l0): point = 49
   Insn 12(l0): point = 51
   Insn 80(l0): point = 54
   Insn 79(l0): point = 56
   Insn 78(l0): point = 58
   Insn 72(l0): point = 61
   Insn 71(l0): point = 63
   Insn 70(l0): point = 65
   Insn 69(l0): point = 67
   Insn 68(l0): point = 69
   Insn 67(l0): point = 71
   Insn 66(l0): point = 73
   Insn 65(l0): point = 75
   Insn 64(l0): point = 77
   Insn 63(l0): point = 79
   Insn 62(l0): point = 81
   Insn 61(l0): point = 83
   Insn 60(l0): point = 85
   Insn 59(l0): point = 87
   Insn 58(l0): point = 89
   Insn 57(l0): point = 91
   Insn 56(l0): point = 93
   Insn 55(l0): point = 95
   Insn 54(l0): point = 97
   Insn 53(l0): point = 99
   Insn 52(l0): point = 101
   Insn 51(l0): point = 103
   Insn 50(l0): point = 105
   Insn 49(l0): point = 107
   Insn 48(l0): point = 109
   Insn 47(l0): point = 111
   Insn 46(l0): point = 113
   Insn 45(l0): point = 115
   Insn 44(l0): point = 117
   Insn 43(l0): point = 119
   Insn 42(l0): point = 121
   Insn 41(l0): point = 123
   Insn 40(l0): point = 125
   Insn 39(l0): point = 127
   Insn 36(l0): point = 130
   Insn 35(l0): point = 132
   Insn 34(l0): point = 134
   Insn 89(l0): point = 137
   Insn 8(l0): point = 139
   Insn 7(l0): point = 141
   Insn 6(l0): point = 143
   Insn 5(l0): point = 145
 a0(r119): [3..6]
 a1(r149): [57..58]
 a2(r147): [62..63]
 a3(r148): [64..65]
 a4(r146): [68..69]
 a5(r118): [68..79]
 a6(r145): [72..73]
 a7(r144): [76..77]
 a8(r142): [82..85]
 a9(r143): [82..83]
 a10(r140): [88..91]
 a11(r141): [88..89]
 a12(r139): [94..95]
 a13(r117): [94..105]
 a14(r138): [98..99]
 a15(r137): [102..103]
 a16(r135): [108..111]
 a17(r136): [108..109]
 a18(r133): [114..117]
 a19(r134): [114..115]
 a20(r132): [120..121]
 a21(r116): [120..127]
 a22(r131): [124..125]
 a23(r129): [131..134]
 a24(r130): [131..132]
 a25(r128): [14..15]
 a26(r127): [18..19]
 a27(r115): [18..21]
 a28(r114): [22..23]
 a29(r113): [24..27]
 a30(r126): [26..29]
 a31(r124): [32..33]
 a32(r125): [34..35]
 a33(r122): [40..49] [34..37]
 a34(r123): [38..39]
 a35(r121): [42..51]
 a36(r120): [140..141]
Compressing live ranges: from 148 to 52 - 35%
Ranges after the compression:
 a0(r119): [0..1]
 a1(r149): [18..19]
 a2(r147): [20..21]
 a3(r148): [22..23]
 a4(r146): [24..25]
 a5(r118): [24..29]
 a6(r145): [26..27]
 a7(r144): [28..29]
 a8(r142): [30..31]
 a9(r143): [30..31]
 a10(r140): [32..33]
 a11(r141): [32..33]
 a12(r139): [34..35]
 a13(r117): [34..39]
 a14(r138): [36..37]
 a15(r137): [38..39]
 a16(r135): [40..41]
 a17(r136): [40..41]
 a18(r133): [42..43]
 a19(r134): [42..43]
 a20(r132): [44..45]
 a21(r116): [44..47]
 a22(r131): [46..47]
 a23(r129): [48..49]
 a24(r130): [48..49]
 a25(r128): [2..3]
 a26(r127): [4..5]
 a27(r115): [4..5]
 a28(r114): [6..7]
 a29(r113): [8..9]
 a30(r126): [8..9]
 a31(r124): [10..11]
 a32(r125): [12..13]
 a33(r122): [16..17] [12..13]
 a34(r123): [14..15]
 a35(r121): [16..17]
 a36(r120): [50..51]
  regions=1, blocks=8, points=52
    allocnos=37 (big 0), copies=0, conflicts=0, ranges=38
Disposition:
   29:r113 l0     3   28:r114 l0     3   27:r115 l0     2   21:r116 l0     3
   13:r117 l0     3    5:r118 l0     3    0:r119 l0     3   36:r120 l0     3
   35:r121 l0     2   33:r122 l0     3   34:r123 l0     3   31:r124 l0     3
   32:r125 l0     2   30:r126 l0     2   26:r127 l0     3   25:r128 l0     3
   23:r129 l0     3   24:r130 l0     2   22:r131 l0     2   20:r132 l0     2
   18:r133 l0     3   19:r134 l0     2   16:r135 l0     3   17:r136 l0     2
   15:r137 l0     2   14:r138 l0     2   12:r139 l0     2   10:r140 l0     3
   11:r141 l0     2    8:r142 l0     3    9:r143 l0     2    7:r144 l0     2
    6:r145 l0     2    4:r146 l0     2    2:r147 l0     3    3:r148 l0     3
    1:r149 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uart_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,3u} r1={2d} r2={2d} r3={2d} r11={1d,7u} r12={2d} r13={1d,8u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={3d,2u} r101={1d} r102={1d,29u} r103={1d,6u} r104={1d} r105={1d} r106={1d} r113={2d,2u} r114={1d,1u} r115={1d,1u} r116={1d,2u} r117={1d,3u} r118={1d,3u} r119={1d,1u} r120={1d,1u} r121={1d,3u,2e} r122={6d,6u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u,1e} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} 
;;    total ref usage 262{154d,105u,3e} in 71{70 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7f19cf0af2d0 *.LC0>)) "uart.c":82:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 6 5 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":82:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 7 6 8 2 (set (reg:SI 120)
        (const_int 0 [0])) "uart.c":83:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 89 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 120)) "uart.c":83:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(jump_insn 89 8 90 2 (set (pc)
        (label_ref 73)) "uart.c":83:3 284 {*arm_jump}
     (nil)
 -> 73)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 90 89 75)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 115 121 122 123 124 125 126 127 128
(code_label 75 90 11 3 4 (nil) [1 uses])
(note 11 75 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 121)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 122)
        (reg:SI 121)) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 122)
        (ashift:SI (reg:SI 122)
            (const_int 4 [0x4]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 3 (set (reg:SI 122)
        (minus:SI (reg:SI 122)
            (reg:SI 121))) "uart.c":84:8 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 121)
            (const_int 15 [0xf]))
        (nil)))
(insn 16 15 17 3 (set (reg:SI 122)
        (ashift:SI (reg:SI 122)
            (const_int 2 [0x2]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (nil))
(insn 17 16 18 3 (set (reg:SI 122)
        (plus:SI (reg:SI 122)
            (reg:SI 121))) "uart.c":84:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 121)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 121)
                (const_int 61 [0x3d]))
            (nil))))
(insn 18 17 19 3 (set (reg:SI 123)
        (ashift:SI (reg:SI 122)
            (const_int 2 [0x2]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 19 18 20 3 (set (reg:SI 122)
        (reg:SI 123)) "uart.c":84:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(insn 20 19 21 3 (set (reg:SI 125)
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 124)
        (plus:SI (reg:SI 122)
            (reg:SI 125))) "uart.c":84:8 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg:SI 122)
            (nil))))
(insn 22 21 23 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 124)) "uart.c":84:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124)
        (nil)))
(insn 23 22 24 3 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":85:36 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 113 [ _1 ])
        (const_int 66033 [0x101f1])) "uart.c":85:36 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 113 [ _1 ])
        (plus:SI (reg:SI 126)
            (reg:SI 113 [ _1 ]))) "uart.c":85:36 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 126)
        (expr_list:REG_EQUAL (plus:SI (reg:SI 126)
                (const_int 66033 [0x101f1]))
            (nil))))
(insn 26 25 27 3 (set (reg:SI 114 [ _2 ])
        (ashift:SI (reg:SI 113 [ _1 ])
            (const_int 12 [0xc]))) "uart.c":85:36 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(insn 27 26 28 3 (set (reg/f:SI 115 [ _3 ])
        (reg:SI 114 [ _2 ])) "uart.c":85:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 28 27 29 3 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":85:14 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (mem/v/f:SI (reg/f:SI 127) [2 up_15->base+0 S4 A32])
        (reg/f:SI 115 [ _3 ])) "uart.c":85:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
            (nil))))
(insn 30 29 31 3 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":86:8 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 128)
            (const_int 3 [0x3]))) "uart.c":86:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "uart.c":86:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 129 130
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 4 (set (reg:SI 130)
        (const_int 268472320 [0x10009000])) "uart.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 4 (set (mem/v/f:SI (reg/f:SI 129) [2 up_15->base+0 S4 A32])
        (reg:SI 130)) "uart.c":87:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg/f:SI 129)
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 116 117 118 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148
(code_label 37 36 38 5 3 (nil) [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 116 [ _4 ])
        (const_int 0 [0])) "uart.c":89:29 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":89:29 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (mem/v:SI (plus:SI (reg/f:SI 131)
                (const_int 72 [0x48])) [3 up_15->intail+0 S4 A32])
        (reg:SI 116 [ _4 ])) "uart.c":89:29 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 42 41 43 5 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":89:16 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (mem/v:SI (plus:SI (reg/f:SI 132)
                (const_int 68 [0x44])) [3 up_15->inhead+0 S4 A32])
        (reg:SI 116 [ _4 ])) "uart.c":89:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
            (nil))))
(insn 44 43 45 5 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":90:22 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 5 (set (reg:SI 134)
        (const_int 0 [0])) "uart.c":90:22 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 5 (set (mem/v:SI (plus:SI (reg/f:SI 133)
                (const_int 76 [0x4c])) [3 up_15->inchar.value+0 S4 A32])
        (reg:SI 134)) "uart.c":90:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (expr_list:REG_DEAD (reg/f:SI 133)
            (nil))))
(insn 47 46 48 5 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":90:44 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 136)
        (const_int 0 [0])) "uart.c":90:44 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (mem/v/f:SI (plus:SI (reg/f:SI 135)
                (const_int 80 [0x50])) [5 up_15->inchar.queue+0 S4 A32])
        (reg:SI 136)) "uart.c":90:44 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (expr_list:REG_DEAD (reg/f:SI 135)
            (nil))))
(insn 50 49 51 5 (set (reg:SI 117 [ _5 ])
        (const_int 0 [0])) "uart.c":92:43 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 5 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":92:43 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 5 (set (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 164 [0xa4])) [3 up_15->tx_on+0 S4 A32])
        (reg:SI 117 [ _5 ])) "uart.c":92:43 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 53 52 54 5 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":92:31 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 5 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 152 [0x98])) [3 up_15->outtail+0 S4 A32])
        (reg:SI 117 [ _5 ])) "uart.c":92:31 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (nil)))
(insn 55 54 56 5 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":92:17 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 5 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 148 [0x94])) [3 up_15->outhead+0 S4 A32])
        (reg:SI 117 [ _5 ])) "uart.c":92:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
            (nil))))
(insn 57 56 58 5 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":93:24 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 5 (set (reg:SI 141)
        (const_int 64 [0x40])) "uart.c":93:24 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 5 (set (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 156 [0x9c])) [3 up_15->outspace.value+0 S4 A32])
        (reg:SI 141)) "uart.c":93:24 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 141)
        (expr_list:REG_DEAD (reg/f:SI 140)
            (nil))))
(insn 60 59 61 5 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":93:53 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 5 (set (reg:SI 143)
        (const_int 0 [0])) "uart.c":93:53 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 5 (set (mem/v/f:SI (plus:SI (reg/f:SI 142)
                (const_int 160 [0xa0])) [5 up_15->outspace.queue+0 S4 A32])
        (reg:SI 143)) "uart.c":93:53 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_DEAD (reg/f:SI 142)
            (nil))))
(insn 63 62 64 5 (set (reg:SI 118 [ _7 ])
        (const_int 0 [0])) "uart.c":95:42 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 5 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":95:42 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 5 (set (mem/v:SI (plus:SI (reg/f:SI 144)
                (const_int 240 [0xf0])) [3 up_15->e_count+0 S4 A32])
        (reg:SI 118 [ _7 ])) "uart.c":95:42 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 144)
        (nil)))
(insn 66 65 67 5 (set (reg/f:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":95:28 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 5 (set (mem/v:SI (plus:SI (reg/f:SI 145)
                (const_int 236 [0xec])) [3 up_15->etail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "uart.c":95:28 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 145)
        (nil)))
(insn 68 67 69 5 (set (reg/f:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":95:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 5 (set (mem/v:SI (plus:SI (reg/f:SI 146)
                (const_int 232 [0xe8])) [3 up_15->ehead+0 S4 A32])
        (reg:SI 118 [ _7 ])) "uart.c":95:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 146)
        (expr_list:REG_DEAD (reg:SI 118 [ _7 ])
            (nil))))
(insn 70 69 71 5 (set (reg:SI 148)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":83:19 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 5 (set (reg:SI 147)
        (plus:SI (reg:SI 148)
            (const_int 1 [0x1]))) "uart.c":83:19 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 148)
        (nil)))
(insn 72 71 73 5 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 147)) "uart.c":83:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 149
(code_label 73 72 74 6 2 (nil) [1 uses])
(note 74 73 78 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 78 74 79 6 (set (reg:SI 149)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":83:14 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 149)
            (const_int 3 [0x3]))) "uart.c":83:14 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 149)
        (nil)))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "uart.c":83:14 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 75)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 119
(note 81 80 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 81 85 7 (clobber (reg/i:SI 0 r0)) "uart.c":97:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 85 84 88 7 (clobber (reg:SI 119 [ <retval> ])) "uart.c":97:1 -1
     (nil))
(insn 88 85 83 7 (const_int 0 [0]) "uart.c":97:1 311 {nop}
     (nil))
(insn 83 88 86 7 (set (reg/i:SI 0 r0)
        (reg:SI 119 [ <retval> ])) "uart.c":97:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ <retval> ])
        (nil)))
(insn 86 83 0 7 (use (reg/i:SI 0 r0)) "uart.c":97:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function uart0_handler (uart0_handler, funcdef_no=1, decl_uid=4487, cgraph_uid=2, symbol_order=3)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 15 count 12 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 4 5 6
;; 2 succs { 3 10 }
;; 3 succs { 8 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 4 9 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 141.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r176,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a1(r177,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r175,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r174,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a6(r173,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r172,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a9(r171,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r169,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r170,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a13(r168,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r167,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r166,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r165,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a18(r164,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a19(r163,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a28(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a29(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a30(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a31(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a35(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a36(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a37(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a38(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a39(r118,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a40(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a41(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a42(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a43(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a44(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a45(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a46(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a47(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a48(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a49(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a50(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a51(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a52(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a53(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a54(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a55(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a56(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a57(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a58(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a59(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a60(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a61(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a62(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a63(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 151(l0): point = 0
   Insn 144(l0): point = 3
   Insn 143(l0): point = 5
   Insn 142(l0): point = 7
   Insn 141(l0): point = 9
   Insn 140(l0): point = 11
   Insn 139(l0): point = 13
   Insn 138(l0): point = 15
   Insn 137(l0): point = 17
   Insn 136(l0): point = 19
   Insn 135(l0): point = 21
   Insn 134(l0): point = 24
   Insn 133(l0): point = 26
   Insn 132(l0): point = 28
   Insn 131(l0): point = 30
   Insn 130(l0): point = 32
   Insn 129(l0): point = 34
   Insn 128(l0): point = 36
   Insn 127(l0): point = 38
   Insn 126(l0): point = 40
   Insn 125(l0): point = 42
   Insn 124(l0): point = 44
   Insn 123(l0): point = 46
   Insn 122(l0): point = 48
   Insn 121(l0): point = 50
   Insn 118(l0): point = 53
   Insn 117(l0): point = 55
   Insn 116(l0): point = 57
   Insn 115(l0): point = 59
   Insn 114(l0): point = 61
   Insn 45(l0): point = 64
   Insn 44(l0): point = 66
   Insn 43(l0): point = 68
   Insn 42(l0): point = 70
   Insn 41(l0): point = 72
   Insn 40(l0): point = 74
   Insn 39(l0): point = 76
   Insn 38(l0): point = 78
   Insn 37(l0): point = 80
   Insn 36(l0): point = 82
   Insn 35(l0): point = 84
   Insn 34(l0): point = 86
   Insn 33(l0): point = 88
   Insn 32(l0): point = 90
   Insn 31(l0): point = 92
   Insn 30(l0): point = 94
   Insn 112(l0): point = 97
   Insn 111(l0): point = 99
   Insn 110(l0): point = 101
   Insn 104(l0): point = 104
   Insn 103(l0): point = 106
   Insn 102(l0): point = 108
   Insn 67(l0): point = 111
   Insn 66(l0): point = 113
   Insn 65(l0): point = 115
   Insn 64(l0): point = 117
   Insn 63(l0): point = 119
   Insn 62(l0): point = 121
   Insn 61(l0): point = 123
   Insn 60(l0): point = 125
   Insn 59(l0): point = 127
   Insn 58(l0): point = 129
   Insn 57(l0): point = 131
   Insn 56(l0): point = 133
   Insn 55(l0): point = 135
   Insn 54(l0): point = 137
   Insn 53(l0): point = 139
   Insn 52(l0): point = 141
   Insn 51(l0): point = 143
   Insn 50(l0): point = 145
   Insn 49(l0): point = 147
   Insn 48(l0): point = 149
   Insn 47(l0): point = 151
   Insn 99(l0): point = 154
   Insn 98(l0): point = 156
   Insn 97(l0): point = 158
   Insn 96(l0): point = 160
   Insn 95(l0): point = 162
   Insn 94(l0): point = 164
   Insn 93(l0): point = 166
   Insn 92(l0): point = 168
   Insn 91(l0): point = 170
   Insn 90(l0): point = 172
   Insn 89(l0): point = 174
   Insn 88(l0): point = 176
   Insn 87(l0): point = 178
   Insn 86(l0): point = 180
   Insn 85(l0): point = 182
   Insn 84(l0): point = 184
   Insn 83(l0): point = 186
   Insn 82(l0): point = 188
   Insn 81(l0): point = 190
   Insn 80(l0): point = 192
   Insn 79(l0): point = 194
   Insn 78(l0): point = 196
   Insn 77(l0): point = 198
   Insn 76(l0): point = 200
   Insn 75(l0): point = 202
   Insn 74(l0): point = 204
   Insn 73(l0): point = 206
   Insn 72(l0): point = 208
   Insn 71(l0): point = 210
   Insn 70(l0): point = 212
   Insn 69(l0): point = 214
   Insn 148(l0): point = 217
   Insn 26(l0): point = 219
   Insn 25(l0): point = 221
   Insn 24(l0): point = 223
   Insn 23(l0): point = 225
   Insn 21(l0): point = 228
   Insn 20(l0): point = 230
   Insn 19(l0): point = 232
   Insn 18(l0): point = 234
   Insn 17(l0): point = 236
   Insn 16(l0): point = 238
   Insn 15(l0): point = 240
   Insn 12(l0): point = 242
   Insn 11(l0): point = 244
   Insn 147(l0): point = 246
   Insn 9(l0): point = 248
   Insn 8(l0): point = 250
   Insn 7(l0): point = 252
   Insn 6(l0): point = 254
   Insn 5(l0): point = 256
 a0(r176): [4..7]
 a1(r177): [4..5]
 a2(r128): [12..13]
 a3(r175): [14..15]
 a4(r174): [18..19]
 a5(r127): [18..26]
 a6(r173): [22..24]
 a7(r172): [25..28]
 a8(r126): [27..30]
 a9(r171): [31..32]
 a10(r169): [35..38]
 a11(r170): [35..36]
 a12(r124): [39..48]
 a13(r168): [39..40]
 a14(r167): [43..44]
 a15(r125): [43..46]
 a16(r166): [49..50]
 a17(r165): [54..55]
 a18(r164): [56..57]
 a19(r163): [100..101]
 a20(r161): [105..106]
 a21(r162): [107..108]
 a22(r122): [155..158]
 a23(r123): [155..156]
 a24(r121): [157..186]
 a25(r160): [159..160]
 a26(r159): [161..162]
 a27(r157): [167..180] [163..164]
 a28(r155): [163..184]
 a29(r158): [165..166]
 a30(r156): [169..182]
 a31(r120): [187..188]
 a32(r154): [189..190]
 a33(r153): [191..192]
 a34(r151): [197..210] [193..194]
 a35(r149): [193..214]
 a36(r152): [195..196]
 a37(r150): [199..212]
 a38(r119): [114..115]
 a39(r118): [120..123]
 a40(r117): [124..125]
 a41(r148): [126..127]
 a42(r147): [128..129]
 a43(r145): [134..147] [130..131]
 a44(r143): [130..151]
 a45(r146): [132..133]
 a46(r144): [136..149]
 a47(r116): [67..68]
 a48(r142): [69..70]
 a49(r141): [71..72]
 a50(r139): [77..90] [73..74]
 a51(r137): [73..94]
 a52(r140): [75..76]
 a53(r138): [79..92]
 a54(r136): [220..221]
 a55(r135): [231..232]
 a56(r134): [235..236]
 a57(r115): [237..238]
 a58(r133): [239..240]
 a59(r113): [242..242]
 a60(r132): [243..244]
 a61(r131): [249..250]
 a62(r129): [253..256]
 a63(r130): [253..254]
Compressing live ranges: from 259 to 105 - 40%
Ranges after the compression:
 a0(r176): [0..1]
 a1(r177): [0..1]
 a2(r128): [2..3]
 a3(r175): [4..5]
 a4(r174): [6..7]
 a5(r127): [6..11]
 a6(r173): [8..9]
 a7(r172): [10..13]
 a8(r126): [12..13]
 a9(r171): [14..15]
 a10(r169): [16..17]
 a11(r170): [16..17]
 a12(r124): [18..21]
 a13(r168): [18..19]
 a14(r167): [20..21]
 a15(r125): [20..21]
 a16(r166): [22..23]
 a17(r165): [24..25]
 a18(r164): [26..27]
 a19(r163): [40..41]
 a20(r161): [42..43]
 a21(r162): [44..45]
 a22(r122): [62..65]
 a23(r123): [62..63]
 a24(r121): [64..75]
 a25(r160): [66..67]
 a26(r159): [68..69]
 a27(r157): [74..75] [70..71]
 a28(r155): [70..75]
 a29(r158): [72..73]
 a30(r156): [74..75]
 a31(r120): [76..77]
 a32(r154): [78..79]
 a33(r153): [80..81]
 a34(r151): [86..87] [82..83]
 a35(r149): [82..87]
 a36(r152): [84..85]
 a37(r150): [86..87]
 a38(r119): [46..47]
 a39(r118): [48..49]
 a40(r117): [50..51]
 a41(r148): [52..53]
 a42(r147): [54..55]
 a43(r145): [60..61] [56..57]
 a44(r143): [56..61]
 a45(r146): [58..59]
 a46(r144): [60..61]
 a47(r116): [28..29]
 a48(r142): [30..31]
 a49(r141): [32..33]
 a50(r139): [38..39] [34..35]
 a51(r137): [34..39]
 a52(r140): [36..37]
 a53(r138): [38..39]
 a54(r136): [88..89]
 a55(r135): [90..91]
 a56(r134): [92..93]
 a57(r115): [94..95]
 a58(r133): [96..97]
 a59(r113): [98..98]
 a60(r132): [99..100]
 a61(r131): [101..102]
 a62(r129): [103..104]
 a63(r130): [103..104]
  regions=1, blocks=12, points=105
    allocnos=64 (big 0), copies=0, conflicts=0, ranges=68
Disposition:
   59:r113 l0     3   57:r115 l0     3   47:r116 l0     3   40:r117 l0     3
   39:r118 l0     3   38:r119 l0     3   31:r120 l0     3   24:r121 l0     1
   22:r122 l0     3   23:r123 l0     2   12:r124 l0     3   15:r125 l0     1
    8:r126 l0     3    5:r127 l0     3    2:r128 l0     3   62:r129 l0     3
   63:r130 l0     2   61:r131 l0     3   60:r132 l0     3   58:r133 l0     3
   56:r134 l0     3   55:r135 l0     3   54:r136 l0     3   51:r137 l0     1
   53:r138 l0     2   50:r139 l0     3   52:r140 l0     3   49:r141 l0     3
   48:r142 l0     3   44:r143 l0     1   46:r144 l0     2   43:r145 l0     3
   45:r146 l0     3   42:r147 l0     3   41:r148 l0     3   35:r149 l0     1
   37:r150 l0     2   34:r151 l0     3   36:r152 l0     3   33:r153 l0     3
   32:r154 l0     3   28:r155 l0     0   30:r156 l0     2   27:r157 l0     3
   29:r158 l0     3   26:r159 l0     3   25:r160 l0     3   20:r161 l0     3
   21:r162 l0     3   19:r163 l0     3   18:r164 l0     3   17:r165 l0     3
   16:r166 l0     3   14:r167 l0     2   13:r168 l0     2   10:r169 l0     3
   11:r170 l0     2    9:r171 l0     3    7:r172 l0     2    6:r173 l0     2
    4:r174 l0     2    3:r175 l0     3    0:r176 l0     3    1:r177 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uart0_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,5u} r1={6d,1u} r2={5d} r3={5d} r11={1d,11u} r12={8d} r13={1d,15u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={9d,5u} r101={4d} r102={1d,32u} r103={1d,10u} r104={4d} r105={4d} r106={4d} r113={1d} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,2u} r125={1d,1u} r126={1d,3u} r127={2d,2u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,4u,3e} r139={8d,8u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,4u,3e} r145={8d,8u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,4u,3e} r151={8d,8u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,4u,3e} r157={8d,8u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} 
;;    total ref usage 698{500d,186u,12e} in 124{120 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 115 129 130 131 132 133 134 135
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 129)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":107:9 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 130)
        (const_int 1 [0x1])) "uart.c":107:9 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (reg/f:SI 129) [3 color+0 S4 A32])
        (reg:SI 130)) "uart.c":107:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg/f:SI 129)
            (nil))))
(insn 8 7 9 2 (set (reg/f:SI 131)
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":109:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 147 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg/f:SI 131)) "uart.c":109:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 147 9 11 2 (const_int 0 [0]) "uart.c":110:8 311 {nop}
     (nil))
(insn 11 147 12 2 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 132) [2 up_25->base+0 S4 A32])) "uart.c":110:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (expr_list:REG_UNUSED (reg/f:SI 113 [ _1 ])
            (nil))))
(insn 15 12 16 2 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":112:11 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 115 [ _3 ])
        (mem/v/f:SI (reg/f:SI 133) [2 up_25->base+0 S4 A32])) "uart.c":112:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))
(insn 17 16 18 2 (set (reg:QI 134)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "uart.c":112:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
        (nil)))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 134)) "uart.c":112:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 134)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 135)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "uart.c":115:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135)
            (const_int 3 [0x3]))) "uart.c":115:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "uart.c":115:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 119)
;;  succ:       3 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 136
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f19cf0af360 *.LC1>)) "uart.c":116:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":116:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 136)
        (const_int 1 [0x1])) "uart.c":117:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 148 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 136)) "uart.c":117:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (nil)))
(jump_insn 148 26 149 3 (set (pc)
        (label_ref 105)) "uart.c":117:5 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       8 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 149 148 107)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 137 138 139 140 141 142
(code_label 107 149 29 4 11 (nil) [1 uses])
(note 29 107 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:SI 137)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 4 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 139)
        (reg:SI 138)) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 6 [0x6]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 34 33 35 4 (set (reg:SI 139)
        (plus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
            (const_int 65 [0x41]))
        (nil)))
(insn 35 34 36 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 1 [0x1]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 36 35 37 4 (set (reg:SI 139)
        (plus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
            (const_int 131 [0x83]))
        (nil)))
(insn 37 36 38 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 3 [0x3]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 4 (set (reg:SI 139)
        (minus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":118:18 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
                (const_int 1047 [0x417]))
            (nil))))
(insn 39 38 40 4 (set (reg:SI 140)
        (ashift:SI (reg:SI 139)
            (const_int 2 [0x2]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 40 39 41 4 (set (reg:SI 139)
        (reg:SI 140)) "uart.c":118:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 140)
        (nil)))
(insn 41 40 42 4 (set (reg:SI 141)
        (plus:SI (reg/f:SI 137)
            (reg:SI 139))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_DEAD (reg/f:SI 137)
            (nil))))
(insn 42 41 43 4 (set (reg/f:SI 142)
        (plus:SI (reg:SI 141)
            (const_int 28 [0x1c]))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
(insn 43 42 44 4 (set (reg:SI 116 [ _4 ])
        (mem:SI (reg/f:SI 142) [3 proc[i_19].status+0 S4 A32])) "uart.c":118:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 44 43 45 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ _4 ])
            (const_int 0 [0]))) "uart.c":118:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":118:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 100)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 118 119 143 144 145 146 147 148
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:SI 143)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 144)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (reg:SI 145)
        (reg:SI 144)) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 6 [0x6]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 51 50 52 5 (set (reg:SI 145)
        (plus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
            (const_int 65 [0x41]))
        (nil)))
(insn 52 51 53 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 1 [0x1]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 53 52 54 5 (set (reg:SI 145)
        (plus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
            (const_int 131 [0x83]))
        (nil)))
(insn 54 53 55 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 3 [0x3]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 55 54 56 5 (set (reg:SI 145)
        (minus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":118:51 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
                (const_int 1047 [0x417]))
            (nil))))
(insn 56 55 57 5 (set (reg:SI 146)
        (ashift:SI (reg:SI 145)
            (const_int 2 [0x2]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 57 56 58 5 (set (reg:SI 145)
        (reg:SI 146)) "uart.c":118:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 58 57 59 5 (set (reg:SI 147)
        (plus:SI (reg/f:SI 143)
            (reg:SI 145))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (expr_list:REG_DEAD (reg/f:SI 143)
            (nil))))
(insn 59 58 60 5 (set (reg/f:SI 148)
        (plus:SI (reg:SI 147)
            (const_int 84 [0x54]))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 60 59 61 5 (set (reg/f:SI 117 [ _5 ])
        (mem/f:SI (reg/f:SI 148) [10 proc[i_19].res+0 S4 A32])) "uart.c":118:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))
(insn 61 60 62 5 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 60 [0x3c]))) "uart.c":118:55 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
        (nil)))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7f19cf0af480 *.LC2>)) "uart.c":118:37 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (reg/f:SI 118 [ _6 ])) "uart.c":118:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
        (nil)))
(call_insn/i 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7f19cf2e7700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":118:37 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 119 [ _7 ])
        (reg:SI 0 r0)) "uart.c":118:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ _7 ])
            (const_int 0 [0]))) "uart.c":118:34 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":118:34 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 100)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 149 150 151 152 153 154 155 156 157 158 159 160
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 149)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 6 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 6 (set (reg:SI 151)
        (reg:SI 150)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 6 [0x6]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 73 72 74 6 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 65 [0x41]))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 1 [0x1]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 75 74 76 6 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 131 [0x83]))
        (nil)))
(insn 76 75 77 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 3 [0x3]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 77 76 78 6 (set (reg:SI 151)
        (minus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":119:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
                (const_int 1047 [0x417]))
            (nil))))
(insn 78 77 79 6 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 79 78 80 6 (set (reg:SI 151)
        (reg:SI 152)) "uart.c":119:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 80 79 81 6 (set (reg:SI 153)
        (plus:SI (reg/f:SI 149)
            (reg:SI 151))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 151)
        (expr_list:REG_DEAD (reg/f:SI 149)
            (nil))))
(insn 81 80 82 6 (set (reg/f:SI 154)
        (plus:SI (reg:SI 153)
            (const_int 84 [0x54]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(insn 82 81 83 6 (set (reg/f:SI 120 [ _8 ])
        (mem/f:SI (reg/f:SI 154) [10 proc[i_19].res+0 S4 A32])) "uart.c":119:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 154)
        (nil)))
(insn 83 82 84 6 (set (reg:SI 121 [ _9 ])
        (mem:SI (plus:SI (reg/f:SI 120 [ _8 ])
                (const_int 92 [0x5c])) [3 _8->signal+0 S4 A32])) "uart.c":119:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120 [ _8 ])
        (nil)))
(insn 84 83 85 6 (set (reg/f:SI 155)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 6 (set (reg:SI 156)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 6 (set (reg:SI 157)
        (reg:SI 156)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 6 [0x6]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 88 87 89 6 (set (reg:SI 157)
        (plus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
            (const_int 65 [0x41]))
        (nil)))
(insn 89 88 90 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 1 [0x1]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 90 89 91 6 (set (reg:SI 157)
        (plus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
            (const_int 131 [0x83]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 3 [0x3]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 92 91 93 6 (set (reg:SI 157)
        (minus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":119:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 156)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
                (const_int 1047 [0x417]))
            (nil))))
(insn 93 92 94 6 (set (reg:SI 158)
        (ashift:SI (reg:SI 157)
            (const_int 2 [0x2]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 157)
        (nil)))
(insn 94 93 95 6 (set (reg:SI 157)
        (reg:SI 158)) "uart.c":119:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 158)
        (nil)))
(insn 95 94 96 6 (set (reg:SI 159)
        (plus:SI (reg/f:SI 155)
            (reg:SI 157))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg/f:SI 155)
            (nil))))
(insn 96 95 97 6 (set (reg/f:SI 160)
        (plus:SI (reg:SI 159)
            (const_int 84 [0x54]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 159)
        (nil)))
(insn 97 96 98 6 (set (reg/f:SI 122 [ _10 ])
        (mem/f:SI (reg/f:SI 160) [10 proc[i_19].res+0 S4 A32])) "uart.c":119:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 160)
        (nil)))
(insn 98 97 99 6 (set (reg:SI 123 [ _11 ])
        (ior:SI (reg:SI 121 [ _9 ])
            (const_int 4 [0x4]))) "uart.c":119:22 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (nil)))
(insn 99 98 100 6 (set (mem:SI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 92 [0x5c])) [3 _10->signal+0 S4 A32])
        (reg:SI 123 [ _11 ])) "uart.c":119:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (expr_list:REG_DEAD (reg/f:SI 122 [ _10 ])
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 161 162
(code_label 100 99 101 7 10 (nil) [2 uses])
(note 101 100 102 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 7 (set (reg:SI 162)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":117:25 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 7 (set (reg:SI 161)
        (plus:SI (reg:SI 162)
            (const_int 1 [0x1]))) "uart.c":117:25 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 162)
        (nil)))
(insn 104 103 105 7 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 161)) "uart.c":117:25 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 163
(code_label 105 104 106 8 9 (nil) [1 uses])
(note 106 105 110 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 110 106 111 8 (set (reg:SI 163)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":117:16 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 163)
            (const_int 63 [0x3f]))) "uart.c":117:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 163)
        (nil)))
(jump_insn 112 111 113 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "uart.c":117:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 107)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 164 165
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f19cf0af510 *.LC3>)) "uart.c":122:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 115 114 116 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":122:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 116 115 117 9 (set (reg:SI 164)
        (const_int 13 [0xd])) "uart.c":123:7 253 {*arm_movsi_insn}
     (nil))
(insn 117 116 118 9 (set (reg:QI 165)
        (subreg:QI (reg:SI 164) 0)) "uart.c":123:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 164)
        (nil)))
(insn 118 117 119 9 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 165)) "uart.c":123:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 165)
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       2
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 126 127 128 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 119 118 120 10 8 (nil) [1 uses])
(note 120 119 121 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 10 (set (reg/f:SI 166)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":126:15 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 10 (set (reg:SI 124 [ _12 ])
        (mem/v:SI (plus:SI (reg/f:SI 166)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":126:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 166)
        (nil)))
(insn 123 122 124 10 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ _12 ])
            (const_int 1 [0x1]))) "uart.c":126:23 7 {*arm_addsi3}
     (nil))
(insn 124 123 125 10 (set (reg/f:SI 167)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":126:23 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 10 (set (mem/v:SI (plus:SI (reg/f:SI 167)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 125 [ _14 ])) "uart.c":126:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 167)
        (expr_list:REG_DEAD (reg:SI 125 [ _14 ])
            (nil))))
(insn 126 125 127 10 (set (reg/f:SI 168)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":126:27 253 {*arm_movsi_insn}
     (nil))
(insn 127 126 128 10 (set (reg/f:SI 169)
        (plus:SI (reg/f:SI 168)
            (reg:SI 124 [ _12 ]))) "uart.c":126:27 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 168)
        (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
            (nil))))
(insn 128 127 129 10 (set (reg:QI 170)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])) "uart.c":126:27 263 {*arm_movqi_insn}
     (nil))
(insn 129 128 130 10 (set (mem/v:QI (plus:SI (reg/f:SI 169)
                (const_int 4 [0x4])) [0 up_25->inbuf[_13]+0 S1 A8])
        (reg:QI 170)) "uart.c":126:27 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 170)
        (expr_list:REG_DEAD (reg/f:SI 169)
            (nil))))
(insn 130 129 131 10 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 10 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 171)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 171)
        (nil)))
(insn 132 131 133 10 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 126 [ _15 ]))
                    (const_int 0 [0])))
            (set (reg:SI 172)
                (minus:SI (const_int 0 [0])
                    (reg:SI 126 [ _15 ])))
        ]) "uart.c":127:14 46 {subsi3_compare0}
     (nil))
(insn 133 132 134 10 (set (reg:SI 127 [ _16 ])
        (and:SI (reg:SI 126 [ _15 ])
            (const_int 63 [0x3f]))) "uart.c":127:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ _15 ])
        (nil)))
(insn 134 133 135 10 (set (reg:SI 173)
        (and:SI (reg:SI 172)
            (const_int 63 [0x3f]))) "uart.c":127:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 135 134 136 10 (set (reg:SI 127 [ _16 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 173))
            (reg:SI 127 [ _16 ]))) "uart.c":127:14 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 136 135 137 10 (set (reg/f:SI 174)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 10 (set (mem/v:SI (plus:SI (reg/f:SI 174)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 127 [ _16 ])) "uart.c":127:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 174)
        (expr_list:REG_DEAD (reg:SI 127 [ _16 ])
            (nil))))
(insn 138 137 139 10 (set (reg:SI 175)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":128:3 253 {*arm_movsi_insn}
     (nil))
(insn 139 138 140 10 (set (reg/f:SI 128 [ _17 ])
        (plus:SI (reg:SI 175)
            (const_int 76 [0x4c]))) "uart.c":128:3 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 140 139 141 10 (set (reg:SI 0 r0)
        (reg/f:SI 128 [ _17 ])) "uart.c":128:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 128 [ _17 ])
        (nil)))
(call_insn 141 140 142 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f19cf067d00 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":128:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 142 141 143 10 (set (reg/f:SI 176)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 10 (set (reg:SI 177)
        (const_int 6 [0x6])) "uart.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 150 10 (set (mem/c:SI (reg/f:SI 176) [3 color+0 S4 A32])
        (reg:SI 177)) "uart.c":129:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 177)
        (expr_list:REG_DEAD (reg/f:SI 176)
            (nil))))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 150 144 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 0 11 (const_int 0 [0]) "uart.c":130:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function uart1_handler (uart1_handler, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=4)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 12 n_edges 15 count 12 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11
;;
;; Loop 1
;;  header 8, latch 7
;;  depth 1, outer 0
;;  nodes: 8 7 4 5 6
;; 2 succs { 3 10 }
;; 3 succs { 8 }
;; 4 succs { 5 7 }
;; 5 succs { 6 7 }
;; 6 succs { 7 }
;; 7 succs { 8 }
;; 8 succs { 4 9 }
;; 9 succs { 10 }
;; 10 succs { 11 }
;; 11 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 141.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r177: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r177,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r176,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r175,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r174,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r173,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r172,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r171,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r170,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r169,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r168,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r167,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r166,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r165,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r164,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r163,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r162,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r161,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r160,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r159,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r158,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r157,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r156,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r155,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r154,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r153,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a36 (r152,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r151,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a37 (r150,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r149,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a41 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a42 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a45 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a43 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a46 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a44 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a48 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a49 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a52 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a50 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a53 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a51 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a54 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a55 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a56 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a58 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a60 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a61 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a63 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a62 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a38 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a39 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a40 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a47 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a57 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a59 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r176,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a1(r177,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a2(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r175,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r174,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a6(r173,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r172,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a9(r171,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r169,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r170,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a13(r168,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r167,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r166,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a17(r165,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a18(r164,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a19(r163,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r161,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a21(r162,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a22(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r160,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r159,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r157,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a28(r155,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a29(r158,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a30(r156,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a31(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r154,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r153,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a34(r151,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a35(r149,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a36(r152,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a37(r150,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a38(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a39(r118,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a40(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a41(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a42(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a43(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a44(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a45(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a46(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a47(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a48(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a49(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a50(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:142000
  a51(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a52(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a53(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:41000
  a54(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a55(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a56(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a57(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a58(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a59(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a60(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a61(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a62(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a63(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 151(l0): point = 0
   Insn 144(l0): point = 3
   Insn 143(l0): point = 5
   Insn 142(l0): point = 7
   Insn 141(l0): point = 9
   Insn 140(l0): point = 11
   Insn 139(l0): point = 13
   Insn 138(l0): point = 15
   Insn 137(l0): point = 17
   Insn 136(l0): point = 19
   Insn 135(l0): point = 21
   Insn 134(l0): point = 24
   Insn 133(l0): point = 26
   Insn 132(l0): point = 28
   Insn 131(l0): point = 30
   Insn 130(l0): point = 32
   Insn 129(l0): point = 34
   Insn 128(l0): point = 36
   Insn 127(l0): point = 38
   Insn 126(l0): point = 40
   Insn 125(l0): point = 42
   Insn 124(l0): point = 44
   Insn 123(l0): point = 46
   Insn 122(l0): point = 48
   Insn 121(l0): point = 50
   Insn 118(l0): point = 53
   Insn 117(l0): point = 55
   Insn 116(l0): point = 57
   Insn 115(l0): point = 59
   Insn 114(l0): point = 61
   Insn 45(l0): point = 64
   Insn 44(l0): point = 66
   Insn 43(l0): point = 68
   Insn 42(l0): point = 70
   Insn 41(l0): point = 72
   Insn 40(l0): point = 74
   Insn 39(l0): point = 76
   Insn 38(l0): point = 78
   Insn 37(l0): point = 80
   Insn 36(l0): point = 82
   Insn 35(l0): point = 84
   Insn 34(l0): point = 86
   Insn 33(l0): point = 88
   Insn 32(l0): point = 90
   Insn 31(l0): point = 92
   Insn 30(l0): point = 94
   Insn 112(l0): point = 97
   Insn 111(l0): point = 99
   Insn 110(l0): point = 101
   Insn 104(l0): point = 104
   Insn 103(l0): point = 106
   Insn 102(l0): point = 108
   Insn 67(l0): point = 111
   Insn 66(l0): point = 113
   Insn 65(l0): point = 115
   Insn 64(l0): point = 117
   Insn 63(l0): point = 119
   Insn 62(l0): point = 121
   Insn 61(l0): point = 123
   Insn 60(l0): point = 125
   Insn 59(l0): point = 127
   Insn 58(l0): point = 129
   Insn 57(l0): point = 131
   Insn 56(l0): point = 133
   Insn 55(l0): point = 135
   Insn 54(l0): point = 137
   Insn 53(l0): point = 139
   Insn 52(l0): point = 141
   Insn 51(l0): point = 143
   Insn 50(l0): point = 145
   Insn 49(l0): point = 147
   Insn 48(l0): point = 149
   Insn 47(l0): point = 151
   Insn 99(l0): point = 154
   Insn 98(l0): point = 156
   Insn 97(l0): point = 158
   Insn 96(l0): point = 160
   Insn 95(l0): point = 162
   Insn 94(l0): point = 164
   Insn 93(l0): point = 166
   Insn 92(l0): point = 168
   Insn 91(l0): point = 170
   Insn 90(l0): point = 172
   Insn 89(l0): point = 174
   Insn 88(l0): point = 176
   Insn 87(l0): point = 178
   Insn 86(l0): point = 180
   Insn 85(l0): point = 182
   Insn 84(l0): point = 184
   Insn 83(l0): point = 186
   Insn 82(l0): point = 188
   Insn 81(l0): point = 190
   Insn 80(l0): point = 192
   Insn 79(l0): point = 194
   Insn 78(l0): point = 196
   Insn 77(l0): point = 198
   Insn 76(l0): point = 200
   Insn 75(l0): point = 202
   Insn 74(l0): point = 204
   Insn 73(l0): point = 206
   Insn 72(l0): point = 208
   Insn 71(l0): point = 210
   Insn 70(l0): point = 212
   Insn 69(l0): point = 214
   Insn 148(l0): point = 217
   Insn 26(l0): point = 219
   Insn 25(l0): point = 221
   Insn 24(l0): point = 223
   Insn 23(l0): point = 225
   Insn 21(l0): point = 228
   Insn 20(l0): point = 230
   Insn 19(l0): point = 232
   Insn 18(l0): point = 234
   Insn 17(l0): point = 236
   Insn 16(l0): point = 238
   Insn 15(l0): point = 240
   Insn 12(l0): point = 242
   Insn 11(l0): point = 244
   Insn 147(l0): point = 246
   Insn 9(l0): point = 248
   Insn 8(l0): point = 250
   Insn 7(l0): point = 252
   Insn 6(l0): point = 254
   Insn 5(l0): point = 256
 a0(r176): [4..7]
 a1(r177): [4..5]
 a2(r128): [12..13]
 a3(r175): [14..15]
 a4(r174): [18..19]
 a5(r127): [18..26]
 a6(r173): [22..24]
 a7(r172): [25..28]
 a8(r126): [27..30]
 a9(r171): [31..32]
 a10(r169): [35..38]
 a11(r170): [35..36]
 a12(r124): [39..48]
 a13(r168): [39..40]
 a14(r167): [43..44]
 a15(r125): [43..46]
 a16(r166): [49..50]
 a17(r165): [54..55]
 a18(r164): [56..57]
 a19(r163): [100..101]
 a20(r161): [105..106]
 a21(r162): [107..108]
 a22(r122): [155..158]
 a23(r123): [155..156]
 a24(r121): [157..186]
 a25(r160): [159..160]
 a26(r159): [161..162]
 a27(r157): [167..180] [163..164]
 a28(r155): [163..184]
 a29(r158): [165..166]
 a30(r156): [169..182]
 a31(r120): [187..188]
 a32(r154): [189..190]
 a33(r153): [191..192]
 a34(r151): [197..210] [193..194]
 a35(r149): [193..214]
 a36(r152): [195..196]
 a37(r150): [199..212]
 a38(r119): [114..115]
 a39(r118): [120..123]
 a40(r117): [124..125]
 a41(r148): [126..127]
 a42(r147): [128..129]
 a43(r145): [134..147] [130..131]
 a44(r143): [130..151]
 a45(r146): [132..133]
 a46(r144): [136..149]
 a47(r116): [67..68]
 a48(r142): [69..70]
 a49(r141): [71..72]
 a50(r139): [77..90] [73..74]
 a51(r137): [73..94]
 a52(r140): [75..76]
 a53(r138): [79..92]
 a54(r136): [220..221]
 a55(r135): [231..232]
 a56(r134): [235..236]
 a57(r115): [237..238]
 a58(r133): [239..240]
 a59(r113): [242..242]
 a60(r132): [243..244]
 a61(r131): [249..250]
 a62(r129): [253..256]
 a63(r130): [253..254]
Compressing live ranges: from 259 to 105 - 40%
Ranges after the compression:
 a0(r176): [0..1]
 a1(r177): [0..1]
 a2(r128): [2..3]
 a3(r175): [4..5]
 a4(r174): [6..7]
 a5(r127): [6..11]
 a6(r173): [8..9]
 a7(r172): [10..13]
 a8(r126): [12..13]
 a9(r171): [14..15]
 a10(r169): [16..17]
 a11(r170): [16..17]
 a12(r124): [18..21]
 a13(r168): [18..19]
 a14(r167): [20..21]
 a15(r125): [20..21]
 a16(r166): [22..23]
 a17(r165): [24..25]
 a18(r164): [26..27]
 a19(r163): [40..41]
 a20(r161): [42..43]
 a21(r162): [44..45]
 a22(r122): [62..65]
 a23(r123): [62..63]
 a24(r121): [64..75]
 a25(r160): [66..67]
 a26(r159): [68..69]
 a27(r157): [74..75] [70..71]
 a28(r155): [70..75]
 a29(r158): [72..73]
 a30(r156): [74..75]
 a31(r120): [76..77]
 a32(r154): [78..79]
 a33(r153): [80..81]
 a34(r151): [86..87] [82..83]
 a35(r149): [82..87]
 a36(r152): [84..85]
 a37(r150): [86..87]
 a38(r119): [46..47]
 a39(r118): [48..49]
 a40(r117): [50..51]
 a41(r148): [52..53]
 a42(r147): [54..55]
 a43(r145): [60..61] [56..57]
 a44(r143): [56..61]
 a45(r146): [58..59]
 a46(r144): [60..61]
 a47(r116): [28..29]
 a48(r142): [30..31]
 a49(r141): [32..33]
 a50(r139): [38..39] [34..35]
 a51(r137): [34..39]
 a52(r140): [36..37]
 a53(r138): [38..39]
 a54(r136): [88..89]
 a55(r135): [90..91]
 a56(r134): [92..93]
 a57(r115): [94..95]
 a58(r133): [96..97]
 a59(r113): [98..98]
 a60(r132): [99..100]
 a61(r131): [101..102]
 a62(r129): [103..104]
 a63(r130): [103..104]
  regions=1, blocks=12, points=105
    allocnos=64 (big 0), copies=0, conflicts=0, ranges=68
Disposition:
   59:r113 l0     3   57:r115 l0     3   47:r116 l0     3   40:r117 l0     3
   39:r118 l0     3   38:r119 l0     3   31:r120 l0     3   24:r121 l0     1
   22:r122 l0     3   23:r123 l0     2   12:r124 l0     3   15:r125 l0     1
    8:r126 l0     3    5:r127 l0     3    2:r128 l0     3   62:r129 l0     3
   63:r130 l0     2   61:r131 l0     3   60:r132 l0     3   58:r133 l0     3
   56:r134 l0     3   55:r135 l0     3   54:r136 l0     3   51:r137 l0     1
   53:r138 l0     2   50:r139 l0     3   52:r140 l0     3   49:r141 l0     3
   48:r142 l0     3   44:r143 l0     1   46:r144 l0     2   43:r145 l0     3
   45:r146 l0     3   42:r147 l0     3   41:r148 l0     3   35:r149 l0     1
   37:r150 l0     2   34:r151 l0     3   36:r152 l0     3   33:r153 l0     3
   32:r154 l0     3   28:r155 l0     0   30:r156 l0     2   27:r157 l0     3
   29:r158 l0     3   26:r159 l0     3   25:r160 l0     3   20:r161 l0     3
   21:r162 l0     3   19:r163 l0     3   18:r164 l0     3   17:r165 l0     3
   16:r166 l0     3   14:r167 l0     2   13:r168 l0     2   10:r169 l0     3
   11:r170 l0     2    9:r171 l0     3    7:r172 l0     2    6:r173 l0     2
    4:r174 l0     2    3:r175 l0     3    0:r176 l0     3    1:r177 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


uart1_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,5u} r1={6d,1u} r2={5d} r3={5d} r11={1d,11u} r12={8d} r13={1d,15u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={9d,5u} r101={4d} r102={1d,32u} r103={1d,10u} r104={4d} r105={4d} r106={4d} r113={1d} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,2u} r125={1d,1u} r126={1d,3u} r127={2d,2u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,4u,3e} r139={8d,8u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,4u,3e} r145={8d,8u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,4u,3e} r151={8d,8u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,4u,3e} r157={8d,8u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} r166={1d,1u} r167={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r172={1d,1u} r173={1d,1u} r174={1d,1u} r175={1d,1u} r176={1d,1u} r177={1d,1u} 
;;    total ref usage 698{500d,186u,12e} in 124{120 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 115 129 130 131 132 133 134 135
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 129)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":137:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 130)
        (const_int 5 [0x5])) "uart.c":137:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (reg/f:SI 129) [3 color+0 S4 A32])
        (reg:SI 130)) "uart.c":137:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 130)
        (expr_list:REG_DEAD (reg/f:SI 129)
            (nil))))
(insn 8 7 9 2 (set (reg/f:SI 131)
        (const:SI (plus:SI (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)
                (const_int 244 [0xf4])))) "uart.c":139:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 147 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg/f:SI 131)) "uart.c":139:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 147 9 11 2 (const_int 0 [0]) "uart.c":140:8 311 {nop}
     (nil))
(insn 11 147 12 2 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":140:14 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 132) [2 up_25->base+0 S4 A32])) "uart.c":140:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (expr_list:REG_UNUSED (reg/f:SI 113 [ _1 ])
            (nil))))
(insn 15 12 16 2 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":142:11 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 115 [ _3 ])
        (mem/v/f:SI (reg/f:SI 133) [2 up_25->base+0 S4 A32])) "uart.c":142:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 133)
        (nil)))
(insn 17 16 18 2 (set (reg:QI 134)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "uart.c":142:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 115 [ _3 ])
        (nil)))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 134)) "uart.c":142:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 134)
        (nil)))
(insn 19 18 20 2 (set (reg:SI 135)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "uart.c":145:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135)
            (const_int 3 [0x3]))) "uart.c":145:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "uart.c":145:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 119)
;;  succ:       3 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 136
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f19cf0af360 *.LC1>)) "uart.c":146:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":146:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 136)
        (const_int 1 [0x1])) "uart.c":147:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 148 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 136)) "uart.c":147:11 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 136)
        (nil)))
(jump_insn 148 26 149 3 (set (pc)
        (label_ref 105)) "uart.c":147:5 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       8 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 149 148 107)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 137 138 139 140 141 142
(code_label 107 149 29 4 18 (nil) [1 uses])
(note 29 107 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:SI 137)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 4 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 139)
        (reg:SI 138)) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 6 [0x6]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 34 33 35 4 (set (reg:SI 139)
        (plus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
            (const_int 65 [0x41]))
        (nil)))
(insn 35 34 36 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 1 [0x1]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 36 35 37 4 (set (reg:SI 139)
        (plus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
            (const_int 131 [0x83]))
        (nil)))
(insn 37 36 38 4 (set (reg:SI 139)
        (ashift:SI (reg:SI 139)
            (const_int 3 [0x3]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 4 (set (reg:SI 139)
        (minus:SI (reg:SI 139)
            (reg:SI 138))) "uart.c":148:18 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 138)
                (const_int 1047 [0x417]))
            (nil))))
(insn 39 38 40 4 (set (reg:SI 140)
        (ashift:SI (reg:SI 139)
            (const_int 2 [0x2]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (nil)))
(insn 40 39 41 4 (set (reg:SI 139)
        (reg:SI 140)) "uart.c":148:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 140)
        (nil)))
(insn 41 40 42 4 (set (reg:SI 141)
        (plus:SI (reg/f:SI 137)
            (reg:SI 139))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 139)
        (expr_list:REG_DEAD (reg/f:SI 137)
            (nil))))
(insn 42 41 43 4 (set (reg/f:SI 142)
        (plus:SI (reg:SI 141)
            (const_int 28 [0x1c]))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 141)
        (nil)))
(insn 43 42 44 4 (set (reg:SI 116 [ _4 ])
        (mem:SI (reg/f:SI 142) [3 proc[i_19].status+0 S4 A32])) "uart.c":148:18 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 44 43 45 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ _4 ])
            (const_int 0 [0]))) "uart.c":148:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":148:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 100)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 118 119 143 144 145 146 147 148
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:SI 143)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 144)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (reg:SI 145)
        (reg:SI 144)) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 6 [0x6]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 51 50 52 5 (set (reg:SI 145)
        (plus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
            (const_int 65 [0x41]))
        (nil)))
(insn 52 51 53 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 1 [0x1]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 53 52 54 5 (set (reg:SI 145)
        (plus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
            (const_int 131 [0x83]))
        (nil)))
(insn 54 53 55 5 (set (reg:SI 145)
        (ashift:SI (reg:SI 145)
            (const_int 3 [0x3]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 55 54 56 5 (set (reg:SI 145)
        (minus:SI (reg:SI 145)
            (reg:SI 144))) "uart.c":148:51 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 144)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 144)
                (const_int 1047 [0x417]))
            (nil))))
(insn 56 55 57 5 (set (reg:SI 146)
        (ashift:SI (reg:SI 145)
            (const_int 2 [0x2]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 57 56 58 5 (set (reg:SI 145)
        (reg:SI 146)) "uart.c":148:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 58 57 59 5 (set (reg:SI 147)
        (plus:SI (reg/f:SI 143)
            (reg:SI 145))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (expr_list:REG_DEAD (reg/f:SI 143)
            (nil))))
(insn 59 58 60 5 (set (reg/f:SI 148)
        (plus:SI (reg:SI 147)
            (const_int 84 [0x54]))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 60 59 61 5 (set (reg/f:SI 117 [ _5 ])
        (mem/f:SI (reg/f:SI 148) [10 proc[i_19].res+0 S4 A32])) "uart.c":148:51 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))
(insn 61 60 62 5 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 60 [0x3c]))) "uart.c":148:55 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
        (nil)))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7f19cf0af5a0 *.LC4>)) "uart.c":148:37 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (reg/f:SI 118 [ _6 ])) "uart.c":148:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 118 [ _6 ])
        (nil)))
(call_insn/i 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7f19cf2e7700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":148:37 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 119 [ _7 ])
        (reg:SI 0 r0)) "uart.c":148:37 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ _7 ])
            (const_int 0 [0]))) "uart.c":148:34 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":148:34 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 100)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 149 150 151 152 153 154 155 156 157 158 159 160
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 149)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 6 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 6 (set (reg:SI 151)
        (reg:SI 150)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 6 [0x6]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 73 72 74 6 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 65 [0x41]))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 1 [0x1]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 75 74 76 6 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 131 [0x83]))
        (nil)))
(insn 76 75 77 6 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 3 [0x3]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 77 76 78 6 (set (reg:SI 151)
        (minus:SI (reg:SI 151)
            (reg:SI 150))) "uart.c":149:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 150)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
                (const_int 1047 [0x417]))
            (nil))))
(insn 78 77 79 6 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 151)
        (nil)))
(insn 79 78 80 6 (set (reg:SI 151)
        (reg:SI 152)) "uart.c":149:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 152)
        (nil)))
(insn 80 79 81 6 (set (reg:SI 153)
        (plus:SI (reg/f:SI 149)
            (reg:SI 151))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 151)
        (expr_list:REG_DEAD (reg/f:SI 149)
            (nil))))
(insn 81 80 82 6 (set (reg/f:SI 154)
        (plus:SI (reg:SI 153)
            (const_int 84 [0x54]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 153)
        (nil)))
(insn 82 81 83 6 (set (reg/f:SI 120 [ _8 ])
        (mem/f:SI (reg/f:SI 154) [10 proc[i_19].res+0 S4 A32])) "uart.c":149:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 154)
        (nil)))
(insn 83 82 84 6 (set (reg:SI 121 [ _9 ])
        (mem:SI (plus:SI (reg/f:SI 120 [ _8 ])
                (const_int 92 [0x5c])) [3 _8->signal+0 S4 A32])) "uart.c":149:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120 [ _8 ])
        (nil)))
(insn 84 83 85 6 (set (reg/f:SI 155)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 6 (set (reg:SI 156)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 6 (set (reg:SI 157)
        (reg:SI 156)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 6 [0x6]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 88 87 89 6 (set (reg:SI 157)
        (plus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
            (const_int 65 [0x41]))
        (nil)))
(insn 89 88 90 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 1 [0x1]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 90 89 91 6 (set (reg:SI 157)
        (plus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
            (const_int 131 [0x83]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 157)
        (ashift:SI (reg:SI 157)
            (const_int 3 [0x3]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 92 91 93 6 (set (reg:SI 157)
        (minus:SI (reg:SI 157)
            (reg:SI 156))) "uart.c":149:9 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 156)
        (expr_list:REG_EQUAL (mult:SI (reg:SI 156)
                (const_int 1047 [0x417]))
            (nil))))
(insn 93 92 94 6 (set (reg:SI 158)
        (ashift:SI (reg:SI 157)
            (const_int 2 [0x2]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 157)
        (nil)))
(insn 94 93 95 6 (set (reg:SI 157)
        (reg:SI 158)) "uart.c":149:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 158)
        (nil)))
(insn 95 94 96 6 (set (reg:SI 159)
        (plus:SI (reg/f:SI 155)
            (reg:SI 157))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 157)
        (expr_list:REG_DEAD (reg/f:SI 155)
            (nil))))
(insn 96 95 97 6 (set (reg/f:SI 160)
        (plus:SI (reg:SI 159)
            (const_int 84 [0x54]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 159)
        (nil)))
(insn 97 96 98 6 (set (reg/f:SI 122 [ _10 ])
        (mem/f:SI (reg/f:SI 160) [10 proc[i_19].res+0 S4 A32])) "uart.c":149:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 160)
        (nil)))
(insn 98 97 99 6 (set (reg:SI 123 [ _11 ])
        (ior:SI (reg:SI 121 [ _9 ])
            (const_int 4 [0x4]))) "uart.c":149:22 106 {*iorsi3_insn}
     (expr_list:REG_DEAD (reg:SI 121 [ _9 ])
        (nil)))
(insn 99 98 100 6 (set (mem:SI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 92 [0x5c])) [3 _10->signal+0 S4 A32])
        (reg:SI 123 [ _11 ])) "uart.c":149:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (expr_list:REG_DEAD (reg/f:SI 122 [ _10 ])
            (nil))))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 161 162
(code_label 100 99 101 7 17 (nil) [2 uses])
(note 101 100 102 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 7 (set (reg:SI 162)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":147:25 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 7 (set (reg:SI 161)
        (plus:SI (reg:SI 162)
            (const_int 1 [0x1]))) "uart.c":147:25 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 162)
        (nil)))
(insn 104 103 105 7 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 161)) "uart.c":147:25 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 161)
        (nil)))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 163
(code_label 105 104 106 8 16 (nil) [1 uses])
(note 106 105 110 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 110 106 111 8 (set (reg:SI 163)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "uart.c":147:16 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 163)
            (const_int 63 [0x3f]))) "uart.c":147:16 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 163)
        (nil)))
(jump_insn 112 111 113 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "uart.c":147:16 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 107)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 164 165
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f19cf0af510 *.LC3>)) "uart.c":152:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 115 114 116 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":152:5 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 116 115 117 9 (set (reg:SI 164)
        (const_int 13 [0xd])) "uart.c":153:7 253 {*arm_movsi_insn}
     (nil))
(insn 117 116 118 9 (set (reg:QI 165)
        (subreg:QI (reg:SI 164) 0)) "uart.c":153:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 164)
        (nil)))
(insn 118 117 119 9 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 165)) "uart.c":153:7 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 165)
        (nil)))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       2
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 126 127 128 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 119 118 120 10 15 (nil) [1 uses])
(note 120 119 121 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 10 (set (reg/f:SI 166)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":156:15 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 10 (set (reg:SI 124 [ _12 ])
        (mem/v:SI (plus:SI (reg/f:SI 166)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":156:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 166)
        (nil)))
(insn 123 122 124 10 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ _12 ])
            (const_int 1 [0x1]))) "uart.c":156:23 7 {*arm_addsi3}
     (nil))
(insn 124 123 125 10 (set (reg/f:SI 167)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":156:23 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 10 (set (mem/v:SI (plus:SI (reg/f:SI 167)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 125 [ _14 ])) "uart.c":156:23 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 167)
        (expr_list:REG_DEAD (reg:SI 125 [ _14 ])
            (nil))))
(insn 126 125 127 10 (set (reg/f:SI 168)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":156:27 253 {*arm_movsi_insn}
     (nil))
(insn 127 126 128 10 (set (reg/f:SI 169)
        (plus:SI (reg/f:SI 168)
            (reg:SI 124 [ _12 ]))) "uart.c":156:27 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 168)
        (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
            (nil))))
(insn 128 127 129 10 (set (reg:QI 170)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])) "uart.c":156:27 263 {*arm_movqi_insn}
     (nil))
(insn 129 128 130 10 (set (mem/v:QI (plus:SI (reg/f:SI 169)
                (const_int 4 [0x4])) [0 up_25->inbuf[_13]+0 S1 A8])
        (reg:QI 170)) "uart.c":156:27 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 170)
        (expr_list:REG_DEAD (reg/f:SI 169)
            (nil))))
(insn 130 129 131 10 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 10 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 171)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 171)
        (nil)))
(insn 132 131 133 10 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 126 [ _15 ]))
                    (const_int 0 [0])))
            (set (reg:SI 172)
                (minus:SI (const_int 0 [0])
                    (reg:SI 126 [ _15 ])))
        ]) "uart.c":157:14 46 {subsi3_compare0}
     (nil))
(insn 133 132 134 10 (set (reg:SI 127 [ _16 ])
        (and:SI (reg:SI 126 [ _15 ])
            (const_int 63 [0x3f]))) "uart.c":157:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ _15 ])
        (nil)))
(insn 134 133 135 10 (set (reg:SI 173)
        (and:SI (reg:SI 172)
            (const_int 63 [0x3f]))) "uart.c":157:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 172)
        (nil)))
(insn 135 134 136 10 (set (reg:SI 127 [ _16 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 173))
            (reg:SI 127 [ _16 ]))) "uart.c":157:14 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 173)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 136 135 137 10 (set (reg/f:SI 174)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 10 (set (mem/v:SI (plus:SI (reg/f:SI 174)
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 127 [ _16 ])) "uart.c":157:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 174)
        (expr_list:REG_DEAD (reg:SI 127 [ _16 ])
            (nil))))
(insn 138 137 139 10 (set (reg:SI 175)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 139 138 140 10 (set (reg/f:SI 128 [ _17 ])
        (plus:SI (reg:SI 175)
            (const_int 76 [0x4c]))) "uart.c":158:3 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 175)
        (nil)))
(insn 140 139 141 10 (set (reg:SI 0 r0)
        (reg/f:SI 128 [ _17 ])) "uart.c":158:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 128 [ _17 ])
        (nil)))
(call_insn 141 140 142 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f19cf067d00 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":158:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 142 141 143 10 (set (reg/f:SI 176)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":160:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 10 (set (reg:SI 177)
        (const_int 6 [0x6])) "uart.c":160:8 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 150 10 (set (mem/c:SI (reg/f:SI 176) [3 color+0 S4 A32])
        (reg:SI 177)) "uart.c":160:8 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 177)
        (expr_list:REG_DEAD (reg/f:SI 176)
            (nil))))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 150 144 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 0 11 (const_int 0 [0]) "uart.c":161:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sputc (sputc, funcdef_no=3, decl_uid=4522, cgraph_uid=4, symbol_order=5)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 4
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 5 }
;; 5 succs { 3 }
;; 3 succs { 3 4 }
;; 4 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a6(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a15(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000

   Insn 33(l0): point = 0
   Insn 30(l0): point = 2
   Insn 35(l0): point = 4
   Insn 32(l0): point = 6
   Insn 31(l0): point = 8
   Insn 28(l0): point = 10
   Insn 27(l0): point = 12
   Insn 26(l0): point = 14
   Insn 25(l0): point = 16
   Insn 23(l0): point = 19
   Insn 22(l0): point = 21
   Insn 20(l0): point = 23
   Insn 19(l0): point = 25
   Insn 18(l0): point = 27
   Insn 17(l0): point = 29
   Insn 16(l0): point = 31
   Insn 15(l0): point = 33
   Insn 37(l0): point = 36
   Insn 13(l0): point = 39
   Insn 12(l0): point = 41
   Insn 11(l0): point = 43
   Insn 10(l0): point = 45
   Insn 9(l0): point = 47
   Insn 5(l0): point = 49
   Insn 4(l0): point = 51
   Insn 3(l0): point = 53
   Insn 2(l0): point = 55
 a0(r122): [3..6]
 a1(r121): [11..14]
 a2(r128): [11..12]
 a3(r127): [15..16]
 a4(r120): [22..23]
 a5(r119): [24..25]
 a6(r118): [26..27]
 a7(r117): [28..29]
 a8(r116): [30..31]
 a9(r126): [32..33]
 a10(r115): [40..41]
 a11(r114): [42..43]
 a12(r113): [44..45]
 a13(r125): [46..47]
 a14(r124): [50..51]
 a15(r123): [52..53]
Compressing live ranges: from 58 to 30 - 51%
Ranges after the compression:
 a0(r122): [0..1]
 a1(r121): [2..3]
 a2(r128): [2..3]
 a3(r127): [4..5]
 a4(r120): [6..7]
 a5(r119): [8..9]
 a6(r118): [10..11]
 a7(r117): [12..13]
 a8(r116): [14..15]
 a9(r126): [16..17]
 a10(r115): [18..19]
 a11(r114): [20..21]
 a12(r113): [22..23]
 a13(r125): [24..25]
 a14(r124): [26..27]
 a15(r123): [28..29]
  regions=1, blocks=6, points=30
    allocnos=16 (big 0), copies=0, conflicts=0, ranges=16
Disposition:
   12:r113 l0     3   11:r114 l0     3   10:r115 l0     3    8:r116 l0     3
    7:r117 l0     3    6:r118 l0     3    5:r119 l0     3    4:r120 l0     3
    1:r121 l0     3    0:r122 l0     3   15:r123 l0     3   14:r124 l0     3
   13:r125 l0     3    9:r126 l0     3    3:r127 l0     3    2:r128 l0     2
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sputc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={1d} r3={1d} r11={1d,5u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,12u} r103={1d,4u} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} 
;;    total ref usage 75{28d,47u,0e} in 27{27 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 5, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 123 124 125
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":166:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (reg:SI 123)
        (reg:SI 1 r1 [ c ])) "uart.c":166:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ c ])
        (nil)))
(insn 4 3 5 2 (set (reg:QI 124)
        (subreg:QI (reg:SI 123) 0)) "uart.c":166:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 123)
        (nil)))
(insn 5 4 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 124)) "uart.c":166:1 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 124)
        (nil)))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 125) [2 up_11(D)->base+0 S4 A32])) "uart.c":167:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 125)
        (nil)))
(insn 11 10 12 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 24 [0x18]))) "uart.c":167:22 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
        (nil)))
(insn 12 11 13 2 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8]))) "uart.c":167:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 114 [ _2 ])
        (nil)))
(insn 13 12 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 115 [ _3 ])) "uart.c":167:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 2, next block 3, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 36 13 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 21 5 (const_int 0 [0]) "uart.c":168:8 311 {nop}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 5, next block 4, flags: (RTL)
;;  pred:       5 [always]  (FALLTHRU)
;;              3 (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 118 119 120 126
(code_label 21 37 14 3 22 (nil) [1 uses])
(note 14 21 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":168:13 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 116 [ _4 ])
        (mem/v/f:SI (reg/f:SI 126) [2 up_11(D)->base+0 S4 A32])) "uart.c":168:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))
(insn 17 16 18 3 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 116 [ _4 ])
            (const_int 24 [0x18]))) "uart.c":168:20 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 116 [ _4 ])
        (nil)))
(insn 18 17 19 3 (set (reg:SI 118 [ _6 ])
        (zero_extend:SI (mem:QI (reg/f:SI 117 [ _5 ]) [0 *_5+0 S1 A8]))) "uart.c":168:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 117 [ _5 ])
        (nil)))
(insn 19 18 20 3 (set (reg:SI 119 [ _7 ])
        (reg:SI 118 [ _6 ])) "uart.c":168:26 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _6 ])
        (nil)))
(insn 20 19 22 3 (set (reg:SI 120 [ _8 ])
        (and:SI (reg:SI 119 [ _7 ])
            (const_int 32 [0x20]))) "uart.c":168:26 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(insn 22 20 23 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120 [ _8 ])
            (const_int 0 [0]))) "uart.c":168:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "uart.c":168:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3 (DFS_BACK)
;;              4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 121 122 127 128
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":170:7 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 121 [ _9 ])
        (mem/v/f:SI (reg/f:SI 127) [2 up_11(D)->base+0 S4 A32])) "uart.c":170:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 27 26 28 4 (set (reg:QI 128)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])) "uart.c":170:20 263 {*arm_movqi_insn}
     (nil))
(insn 28 27 31 4 (set (mem:QI (reg/f:SI 121 [ _9 ]) [0 *_9+0 S1 A8])
        (reg:QI 128)) "uart.c":170:20 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 128)
        (expr_list:REG_DEAD (reg/f:SI 121 [ _9 ])
            (nil))))
(insn 31 28 32 4 (clobber (reg/i:SI 0 r0)) "uart.c":171:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 32 31 35 4 (clobber (reg:SI 122 [ <retval> ])) "uart.c":171:1 -1
     (nil))
(insn 35 32 30 4 (const_int 0 [0]) "uart.c":171:1 311 {nop}
     (nil))
(insn 30 35 33 4 (set (reg/i:SI 0 r0)
        (reg:SI 122 [ <retval> ])) "uart.c":171:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ <retval> ])
        (nil)))
(insn 33 30 0 4 (use (reg/i:SI 0 r0)) "uart.c":171:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sgetc (sgetc, funcdef_no=4, decl_uid=4529, cgraph_uid=5, symbol_order=6)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 3 n_edges 2 count 3 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a1(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a2(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a4(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a7(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a11(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a15(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a16(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 35(l0): point = 0
   Insn 34(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 25(l0): point = 10
   Insn 24(l0): point = 12
   Insn 23(l0): point = 15
   Insn 22(l0): point = 17
   Insn 21(l0): point = 19
   Insn 20(l0): point = 21
   Insn 19(l0): point = 23
   Insn 18(l0): point = 25
   Insn 17(l0): point = 27
   Insn 16(l0): point = 29
   Insn 15(l0): point = 31
   Insn 14(l0): point = 33
   Insn 13(l0): point = 35
   Insn 12(l0): point = 37
   Insn 11(l0): point = 39
   Insn 10(l0): point = 41
   Insn 9(l0): point = 43
   Insn 8(l0): point = 45
   Insn 7(l0): point = 47
   Insn 6(l0): point = 49
   Insn 2(l0): point = 51
 a0(r119): [3..4]
 a1(r118): [5..6]
 a2(r129): [9..10]
 a3(r117): [9..17]
 a4(r128): [13..15]
 a5(r127): [16..19]
 a6(r116): [18..21]
 a7(r126): [22..23]
 a8(r125): [26..27]
 a9(r124): [28..29]
 a10(r114): [30..39]
 a11(r123): [30..31]
 a12(r122): [34..35]
 a13(r115): [34..37]
 a14(r121): [40..41]
 a15(r113): [46..47]
 a16(r120): [48..49]
Compressing live ranges: from 54 to 28 - 51%
Ranges after the compression:
 a0(r119): [0..1]
 a1(r118): [2..3]
 a2(r129): [4..5]
 a3(r117): [4..9]
 a4(r128): [6..7]
 a5(r127): [8..11]
 a6(r116): [10..11]
 a7(r126): [12..13]
 a8(r125): [14..15]
 a9(r124): [16..17]
 a10(r114): [18..21]
 a11(r123): [18..19]
 a12(r122): [20..21]
 a13(r115): [20..21]
 a14(r121): [22..23]
 a15(r113): [24..25]
 a16(r120): [26..27]
  regions=1, blocks=3, points=28
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   15:r113 l0     3   10:r114 l0     3   13:r115 l0     1    6:r116 l0     3
    3:r117 l0     3    1:r118 l0     3    0:r119 l0     3   16:r120 l0     3
   14:r121 l0     3   12:r122 l0     2   11:r123 l0     2    9:r124 l0     3
    8:r125 l0     3    7:r126 l0     3    5:r127 l0     2    4:r128 l0     2
    2:r129 l0     2
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sgetc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,11u} r103={1d,1u} r104={1d} r105={1d} r106={1d} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,3u} r117={2d,2u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} 
;;    total ref usage 170{127d,43u,0e} in 26{25 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":174:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":177:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 113 [ _1 ])
        (plus:SI (reg:SI 120)
            (const_int 76 [0x4c]))) "uart.c":177:3 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ _1 ])) "uart.c":177:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ _1 ])
        (nil)))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("P") [flags 0x41]  <function_decl 0x7f19cf077700 P>) [0 P S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":177:3 291 {*call_value_symbol}
     (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":179:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 121)
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])) "uart.c":179:19 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 121)
        (nil)))
(insn 12 11 13 2 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "uart.c":179:27 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":179:27 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (mem/v:SI (plus:SI (reg/f:SI 122)
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "uart.c":179:27 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 122)
        (expr_list:REG_DEAD (reg:SI 115 [ _4 ])
            (nil))))
(insn 15 14 16 2 (set (reg/f:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":179:5 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 124)
        (plus:SI (reg/f:SI 123)
            (reg:SI 114 [ _2 ]))) "uart.c":179:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg/f:SI 123)
        (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
            (nil))))
(insn 17 16 18 2 (set (reg:QI 125)
        (mem/v:QI (plus:SI (reg/f:SI 124)
                (const_int 4 [0x4])) [0 up_7(D)->inbuf[_3]+0 S1 A8])) "uart.c":179:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 125)) "uart.c":179:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 125)
        (nil)))
(insn 19 18 20 2 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 116 [ _5 ])
        (mem/v:SI (plus:SI (reg/f:SI 126)
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 126)
        (nil)))
(insn 21 20 22 2 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 116 [ _5 ]))
                    (const_int 0 [0])))
            (set (reg:SI 127)
                (minus:SI (const_int 0 [0])
                    (reg:SI 116 [ _5 ])))
        ]) "uart.c":180:14 46 {subsi3_compare0}
     (nil))
(insn 22 21 23 2 (set (reg:SI 117 [ _6 ])
        (and:SI (reg:SI 116 [ _5 ])
            (const_int 63 [0x3f]))) "uart.c":180:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _5 ])
        (nil)))
(insn 23 22 24 2 (set (reg:SI 128)
        (and:SI (reg:SI 127)
            (const_int 63 [0x3f]))) "uart.c":180:14 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 24 23 25 2 (set (reg:SI 117 [ _6 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 128))
            (reg:SI 117 [ _6 ]))) "uart.c":180:14 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 128)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 25 24 26 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])
        (reg:SI 117 [ _6 ])) "uart.c":180:14 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (expr_list:REG_DEAD (reg:SI 117 [ _6 ])
            (nil))))
(insn 27 26 30 2 (set (reg:SI 118 [ _13 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "uart.c":182:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 30 27 34 2 (set (reg:SI 119 [ <retval> ])
        (reg:SI 118 [ _13 ])) "uart.c":182:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _13 ])
        (nil)))
(insn 34 30 35 2 (set (reg/i:SI 0 r0)
        (reg:SI 119 [ <retval> ])) "uart.c":183:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ <retval> ])
        (nil)))
(insn 35 34 0 2 (use (reg/i:SI 0 r0)) "uart.c":183:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sgets (sgets, funcdef_no=5, decl_uid=4536, cgraph_uid=6, symbol_order=7)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a3(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a4(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a8(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a9(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a10(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a12(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a13(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 41(l0): point = 0
   Insn 38(l0): point = 2
   Insn 43(l0): point = 4
   Insn 40(l0): point = 6
   Insn 39(l0): point = 8
   Insn 36(l0): point = 10
   Insn 35(l0): point = 12
   Insn 34(l0): point = 14
   Insn 33(l0): point = 16
   Insn 17(l0): point = 19
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 13(l0): point = 27
   Insn 12(l0): point = 29
   Insn 11(l0): point = 31
   Insn 10(l0): point = 33
   Insn 31(l0): point = 36
   Insn 30(l0): point = 38
   Insn 28(l0): point = 40
   Insn 27(l0): point = 42
   Insn 26(l0): point = 44
   Insn 25(l0): point = 46
   Insn 24(l0): point = 48
   Insn 23(l0): point = 50
   Insn 22(l0): point = 52
   Insn 21(l0): point = 54
   Insn 20(l0): point = 56
   Insn 44(l0): point = 59
   Insn 3(l0): point = 61
   Insn 2(l0): point = 63
 a0(r117): [3..6]
 a1(r124): [11..16]
 a2(r126): [11..12]
 a3(r125): [13..14]
 a4(r116): [39..40]
 a5(r123): [41..42]
 a6(r121): [45..48]
 a7(r122): [45..46]
 a8(r115): [47..50]
 a9(r114): [51..52]
 a10(r119): [20..21]
 a11(r120): [22..23]
 a12(r113): [30..31]
 a13(r118): [32..33]
Compressing live ranges: from 66 to 24 - 36%
Ranges after the compression:
 a0(r117): [0..1]
 a1(r124): [2..5]
 a2(r126): [2..3]
 a3(r125): [4..5]
 a4(r116): [14..15]
 a5(r123): [16..17]
 a6(r121): [18..21]
 a7(r122): [18..19]
 a8(r115): [20..21]
 a9(r114): [22..23]
 a10(r119): [6..7]
 a11(r120): [8..9]
 a12(r113): [10..11]
 a13(r118): [12..13]
  regions=1, blocks=6, points=24
    allocnos=14 (big 0), copies=0, conflicts=0, ranges=14
Disposition:
   12:r113 l0     3    9:r114 l0     3    8:r115 l0     2    4:r116 l0     3
    0:r117 l0     3   13:r118 l0     3   10:r119 l0     3   11:r120 l0     3
    6:r121 l0     3    7:r122 l0     2    5:r123 l0     3    1:r124 l0     3
    3:r125 l0     2    2:r126 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sgets

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,6u} r1={4d,2u} r2={3d} r3={3d} r11={1d,5u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,15u} r103={1d,4u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} 
;;    total ref usage 277{223d,54u,0e} in 31{29 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":186:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 1 r1 [ s ])) "uart.c":186:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ s ])
        (nil)))
(note 4 3 44 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 44 4 45 2 (set (pc)
        (label_ref 18)) "uart.c":187:9 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 45 44 29)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 118 119 120
(code_label 29 45 9 3 27 (nil) [1 uses])
(note 9 29 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":188:5 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118) [0 *s_5+0 S1 A8]))) "uart.c":188:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 118)
        (nil)))
(insn 12 11 13 3 (set (reg:SI 1 r1)
        (reg:SI 113 [ _1 ])) "uart.c":188:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(insn 13 12 14 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":188:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 14 13 15 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":188:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 15 14 16 3 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":189:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int 1 [0x1]))) "uart.c":189:6 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(insn 17 16 18 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 119)) "uart.c":189:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 116 121 122 123
(code_label 18 17 19 4 26 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":187:22 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":187:22 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 22 21 23 4 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "uart.c":187:22 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 23 22 24 4 (set (reg:SI 115 [ _3 ])
        (and:SI (reg:SI 114 [ _2 ])
            (const_int 255 [0xff]))) "uart.c":187:16 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 24 23 25 4 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":187:14 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:QI 122)
        (subreg/s/v:QI (reg:SI 115 [ _3 ]) 0)) "uart.c":187:14 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 26 25 27 4 (set (mem:QI (reg/f:SI 121) [0 *s_5+0 S1 A8])
        (reg:QI 122)) "uart.c":187:14 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 122)
        (expr_list:REG_DEAD (reg/f:SI 121)
            (nil))))
(insn 27 26 28 4 (set (reg/f:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":187:11 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 30 4 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 123) [0 *s_5+0 S1 A8]))) "uart.c":187:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 123)
        (nil)))
(insn 30 28 31 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ _4 ])
            (const_int 13 [0xd]))) "uart.c":187:33 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "uart.c":187:33 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 29)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117 124 125 126
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:SI 124)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":191:5 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 5 (set (reg:SI 125)
        (const_int 0 [0])) "uart.c":191:5 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 5 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "uart.c":191:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 36 35 39 5 (set (mem:QI (reg/f:SI 124) [0 *s_5+0 S1 A8])
        (reg:QI 126)) "uart.c":191:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 126)
        (expr_list:REG_DEAD (reg/f:SI 124)
            (nil))))
(insn 39 36 40 5 (clobber (reg/i:SI 0 r0)) "uart.c":192:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 40 39 43 5 (clobber (reg:SI 117 [ <retval> ])) "uart.c":192:1 -1
     (nil))
(insn 43 40 38 5 (const_int 0 [0]) "uart.c":192:1 311 {nop}
     (nil))
(insn 38 43 41 5 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "uart.c":192:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ <retval> ])
        (nil)))
(insn 41 38 0 5 (use (reg/i:SI 0 r0)) "uart.c":192:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sputs (sputs, funcdef_no=6, decl_uid=4542, cgraph_uid=7, symbol_order=8)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 8 count 7 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 5, multiple latches: 4 3
;;  depth 1, outer 0
;;  nodes: 5 4 3
;; 2 succs { 5 }
;; 3 succs { 4 5 }
;; 4 succs { 5 }
;; 5 succs { 3 6 }
;; 6 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a4(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a5(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a9(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a10(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 40(l0): point = 0
   Insn 37(l0): point = 2
   Insn 42(l0): point = 4
   Insn 39(l0): point = 6
   Insn 38(l0): point = 8
   Insn 21(l0): point = 11
   Insn 20(l0): point = 13
   Insn 19(l0): point = 15
   Insn 18(l0): point = 17
   Insn 17(l0): point = 19
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 13(l0): point = 27
   Insn 12(l0): point = 29
   Insn 11(l0): point = 31
   Insn 10(l0): point = 33
   Insn 9(l0): point = 35
   Insn 34(l0): point = 38
   Insn 33(l0): point = 40
   Insn 31(l0): point = 42
   Insn 30(l0): point = 44
   Insn 27(l0): point = 47
   Insn 26(l0): point = 49
   Insn 25(l0): point = 51
   Insn 24(l0): point = 53
   Insn 23(l0): point = 55
   Insn 43(l0): point = 58
   Insn 2(l0): point = 60
 a0(r119): [3..6]
 a1(r118): [41..42]
 a2(r124): [43..44]
 a3(r117): [50..53]
 a4(r123): [54..55]
 a5(r116): [14..15]
 a6(r122): [16..17]
 a7(r113): [22..33]
 a8(r115): [24..25]
 a9(r114): [26..31]
 a10(r121): [28..29]
 a11(r120): [34..35]
Compressing live ranges: from 63 to 20 - 31%
Ranges after the compression:
 a0(r119): [0..1]
 a1(r118): [12..13]
 a2(r124): [14..15]
 a3(r117): [16..17]
 a4(r123): [18..19]
 a5(r116): [2..3]
 a6(r122): [4..5]
 a7(r113): [6..9]
 a8(r115): [6..7]
 a9(r114): [8..9]
 a10(r121): [8..9]
 a11(r120): [10..11]
  regions=1, blocks=7, points=20
    allocnos=12 (big 0), copies=0, conflicts=0, ranges=12
Disposition:
    7:r113 l0     0    9:r114 l0     3    8:r115 l0     3    5:r116 l0     3
    3:r117 l0     3    1:r118 l0     3    0:r119 l0     3   11:r120 l0     3
   10:r121 l0     2    6:r122 l0     3    4:r123 l0     3    2:r124 l0     3
+++Costs: overall 8000, reg 8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sputs

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,2u} r2={3d} r3={3d} r11={1d,6u} r12={4d} r13={1d,8u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,11u} r103={1d,5u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={1d,2u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} 
;;    total ref usage 275{223d,52u,0e} in 29{27 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "uart.c":195:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 43 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 43 3 44 2 (set (pc)
        (label_ref 28)) "uart.c":196:8 284 {*arm_jump}
     (nil)
 -> 28)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 32)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       5
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 120 121 122
(code_label 32 44 8 3 30 (nil) [1 uses])
(note 8 32 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 120)
        (symbol_ref:SI ("up") [flags 0x2]  <var_decl 0x7f19cfd52b40 up>)) "uart.c":197:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg/f:SI 113 [ up.0_1 ])
        (mem/f/c:SI (reg/f:SI 120) [6 up+0 S4 A32])) "uart.c":197:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))
(insn 11 10 12 3 (set (reg/f:SI 114 [ s.1_2 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 s+0 S4 A32])) "uart.c":197:17 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 121)
        (plus:SI (reg/f:SI 114 [ s.1_2 ])
            (const_int 1 [0x1]))) "uart.c":197:17 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 s+0 S4 A32])
        (reg:SI 121)) "uart.c":197:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 14 13 15 3 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 114 [ s.1_2 ]) [0 *s.1_2+0 S1 A8]))) "uart.c":197:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 114 [ s.1_2 ])
        (nil)))
(insn 15 14 16 3 (set (reg:SI 1 r1)
        (reg:SI 115 [ _3 ])) "uart.c":197:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(insn 16 15 17 3 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ up.0_1 ])) "uart.c":197:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 113 [ up.0_1 ])
        (nil)))
(call_insn 17 16 18 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":197:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 18 17 19 3 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 s+0 S4 A32])) "uart.c":198:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 122) [0 *s_11+0 S1 A8]))) "uart.c":198:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 122)
        (nil)))
(insn 20 19 21 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ _4 ])
            (const_int 10 [0xa]))) "uart.c":198:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "uart.c":198:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 28)
;;  succ:       4 (FALLTHRU)
;;              5 (DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 123
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 123)
        (symbol_ref:SI ("up") [flags 0x2]  <var_decl 0x7f19cfd52b40 up>)) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 117 [ up.2_5 ])
        (mem/f/c:SI (reg/f:SI 123) [6 up+0 S4 A32])) "uart.c":199:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 123)
        (nil)))
(insn 25 24 26 4 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 r0)
        (reg/f:SI 117 [ up.2_5 ])) "uart.c":199:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 117 [ up.2_5 ])
        (nil)))
(call_insn 27 26 28 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":199:7 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 (DFS_BACK)
;;              2 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 124
(code_label 28 27 29 5 29 (nil) [2 uses])
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg/f:SI 124)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 s+0 S4 A32])) "uart.c":196:9 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 33 5 (set (reg:SI 118 [ _6 ])
        (zero_extend:SI (mem:QI (reg/f:SI 124) [0 *s_7+0 S1 A8]))) "uart.c":196:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 124)
        (nil)))
(insn 33 31 34 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ _6 ])
            (const_int 0 [0]))) "uart.c":196:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _6 ])
        (nil)))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "uart.c":196:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 32)
;;  succ:       3
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 119
(note 35 34 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 6 (clobber (reg/i:SI 0 r0)) "uart.c":202:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 39 38 42 6 (clobber (reg:SI 119 [ <retval> ])) "uart.c":202:1 -1
     (nil))
(insn 42 39 37 6 (const_int 0 [0]) "uart.c":202:1 311 {nop}
     (nil))
(insn 37 42 40 6 (set (reg/i:SI 0 r0)
        (reg:SI 119 [ <retval> ])) "uart.c":202:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ <retval> ])
        (nil)))
(insn 40 37 0 6 (use (reg/i:SI 0 r0)) "uart.c":202:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sprints (sprints, funcdef_no=7, decl_uid=4549, cgraph_uid=8, symbol_order=9)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a4(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a5(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 29(l0): point = 0
   Insn 26(l0): point = 2
   Insn 31(l0): point = 4
   Insn 28(l0): point = 6
   Insn 27(l0): point = 8
   Insn 16(l0): point = 11
   Insn 15(l0): point = 13
   Insn 14(l0): point = 15
   Insn 13(l0): point = 17
   Insn 12(l0): point = 19
   Insn 11(l0): point = 21
   Insn 10(l0): point = 23
   Insn 23(l0): point = 26
   Insn 22(l0): point = 28
   Insn 20(l0): point = 30
   Insn 19(l0): point = 32
   Insn 32(l0): point = 35
   Insn 3(l0): point = 37
   Insn 2(l0): point = 39
 a0(r116): [3..6]
 a1(r115): [29..30]
 a2(r118): [31..32]
 a3(r114): [16..17]
 a4(r113): [18..23]
 a5(r117): [20..21]
Compressing live ranges: from 42 to 10 - 23%
Ranges after the compression:
 a0(r116): [0..1]
 a1(r115): [6..7]
 a2(r118): [8..9]
 a3(r114): [2..3]
 a4(r113): [4..5]
 a5(r117): [4..5]
  regions=1, blocks=6, points=10
    allocnos=6 (big 0), copies=0, conflicts=0, ranges=6
Disposition:
    4:r113 l0     3    3:r114 l0     3    1:r115 l0     3    0:r116 l0     3
    5:r117 l0     2    2:r118 l0     3
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sprints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,11u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,2u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} 
;;    total ref usage 157{117d,40u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":205:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 1 r1 [ s ])) "uart.c":205:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ s ])
        (nil)))
(note 4 3 32 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 32 4 33 2 (set (pc)
        (label_ref 17)) "uart.c":206:8 284 {*arm_jump}
     (nil)
 -> 17)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 33 32 21)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 117
(code_label 21 33 9 3 35 (nil) [1 uses])
(note 9 21 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 113 [ s.3_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":207:17 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 117)
        (plus:SI (reg/f:SI 113 [ s.3_1 ])
            (const_int 1 [0x1]))) "uart.c":207:17 7 {*arm_addsi3}
     (nil))
(insn 12 11 13 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 117)) "uart.c":207:17 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 113 [ s.3_1 ]) [0 *s.3_1+0 S1 A8]))) "uart.c":207:5 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 113 [ s.3_1 ])
        (nil)))
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "uart.c":207:5 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":207:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":207:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115 118
(code_label 17 16 18 4 34 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":206:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 22 4 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118) [0 *s_4+0 S1 A8]))) "uart.c":206:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 118)
        (nil)))
(insn 22 20 23 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 0 [0]))) "uart.c":206:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "uart.c":206:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 116
(note 24 23 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 24 28 5 (clobber (reg/i:SI 0 r0)) "uart.c":207:21 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 28 27 31 5 (clobber (reg:SI 116 [ <retval> ])) "uart.c":207:21 -1
     (nil))
(insn 31 28 26 5 (const_int 0 [0]) "uart.c":207:21 311 {nop}
     (nil))
(insn 26 31 29 5 (set (reg/i:SI 0 r0)
        (reg:SI 116 [ <retval> ])) "uart.c":207:21 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ <retval> ])
        (nil)))
(insn 29 26 0 5 (use (reg/i:SI 0 r0)) "uart.c":207:21 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function srpx (srpx, funcdef_no=8, decl_uid=4556, cgraph_uid=9, symbol_order=10)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 39.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r118,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r129,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a3(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a4(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:51000
  a5(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a8(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a10(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:31000
  a12(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a14(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a15(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a16(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 44(l0): point = 0
   Insn 41(l0): point = 2
   Insn 46(l0): point = 4
   Insn 43(l0): point = 6
   Insn 42(l0): point = 8
   Insn 39(l0): point = 10
   Insn 38(l0): point = 12
   Insn 37(l0): point = 14
   Insn 36(l0): point = 16
   Insn 33(l0): point = 19
   Insn 32(l0): point = 21
   Insn 31(l0): point = 23
   Insn 30(l0): point = 25
   Insn 29(l0): point = 27
   Insn 28(l0): point = 29
   Insn 27(l0): point = 31
   Insn 24(l0): point = 33
   Insn 23(l0): point = 35
   Insn 22(l0): point = 37
   Insn 21(l0): point = 39
   Insn 20(l0): point = 41
   Insn 19(l0): point = 43
   Insn 18(l0): point = 45
   Insn 17(l0): point = 47
   Insn 16(l0): point = 50
   Insn 15(l0): point = 52
   Insn 14(l0): point = 54
   Insn 13(l0): point = 56
   Insn 12(l0): point = 58
   Insn 11(l0): point = 60
   Insn 9(l0): point = 63
   Insn 8(l0): point = 65
   Insn 7(l0): point = 67
   Insn 3(l0): point = 69
   Insn 2(l0): point = 71
 a0(r118): [3..6]
 a1(r129): [15..16]
 a2(r117): [24..25]
 a3(r128): [26..27]
 a4(r126): [28..35]
 a5(r127): [30..33]
 a6(r125): [36..37]
 a7(r124): [40..41]
 a8(r116): [42..43]
 a9(r115): [44..45]
 a10(r113): [44..58]
 a11(r114): [46..52]
 a12(r123): [48..50]
 a13(r122): [51..54]
 a14(r121): [53..56]
 a15(r120): [59..60]
 a16(r119): [66..67]
Compressing live ranges: from 74 to 28 - 37%
Ranges after the compression:
 a0(r118): [0..1]
 a1(r129): [2..3]
 a2(r117): [4..5]
 a3(r128): [6..7]
 a4(r126): [8..9]
 a5(r127): [8..9]
 a6(r125): [10..11]
 a7(r124): [12..13]
 a8(r116): [14..15]
 a9(r115): [16..17]
 a10(r113): [16..23]
 a11(r114): [18..21]
 a12(r123): [18..19]
 a13(r122): [20..23]
 a14(r121): [22..23]
 a15(r120): [24..25]
 a16(r119): [26..27]
  regions=1, blocks=5, points=28
    allocnos=17 (big 0), copies=0, conflicts=0, ranges=17
Disposition:
   10:r113 l0     2   11:r114 l0     3    9:r115 l0     3    8:r116 l0     3
    2:r117 l0     3    0:r118 l0     3   16:r119 l0     3   15:r120 l0     3
   14:r121 l0     3   13:r122 l0     1   12:r123 l0     1    7:r124 l0     3
    6:r125 l0     3    4:r126 l0     3    5:r127 l0     2    3:r128 l0     3
    1:r129 l0     3
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


srpx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,3u} r2={3d} r3={3d} r11={1d,4u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={5d,3u} r101={2d} r102={1d,13u} r103={1d,3u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={2d,2u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,3u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={2d,4u} r127={1d,1u} r128={1d,1u} r129={1d,1u} 
;;    total ref usage 291{231d,60u,0e} in 35{33 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":210:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":210:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":212:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119)
            (const_int 0 [0]))) "uart.c":212:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "uart.c":212:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 34)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 120 121 122 123 124 125 126 127 128
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 120)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7f19cfd52510 tab>)) "uart.c":213:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 113 [ tab.4_1 ])
        (mem/f/c:SI (reg/f:SI 120) [2 tab+0 S4 A32])) "uart.c":213:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 121)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":213:16 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 121))
                    (const_int 0 [0])))
            (set (reg:SI 122)
                (minus:SI (const_int 0 [0])
                    (reg:SI 121)))
        ]) "uart.c":213:16 46 {subsi3_compare0}
     (nil))
(insn 15 14 16 3 (set (reg:SI 114 [ _2 ])
        (and:SI (reg:SI 121)
            (const_int 15 [0xf]))) "uart.c":213:16 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 121)
        (nil)))
(insn 16 15 17 3 (set (reg:SI 123)
        (and:SI (reg:SI 122)
            (const_int 15 [0xf]))) "uart.c":213:16 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 17 16 18 3 (set (reg:SI 114 [ _2 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 123))
            (reg:SI 114 [ _2 ]))) "uart.c":213:16 371 {*if_neg_move}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_DEAD (reg:CC_NZ 100 cc)
            (nil))))
(insn 18 17 19 3 (set (reg:SI 115 [ _3 ])
        (reg:SI 114 [ _2 ])) "uart.c":213:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 19 18 20 3 (set (reg/f:SI 116 [ _4 ])
        (plus:SI (reg/f:SI 113 [ tab.4_1 ])
            (reg:SI 115 [ _3 ]))) "uart.c":213:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ tab.4_1 ])
            (nil))))
(insn 20 19 21 3 (set (reg:QI 124)
        (mem:QI (reg/f:SI 116 [ _4 ]) [0 *_4+0 S1 A8])) "uart.c":213:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 116 [ _4 ])
        (nil)))
(insn 21 20 22 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 124)) "uart.c":213:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 124)
        (nil)))
(insn 22 21 23 3 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":214:6 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 126)
        (reg:SI 125)) "uart.c":214:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (nil)))
(insn 24 23 27 3 (set (reg:SI 127)
        (plus:SI (reg:SI 126)
            (const_int 15 [0xf]))) "uart.c":214:6 7 {*arm_addsi3}
     (nil))
(insn 27 24 28 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 126)
            (const_int 0 [0]))) "uart.c":214:6 268 {*arm_cmpsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 126)
        (if_then_else:SI (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (reg:SI 127)
            (reg:SI 126))) "uart.c":214:6 282 {*movsicc_insn}
     (expr_list:REG_DEAD (reg:SI 127)
        (expr_list:REG_DEAD (reg:CC 100 cc)
            (nil))))
(insn 29 28 30 3 (set (reg:SI 128)
        (ashiftrt:SI (reg:SI 126)
            (const_int 4 [0x4]))) "uart.c":214:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(insn 30 29 31 3 (set (reg:SI 117 [ _5 ])
        (reg:SI 128)) "uart.c":214:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 31 30 32 3 (set (reg:SI 1 r1)
        (reg:SI 117 [ _5 ])) "uart.c":214:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (nil)))
(insn 32 31 33 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":214:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 33 32 34 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpx") [flags 0x3]  <function_decl 0x7f19cf077f00 srpx>) [0 srpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":214:6 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 129
(code_label 34 33 35 4 37 (nil) [1 uses])
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 4 (set (reg:SI 129)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "uart.c":216:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 37 36 38 4 (set (reg:SI 1 r1)
        (reg:SI 129)) "uart.c":216:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(insn 38 37 39 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":216:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 39 38 42 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":216:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 42 39 43 4 (clobber (reg/i:SI 0 r0)) "uart.c":217:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 43 42 46 4 (clobber (reg:SI 118 [ <retval> ])) "uart.c":217:1 -1
     (nil))
(insn 46 43 41 4 (const_int 0 [0]) "uart.c":217:1 311 {nop}
     (nil))
(insn 41 46 44 4 (set (reg/i:SI 0 r0)
        (reg:SI 118 [ <retval> ])) "uart.c":217:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ <retval> ])
        (nil)))
(insn 44 41 0 4 (use (reg/i:SI 0 r0)) "uart.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sprintx (sprintx, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=11)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 33(l0): point = 0
   Insn 30(l0): point = 2
   Insn 35(l0): point = 4
   Insn 32(l0): point = 6
   Insn 31(l0): point = 8
   Insn 28(l0): point = 10
   Insn 27(l0): point = 12
   Insn 26(l0): point = 14
   Insn 23(l0): point = 17
   Insn 22(l0): point = 19
   Insn 21(l0): point = 21
   Insn 36(l0): point = 24
   Insn 16(l0): point = 26
   Insn 15(l0): point = 28
   Insn 14(l0): point = 30
   Insn 12(l0): point = 33
   Insn 11(l0): point = 35
   Insn 10(l0): point = 37
   Insn 9(l0): point = 39
   Insn 8(l0): point = 41
   Insn 7(l0): point = 43
   Insn 3(l0): point = 45
   Insn 2(l0): point = 47
 a0(r113): [3..6]
 a1(r114): [36..37]
Compressing live ranges: from 50 to 4 - 8%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r114): [2..3]
  regions=1, blocks=6, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    0:r113 l0     3    1:r114 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sprintx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={11d,7u} r1={9d,5u} r2={5d} r3={5d} r11={1d,5u} r12={8d} r13={1d,9u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={5d,1u} r101={4d} r102={1d,13u} r103={1d,4u} r104={4d} r105={4d} r106={4d} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 456{410d,46u,0e} in 23{19 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":220:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":220:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f19cf0af6c0 *.LC5>)) "uart.c":221:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":221:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":221:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 10 9 11 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":222:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "uart.c":222:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "uart.c":222:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (const_int 48 [0x30])) "uart.c":223:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":223:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":223:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 36 16 37 3 (set (pc)
        (label_ref 24)) 284 {*arm_jump}
     (nil)
 -> 24)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 37 36 19)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 19 37 20 4 41 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":225:5 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":225:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpx") [flags 0x3]  <function_decl 0x7f19cf077f00 srpx>) [0 srpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":225:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 24 23 25 5 42 (nil) [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) "uart.c":226:3 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":226:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 28 27 31 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":226:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 31 28 32 5 (clobber (reg/i:SI 0 r0)) "uart.c":227:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 32 31 35 5 (clobber (reg:SI 113 [ <retval> ])) "uart.c":227:1 -1
     (nil))
(insn 35 32 30 5 (const_int 0 [0]) "uart.c":227:1 311 {nop}
     (nil))
(insn 30 35 33 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "uart.c":227:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 33 30 0 5 (use (reg/i:SI 0 r0)) "uart.c":227:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function srpu (srpu, funcdef_no=10, decl_uid=4565, cgraph_uid=11, symbol_order=12)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Removing SCRATCH to p135 in insn #15 (nop 3)
rescanning insn with uid = 15.
Removing SCRATCH to p136 in insn #31 (nop 3)
rescanning insn with uid = 31.
Building IRA IR
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)

Pass 0 for finding pseudo/allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r118,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r134,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a2(r117,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a3(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a6(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a8(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a9(r128,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a12(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:32000
  a14(r126,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:62000
  a15(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:40000
  a16(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a17(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r124,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a21(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:10000
  a22(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a23(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 48(l0): point = 0
   Insn 45(l0): point = 2
   Insn 50(l0): point = 4
   Insn 47(l0): point = 6
   Insn 46(l0): point = 8
   Insn 43(l0): point = 10
   Insn 42(l0): point = 12
   Insn 41(l0): point = 14
   Insn 40(l0): point = 16
   Insn 37(l0): point = 19
   Insn 36(l0): point = 21
   Insn 35(l0): point = 23
   Insn 34(l0): point = 25
   Insn 33(l0): point = 27
   Insn 32(l0): point = 29
   Insn 31(l0): point = 31
   Insn 30(l0): point = 36
   Insn 29(l0): point = 38
   Insn 28(l0): point = 40
   Insn 27(l0): point = 42
   Insn 26(l0): point = 44
   Insn 25(l0): point = 46
   Insn 24(l0): point = 48
   Insn 23(l0): point = 50
   Insn 22(l0): point = 52
   Insn 21(l0): point = 54
   Insn 20(l0): point = 56
   Insn 19(l0): point = 58
   Insn 18(l0): point = 60
   Insn 17(l0): point = 62
   Insn 16(l0): point = 64
   Insn 15(l0): point = 66
   Insn 14(l0): point = 71
   Insn 13(l0): point = 73
   Insn 12(l0): point = 75
   Insn 11(l0): point = 77
   Insn 9(l0): point = 80
   Insn 8(l0): point = 82
   Insn 7(l0): point = 84
   Insn 3(l0): point = 86
   Insn 2(l0): point = 88
 a0(r118): [3..6]
 a1(r134): [15..16]
 a2(r117): [24..25]
 a3(r133): [26..27]
 a4(r132): [26..29]
 a5(r129): [28..38]
 a6(r130): [30..31]
 a7(r131): [32..36]
 a8(r136): [33..34] [31..31]
 a9(r128): [41..42]
 a10(r116): [43..44]
 a11(r115): [45..46]
 a12(r113): [45..75]
 a13(r114): [55..60] [47..48]
 a14(r126): [53..58] [49..50]
 a15(r121): [49..73]
 a16(r127): [51..52]
 a17(r125): [61..62]
 a18(r124): [61..64]
 a19(r122): [65..66]
 a20(r123): [67..71]
 a21(r135): [68..69] [66..66]
 a22(r120): [76..77]
 a23(r119): [83..84]
Compressing live ranges: from 91 to 38 - 41%
Ranges after the compression:
 a0(r118): [0..1]
 a1(r134): [2..3]
 a2(r117): [4..5]
 a3(r133): [6..7]
 a4(r132): [6..9]
 a5(r129): [8..13]
 a6(r130): [10..11]
 a7(r131): [12..13]
 a8(r136): [11..13]
 a9(r128): [14..15]
 a10(r116): [16..17]
 a11(r115): [18..19]
 a12(r113): [18..33]
 a13(r114): [26..27] [20..21]
 a14(r126): [26..27] [22..23]
 a15(r121): [22..33]
 a16(r127): [24..25]
 a17(r125): [28..29]
 a18(r124): [28..29]
 a19(r122): [30..31]
 a20(r123): [32..33]
 a21(r135): [31..33]
 a22(r120): [34..35]
 a23(r119): [36..37]
  regions=1, blocks=5, points=38
    allocnos=24 (big 0), copies=0, conflicts=0, ranges=26
Disposition:
   12:r113 l0     0   13:r114 l0     1   11:r115 l0     3   10:r116 l0     3
    2:r117 l0     3    0:r118 l0     3   23:r119 l0     3   22:r120 l0     3
   15:r121 l0     2   19:r122 l0     3   20:r123 l0     3   18:r124 l0     1
   17:r125 l0     3   14:r126 l0     3   16:r127 l0     3    9:r128 l0     3
    5:r129 l0     3    6:r130 l0     2    7:r131 l0     2    4:r132 l0     2
    3:r133 l0     3    1:r134 l0     3   21:r135 l0     1    8:r136 l0     1
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


srpu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,3u} r2={3d} r3={3d} r11={1d,4u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,13u} r103={1d,3u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={2d,3u,1e} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,3u,1e} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={4d,4u} r127={1d,1u} r128={1d,1u} r129={1d,2u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d} r136={1d} 
;;    total ref usage 305{238d,65u,2e} in 41{39 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":230:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":230:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":232:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119)
            (const_int 0 [0]))) "uart.c":232:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 119)
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "uart.c":232:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 38)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 120 121 122 123 124 125 126 127 128 129 130 131 132 133 135 136
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 120)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7f19cfd52510 tab>)) "uart.c":233:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 113 [ tab.5_1 ])
        (mem/f/c:SI (reg/f:SI 120) [2 tab+0 S4 A32])) "uart.c":233:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 120)
        (nil)))
(insn 13 12 14 3 (set (reg:SI 121)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 123)
        (const_int 1717986919 [0x66666667])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 122)
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 121))
                            (sign_extend:DI (reg:SI 123)))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 135))
        ]) "uart.c":233:16 71 {*smull_high}
     (expr_list:REG_DEAD (reg:SI 123)
        (expr_list:REG_UNUSED (reg:SI 135)
            (nil))))
(insn 16 15 17 3 (set (reg:SI 124)
        (ashiftrt:SI (reg:SI 122)
            (const_int 2 [0x2]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 17 16 18 3 (set (reg:SI 125)
        (ashiftrt:SI (reg:SI 121)
            (const_int 31 [0x1f]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 18 17 19 3 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 124)
            (reg:SI 125))) "uart.c":233:16 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 125)
        (expr_list:REG_DEAD (reg:SI 124)
            (expr_list:REG_EQUAL (div:SI (reg:SI 121)
                    (const_int 10 [0xa]))
                (nil)))))
(insn 19 18 20 3 (set (reg:SI 126)
        (reg:SI 114 [ _2 ])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (reg:SI 126)
        (ashift:SI (reg:SI 126)
            (const_int 2 [0x2]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 21 20 22 3 (set (reg:SI 126)
        (plus:SI (reg:SI 126)
            (reg:SI 114 [ _2 ]))) "uart.c":233:16 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
                (const_int 5 [0x5]))
            (nil))))
(insn 22 21 23 3 (set (reg:SI 127)
        (ashift:SI (reg:SI 126)
            (const_int 1 [0x1]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 126)
        (nil)))
(insn 23 22 24 3 (set (reg:SI 126)
        (reg:SI 127)) "uart.c":233:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 127)
        (nil)))
(insn 24 23 25 3 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 121)
            (reg:SI 126))) "uart.c":233:16 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 126)
        (expr_list:REG_DEAD (reg:SI 121)
            (nil))))
(insn 25 24 26 3 (set (reg:SI 115 [ _3 ])
        (reg:SI 114 [ _2 ])) "uart.c":233:16 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 26 25 27 3 (set (reg/f:SI 116 [ _4 ])
        (plus:SI (reg/f:SI 113 [ tab.5_1 ])
            (reg:SI 115 [ _3 ]))) "uart.c":233:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (expr_list:REG_DEAD (reg/f:SI 113 [ tab.5_1 ])
            (nil))))
(insn 27 26 28 3 (set (reg:QI 128)
        (mem:QI (reg/f:SI 116 [ _4 ]) [0 *_4+0 S1 A8])) "uart.c":233:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg/f:SI 116 [ _4 ])
        (nil)))
(insn 28 27 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 128)) "uart.c":233:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 128)
        (nil)))
(insn 29 28 30 3 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 131)
        (const_int 1717986919 [0x66666667])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 130)
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 129))
                            (sign_extend:DI (reg:SI 131)))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 136))
        ]) "uart.c":234:6 71 {*smull_high}
     (expr_list:REG_DEAD (reg:SI 131)
        (expr_list:REG_UNUSED (reg:SI 136)
            (nil))))
(insn 32 31 33 3 (set (reg:SI 132)
        (ashiftrt:SI (reg:SI 130)
            (const_int 2 [0x2]))) "uart.c":234:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 130)
        (nil)))
(insn 33 32 34 3 (set (reg:SI 133)
        (ashiftrt:SI (reg:SI 129)
            (const_int 31 [0x1f]))) "uart.c":234:6 147 {*arm_shiftsi3}
     (expr_list:REG_DEAD (reg:SI 129)
        (nil)))
(insn 34 33 35 3 (set (reg:SI 117 [ _5 ])
        (minus:SI (reg:SI 132)
            (reg:SI 133))) "uart.c":234:6 45 {*arm_subsi3_insn}
     (expr_list:REG_DEAD (reg:SI 133)
        (expr_list:REG_DEAD (reg:SI 132)
            (nil))))
(insn 35 34 36 3 (set (reg:SI 1 r1)
        (reg:SI 117 [ _5 ])) "uart.c":234:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (nil)))
(insn 36 35 37 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 37 36 38 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpu") [flags 0x3]  <function_decl 0x7f19cf07d300 srpu>) [0 srpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":234:6 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 134
(code_label 38 37 39 4 46 (nil) [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:SI 134)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "uart.c":236:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 41 40 42 4 (set (reg:SI 1 r1)
        (reg:SI 134)) "uart.c":236:3 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 42 41 43 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":236:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 46 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":236:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 46 43 47 4 (clobber (reg/i:SI 0 r0)) "uart.c":237:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 47 46 50 4 (clobber (reg:SI 118 [ <retval> ])) "uart.c":237:1 -1
     (nil))
(insn 50 47 45 4 (const_int 0 [0]) "uart.c":237:1 311 {nop}
     (nil))
(insn 45 50 48 4 (set (reg/i:SI 0 r0)
        (reg:SI 118 [ <retval> ])) "uart.c":237:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ <retval> ])
        (nil)))
(insn 48 45 0 4 (use (reg/i:SI 0 r0)) "uart.c":237:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sprintu (sprintu, funcdef_no=11, decl_uid=4570, cgraph_uid=12, symbol_order=13)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 25.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 30(l0): point = 0
   Insn 27(l0): point = 2
   Insn 32(l0): point = 4
   Insn 29(l0): point = 6
   Insn 28(l0): point = 8
   Insn 25(l0): point = 10
   Insn 24(l0): point = 12
   Insn 23(l0): point = 14
   Insn 20(l0): point = 17
   Insn 19(l0): point = 19
   Insn 18(l0): point = 21
   Insn 33(l0): point = 24
   Insn 13(l0): point = 26
   Insn 12(l0): point = 28
   Insn 11(l0): point = 30
   Insn 9(l0): point = 33
   Insn 8(l0): point = 35
   Insn 7(l0): point = 37
   Insn 3(l0): point = 39
   Insn 2(l0): point = 41
 a0(r113): [3..6]
 a1(r114): [36..37]
Compressing live ranges: from 44 to 4 - 9%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r114): [2..3]
  regions=1, blocks=6, points=4
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=2
Disposition:
    0:r113 l0     3    1:r114 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sprintu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={7d,4u} r2={4d} r3={4d} r11={1d,5u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,12u} r103={1d,4u} r104={3d} r105={3d} r106={3d} r113={1d,1u} r114={1d,1u} 
;;    total ref usage 353{311d,42u,0e} in 20{17 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":240:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":240:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":241:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "uart.c":241:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "uart.c":241:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 16)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 1 r1)
        (const_int 48 [0x30])) "uart.c":242:5 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":242:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 13 12 33 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":242:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 33 13 34 3 (set (pc)
        (label_ref 21)) 284 {*arm_jump}
     (nil)
 -> 21)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 34 33 16)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 16 34 17 4 50 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":244:5 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":244:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 21 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpu") [flags 0x3]  <function_decl 0x7f19cf07d300 srpu>) [0 srpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":244:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 21 20 22 5 51 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) "uart.c":245:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":245:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 25 24 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":245:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 28 25 29 5 (clobber (reg/i:SI 0 r0)) "uart.c":246:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 29 28 32 5 (clobber (reg:SI 113 [ <retval> ])) "uart.c":246:1 -1
     (nil))
(insn 32 29 27 5 (const_int 0 [0]) "uart.c":246:1 311 {nop}
     (nil))
(insn 27 32 30 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "uart.c":246:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 30 27 0 5 (use (reg/i:SI 0 r0)) "uart.c":246:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sprinti (sprinti, funcdef_no=12, decl_uid=4574, cgraph_uid=13, symbol_order=14)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 5 n_edges 5 count 5 (    1)
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 3 4 }
;; 3 succs { 4 }
;; 4 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r113,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r114,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 28(l0): point = 0
   Insn 25(l0): point = 2
   Insn 30(l0): point = 4
   Insn 27(l0): point = 6
   Insn 26(l0): point = 8
   Insn 23(l0): point = 10
   Insn 22(l0): point = 12
   Insn 21(l0): point = 14
   Insn 18(l0): point = 17
   Insn 17(l0): point = 19
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 13(l0): point = 27
   Insn 11(l0): point = 30
   Insn 10(l0): point = 32
   Insn 9(l0): point = 34
   Insn 3(l0): point = 36
   Insn 2(l0): point = 38
 a0(r113): [3..6]
 a1(r115): [18..19]
 a2(r116): [20..21]
 a3(r114): [33..34]
Compressing live ranges: from 41 to 8 - 19%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r115): [2..3]
 a2(r116): [4..5]
 a3(r114): [6..7]
  regions=1, blocks=5, points=8
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4
Disposition:
    0:r113 l0     3    3:r114 l0     3    1:r115 l0     3    2:r116 l0     3
+++Costs: overall 2000, reg 2000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sprinti

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,3u} r2={3d} r3={3d} r11={1d,4u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,12u} r103={1d,3u} r104={2d} r105={2d} r106={2d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} 
;;    total ref usage 252{214d,38u,0e} in 19{17 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":249:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":249:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ x ])
        (nil)))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":250:6 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "uart.c":250:6 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 114)
        (nil)))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "uart.c":250:6 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 1 r1)
        (const_int 45 [0x2d])) "uart.c":251:5 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":251:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":251:5 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 16 15 17 3 (set (reg:SI 116)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":252:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 115)
        (neg:SI (reg:SI 116))) "uart.c":252:7 164 {*arm_negsi2}
     (expr_list:REG_DEAD (reg:SI 116)
        (nil)))
(insn 18 17 19 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 115)) "uart.c":252:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115)
        (nil)))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 19 18 20 4 53 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "uart.c":254:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":254:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 26 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":254:3 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 26 23 27 4 (clobber (reg/i:SI 0 r0)) "uart.c":255:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 27 26 30 4 (clobber (reg:SI 113 [ <retval> ])) "uart.c":255:1 -1
     (nil))
(insn 30 27 25 4 (const_int 0 [0]) "uart.c":255:1 311 {nop}
     (nil))
(insn 25 30 28 4 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "uart.c":255:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ <retval> ])
        (nil)))
(insn 28 25 0 4 (use (reg/i:SI 0 r0)) "uart.c":255:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sfprintf (sfprintf, funcdef_no=13, decl_uid=4578, cgraph_uid=14, symbol_order=15)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 24 count 17 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 16 13 14 15
;;
;; Loop 1
;;  header 14, multiple latches: 13 6
;;  depth 1, outer 0
;;  nodes: 14 13 6 4 5 3 7 16 8 9 10 11 12
;; 2 succs { 14 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 14 }
;; 7 succs { 13 8 10 9 11 12 }
;; 8 succs { 13 }
;; 9 succs { 13 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 16 }
;; 16 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 3 15 }
;; 15 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 95.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r126,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a10(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a12(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r121,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a14(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a15(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a17(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a21(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a22(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a30(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:22000
  a34(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 116(l0): point = 0
   Insn 113(l0): point = 2
   Insn 118(l0): point = 4
   Insn 115(l0): point = 6
   Insn 114(l0): point = 8
   Insn 16(l0): point = 11
   Insn 15(l0): point = 13
   Insn 14(l0): point = 15
   Insn 13(l0): point = 17
   Insn 110(l0): point = 20
   Insn 109(l0): point = 22
   Insn 107(l0): point = 24
   Insn 106(l0): point = 26
   Insn 103(l0): point = 29
   Insn 102(l0): point = 31
   Insn 101(l0): point = 33
   Insn 100(l0): point = 35
   Insn 99(l0): point = 37
   Insn 98(l0): point = 39
   Insn 47(l0): point = 42
   Insn 46(l0): point = 44
   Insn 45(l0): point = 46
   Insn 44(l0): point = 48
   Insn 43(l0): point = 50
   Insn 42(l0): point = 52
   Insn 41(l0): point = 54
   Insn 40(l0): point = 56
   Insn 132(l0): point = 59
   Insn 95(l0): point = 62
   Insn 94(l0): point = 64
   Insn 93(l0): point = 66
   Insn 92(l0): point = 68
   Insn 91(l0): point = 70
   Insn 123(l0): point = 73
   Insn 58(l0): point = 75
   Insn 57(l0): point = 77
   Insn 56(l0): point = 79
   Insn 55(l0): point = 81
   Insn 54(l0): point = 83
   Insn 53(l0): point = 85
   Insn 125(l0): point = 88
   Insn 68(l0): point = 90
   Insn 67(l0): point = 92
   Insn 66(l0): point = 94
   Insn 65(l0): point = 96
   Insn 64(l0): point = 98
   Insn 63(l0): point = 100
   Insn 127(l0): point = 103
   Insn 77(l0): point = 105
   Insn 76(l0): point = 107
   Insn 75(l0): point = 109
   Insn 74(l0): point = 111
   Insn 73(l0): point = 113
   Insn 129(l0): point = 116
   Insn 86(l0): point = 118
   Insn 85(l0): point = 120
   Insn 84(l0): point = 122
   Insn 83(l0): point = 124
   Insn 82(l0): point = 126
   Insn 121(l0): point = 129
   Insn 35(l0): point = 131
   Insn 34(l0): point = 133
   Insn 33(l0): point = 135
   Insn 26(l0): point = 138
   Insn 25(l0): point = 140
   Insn 24(l0): point = 142
   Insn 23(l0): point = 144
   Insn 22(l0): point = 146
   Insn 21(l0): point = 148
   Insn 20(l0): point = 150
   Insn 19(l0): point = 152
   Insn 18(l0): point = 154
   Insn 30(l0): point = 157
   Insn 29(l0): point = 159
   Insn 28(l0): point = 161
   Insn 119(l0): point = 164
   Insn 9(l0): point = 166
   Insn 8(l0): point = 168
   Insn 7(l0): point = 170
   Insn 6(l0): point = 172
   Insn 2(l0): point = 174
 a0(r126): [3..6]
 a1(r125): [23..24]
 a2(r147): [25..26]
 a3(r145): [30..31]
 a4(r146): [32..33]
 a5(r143): [36..37]
 a6(r144): [38..39]
 a7(r124): [67..68]
 a8(r142): [69..70]
 a9(r123): [123..124]
 a10(r141): [125..126]
 a11(r122): [110..111]
 a12(r140): [112..113]
 a13(r121): [95..96]
 a14(r120): [97..98]
 a15(r139): [99..100]
 a16(r119): [80..81]
 a17(r118): [82..83]
 a18(r138): [84..85]
 a19(r137): [43..44]
 a20(r117): [45..46]
 a21(r116): [47..48]
 a22(r136): [49..50]
 a23(r134): [53..54]
 a24(r135): [55..56]
 a25(r132): [132..133]
 a26(r133): [134..135]
 a27(r115): [141..142]
 a28(r131): [143..144]
 a29(r114): [151..152]
 a30(r130): [153..154]
 a31(r113): [14..15]
 a32(r129): [16..17]
 a33(r128): [167..168]
 a34(r127): [171..172]
Compressing live ranges: from 177 to 70 - 39%
Ranges after the compression:
 a0(r126): [0..1]
 a1(r125): [6..7]
 a2(r147): [8..9]
 a3(r145): [10..11]
 a4(r146): [12..13]
 a5(r143): [14..15]
 a6(r144): [16..17]
 a7(r124): [30..31]
 a8(r142): [32..33]
 a9(r123): [50..51]
 a10(r141): [52..53]
 a11(r122): [46..47]
 a12(r140): [48..49]
 a13(r121): [40..41]
 a14(r120): [42..43]
 a15(r139): [44..45]
 a16(r119): [34..35]
 a17(r118): [36..37]
 a18(r138): [38..39]
 a19(r137): [18..19]
 a20(r117): [20..21]
 a21(r116): [22..23]
 a22(r136): [24..25]
 a23(r134): [26..27]
 a24(r135): [28..29]
 a25(r132): [54..55]
 a26(r133): [56..57]
 a27(r115): [58..59]
 a28(r131): [60..61]
 a29(r114): [62..63]
 a30(r130): [64..65]
 a31(r113): [2..3]
 a32(r129): [4..5]
 a33(r128): [66..67]
 a34(r127): [68..69]
  regions=1, blocks=17, points=70
    allocnos=35 (big 0), copies=0, conflicts=0, ranges=35
Disposition:
   31:r113 l0     3   29:r114 l0     3   27:r115 l0     3   21:r116 l0     3
   20:r117 l0     3   17:r118 l0     3   16:r119 l0     3   14:r120 l0     3
   13:r121 l0     3   11:r122 l0     3    9:r123 l0     3    7:r124 l0     3
    1:r125 l0     3    0:r126 l0     3   34:r127 l0     3   33:r128 l0     3
   32:r129 l0     3   30:r130 l0     3   28:r131 l0     3   25:r132 l0     3
   26:r133 l0     3   23:r134 l0     3   24:r135 l0     3   22:r136 l0     3
   19:r137 l0     3   18:r138 l0     3   15:r139 l0     3   12:r140 l0     3
   10:r141 l0     3    8:r142 l0     3    5:r143 l0     3    6:r144 l0     3
    3:r145 l0     3    4:r146 l0     3    2:r147 l0     3
+++Costs: overall 16000, reg 16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sfprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,10u} r1={15d,7u} r2={8d} r3={8d} r11={1d,16u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,44u} r103={1d,17u} r104={7d} r105={7d} r106={7d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,2u} r138={1d,1u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} 
;;    total ref usage 899{743d,156u,0e} in 81{74 regular + 7 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127 128
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":258:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 103 afp)
                (const_int 4 [0x4])) [2 fmt+0 S4 A64])) "uart.c":261:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])
        (reg/f:SI 127)) "uart.c":261:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 8 7 9 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 103 afp)
            (const_int 8 [0x8]))) "uart.c":262:6 7 {*arm_addsi3}
     (nil))
(insn 9 8 119 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])
        (reg:SI 128)) "uart.c":262:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(jump_insn 119 9 120 2 (set (pc)
        (label_ref 104)) "uart.c":264:8 284 {*arm_jump}
     (nil)
 -> 104)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 120 119 108)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 129
(code_label 108 120 12 3 65 (nil) [1 uses])
(note 12 108 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":265:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 129) [0 *cp_15+0 S1 A8]))) "uart.c":265:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(insn 15 14 16 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "uart.c":265:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "uart.c":265:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 38)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 130 131
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":266:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 130) [0 *cp_15+0 S1 A8]))) "uart.c":266:7 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 130)
        (nil)))
(insn 20 19 21 4 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "uart.c":266:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 21 20 22 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":266:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 22 21 23 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":266:7 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 23 22 24 4 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":267:11 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_15+0 S1 A8]))) "uart.c":267:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "uart.c":267:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "uart.c":267:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 31)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":268:2 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":268:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 30 29 31 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":268:2 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 132 133
(code_label 31 30 32 6 57 (nil) [1 uses])
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":269:9 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 6 (set (reg:SI 132)
        (plus:SI (reg:SI 133)
            (const_int 1 [0x1]))) "uart.c":269:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 133)
        (nil)))
(insn 35 34 121 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])
        (reg:SI 132)) "uart.c":269:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 132)
        (nil)))
(jump_insn 121 35 122 6 (set (pc)
        (label_ref 104)) "uart.c":270:7 284 {*arm_jump}
     (nil)
 -> 104)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 122 121 38)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 134 135 136 137
(code_label 38 122 39 7 56 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":272:7 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 7 (set (reg:SI 134)
        (plus:SI (reg:SI 135)
            (const_int 1 [0x1]))) "uart.c":272:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(insn 42 41 43 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])
        (reg:SI 134)) "uart.c":272:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 43 42 44 7 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":273:12 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 7 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 136) [0 *cp_22+0 S1 A8]))) "uart.c":273:12 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 136)
        (nil)))
(insn 45 44 46 7 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "uart.c":273:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(insn 46 45 47 7 (set (reg:SI 137)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "uart.c":273:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (nil)))
(jump_insn 47 46 48 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 137)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 137)
                                (const_int 4 [0x4]))
                            (label_ref:SI 48)) [0  S4 A32])
                    (label_ref:SI 96)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 48))
        ]) "uart.c":273:5 308 {*arm_casesi_internal}
     (expr_list:REG_DEAD (reg:SI 137)
        (expr_list:REG_UNUSED (reg:CC 100 cc)
            (insn_list:REG_LABEL_TARGET 96 (nil))))
 -> 48)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 48 47 49 60 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 49 48 50 (addr_vec:SI [
            (label_ref:SI 51)
            (label_ref:SI 71)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 61)
            (label_ref:SI 96)
            (label_ref:SI 80)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 89)
        ]))
(barrier 50 49 51)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 138
(code_label 51 50 52 8 64 (nil) [1 uses])
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":274:31 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 8 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 138) [3 *ip_14+0 S4 A32])) "uart.c":274:31 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 138)
        (nil)))
(insn 55 54 56 8 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "uart.c":274:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _6 ])
        (nil)))
(insn 56 55 57 8 (set (reg:SI 1 r1)
        (reg:SI 119 [ _7 ])) "uart.c":274:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(insn 57 56 58 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":274:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 58 57 123 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":274:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 123 58 124 8 (set (pc)
        (label_ref 96)) "uart.c":274:42 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 124 123 61)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 139
(code_label 61 124 62 9 62 (nil) [1 uses])
(note 62 61 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 9 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":275:35 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 9 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 139) [3 *ip_14+0 S4 A32])) "uart.c":275:35 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))
(insn 65 64 66 9 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "uart.c":275:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 66 65 67 9 (set (reg:SI 1 r1)
        (reg/f:SI 121 [ _9 ])) "uart.c":275:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 121 [ _9 ])
        (nil)))
(insn 67 66 68 9 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":275:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 68 67 125 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":275:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 125 68 126 9 (set (pc)
        (label_ref 96)) "uart.c":275:42 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 126 125 71)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 140
(code_label 71 126 72 10 63 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 140) [3 *ip_14+0 S4 A32])) "uart.c":276:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (nil)))
(insn 75 74 76 10 (set (reg:SI 1 r1)
        (reg:SI 122 [ _10 ])) "uart.c":276:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (nil)))
(insn 76 75 77 10 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 77 76 127 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprinti") [flags 0x3]  <function_decl 0x7f19cf07d700 sprinti>) [0 sprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":276:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 127 77 128 10 (set (pc)
        (label_ref 96)) "uart.c":276:43 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 128 127 80)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 141
(code_label 80 128 81 11 61 (nil) [1 uses])
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 11 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 141) [3 *ip_14+0 S4 A32])) "uart.c":277:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))
(insn 84 83 85 11 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "uart.c":277:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 85 84 86 11 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 86 85 129 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":277:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 129 86 130 11 (set (pc)
        (label_ref 96)) "uart.c":277:43 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 130 129 89)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 142
(code_label 89 130 90 12 59 (nil) [1 uses])
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 12 (set (reg:SI 124 [ _12 ])
        (mem:SI (reg/f:SI 142) [3 *ip_14+0 S4 A32])) "uart.c":278:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 93 92 94 12 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "uart.c":278:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
        (nil)))
(insn 94 93 95 12 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 95 94 131 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintx") [flags 0x3]  <function_decl 0x7f19cf07d100 sprintx>) [0 sprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":278:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 131 95 132 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 96 16 (const_int 0 [0]) "uart.c":278:34 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 143 144 145 146
(code_label 96 132 97 13 58 (nil) [22 uses])
(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 13 (set (reg:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":280:7 253 {*arm_movsi_insn}
     (nil))
(insn 99 98 100 13 (set (reg:SI 143)
        (plus:SI (reg:SI 144)
            (const_int 1 [0x1]))) "uart.c":280:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 144)
        (nil)))
(insn 100 99 101 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])
        (reg:SI 143)) "uart.c":280:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 143)
        (nil)))
(insn 101 100 102 13 (set (reg:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])) "uart.c":280:13 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 13 (set (reg:SI 145)
        (plus:SI (reg:SI 146)
            (const_int 4 [0x4]))) "uart.c":280:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
(insn 103 102 104 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [9 ip+0 S4 A64])
        (reg:SI 145)) "uart.c":280:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 125 147
(code_label 104 103 105 14 55 (nil) [2 uses])
(note 105 104 106 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 14 (set (reg/f:SI 147)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 cp+0 S4 A32])) "uart.c":264:9 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 109 14 (set (reg:SI 125 [ _13 ])
        (zero_extend:SI (mem:QI (reg/f:SI 147) [0 *cp_15+0 S1 A8]))) "uart.c":264:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 147)
        (nil)))
(insn 109 107 110 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "uart.c":264:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 125 [ _13 ])
        (nil)))
(jump_insn 110 109 111 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) "uart.c":264:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 108)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 126
(note 111 110 114 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 114 111 115 15 (clobber (reg/i:SI 0 r0)) "uart.c":282:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 115 114 118 15 (clobber (reg:SI 126 [ <retval> ])) "uart.c":282:1 -1
     (nil))
(insn 118 115 113 15 (const_int 0 [0]) "uart.c":282:1 311 {nop}
     (nil))
(insn 113 118 116 15 (set (reg/i:SI 0 r0)
        (reg:SI 126 [ <retval> ])) "uart.c":282:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ <retval> ])
        (nil)))
(insn 116 113 0 15 (use (reg/i:SI 0 r0)) "uart.c":282:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function ksprintf (ksprintf, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=16)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 17 n_edges 24 count 17 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 16 13 14 15
;;
;; Loop 1
;;  header 14, multiple latches: 13 6
;;  depth 1, outer 0
;;  nodes: 14 13 6 4 5 3 7 16 8 9 10 11 12
;; 2 succs { 14 }
;; 3 succs { 4 7 }
;; 4 succs { 5 6 }
;; 5 succs { 6 }
;; 6 succs { 14 }
;; 7 succs { 13 8 10 9 11 12 }
;; 8 succs { 13 }
;; 9 succs { 13 }
;; 10 succs { 13 }
;; 11 succs { 13 }
;; 12 succs { 16 }
;; 16 succs { 13 }
;; 13 succs { 14 }
;; 14 succs { 3 15 }
;; 15 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 96.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r148,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r147,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r146,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r145,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r144,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a15 (r140,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a18 (r139,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a19 (r138,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a22 (r137,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a24 (r136,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a23 (r135,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a26 (r134,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a25 (r133,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a28 (r132,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a30 (r131,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a32 (r130,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a33 (r129,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a34 (r128,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a35 (r127,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r126,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r125,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r124,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a11 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a13 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a14 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a16 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a17 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a20 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a21 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a27 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a29 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a31 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r126,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r125,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r148,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r146,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a4(r147,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r144,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r145,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a7(r124,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a8(r143,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r123,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a10(r142,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a11(r122,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a12(r141,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a13(r121,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a14(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a15(r140,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a16(r119,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a17(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a18(r139,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a19(r138,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a20(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a21(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a22(r137,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a23(r135,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a24(r136,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a25(r133,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a26(r134,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a27(r115,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a28(r132,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a29(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:20000
  a30(r131,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a31(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a32(r130,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a33(r129,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000
  a34(r128,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:22000
  a35(r127,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 117(l0): point = 0
   Insn 114(l0): point = 2
   Insn 119(l0): point = 4
   Insn 116(l0): point = 6
   Insn 115(l0): point = 8
   Insn 17(l0): point = 11
   Insn 16(l0): point = 13
   Insn 15(l0): point = 15
   Insn 14(l0): point = 17
   Insn 111(l0): point = 20
   Insn 110(l0): point = 22
   Insn 108(l0): point = 24
   Insn 107(l0): point = 26
   Insn 104(l0): point = 29
   Insn 103(l0): point = 31
   Insn 102(l0): point = 33
   Insn 101(l0): point = 35
   Insn 100(l0): point = 37
   Insn 99(l0): point = 39
   Insn 48(l0): point = 42
   Insn 47(l0): point = 44
   Insn 46(l0): point = 46
   Insn 45(l0): point = 48
   Insn 44(l0): point = 50
   Insn 43(l0): point = 52
   Insn 42(l0): point = 54
   Insn 41(l0): point = 56
   Insn 133(l0): point = 59
   Insn 96(l0): point = 62
   Insn 95(l0): point = 64
   Insn 94(l0): point = 66
   Insn 93(l0): point = 68
   Insn 92(l0): point = 70
   Insn 124(l0): point = 73
   Insn 59(l0): point = 75
   Insn 58(l0): point = 77
   Insn 57(l0): point = 79
   Insn 56(l0): point = 81
   Insn 55(l0): point = 83
   Insn 54(l0): point = 85
   Insn 126(l0): point = 88
   Insn 69(l0): point = 90
   Insn 68(l0): point = 92
   Insn 67(l0): point = 94
   Insn 66(l0): point = 96
   Insn 65(l0): point = 98
   Insn 64(l0): point = 100
   Insn 128(l0): point = 103
   Insn 78(l0): point = 105
   Insn 77(l0): point = 107
   Insn 76(l0): point = 109
   Insn 75(l0): point = 111
   Insn 74(l0): point = 113
   Insn 130(l0): point = 116
   Insn 87(l0): point = 118
   Insn 86(l0): point = 120
   Insn 85(l0): point = 122
   Insn 84(l0): point = 124
   Insn 83(l0): point = 126
   Insn 122(l0): point = 129
   Insn 36(l0): point = 131
   Insn 35(l0): point = 133
   Insn 34(l0): point = 135
   Insn 27(l0): point = 138
   Insn 26(l0): point = 140
   Insn 25(l0): point = 142
   Insn 24(l0): point = 144
   Insn 23(l0): point = 146
   Insn 22(l0): point = 148
   Insn 21(l0): point = 150
   Insn 20(l0): point = 152
   Insn 19(l0): point = 154
   Insn 31(l0): point = 157
   Insn 30(l0): point = 159
   Insn 29(l0): point = 161
   Insn 120(l0): point = 164
   Insn 10(l0): point = 166
   Insn 9(l0): point = 168
   Insn 8(l0): point = 170
   Insn 7(l0): point = 172
   Insn 6(l0): point = 174
   Insn 5(l0): point = 176
 a0(r126): [3..6]
 a1(r125): [23..24]
 a2(r148): [25..26]
 a3(r146): [30..31]
 a4(r147): [32..33]
 a5(r144): [36..37]
 a6(r145): [38..39]
 a7(r124): [67..68]
 a8(r143): [69..70]
 a9(r123): [123..124]
 a10(r142): [125..126]
 a11(r122): [110..111]
 a12(r141): [112..113]
 a13(r121): [95..96]
 a14(r120): [97..98]
 a15(r140): [99..100]
 a16(r119): [80..81]
 a17(r118): [82..83]
 a18(r139): [84..85]
 a19(r138): [43..44]
 a20(r117): [45..46]
 a21(r116): [47..48]
 a22(r137): [49..50]
 a23(r135): [53..54]
 a24(r136): [55..56]
 a25(r133): [132..133]
 a26(r134): [134..135]
 a27(r115): [141..142]
 a28(r132): [143..144]
 a29(r114): [151..152]
 a30(r131): [153..154]
 a31(r113): [14..15]
 a32(r130): [16..17]
 a33(r129): [167..168]
 a34(r128): [171..172]
 a35(r127): [175..176]
Compressing live ranges: from 179 to 72 - 40%
Ranges after the compression:
 a0(r126): [0..1]
 a1(r125): [6..7]
 a2(r148): [8..9]
 a3(r146): [10..11]
 a4(r147): [12..13]
 a5(r144): [14..15]
 a6(r145): [16..17]
 a7(r124): [30..31]
 a8(r143): [32..33]
 a9(r123): [50..51]
 a10(r142): [52..53]
 a11(r122): [46..47]
 a12(r141): [48..49]
 a13(r121): [40..41]
 a14(r120): [42..43]
 a15(r140): [44..45]
 a16(r119): [34..35]
 a17(r118): [36..37]
 a18(r139): [38..39]
 a19(r138): [18..19]
 a20(r117): [20..21]
 a21(r116): [22..23]
 a22(r137): [24..25]
 a23(r135): [26..27]
 a24(r136): [28..29]
 a25(r133): [54..55]
 a26(r134): [56..57]
 a27(r115): [58..59]
 a28(r132): [60..61]
 a29(r114): [62..63]
 a30(r131): [64..65]
 a31(r113): [2..3]
 a32(r130): [4..5]
 a33(r129): [66..67]
 a34(r128): [68..69]
 a35(r127): [70..71]
  regions=1, blocks=17, points=72
    allocnos=36 (big 0), copies=0, conflicts=0, ranges=36
Disposition:
   31:r113 l0     3   29:r114 l0     3   27:r115 l0     3   21:r116 l0     3
   20:r117 l0     3   17:r118 l0     3   16:r119 l0     3   14:r120 l0     3
   13:r121 l0     3   11:r122 l0     3    9:r123 l0     3    7:r124 l0     3
    1:r125 l0     3    0:r126 l0     3   35:r127 l0     3   34:r128 l0     3
   33:r129 l0     3   32:r130 l0     3   30:r131 l0     3   28:r132 l0     3
   25:r133 l0     3   26:r134 l0     3   23:r135 l0     3   24:r136 l0     3
   22:r137 l0     3   19:r138 l0     3   18:r139 l0     3   15:r140 l0     3
   12:r141 l0     3   10:r142 l0     3    8:r143 l0     3    5:r144 l0     3
    6:r145 l0     3    3:r146 l0     3    4:r147 l0     3    2:r148 l0     3
+++Costs: overall 16000, reg 16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


ksprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,9u} r1={15d,7u} r2={8d} r3={8d} r11={1d,16u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,44u} r103={1d,17u} r104={7d} r105={7d} r106={7d} r113={1d,1u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} r124={1d,1u} r125={1d,1u} r126={1d,1u} r127={1d,1u} r128={1d,1u} r129={1d,1u} r130={1d,1u} r131={1d,1u} r132={1d,1u} r133={1d,1u} r134={1d,1u} r135={1d,1u} r136={1d,1u} r137={1d,1u} r138={1d,2u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} 
;;    total ref usage 900{744d,156u,0e} in 82{75 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127 128 129
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 103 afp)
                (const_int 4 [0x4])) [2 fmt+0 S4 A64])) "uart.c":288:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])
        (reg/f:SI 127)) "uart.c":288:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 127)
        (nil)))
(insn 7 6 8 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 103 afp)
            (const_int 8 [0x8]))) "uart.c":289:6 7 {*arm_addsi3}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])
        (reg:SI 128)) "uart.c":289:6 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 128)
        (nil)))
(insn 9 8 10 2 (set (reg/f:SI 129)
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":291:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 120 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg/f:SI 129)) "uart.c":291:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 129)
        (nil)))
(jump_insn 120 10 121 2 (set (pc)
        (label_ref 105)) "uart.c":293:8 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 121 120 109)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 130
(code_label 109 121 13 3 77 (nil) [1 uses])
(note 13 109 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":294:9 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 130) [0 *cp_15+0 S1 A8]))) "uart.c":294:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 130)
        (nil)))
(insn 16 15 17 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "uart.c":294:8 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 113 [ _1 ])
        (nil)))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "uart.c":294:8 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 39)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 131 132
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":295:7 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_15+0 S1 A8]))) "uart.c":295:7 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 131)
        (nil)))
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "uart.c":295:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":295:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":295:7 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 24 23 25 4 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":296:11 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 132) [0 *cp_15+0 S1 A8]))) "uart.c":296:11 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 132)
        (nil)))
(insn 26 25 27 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "uart.c":296:10 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _3 ])
        (nil)))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "uart.c":296:10 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":297:2 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":297:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 31 30 32 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":297:2 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 133 134
(code_label 32 31 33 6 69 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":298:9 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 6 (set (reg:SI 133)
        (plus:SI (reg:SI 134)
            (const_int 1 [0x1]))) "uart.c":298:9 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 134)
        (nil)))
(insn 36 35 122 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])
        (reg:SI 133)) "uart.c":298:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 133)
        (nil)))
(jump_insn 122 36 123 6 (set (pc)
        (label_ref 105)) "uart.c":299:7 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 123 122 39)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 135 136 137 138
(code_label 39 123 40 7 68 (nil) [1 uses])
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (reg:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":301:7 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 7 (set (reg:SI 135)
        (plus:SI (reg:SI 136)
            (const_int 1 [0x1]))) "uart.c":301:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 136)
        (nil)))
(insn 43 42 44 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])
        (reg:SI 135)) "uart.c":301:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 135)
        (nil)))
(insn 44 43 45 7 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":302:12 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 7 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 137) [0 *cp_23+0 S1 A8]))) "uart.c":302:12 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 137)
        (nil)))
(insn 46 45 47 7 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "uart.c":302:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ _4 ])
        (nil)))
(insn 47 46 48 7 (set (reg:SI 138)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "uart.c":302:5 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 117 [ _5 ])
        (nil)))
(jump_insn 48 47 49 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 138)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 138)
                                (const_int 4 [0x4]))
                            (label_ref:SI 49)) [0  S4 A32])
                    (label_ref:SI 97)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 49))
        ]) "uart.c":302:5 308 {*arm_casesi_internal}
     (expr_list:REG_DEAD (reg:SI 138)
        (expr_list:REG_UNUSED (reg:CC 100 cc)
            (insn_list:REG_LABEL_TARGET 97 (nil))))
 -> 49)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 49 48 50 72 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 50 49 51 (addr_vec:SI [
            (label_ref:SI 52)
            (label_ref:SI 72)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 62)
            (label_ref:SI 97)
            (label_ref:SI 81)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 90)
        ]))
(barrier 51 50 52)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 139
(code_label 52 51 53 8 76 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":303:31 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 8 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 139) [3 *ip_14+0 S4 A32])) "uart.c":303:31 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))
(insn 56 55 57 8 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "uart.c":303:15 90 {*arm_andsi3_insn}
     (expr_list:REG_DEAD (reg:SI 118 [ _6 ])
        (nil)))
(insn 57 56 58 8 (set (reg:SI 1 r1)
        (reg:SI 119 [ _7 ])) "uart.c":303:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 119 [ _7 ])
        (nil)))
(insn 58 57 59 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":303:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 59 58 124 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":303:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 124 59 125 8 (set (pc)
        (label_ref 97)) "uart.c":303:42 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 125 124 62)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 140
(code_label 62 125 63 9 74 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":304:35 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 140) [3 *ip_14+0 S4 A32])) "uart.c":304:35 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 140)
        (nil)))
(insn 66 65 67 9 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "uart.c":304:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 120 [ _8 ])
        (nil)))
(insn 67 66 68 9 (set (reg:SI 1 r1)
        (reg/f:SI 121 [ _9 ])) "uart.c":304:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 121 [ _9 ])
        (nil)))
(insn 68 67 69 9 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":304:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 69 68 126 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":304:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 126 69 127 9 (set (pc)
        (label_ref 97)) "uart.c":304:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 127 126 72)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 141
(code_label 72 127 73 10 75 (nil) [1 uses])
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 10 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 141) [3 *ip_14+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 141)
        (nil)))
(insn 76 75 77 10 (set (reg:SI 1 r1)
        (reg:SI 122 [ _10 ])) "uart.c":305:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 122 [ _10 ])
        (nil)))
(insn 77 76 78 10 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 128 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprinti") [flags 0x3]  <function_decl 0x7f19cf07d700 sprinti>) [0 sprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":305:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 128 78 129 10 (set (pc)
        (label_ref 97)) "uart.c":305:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 129 128 81)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 142
(code_label 81 129 82 11 73 (nil) [1 uses])
(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 142) [3 *ip_14+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 142)
        (nil)))
(insn 85 84 86 11 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "uart.c":306:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 123 [ _11 ])
        (nil)))
(insn 86 85 87 11 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 87 86 130 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":306:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 130 87 131 11 (set (pc)
        (label_ref 97)) "uart.c":306:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 131 130 90)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 143
(code_label 90 131 91 12 71 (nil) [1 uses])
(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 12 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 12 (set (reg:SI 124 [ _12 ])
        (mem:SI (reg/f:SI 143) [3 *ip_14+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 143)
        (nil)))
(insn 94 93 95 12 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "uart.c":307:15 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 124 [ _12 ])
        (nil)))
(insn 95 94 96 12 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 96 95 132 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintx") [flags 0x3]  <function_decl 0x7f19cf07d100 sprintx>) [0 sprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":307:15 291 {*call_value_symbol}
     (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 132 96 133 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 97 16 (const_int 0 [0]) "uart.c":307:34 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 144 145 146 147
(code_label 97 133 98 13 70 (nil) [22 uses])
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 13 (set (reg:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":309:7 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 13 (set (reg:SI 144)
        (plus:SI (reg:SI 145)
            (const_int 1 [0x1]))) "uart.c":309:7 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 145)
        (nil)))
(insn 101 100 102 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])
        (reg:SI 144)) "uart.c":309:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 144)
        (nil)))
(insn 102 101 103 13 (set (reg:SI 147)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])) "uart.c":309:13 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 13 (set (reg:SI 146)
        (plus:SI (reg:SI 147)
            (const_int 4 [0x4]))) "uart.c":309:13 7 {*arm_addsi3}
     (expr_list:REG_DEAD (reg:SI 147)
        (nil)))
(insn 104 103 105 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [9 ip+0 S4 A32])
        (reg:SI 146)) "uart.c":309:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 146)
        (nil)))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 125 148
(code_label 105 104 106 14 67 (nil) [2 uses])
(note 106 105 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 14 (set (reg/f:SI 148)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 cp+0 S4 A64])) "uart.c":293:9 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 110 14 (set (reg:SI 125 [ _13 ])
        (zero_extend:SI (mem:QI (reg/f:SI 148) [0 *cp_15+0 S1 A8]))) "uart.c":293:9 175 {*arm_zero_extendqisi2}
     (expr_list:REG_DEAD (reg/f:SI 148)
        (nil)))
(insn 110 108 111 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "uart.c":293:9 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 125 [ _13 ])
        (nil)))
(jump_insn 111 110 112 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "uart.c":293:9 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 109)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 126
(note 112 111 115 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 115 112 116 15 (clobber (reg/i:SI 0 r0)) "uart.c":311:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 116 115 119 15 (clobber (reg:SI 126 [ <retval> ])) "uart.c":311:1 -1
     (nil))
(insn 119 116 114 15 (const_int 0 [0]) "uart.c":311:1 311 {nop}
     (nil))
(insn 114 119 117 15 (set (reg/i:SI 0 r0)
        (reg:SI 126 [ <retval> ])) "uart.c":311:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 126 [ <retval> ])
        (nil)))
(insn 117 114 0 15 (use (reg/i:SI 0 r0)) "uart.c":311:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function sgetline (sgetline, funcdef_no=15, decl_uid=4607, cgraph_uid=16, symbol_order=17)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:10000
  a1(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a2(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a3(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a4(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a5(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a6(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a7(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a8(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a9(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r116,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:15000

   Insn 36(l0): point = 0
   Insn 33(l0): point = 2
   Insn 38(l0): point = 4
   Insn 35(l0): point = 6
   Insn 34(l0): point = 8
   Insn 31(l0): point = 10
   Insn 30(l0): point = 12
   Insn 29(l0): point = 14
   Insn 28(l0): point = 16
   Insn 15(l0): point = 19
   Insn 14(l0): point = 21
   Insn 13(l0): point = 23
   Insn 12(l0): point = 25
   Insn 11(l0): point = 27
   Insn 26(l0): point = 30
   Insn 25(l0): point = 32
   Insn 24(l0): point = 34
   Insn 22(l0): point = 36
   Insn 21(l0): point = 38
   Insn 20(l0): point = 40
   Insn 19(l0): point = 42
   Insn 18(l0): point = 44
   Insn 39(l0): point = 47
   Insn 7(l0): point = 49
   Insn 6(l0): point = 51
   Insn 2(l0): point = 53
 a0(r115): [3..6]
 a1(r121): [11..16]
 a2(r123): [11..12]
 a3(r122): [13..14]
 a4(r120): [33..34]
 a5(r119): [37..38]
 a6(r114): [39..40]
 a7(r113): [20..27]
 a8(r118): [20..21]
 a9(r117): [24..25]
 a10(r116): [50..51]
Compressing live ranges: from 56 to 18 - 32%
Ranges after the compression:
 a0(r115): [0..1]
 a1(r121): [2..5]
 a2(r123): [2..3]
 a3(r122): [4..5]
 a4(r120): [10..11]
 a5(r119): [12..13]
 a6(r114): [14..15]
 a7(r113): [6..9]
 a8(r118): [6..7]
 a9(r117): [8..9]
 a10(r116): [16..17]
  regions=1, blocks=6, points=18
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    7:r113 l0     3    6:r114 l0     3    0:r115 l0     3   10:r116 l0     3
    9:r117 l0     2    8:r118 l0     2    5:r119 l0     3    4:r120 l0     3
    1:r121 l0     3    3:r122 l0     2    2:r123 l0     2
+++Costs: overall 4000, reg 4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


sgetline

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,5u} r1={2d} r2={2d} r3={2d} r11={1d,5u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,14u} r103={1d,4u} r104={1d} r105={1d} r106={1d} r113={1d,2u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} 
;;    total ref usage 168{121d,47u,0e} in 26{25 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 116
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "uart.c":314:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ s ])
        (nil)))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":316:9 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 39 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])
        (reg/f:SI 116)) "uart.c":316:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg/f:SI 116)
        (nil)))
(jump_insn 39 7 40 2 (set (pc)
        (label_ref 16)) "uart.c":318:9 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 40 39 23)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 117 118
(code_label 23 40 10 3 82 (nil) [1 uses])
(note 10 23 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 113 [ s.6_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":319:7 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 117)
        (plus:SI (reg/f:SI 113 [ s.6_1 ])
            (const_int 1 [0x1]))) "uart.c":319:7 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 117)) "uart.c":319:7 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 14 13 15 3 (set (reg:QI 118)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "uart.c":319:10 263 {*arm_movqi_insn}
     (nil))
(insn 15 14 16 3 (set (mem:QI (reg/f:SI 113 [ s.6_1 ]) [0 *s.6_1+0 S1 A8])
        (reg:QI 118)) "uart.c":319:10 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 118)
        (expr_list:REG_DEAD (reg/f:SI 113 [ s.6_1 ])
            (nil))))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 119 120
(code_label 16 15 17 4 81 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [6 up+0 S4 A32])) "uart.c":318:13 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 20 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":318:13 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 20 19 21 4 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "uart.c":318:13 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 21 20 22 4 (set (reg:QI 119)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "uart.c":318:12 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 22 21 24 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 119)) "uart.c":318:12 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 119)
        (nil)))
(insn 24 22 25 4 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "uart.c":318:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "uart.c":318:24 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "uart.c":318:24 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 23)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115 121 122 123
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":321:5 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 122)
        (const_int 0 [0])) "uart.c":321:5 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 5 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "uart.c":321:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 31 30 34 5 (set (mem:QI (reg/f:SI 121) [0 *s_3+0 S1 A8])
        (reg:QI 123)) "uart.c":321:5 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 123)
        (expr_list:REG_DEAD (reg/f:SI 121)
            (nil))))
(insn 34 31 35 5 (clobber (reg/i:SI 0 r0)) "uart.c":322:1 -1
     (expr_list:REG_UNUSED (reg/i:SI 0 r0)
        (nil)))
(insn 35 34 38 5 (clobber (reg:SI 115 [ <retval> ])) "uart.c":322:1 -1
     (nil))
(insn 38 35 33 5 (const_int 0 [0]) "uart.c":322:1 311 {nop}
     (nil))
(insn 33 38 36 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "uart.c":322:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ <retval> ])
        (nil)))
(insn 36 33 0 5 (use (reg/i:SI 0 r0)) "uart.c":322:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]


;; Function usgets (usgets, funcdef_no=16, decl_uid=4616, cgraph_uid=17, symbol_order=18)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 6 n_edges 6 count 6 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }
Building IRA IR
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 32.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r123: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a3 (r123,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a4 (r122,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r121,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r120,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r119,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a9 (r118,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a10 (r117,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a0 (r116,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r115,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r114,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a8 (r113,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r116,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a1(r115,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a2(r121,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a3(r123,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a4(r122,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:6000
  a5(r120,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a6(r119,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:11000
  a7(r114,l0) costs: LO_REGS:2000 HI_REGS:2000 CALLER_SAVE_REGS:2000 EVEN_REG:2000 GENERAL_REGS:2000 MEM:11000
  a8(r113,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:30000
  a9(r118,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000
  a10(r117,l0) costs: LO_REGS:0 HI_REGS:0 CALLER_SAVE_REGS:0 EVEN_REG:0 GENERAL_REGS:0 MEM:20000

   Insn 41(l0): point = 0
   Insn 40(l0): point = 2
   Insn 36(l0): point = 4
   Insn 33(l0): point = 6
   Insn 32(l0): point = 8
   Insn 31(l0): point = 10
   Insn 30(l0): point = 12
   Insn 29(l0): point = 14
   Insn 28(l0): point = 16
   Insn 27(l0): point = 18
   Insn 14(l0): point = 21
   Insn 13(l0): point = 23
   Insn 12(l0): point = 25
   Insn 11(l0): point = 27
   Insn 10(l0): point = 29
   Insn 25(l0): point = 32
   Insn 24(l0): point = 34
   Insn 23(l0): point = 36
   Insn 21(l0): point = 38
   Insn 20(l0): point = 40
   Insn 19(l0): point = 42
   Insn 18(l0): point = 44
   Insn 17(l0): point = 46
   Insn 43(l0): point = 49
   Insn 3(l0): point = 51
   Insn 2(l0): point = 53
 a0(r116): [3..4]
 a1(r115): [5..6]
 a2(r121): [13..18]
 a3(r123): [13..14]
 a4(r122): [15..16]
 a5(r120): [35..36]
 a6(r119): [39..40]
 a7(r114): [41..42]
 a8(r113): [22..29]
 a9(r118): [22..23]
 a10(r117): [26..27]
Compressing live ranges: from 56 to 18 - 32%
Ranges after the compression:
 a0(r116): [0..1]
 a1(r115): [2..3]
 a2(r121): [4..7]
 a3(r123): [4..5]
 a4(r122): [6..7]
 a5(r120): [12..13]
 a6(r119): [14..15]
 a7(r114): [16..17]
 a8(r113): [8..11]
 a9(r118): [8..9]
 a10(r117): [10..11]
  regions=1, blocks=6, points=18
    allocnos=11 (big 0), copies=0, conflicts=0, ranges=11
Disposition:
    8:r113 l0     3    7:r114 l0     3    1:r115 l0     3    0:r116 l0     3
   10:r117 l0     2    9:r118 l0     2    6:r119 l0     3    5:r120 l0     3
    2:r121 l0     3    4:r122 l0     2    3:r123 l0     2
+++Costs: overall 6000, reg 6000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


usgets

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	 13 [sp] 102 [sfp] 103 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp] 103 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={6d,7u} r1={3d,1u} r2={3d} r3={3d} r11={1d,5u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,15u} r103={1d,4u} r104={2d} r105={2d} r106={2d} r113={1d,2u} r114={1d,1u} r115={1d,1u} r116={1d,1u} r117={1d,1u} r118={1d,1u} r119={1d,1u} r120={1d,1u} r121={1d,1u} r122={1d,1u} r123={1d,1u} 
;;    total ref usage 270{218d,52u,0e} in 26{24 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":325:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0 [ up ])
        (nil)))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [2 buf+0 S4 A32])
        (reg:SI 1 r1 [ buf ])) "uart.c":325:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 1 r1 [ buf ])
        (nil)))
(note 4 3 43 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 43 4 44 2 (set (pc)
        (label_ref 15)) "uart.c":328:8 284 {*arm_jump}
     (nil)
 -> 15)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 22)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 117 118
(code_label 22 44 9 3 87 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 113 [ buf.7_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [2 buf+0 S4 A32])) "uart.c":329:9 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 117)
        (plus:SI (reg/f:SI 113 [ buf.7_1 ])
            (const_int 1 [0x1]))) "uart.c":329:9 7 {*arm_addsi3}
     (nil))
(insn 12 11 13 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [2 buf+0 S4 A32])
        (reg:SI 117)) "uart.c":329:9 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 117)
        (nil)))
(insn 13 12 14 3 (set (reg:QI 118)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "uart.c":329:12 263 {*arm_movqi_insn}
     (nil))
(insn 14 13 15 3 (set (mem:QI (reg/f:SI 113 [ buf.7_1 ]) [0 *buf.7_1+0 S1 A8])
        (reg:QI 118)) "uart.c":329:12 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 118)
        (expr_list:REG_DEAD (reg/f:SI 113 [ buf.7_1 ])
            (nil))))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 119 120
(code_label 15 14 16 4 86 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [6 up+0 S4 A32])) "uart.c":328:12 253 {*arm_movsi_insn}
     (nil))
(call_insn 18 17 19 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":328:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 19 18 20 4 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "uart.c":328:12 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 20 19 21 4 (set (reg:QI 119)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "uart.c":328:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 114 [ _2 ])
        (nil)))
(insn 21 20 23 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 119)) "uart.c":328:11 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 119)
        (nil)))
(insn 23 21 24 4 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "uart.c":328:23 175 {*arm_zero_extendqisi2}
     (nil))
(insn 24 23 25 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "uart.c":328:23 268 {*arm_cmpsi_insn}
     (expr_list:REG_DEAD (reg:SI 120)
        (nil)))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "uart.c":328:23 273 {arm_cond_branch}
     (expr_list:REG_DEAD (reg:CC 100 cc)
        (nil))
 -> 22)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }u-1(102){ }u-1(103){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 121 122 123
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [2 buf+0 S4 A32])) "uart.c":331:8 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 5 (set (reg:SI 122)
        (const_int 0 [0])) "uart.c":331:8 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "uart.c":331:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:SI 122)
        (nil)))
(insn 30 29 31 5 (set (mem:QI (reg/f:SI 121) [0 *buf_3+0 S1 A8])
        (reg:QI 123)) "uart.c":331:8 263 {*arm_movqi_insn}
     (expr_list:REG_DEAD (reg:QI 123)
        (expr_list:REG_DEAD (reg/f:SI 121)
            (nil))))
(insn 31 30 32 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [2 buf+0 S4 A32])) "uart.c":332:10 253 {*arm_movsi_insn}
     (nil))
(call_insn 32 31 33 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrlen") [flags 0x41]  <function_decl 0x7f19cf085100 kstrlen>) [0 kstrlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":332:10 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 33 32 36 5 (set (reg:SI 115 [ _12 ])
        (reg:SI 0 r0)) "uart.c":332:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
(insn 36 33 40 5 (set (reg:SI 116 [ <retval> ])
        (reg:SI 115 [ _12 ])) "uart.c":332:10 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 115 [ _12 ])
        (nil)))
(insn 40 36 41 5 (set (reg/i:SI 0 r0)
        (reg:SI 116 [ <retval> ])) "uart.c":333:1 253 {*arm_movsi_insn}
     (expr_list:REG_DEAD (reg:SI 116 [ <retval> ])
        (nil)))
(insn 41 40 0 5 (use (reg/i:SI 0 r0)) "uart.c":333:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

