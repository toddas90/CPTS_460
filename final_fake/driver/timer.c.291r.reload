
;; Function timer0_handler (timer0_handler, funcdef_no=0, decl_uid=4520, cgraph_uid=1, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=44, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=40, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 31:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 34:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 43:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 47:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 54:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 62:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 72:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 73:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 74:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 77:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 79:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 84:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 89:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 90:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 92:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 93:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 94:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 95:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 99:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 102:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 104:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 106:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 109:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 110:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 111:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 124
	 Choosing alt 1 in insn 124:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=355 from oldreg=240, assigning class GENERAL_REGS to r355
  124: {r355:SI=trunc(sign_extend(r355:SI)*sign_extend(r139:SI) 0>>0x20);clobber r348:SI;}
      REG_DEAD r241:SI
      REG_UNUSED r348:SI
    Inserting insn reload before:
  470: r355:SI=r241:SI
    Inserting insn reload after:
  471: r240:SI=r355:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 125:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 126:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 127:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 129:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 131:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 133:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 135:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 136:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 137:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 138:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 139:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 142:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 143
	 Choosing alt 1 in insn 143:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=356 from oldreg=250, assigning class GENERAL_REGS to r356
  143: {r356:SI=trunc(sign_extend(r356:SI)*sign_extend(r143:SI) 0>>0x20);clobber r349:SI;}
      REG_DEAD r251:SI
      REG_UNUSED r349:SI
    Inserting insn reload before:
  472: r356:SI=r251:SI
    Inserting insn reload after:
  473: r250:SI=r356:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 144:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 145:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 146:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 147:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 148:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 149:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 150:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 151:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 152:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 153:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 154:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 156
	 Choosing alt 1 in insn 156:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=357 from oldreg=258, assigning class GENERAL_REGS to r357
  156: {r357:SI=trunc(sign_extend(r357:SI)*sign_extend(r147:SI) 0>>0x20);clobber r350:SI;}
      REG_DEAD r259:SI
      REG_UNUSED r350:SI
    Inserting insn reload before:
  474: r357:SI=r259:SI
    Inserting insn reload after:
  475: r258:SI=r357:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 157:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 158:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 159:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 161:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 162:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 163:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 165:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 166:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 167:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 168:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 169:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 170:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 171:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 172:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 174:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 175
	 Choosing alt 1 in insn 175:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=358 from oldreg=268, assigning class GENERAL_REGS to r358
  175: {r358:SI=trunc(sign_extend(r358:SI)*sign_extend(r151:SI) 0>>0x20);clobber r351:SI;}
      REG_DEAD r269:SI
      REG_UNUSED r351:SI
    Inserting insn reload before:
  476: r358:SI=r269:SI
    Inserting insn reload after:
  477: r268:SI=r358:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 176:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 177:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 178:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 179:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 180:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 181:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 182:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 183:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 184:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 185:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 186:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 187:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 188
	 Choosing alt 1 in insn 188:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=359 from oldreg=276, assigning class GENERAL_REGS to r359
  188: {r359:SI=trunc(sign_extend(r359:SI)*sign_extend(r155:SI) 0>>0x20);clobber r352:SI;}
      REG_DEAD r277:SI
      REG_UNUSED r352:SI
    Inserting insn reload before:
  478: r359:SI=r277:SI
    Inserting insn reload after:
  479: r276:SI=r359:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 190:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 191:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 193:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 194:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 195:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 197:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 198:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 199:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 200:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 201:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 202:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 203:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 204:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 205:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 206:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 207
	 Choosing alt 1 in insn 207:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=360 from oldreg=286, assigning class GENERAL_REGS to r360
  207: {r360:SI=trunc(sign_extend(r360:SI)*sign_extend(r159:SI) 0>>0x20);clobber r353:SI;}
      REG_DEAD r287:SI
      REG_UNUSED r353:SI
    Inserting insn reload before:
  480: r360:SI=r287:SI
    Inserting insn reload after:
  481: r286:SI=r360:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 208:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 209:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 210:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 211:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 212:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 213:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 214:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 215:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 216:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 217:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 218:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 222:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 223:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 224:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 225:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 227:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 229:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 232:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 233:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 234:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 240:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 241:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 244:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 245:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 249:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 251:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 252:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 253:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 254:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 255:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 256:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 257:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 259:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 260:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 261:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 262:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 263:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 264:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 267:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 268:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 269:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 272:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 273:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 274:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 275:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 276:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 277:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 278:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 280:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 282:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 283:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 286:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 289:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 291:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 292:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 293:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 294:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 295:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 296:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 297:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 298:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 299:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 300:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 301:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 303:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 304:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 306:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 310:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 311:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 312:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 318:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 319:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 322:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 323:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 324:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 328:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 329:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 330:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 334:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 335:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 336:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 337:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 338:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 339:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 340:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 343:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 346:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 347:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 348:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 350:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 352:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 353:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 354:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 355:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 356:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 357:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 358:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 359:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 360:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 361:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 362:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 363:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 364:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 365:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 367:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 368:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 369:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 379:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 380:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 384:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 385:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 386:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 387:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 390:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 391:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 392:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 393:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 394:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 398:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 399:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 401:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 402:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 403:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 404:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 405:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 406:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 407:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 410:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 413:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 414:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 415:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 418:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 419:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 420:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 421:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 424:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 425:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 426:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 427:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 428:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 429:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 432:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 434:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 435:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 436:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8 9
EBB 10
EBB 11 12
EBB 13
EBB 14 15
EBB 16 17 18 19
EBB 20
EBB 21 22 23
EBB 24 25
EBB 26 34
EBB 35
EBB 27 28
EBB 29 30 31 32
EBB 36
EBB 33

********** Pseudo live ranges #1: **********

  BB 33
  BB 36
   Insn 462: point = 0, n_alt = -1
  BB 32
   Insn 443: point = 0, n_alt = -1
   Insn 436: point = 0, n_alt = 5
   Insn 435: point = 1, n_alt = 1
   Insn 434: point = 2, n_alt = 4
   Insn 433: point = 3, n_alt = -1
   Insn 432: point = 3, n_alt = 4
   Insn 431: point = 3, n_alt = -2
   Insn 430: point = 4, n_alt = -2
   Insn 429: point = 5, n_alt = 4
   Insn 428: point = 7, n_alt = 4
   Insn 427: point = 9, n_alt = 4
   Insn 426: point = 10, n_alt = 4
   Insn 425: point = 12, n_alt = 4
   Insn 424: point = 14, n_alt = 4
  BB 31
   Insn 422: point = 15, n_alt = -1
   Insn 421: point = 15, n_alt = 3
   Insn 420: point = 16, n_alt = 4
   Insn 419: point = 18, n_alt = 4
   Insn 418: point = 20, n_alt = 4
  BB 30
   Insn 416: point = 21, n_alt = -1
   Insn 415: point = 21, n_alt = 3
   Insn 414: point = 22, n_alt = 0
   Insn 413: point = 24, n_alt = 4
  BB 29
   Insn 411: point = 25, n_alt = -1
   Insn 410: point = 25, n_alt = 3
   Insn 407: point = 26, n_alt = 4
   Insn 406: point = 28, n_alt = 4
   Insn 405: point = 30, n_alt = 4
   Insn 404: point = 31, n_alt = 5
   Insn 403: point = 32, n_alt = 4
   Insn 402: point = 33, n_alt = 4
   Insn 401: point = 35, n_alt = 4
   Insn 400: point = 36, n_alt = -1
   Insn 399: point = 36, n_alt = 1
   Insn 398: point = 36, n_alt = 5
   Insn 397: point = 36, n_alt = -1
  BB 28
   Insn 394: point = 36, n_alt = 5
   Insn 393: point = 37, n_alt = 10
   Insn 392: point = 39, n_alt = 4
   Insn 391: point = 40, n_alt = 4
   Insn 390: point = 42, n_alt = 4
  BB 27
   Insn 388: point = 43, n_alt = -1
   Insn 387: point = 43, n_alt = 3
   Insn 386: point = 44, n_alt = 4
   Insn 385: point = 46, n_alt = 4
   Insn 384: point = 48, n_alt = 4
  BB 34
   Insn 453: point = 49, n_alt = -1
  BB 35
   Insn 457: point = 49, n_alt = -1
  BB 24
   Insn 344: point = 49, n_alt = -1
   Insn 343: point = 49, n_alt = 3
   Insn 340: point = 50, n_alt = 4
   Insn 339: point = 52, n_alt = 4
   Insn 338: point = 53, n_alt = 5
   Insn 337: point = 54, n_alt = 4
   Insn 336: point = 55, n_alt = 10
   Insn 335: point = 57, n_alt = 4
   Insn 334: point = 59, n_alt = 4
  BB 26
   Insn 381: point = 60, n_alt = -1
   Insn 380: point = 60, n_alt = 3
   Insn 379: point = 61, n_alt = 4
  BB 23
   Insn 450: point = 62, n_alt = -1
   Insn 330: point = 62, n_alt = 5
   Insn 329: point = 63, n_alt = 4
   Insn 328: point = 65, n_alt = 4
   Insn 327: point = 66, n_alt = -1
  BB 25
   Insn 369: point = 66, n_alt = 5
   Insn 368: point = 67, n_alt = 4
   Insn 367: point = 69, n_alt = 4
   Insn 366: point = 70, n_alt = -1
   Insn 365: point = 70, n_alt = 4
   Insn 364: point = 70, n_alt = 5
   Insn 363: point = 71, n_alt = 4
   Insn 362: point = 72, n_alt = 4
   Insn 361: point = 74, n_alt = 4
   Insn 360: point = 75, n_alt = 5
   Insn 359: point = 76, n_alt = 0
   Insn 358: point = 78, n_alt = 4
   Insn 357: point = 80, n_alt = 4
   Insn 356: point = 82, n_alt = 4
   Insn 355: point = 83, n_alt = 4
   Insn 354: point = 85, n_alt = 4
   Insn 353: point = 87, n_alt = 4
   Insn 352: point = 89, n_alt = 4
   Insn 351: point = 90, n_alt = -1
   Insn 350: point = 90, n_alt = 4
   Insn 349: point = 90, n_alt = -2
   Insn 348: point = 91, n_alt = 4
   Insn 347: point = 93, n_alt = 4
   Insn 346: point = 95, n_alt = 4
  BB 22
   Insn 325: point = 96, n_alt = -1
   Insn 324: point = 96, n_alt = 3
   Insn 323: point = 97, n_alt = 4
   Insn 322: point = 99, n_alt = 4
  BB 21
   Insn 320: point = 100, n_alt = -1
   Insn 319: point = 100, n_alt = 3
   Insn 318: point = 101, n_alt = 4
  BB 15
   Insn 448: point = 102, n_alt = -1
   Insn 245: point = 102, n_alt = 5
   Insn 244: point = 103, n_alt = 1
  BB 14
   Insn 242: point = 104, n_alt = -1
   Insn 241: point = 104, n_alt = 3
   Insn 240: point = 105, n_alt = 4
  BB 12
   Insn 446: point = 106, n_alt = -1
   Insn 218: point = 106, n_alt = 5
   Insn 217: point = 107, n_alt = 1
   Insn 216: point = 108, n_alt = 8
   Insn 215: point = 109, n_alt = 1
   Insn 214: point = 111, n_alt = 4
   Insn 213: point = 112, n_alt = 0
   Insn 212: point = 114, n_alt = 4
   Insn 211: point = 116, n_alt = 0
   Insn 210: point = 118, n_alt = 6
   Insn 209: point = 120, n_alt = 2
   Insn 208: point = 122, n_alt = 2
   Insn 481: point = 124, n_alt = -2
	Hard reg 2 is preferable by r360 with profit 1000
   Insn 207: point = 126, n_alt = 1
   Insn 480: point = 128, n_alt = -2
	Hard reg 2 is preferable by r360 with profit 2000
   Insn 206: point = 130, n_alt = 4
   Insn 205: point = 131, n_alt = 4
   Insn 204: point = 133, n_alt = 4
   Insn 203: point = 134, n_alt = 8
   Insn 202: point = 135, n_alt = 1
   Insn 201: point = 137, n_alt = 4
   Insn 200: point = 138, n_alt = 0
   Insn 199: point = 140, n_alt = 4
   Insn 198: point = 142, n_alt = 0
   Insn 197: point = 144, n_alt = 6
   Insn 196: point = 146, n_alt = -2
   Insn 195: point = 148, n_alt = 2
   Insn 194: point = 150, n_alt = 4
   Insn 193: point = 152, n_alt = 2
   Insn 192: point = 153, n_alt = -2
   Insn 191: point = 154, n_alt = 6
   Insn 190: point = 156, n_alt = 2
   Insn 189: point = 157, n_alt = 2
   Insn 479: point = 159, n_alt = -2
	Hard reg 3 is preferable by r359 with profit 1000
   Insn 188: point = 161, n_alt = 1
   Insn 478: point = 163, n_alt = -2
	Hard reg 3 is preferable by r359 with profit 2000
   Insn 187: point = 165, n_alt = 4
   Insn 186: point = 166, n_alt = 4
   Insn 185: point = 168, n_alt = 4
   Insn 184: point = 169, n_alt = 8
   Insn 183: point = 170, n_alt = 1
   Insn 182: point = 172, n_alt = 4
   Insn 181: point = 173, n_alt = 0
   Insn 180: point = 175, n_alt = 4
   Insn 179: point = 177, n_alt = 0
   Insn 178: point = 179, n_alt = 6
   Insn 177: point = 181, n_alt = 2
   Insn 176: point = 183, n_alt = 2
   Insn 477: point = 185, n_alt = -2
	Hard reg 2 is preferable by r358 with profit 1000
   Insn 175: point = 187, n_alt = 1
   Insn 476: point = 189, n_alt = -2
	Hard reg 2 is preferable by r358 with profit 2000
   Insn 174: point = 191, n_alt = 4
   Insn 173: point = 192, n_alt = 4
   Insn 172: point = 194, n_alt = 4
   Insn 171: point = 195, n_alt = 8
   Insn 170: point = 196, n_alt = 1
   Insn 169: point = 198, n_alt = 4
   Insn 168: point = 199, n_alt = 0
   Insn 167: point = 201, n_alt = 4
   Insn 166: point = 203, n_alt = 0
   Insn 165: point = 205, n_alt = 6
   Insn 164: point = 207, n_alt = -2
   Insn 163: point = 209, n_alt = 2
   Insn 162: point = 211, n_alt = 4
   Insn 161: point = 213, n_alt = 2
   Insn 160: point = 214, n_alt = -2
   Insn 159: point = 215, n_alt = 6
   Insn 158: point = 217, n_alt = 2
   Insn 157: point = 218, n_alt = 2
   Insn 475: point = 220, n_alt = -2
	Hard reg 3 is preferable by r357 with profit 1000
   Insn 156: point = 222, n_alt = 1
   Insn 474: point = 224, n_alt = -2
	Hard reg 3 is preferable by r357 with profit 2000
   Insn 155: point = 226, n_alt = 4
   Insn 154: point = 227, n_alt = 4
   Insn 153: point = 229, n_alt = 4
   Insn 152: point = 230, n_alt = 8
   Insn 151: point = 231, n_alt = 1
   Insn 150: point = 233, n_alt = 4
   Insn 149: point = 234, n_alt = 0
   Insn 148: point = 236, n_alt = 4
   Insn 147: point = 238, n_alt = 0
   Insn 146: point = 240, n_alt = 6
   Insn 145: point = 242, n_alt = 2
   Insn 144: point = 244, n_alt = 2
   Insn 473: point = 246, n_alt = -2
	Hard reg 2 is preferable by r356 with profit 1000
   Insn 143: point = 248, n_alt = 1
   Insn 472: point = 250, n_alt = -2
	Hard reg 2 is preferable by r356 with profit 2000
   Insn 142: point = 252, n_alt = 4
   Insn 141: point = 253, n_alt = 4
   Insn 140: point = 255, n_alt = 4
   Insn 139: point = 256, n_alt = 8
   Insn 138: point = 257, n_alt = 1
   Insn 137: point = 259, n_alt = 4
   Insn 136: point = 260, n_alt = 0
   Insn 135: point = 262, n_alt = 4
   Insn 134: point = 264, n_alt = 0
   Insn 133: point = 266, n_alt = 6
   Insn 132: point = 268, n_alt = -2
   Insn 131: point = 270, n_alt = 2
   Insn 130: point = 272, n_alt = 4
   Insn 129: point = 274, n_alt = 2
   Insn 128: point = 275, n_alt = -2
   Insn 127: point = 276, n_alt = 6
   Insn 126: point = 278, n_alt = 2
   Insn 125: point = 279, n_alt = 2
   Insn 471: point = 281, n_alt = -2
	Hard reg 3 is preferable by r355 with profit 1000
   Insn 124: point = 283, n_alt = 1
   Insn 470: point = 285, n_alt = -2
	Hard reg 3 is preferable by r355 with profit 2000
   Insn 123: point = 287, n_alt = 4
   Insn 122: point = 288, n_alt = 4
   Insn 121: point = 290, n_alt = 4
  BB 11
   Insn 119: point = 291, n_alt = -1
   Insn 118: point = 291, n_alt = 3
   Insn 117: point = 292, n_alt = 4
  BB 9
   Insn 444: point = 293, n_alt = -1
   Insn 95: point = 293, n_alt = 5
   Insn 94: point = 294, n_alt = 1
   Insn 93: point = 295, n_alt = 5
   Insn 92: point = 296, n_alt = 1
   Insn 91: point = 297, n_alt = 4
   Insn 90: point = 298, n_alt = 5
   Insn 89: point = 299, n_alt = 4
   Insn 88: point = 300, n_alt = 4
   Insn 87: point = 302, n_alt = 4
  BB 10
   Insn 111: point = 303, n_alt = 5
   Insn 110: point = 304, n_alt = 4
   Insn 109: point = 306, n_alt = 4
   Insn 108: point = 307, n_alt = -1
   Insn 107: point = 307, n_alt = -2
   Insn 106: point = 308, n_alt = 1
   Insn 105: point = 308, n_alt = -2
   Insn 104: point = 309, n_alt = 4
   Insn 103: point = 311, n_alt = 4
   Insn 102: point = 312, n_alt = 1
   Insn 101: point = 314, n_alt = 4
   Insn 100: point = 316, n_alt = 4
   Insn 99: point = 317, n_alt = 4
  BB 13
   Insn 234: point = 318, n_alt = 5
   Insn 233: point = 319, n_alt = 4
   Insn 232: point = 321, n_alt = 4
   Insn 231: point = 322, n_alt = -1
   Insn 230: point = 322, n_alt = -2
   Insn 229: point = 323, n_alt = 1
   Insn 228: point = 323, n_alt = -2
   Insn 227: point = 324, n_alt = 4
   Insn 226: point = 326, n_alt = 4
   Insn 225: point = 327, n_alt = 1
   Insn 224: point = 329, n_alt = 4
   Insn 223: point = 331, n_alt = 4
   Insn 222: point = 332, n_alt = 4
  BB 20
   Insn 312: point = 333, n_alt = 5
   Insn 311: point = 334, n_alt = 4
   Insn 310: point = 336, n_alt = 4
  BB 19
   Insn 307: point = 337, n_alt = -1
   Insn 306: point = 337, n_alt = 4
   Insn 305: point = 337, n_alt = -2
   Insn 304: point = 338, n_alt = 4
   Insn 303: point = 340, n_alt = 4
   Insn 302: point = 341, n_alt = -1
   Insn 301: point = 341, n_alt = 4
   Insn 300: point = 341, n_alt = 4
   Insn 299: point = 341, n_alt = 5
   Insn 298: point = 342, n_alt = 1
   Insn 297: point = 343, n_alt = 4
   Insn 296: point = 344, n_alt = 5
   Insn 295: point = 345, n_alt = 1
   Insn 294: point = 346, n_alt = 4
   Insn 293: point = 347, n_alt = 5
   Insn 292: point = 348, n_alt = 1
   Insn 291: point = 349, n_alt = 4
   Insn 290: point = 350, n_alt = -1
   Insn 289: point = 350, n_alt = 4
  BB 18
   Insn 287: point = 350, n_alt = -1
   Insn 286: point = 350, n_alt = 3
   Insn 283: point = 351, n_alt = 4
   Insn 282: point = 353, n_alt = 4
   Insn 281: point = 354, n_alt = -1
   Insn 280: point = 354, n_alt = 4
   Insn 279: point = 354, n_alt = -2
   Insn 278: point = 355, n_alt = 4
   Insn 277: point = 357, n_alt = 4
   Insn 276: point = 358, n_alt = 5
   Insn 275: point = 359, n_alt = 4
   Insn 274: point = 360, n_alt = 10
   Insn 273: point = 362, n_alt = 4
   Insn 272: point = 364, n_alt = 4
  BB 17
   Insn 270: point = 365, n_alt = -1
   Insn 269: point = 365, n_alt = 3
   Insn 268: point = 366, n_alt = 4
   Insn 267: point = 368, n_alt = 4
  BB 16
   Insn 265: point = 369, n_alt = -1
   Insn 264: point = 369, n_alt = 3
   Insn 263: point = 370, n_alt = 4
   Insn 262: point = 372, n_alt = 4
   Insn 261: point = 373, n_alt = 5
   Insn 260: point = 374, n_alt = 4
   Insn 259: point = 376, n_alt = 4
   Insn 258: point = 377, n_alt = -2
   Insn 257: point = 379, n_alt = 2
   Insn 256: point = 381, n_alt = 6
   Insn 255: point = 383, n_alt = 2
   Insn 254: point = 384, n_alt = 4
   Insn 253: point = 385, n_alt = 2
   Insn 252: point = 386, n_alt = 4
   Insn 251: point = 387, n_alt = 2
   Insn 250: point = 388, n_alt = -2
   Insn 249: point = 389, n_alt = 4
  BB 8
   Insn 85: point = 390, n_alt = -1
   Insn 84: point = 390, n_alt = 3
   Insn 83: point = 391, n_alt = 4
   Insn 82: point = 393, n_alt = 4
  BB 7
   Insn 79: point = 394, n_alt = 5
   Insn 78: point = 395, n_alt = 4
   Insn 77: point = 396, n_alt = 4
   Insn 76: point = 398, n_alt = 4
   Insn 75: point = 400, n_alt = 4
   Insn 74: point = 401, n_alt = 5
   Insn 73: point = 402, n_alt = 1
   Insn 72: point = 403, n_alt = 4
  BB 6
   Insn 70: point = 404, n_alt = -1
   Insn 69: point = 404, n_alt = 3
   Insn 68: point = 405, n_alt = 4
   Insn 67: point = 407, n_alt = 4
  BB 5
   Insn 64: point = 408, n_alt = 5
   Insn 63: point = 409, n_alt = 4
   Insn 62: point = 410, n_alt = 4
   Insn 61: point = 412, n_alt = 4
   Insn 60: point = 414, n_alt = 4
   Insn 59: point = 415, n_alt = 5
   Insn 58: point = 416, n_alt = 1
   Insn 57: point = 417, n_alt = 4
  BB 4
   Insn 55: point = 418, n_alt = -1
   Insn 54: point = 418, n_alt = 3
   Insn 53: point = 419, n_alt = 4
   Insn 52: point = 421, n_alt = 4
  BB 3
   Insn 49: point = 422, n_alt = 5
   Insn 48: point = 423, n_alt = 4
   Insn 47: point = 424, n_alt = 4
   Insn 46: point = 426, n_alt = 4
   Insn 45: point = 428, n_alt = 4
   Insn 44: point = 429, n_alt = 5
   Insn 43: point = 430, n_alt = 1
   Insn 42: point = 431, n_alt = 4
  BB 2
   Insn 40: point = 432, n_alt = -1
   Insn 39: point = 432, n_alt = 3
   Insn 38: point = 433, n_alt = 4
   Insn 37: point = 435, n_alt = 4
   Insn 36: point = 436, n_alt = 5
   Insn 35: point = 437, n_alt = 4
   Insn 34: point = 438, n_alt = 4
   Insn 33: point = 440, n_alt = 4
   Insn 32: point = 442, n_alt = 4
   Insn 31: point = 443, n_alt = 5
   Insn 30: point = 444, n_alt = 4
   Insn 29: point = 446, n_alt = 4
   Insn 28: point = 448, n_alt = 4
   Insn 27: point = 449, n_alt = 5
   Insn 26: point = 450, n_alt = 4
   Insn 25: point = 452, n_alt = 4
   Insn 24: point = 454, n_alt = 4
   Insn 23: point = 455, n_alt = 5
   Insn 22: point = 456, n_alt = 4
   Insn 21: point = 458, n_alt = 4
   Insn 20: point = 460, n_alt = 4
   Insn 19: point = 461, n_alt = 5
   Insn 18: point = 462, n_alt = 4
   Insn 17: point = 464, n_alt = 4
   Insn 16: point = 466, n_alt = 4
   Insn 15: point = 467, n_alt = 5
   Insn 14: point = 468, n_alt = 4
   Insn 13: point = 470, n_alt = 4
   Insn 12: point = 472, n_alt = 4
   Insn 11: point = 473, n_alt = 5
   Insn 10: point = 474, n_alt = 1
   Insn 9: point = 475, n_alt = 4
   Insn 8: point = 476, n_alt = 5
   Insn 7: point = 477, n_alt = 4
   Insn 6: point = 478, n_alt = 4
   Insn 5: point = 480, n_alt = 4
 r113: [476..478]
 r114: [469..470]
 r115: [467..468]
 r116: [463..464]
 r117: [461..462]
 r118: [457..458]
 r119: [455..456]
 r120: [451..452]
 r121: [449..450]
 r122: [445..446]
 r123: [443..444]
 r124: [439..440]
 r125: [436..438]
 r126: [432..433]
 r127: [425..426]
 r128: [422..424]
 r129: [418..419]
 r130: [411..412]
 r131: [408..410]
 r132: [404..405]
 r133: [397..398]
 r134: [394..396]
 r135: [390..391]
 r136: [298..300]
 r137: [307..312]
 r138: [308..309]
 r139: [267..288]
 r140: [273..276] [265..266]
 r141: [263..264]
 r142: [258..260]
 r143: [243..253]
 r144: [239..240]
 r145: [237..238]
 r146: [232..234]
 r147: [206..227]
 r148: [212..215] [204..205]
 r149: [202..203]
 r150: [197..199]
 r151: [182..192]
 r152: [178..179]
 r153: [176..177]
 r154: [171..173]
 r155: [145..166]
 r156: [151..154] [143..144]
 r157: [141..142]
 r158: [136..138]
 r159: [121..131]
 r160: [117..118]
 r161: [115..116]
 r162: [110..112]
 r163: [322..327]
 r164: [323..324]
 r165: [369..370]
 r166: [365..366]
 r167: [361..362]
 r168: [358..360]
 r169: [354..355]
 r170: [350..351]
 r171: [337..338]
 r172: [96..97]
 r173: [56..57]
 r174: [53..55]
 r175: [49..50]
 r176: [92..93]
 r177: [90..91]
 r178: [86..87]
 r179: [84..85]
 r180: [77..83]
 r181: [79..80]
 r182: [75..78]
 r183: [75..76]
 r184: [70..72]
 r185: [45..46]
 r186: [43..44]
 r187: [36..40]
 r188: [38..39]
 r189: [36..37]
 r190: [31..33]
 r191: [27..28]
 r192: [25..26]
 r193: [21..22]
 r194: [17..18]
 r195: [15..16]
 r196: [11..12]
 r197: [3..10]
 r198: [6..7]
 r199: [4..5]
 r200: [479..480]
 r201: [476..477]
 r202: [473..475]
 r203: [473..474]
 r204: [471..472]
 r205: [465..466]
 r206: [459..460]
 r207: [453..454]
 r208: [447..448]
 r209: [441..442]
 r210: [436..437]
 r211: [434..435]
 r212: [429..431]
 r213: [429..430]
 r214: [427..428]
 r215: [422..423]
 r216: [420..421]
 r217: [415..417]
 r218: [415..416]
 r219: [413..414]
 r220: [408..409]
 r221: [406..407]
 r222: [401..403]
 r223: [401..402]
 r224: [399..400]
 r225: [394..395]
 r226: [392..393]
 r227: [301..302]
 r228: [298..299]
 r229: [295..297]
 r230: [295..296]
 r231: [293..294]
 r232: [315..317]
 r233: [313..314]
 r234: [315..316]
 r235: [310..311]
 r236: [303..304]
 r237: [305..306]
 r238: [291..292]
 r239: [289..290]
 r240: [280..281]
 r241: [286..287]
 r242: [277..279]
 r243: [277..278]
 r244: [271..275] [267..268]
 r245: [269..270]
 r246: [261..262]
 r247: [256..259]
 r248: [256..257]
 r249: [254..255]
 r250: [245..246]
 r251: [251..252]
 r252: [241..244]
 r253: [241..242]
 r254: [235..236]
 r255: [230..233]
 r256: [230..231]
 r257: [228..229]
 r258: [219..220]
 r259: [225..226]
 r260: [216..218]
 r261: [216..217]
 r262: [210..214] [206..207]
 r263: [208..209]
 r264: [200..201]
 r265: [195..198]
 r266: [195..196]
 r267: [193..194]
 r268: [184..185]
 r269: [190..191]
 r270: [180..183]
 r271: [180..181]
 r272: [174..175]
 r273: [169..172]
 r274: [169..170]
 r275: [167..168]
 r276: [158..159]
 r277: [164..165]
 r278: [155..157]
 r279: [155..156]
 r280: [149..153] [145..146]
 r281: [147..148]
 r282: [139..140]
 r283: [134..137]
 r284: [134..135]
 r285: [132..133]
 r286: [123..124]
 r287: [129..130]
 r288: [119..122]
 r289: [119..120]
 r290: [113..114]
 r291: [108..111]
 r292: [108..109]
 r293: [106..107]
 r294: [330..332]
 r295: [328..329]
 r296: [330..331]
 r297: [325..326]
 r298: [318..319]
 r299: [320..321]
 r300: [104..105]
 r301: [102..103]
 r302: [382..389]
 r303: [380..388] [375..377]
 r304: [378..379]
 r305: [373..374]
 r306: [375..376]
 r307: [371..372]
 r308: [367..368]
 r309: [363..364]
 r310: [358..359]
 r311: [356..357]
 r312: [352..353]
 r313: [347..349]
 r314: [347..348]
 r315: [344..346]
 r316: [344..345]
 r317: [341..343]
 r318: [341..342]
 r319: [339..340]
 r320: [333..334]
 r321: [335..336]
 r322: [100..101]
 r323: [98..99]
 r324: [64..65]
 r325: [62..63]
 r326: [58..59]
 r327: [53..54]
 r328: [51..52]
 r329: [94..95]
 r330: [88..89]
 r331: [81..82]
 r332: [73..74]
 r333: [70..71]
 r334: [68..69]
 r335: [66..67]
 r336: [60..61]
 r337: [47..48]
 r338: [41..42]
 r339: [34..35]
 r340: [31..32]
 r341: [29..30]
 r342: [23..24]
 r343: [19..20]
 r344: [13..14]
 r345: [8..9]
 r346: [0..2]
 r347: [0..1]
 r348: [283..284]
 r349: [248..249]
 r350: [222..223]
 r351: [187..188]
 r352: [161..162]
 r353: [126..127]
 r355: [282..285]
 r356: [247..250]
 r357: [221..224]
 r358: [186..189]
 r359: [160..163]
 r360: [125..128]
Compressing live ranges: from 481 to 404 - 83%
Ranges after the compression:
 r113: [400..401]
 r114: [394..395]
 r115: [392..393]
 r116: [388..389]
 r117: [386..387]
 r118: [382..383]
 r119: [380..381]
 r120: [376..377]
 r121: [374..375]
 r122: [370..371]
 r123: [368..369]
 r124: [364..365]
 r125: [362..363]
 r126: [358..359]
 r127: [352..353]
 r128: [350..351]
 r129: [346..347]
 r130: [340..341]
 r131: [338..339]
 r132: [334..335]
 r133: [328..329]
 r134: [326..327]
 r135: [322..323]
 r136: [250..251]
 r137: [258..261]
 r138: [258..259]
 r139: [228..241]
 r140: [232..233] [226..227]
 r141: [224..225]
 r142: [220..221]
 r143: [208..215]
 r144: [204..205]
 r145: [202..203]
 r146: [198..199]
 r147: [180..193]
 r148: [184..185] [178..179]
 r149: [176..177]
 r150: [172..173]
 r151: [160..167]
 r152: [156..157]
 r153: [154..155]
 r154: [150..151]
 r155: [132..145]
 r156: [136..137] [130..131]
 r157: [128..129]
 r158: [124..125]
 r159: [112..119]
 r160: [108..109]
 r161: [106..107]
 r162: [102..103]
 r163: [270..273]
 r164: [270..271]
 r165: [310..311]
 r166: [306..307]
 r167: [302..303]
 r168: [300..301]
 r169: [296..297]
 r170: [292..293]
 r171: [282..283]
 r172: [88..89]
 r173: [50..51]
 r174: [48..49]
 r175: [44..45]
 r176: [84..85]
 r177: [82..83]
 r178: [78..79]
 r179: [76..77]
 r180: [70..75]
 r181: [72..73]
 r182: [68..71]
 r183: [68..69]
 r184: [64..65]
 r185: [40..41]
 r186: [38..39]
 r187: [32..35]
 r188: [34..35]
 r189: [32..33]
 r190: [28..29]
 r191: [24..25]
 r192: [22..23]
 r193: [18..19]
 r194: [14..15]
 r195: [12..13]
 r196: [8..9]
 r197: [2..7]
 r198: [4..5]
 r199: [2..3]
 r200: [402..403]
 r201: [400..401]
 r202: [398..399]
 r203: [398..399]
 r204: [396..397]
 r205: [390..391]
 r206: [384..385]
 r207: [378..379]
 r208: [372..373]
 r209: [366..367]
 r210: [362..363]
 r211: [360..361]
 r212: [356..357]
 r213: [356..357]
 r214: [354..355]
 r215: [350..351]
 r216: [348..349]
 r217: [344..345]
 r218: [344..345]
 r219: [342..343]
 r220: [338..339]
 r221: [336..337]
 r222: [332..333]
 r223: [332..333]
 r224: [330..331]
 r225: [326..327]
 r226: [324..325]
 r227: [252..253]
 r228: [250..251]
 r229: [248..249]
 r230: [248..249]
 r231: [246..247]
 r232: [264..265]
 r233: [262..263]
 r234: [264..265]
 r235: [260..261]
 r236: [254..255]
 r237: [256..257]
 r238: [244..245]
 r239: [242..243]
 r240: [236..237]
 r241: [240..241]
 r242: [234..235]
 r243: [234..235]
 r244: [232..233] [228..229]
 r245: [230..231]
 r246: [222..223]
 r247: [218..221]
 r248: [218..219]
 r249: [216..217]
 r250: [210..211]
 r251: [214..215]
 r252: [206..209]
 r253: [206..207]
 r254: [200..201]
 r255: [196..199]
 r256: [196..197]
 r257: [194..195]
 r258: [188..189]
 r259: [192..193]
 r260: [186..187]
 r261: [186..187]
 r262: [184..185] [180..181]
 r263: [182..183]
 r264: [174..175]
 r265: [170..173]
 r266: [170..171]
 r267: [168..169]
 r268: [162..163]
 r269: [166..167]
 r270: [158..161]
 r271: [158..159]
 r272: [152..153]
 r273: [148..151]
 r274: [148..149]
 r275: [146..147]
 r276: [140..141]
 r277: [144..145]
 r278: [138..139]
 r279: [138..139]
 r280: [136..137] [132..133]
 r281: [134..135]
 r282: [126..127]
 r283: [122..125]
 r284: [122..123]
 r285: [120..121]
 r286: [114..115]
 r287: [118..119]
 r288: [110..113]
 r289: [110..111]
 r290: [104..105]
 r291: [100..103]
 r292: [100..101]
 r293: [98..99]
 r294: [276..277]
 r295: [274..275]
 r296: [276..277]
 r297: [272..273]
 r298: [266..267]
 r299: [268..269]
 r300: [96..97]
 r301: [94..95]
 r302: [320..321]
 r303: [320..321] [316..317]
 r304: [318..319]
 r305: [314..315]
 r306: [316..317]
 r307: [312..313]
 r308: [308..309]
 r309: [304..305]
 r310: [300..301]
 r311: [298..299]
 r312: [294..295]
 r313: [290..291]
 r314: [290..291]
 r315: [288..289]
 r316: [288..289]
 r317: [286..287]
 r318: [286..287]
 r319: [284..285]
 r320: [278..279]
 r321: [280..281]
 r322: [92..93]
 r323: [90..91]
 r324: [58..59]
 r325: [56..57]
 r326: [52..53]
 r327: [48..49]
 r328: [46..47]
 r329: [86..87]
 r330: [80..81]
 r331: [74..75]
 r332: [66..67]
 r333: [64..65]
 r334: [62..63]
 r335: [60..61]
 r336: [54..55]
 r337: [42..43]
 r338: [36..37]
 r339: [30..31]
 r340: [28..29]
 r341: [26..27]
 r342: [20..21]
 r343: [16..17]
 r344: [10..11]
 r345: [6..7]
 r346: [0..1]
 r347: [0..1]
 r348: [238..239]
 r349: [212..213]
 r350: [190..191]
 r351: [164..165]
 r352: [142..143]
 r353: [116..117]
 r355: [238..239]
 r356: [212..213]
 r357: [190..191]
 r358: [164..165]
 r359: [142..143]
 r360: [116..117]

********** Assignment #1: **********

	 Assigning to 355 (cl=GENERAL_REGS, orig=240, freq=3000, tfirst=355, tfreq=3000)...
	   Assign 3 to reload r355 (freq=3000)
	 Assigning to 356 (cl=GENERAL_REGS, orig=250, freq=3000, tfirst=356, tfreq=3000)...
	   Assign 2 to reload r356 (freq=3000)
	 Assigning to 357 (cl=GENERAL_REGS, orig=258, freq=3000, tfirst=357, tfreq=3000)...
	   Assign 3 to reload r357 (freq=3000)
	 Assigning to 358 (cl=GENERAL_REGS, orig=268, freq=3000, tfirst=358, tfreq=3000)...
	   Assign 2 to reload r358 (freq=3000)
	 Assigning to 359 (cl=GENERAL_REGS, orig=276, freq=3000, tfirst=359, tfreq=3000)...
	   Assign 3 to reload r359 (freq=3000)
	 Assigning to 360 (cl=GENERAL_REGS, orig=286, freq=3000, tfirst=360, tfreq=3000)...
	   Assign 2 to reload r360 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=44, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=40, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 8
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 49
changing reg in insn 53
changing reg in insn 54
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 68
changing reg in insn 69
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 88
changing reg in insn 90
changing reg in insn 102
changing reg in insn 107
changing reg in insn 104
changing reg in insn 105
changing reg in insn 122
changing reg in insn 133
changing reg in insn 126
changing reg in insn 127
changing reg in insn 133
changing reg in insn 127
changing reg in insn 134
changing reg in insn 130
changing reg in insn 128
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 149
changing reg in insn 154
changing reg in insn 165
changing reg in insn 158
changing reg in insn 159
changing reg in insn 165
changing reg in insn 159
changing reg in insn 166
changing reg in insn 162
changing reg in insn 160
changing reg in insn 162
changing reg in insn 166
changing reg in insn 167
changing reg in insn 168
changing reg in insn 173
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 181
changing reg in insn 186
changing reg in insn 197
changing reg in insn 190
changing reg in insn 191
changing reg in insn 197
changing reg in insn 191
changing reg in insn 198
changing reg in insn 194
changing reg in insn 192
changing reg in insn 194
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 205
changing reg in insn 209
changing reg in insn 210
changing reg in insn 211
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 225
changing reg in insn 230
changing reg in insn 227
changing reg in insn 228
changing reg in insn 263
changing reg in insn 264
changing reg in insn 268
changing reg in insn 269
changing reg in insn 273
changing reg in insn 274
changing reg in insn 274
changing reg in insn 276
changing reg in insn 278
changing reg in insn 279
changing reg in insn 283
changing reg in insn 286
changing reg in insn 304
changing reg in insn 305
changing reg in insn 323
changing reg in insn 324
changing reg in insn 335
changing reg in insn 336
changing reg in insn 336
changing reg in insn 338
changing reg in insn 340
changing reg in insn 343
changing reg in insn 347
changing reg in insn 348
changing reg in insn 348
changing reg in insn 349
changing reg in insn 353
changing reg in insn 354
changing reg in insn 354
changing reg in insn 355
changing reg in insn 355
changing reg in insn 359
changing reg in insn 357
changing reg in insn 358
changing reg in insn 358
changing reg in insn 360
changing reg in insn 359
changing reg in insn 360
changing reg in insn 362
changing reg in insn 364
changing reg in insn 385
changing reg in insn 386
changing reg in insn 386
changing reg in insn 387
changing reg in insn 391
changing reg in insn 394
changing reg in insn 392
changing reg in insn 392
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 402
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 410
changing reg in insn 414
changing reg in insn 415
changing reg in insn 419
changing reg in insn 420
changing reg in insn 420
changing reg in insn 421
changing reg in insn 425
changing reg in insn 426
changing reg in insn 426
changing reg in insn 431
changing reg in insn 428
changing reg in insn 429
changing reg in insn 429
changing reg in insn 430
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 57
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 74
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 82
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 99
changing reg in insn 101
changing reg in insn 101
changing reg in insn 102
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 110
changing reg in insn 111
changing reg in insn 109
changing reg in insn 110
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 125
changing reg in insn 123
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 127
changing reg in insn 132
changing reg in insn 130
changing reg in insn 129
changing reg in insn 128
changing reg in insn 133
changing reg in insn 131
changing reg in insn 130
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 139
changing reg in insn 138
changing reg in insn 139
changing reg in insn 140
changing reg in insn 141
changing reg in insn 144
changing reg in insn 142
changing reg in insn 144
changing reg in insn 146
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 150
changing reg in insn 152
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 154
changing reg in insn 157
changing reg in insn 155
changing reg in insn 157
changing reg in insn 159
changing reg in insn 158
changing reg in insn 159
changing reg in insn 164
changing reg in insn 162
changing reg in insn 161
changing reg in insn 160
changing reg in insn 165
changing reg in insn 163
changing reg in insn 162
changing reg in insn 161
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 171
changing reg in insn 170
changing reg in insn 171
changing reg in insn 172
changing reg in insn 173
changing reg in insn 176
changing reg in insn 174
changing reg in insn 176
changing reg in insn 178
changing reg in insn 177
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 182
changing reg in insn 184
changing reg in insn 183
changing reg in insn 184
changing reg in insn 185
changing reg in insn 186
changing reg in insn 189
changing reg in insn 187
changing reg in insn 189
changing reg in insn 191
changing reg in insn 190
changing reg in insn 191
changing reg in insn 196
changing reg in insn 194
changing reg in insn 193
changing reg in insn 192
changing reg in insn 197
changing reg in insn 195
changing reg in insn 194
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 203
changing reg in insn 202
changing reg in insn 203
changing reg in insn 204
changing reg in insn 205
changing reg in insn 208
changing reg in insn 206
changing reg in insn 208
changing reg in insn 210
changing reg in insn 209
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 214
changing reg in insn 216
changing reg in insn 215
changing reg in insn 216
changing reg in insn 217
changing reg in insn 218
changing reg in insn 222
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 223
changing reg in insn 224
changing reg in insn 226
changing reg in insn 227
changing reg in insn 233
changing reg in insn 234
changing reg in insn 232
changing reg in insn 233
changing reg in insn 240
changing reg in insn 241
changing reg in insn 244
changing reg in insn 245
changing reg in insn 249
changing reg in insn 256
changing reg in insn 254
changing reg in insn 252
changing reg in insn 250
changing reg in insn 256
changing reg in insn 254
changing reg in insn 252
changing reg in insn 258
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 253
changing reg in insn 252
changing reg in insn 251
changing reg in insn 250
changing reg in insn 260
changing reg in insn 257
changing reg in insn 256
changing reg in insn 255
changing reg in insn 254
changing reg in insn 253
changing reg in insn 252
changing reg in insn 251
changing reg in insn 257
changing reg in insn 258
changing reg in insn 260
changing reg in insn 261
changing reg in insn 259
changing reg in insn 260
changing reg in insn 262
changing reg in insn 263
changing reg in insn 267
changing reg in insn 268
changing reg in insn 272
changing reg in insn 273
changing reg in insn 275
changing reg in insn 276
changing reg in insn 277
changing reg in insn 278
changing reg in insn 282
changing reg in insn 283
changing reg in insn 291
changing reg in insn 293
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 296
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 299
changing reg in insn 298
changing reg in insn 299
changing reg in insn 303
changing reg in insn 304
changing reg in insn 311
changing reg in insn 312
changing reg in insn 310
changing reg in insn 311
changing reg in insn 318
changing reg in insn 319
changing reg in insn 322
changing reg in insn 323
changing reg in insn 328
changing reg in insn 329
changing reg in insn 329
changing reg in insn 330
changing reg in insn 334
changing reg in insn 335
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 340
changing reg in insn 346
changing reg in insn 347
changing reg in insn 352
changing reg in insn 353
changing reg in insn 356
changing reg in insn 357
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 367
changing reg in insn 368
changing reg in insn 368
changing reg in insn 369
changing reg in insn 379
changing reg in insn 380
changing reg in insn 384
changing reg in insn 385
changing reg in insn 390
changing reg in insn 391
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 406
changing reg in insn 413
changing reg in insn 414
changing reg in insn 418
changing reg in insn 419
changing reg in insn 424
changing reg in insn 425
changing reg in insn 427
changing reg in insn 428
changing reg in insn 434
changing reg in insn 436
changing reg in insn 435
changing reg in insn 436
changing reg in insn 124
changing reg in insn 143
changing reg in insn 156
changing reg in insn 175
changing reg in insn 188
changing reg in insn 207
deleting insn with uid = 107.
deleting insn with uid = 470.
deleting insn with uid = 471.
deleting insn with uid = 132.
deleting insn with uid = 138.
deleting insn with uid = 472.
deleting insn with uid = 473.
deleting insn with uid = 151.
deleting insn with uid = 474.
deleting insn with uid = 475.
deleting insn with uid = 164.
deleting insn with uid = 170.
deleting insn with uid = 476.
deleting insn with uid = 477.
deleting insn with uid = 183.
deleting insn with uid = 478.
deleting insn with uid = 479.
deleting insn with uid = 196.
deleting insn with uid = 202.
deleting insn with uid = 480.
deleting insn with uid = 481.
deleting insn with uid = 215.
deleting insn with uid = 230.
deleting insn with uid = 258.
deleting insn with uid = 431.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 231.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 290.
verify found no changes in insn with uid = 302.
verify found no changes in insn with uid = 307.
verify found no changes in insn with uid = 327.
verify found no changes in insn with uid = 351.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 397.
verify found no changes in insn with uid = 400.
verify found no changes in insn with uid = 433.


timer0_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={23d,11u} r1={26d,16u,3e} r2={70d,60u,6e} r3={200d,191u} r11={1d,84u} r12={24d} r13={1d,48u} r14={13d} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={29d,17u} r101={12d} r102={1d,1u} r104={12d} r105={12d} r106={12d} 
;;    total ref usage 1893{1456d,428u,9e} in 357{345 regular + 12 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 200 201 202 203 204 205 206 207 208 209 210 211
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [200])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f50612f5480 color>)) "timer.c":76:14 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 3 r3 [orig:113 color.0_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [200]) [2 color+0 S4 A32])) "timer.c":76:14 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 2 r2 [201])
        (symbol_ref:SI ("oldcolor") [flags 0x2]  <var_decl 0x7f50606126c0 oldcolor>)) "timer.c":76:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (reg/f:SI 2 r2 [201]) [2 oldcolor+0 S4 A32])
        (reg:SI 3 r3 [orig:113 color.0_1 ] [113])) "timer.c":76:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [202])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f50612f5480 color>)) "timer.c":77:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 r2 [203])
        (const_int 1 [0x1])) "timer.c":77:11 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem/c:SI (reg/f:SI 3 r3 [202]) [2 color+0 S4 A32])
        (reg:SI 2 r2 [203])) "timer.c":77:11 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [204])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":79:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (mem/f/c:SI (reg/f:SI 3 r3 [204]) [1 tp[0]+0 S4 A32])) "timer.c":79:13 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:114 _2 ] [114])
                (const_int 16 [0x10])) [2 _2->RIS+0 S4 A32])) "timer.c":79:16 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -32 [0xffffffffffffffe0])) [2 ris+0 S4 A32])
        (reg:SI 3 r3 [orig:115 _3 ] [115])) "timer.c":79:9 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [205])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":80:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (mem/f/c:SI (reg/f:SI 3 r3 [205]) [1 tp[0]+0 S4 A32])) "timer.c":80:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:116 _4 ] [116])
                (const_int 20 [0x14])) [2 _4->MIS+0 S4 A32])) "timer.c":80:16 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [2 mis+0 S4 A64])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "timer.c":80:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 3 r3 [206])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":81:15 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (mem/f/c:SI (reg/f:SI 3 r3 [206]) [1 tp[0]+0 S4 A32])) "timer.c":81:15 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:118 _6 ] [118])
                (const_int 4 [0x4])) [2 _6->VALUE+0 S4 A32])) "timer.c":81:18 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 value+0 S4 A32])
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "timer.c":81:11 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg/f:SI 3 r3 [207])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":82:15 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 3 r3 [orig:120 _8 ] [120])
        (mem/f/c:SI (reg/f:SI 3 r3 [207]) [1 tp[0]+0 S4 A32])) "timer.c":82:15 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (mem/v:SI (reg/f:SI 3 r3 [orig:120 _8 ] [120]) [2 _8->LOAD+0 S4 A32])) "timer.c":82:18 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 load+0 S4 A64])
        (reg:SI 3 r3 [orig:121 _9 ] [121])) "timer.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (reg/f:SI 3 r3 [208])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":83:13 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 3 r3 [orig:122 _10 ] [122])
        (mem/f/c:SI (reg/f:SI 3 r3 [208]) [1 tp[0]+0 S4 A32])) "timer.c":83:13 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 2 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:122 _10 ] [122])
                (const_int 24 [0x18])) [2 _10->BGLOAD+0 S4 A32])) "timer.c":83:16 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 bload+0 S4 A32])
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "timer.c":83:10 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 3 r3 [209])
        (symbol_ref:SI ("tick") [flags 0x2]  <var_decl 0x7f5060612630 tick>)) "timer.c":85:9 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (reg:SI 3 r3 [orig:124 tick.1_12 ] [124])
        (mem/c:SI (reg/f:SI 3 r3 [209]) [2 tick+0 S4 A32])) "timer.c":85:9 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 2 (set (reg:SI 3 r3 [orig:125 _13 ] [125])
        (plus:SI (reg:SI 3 r3 [orig:124 tick.1_12 ] [124])
            (const_int 1 [0x1]))) "timer.c":85:9 7 {*arm_addsi3}
     (nil))
(insn 35 34 36 2 (set (reg/f:SI 2 r2 [210])
        (symbol_ref:SI ("tick") [flags 0x2]  <var_decl 0x7f5060612630 tick>)) "timer.c":85:9 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (mem/c:SI (reg/f:SI 2 r2 [210]) [2 tick+0 S4 A32])
        (reg:SI 3 r3 [orig:125 _13 ] [125])) "timer.c":85:9 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (reg/f:SI 3 r3 [211])
        (symbol_ref:SI ("tick") [flags 0x2]  <var_decl 0x7f5060612630 tick>)) "timer.c":86:14 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 2 (set (reg:SI 3 r3 [orig:126 tick.2_14 ] [126])
        (mem/c:SI (reg/f:SI 3 r3 [211]) [2 tick+0 S4 A32])) "timer.c":86:14 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:126 tick.2_14 ] [126])
            (const_int 16 [0x10]))) "timer.c":86:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 40 39 41 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "timer.c":86:8 273 {arm_cond_branch}
     (nil)
 -> 50)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127 128 212 213 214 215
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 3 (set (reg/f:SI 3 r3 [212])
        (symbol_ref:SI ("tick") [flags 0x2]  <var_decl 0x7f5060612630 tick>)) "timer.c":87:11 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 3 (set (reg:SI 2 r2 [213])
        (const_int 0 [0])) "timer.c":87:11 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 3 (set (mem/c:SI (reg/f:SI 3 r3 [212]) [2 tick+0 S4 A32])
        (reg:SI 2 r2 [213])) "timer.c":87:11 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 3 (set (reg/f:SI 3 r3 [214])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 3 (set (reg:SI 3 r3 [orig:127 ss.3_15 ] [127])
        (mem/c:SI (reg/f:SI 3 r3 [214]) [2 ss+0 S4 A32])) "timer.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 3 (set (reg:SI 3 r3 [orig:128 _16 ] [128])
        (plus:SI (reg:SI 3 r3 [orig:127 ss.3_15 ] [127])
            (const_int 1 [0x1]))) "timer.c":87:17 7 {*arm_addsi3}
     (nil))
(insn 48 47 49 3 (set (reg/f:SI 2 r2 [215])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 3 (set (mem/c:SI (reg/f:SI 2 r2 [215]) [2 ss+0 S4 A32])
        (reg:SI 3 r3 [orig:128 _16 ] [128])) "timer.c":87:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 129 216
(code_label 50 49 51 4 2 (nil) [1 uses])
(note 51 50 52 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 4 (set (reg/f:SI 3 r3 [216])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":89:11 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 4 (set (reg:SI 3 r3 [orig:129 ss.4_17 ] [129])
        (mem/c:SI (reg/f:SI 3 r3 [216]) [2 ss+0 S4 A32])) "timer.c":89:11 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:129 ss.4_17 ] [129])
            (const_int 60 [0x3c]))) "timer.c":89:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "timer.c":89:8 273 {arm_cond_branch}
     (nil)
 -> 65)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 130 131 217 218 219 220
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg/f:SI 3 r3 [217])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":90:10 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 5 (set (reg:SI 2 r2 [218])
        (const_int 0 [0])) "timer.c":90:10 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 5 (set (mem/c:SI (reg/f:SI 3 r3 [217]) [2 ss+0 S4 A32])
        (reg:SI 2 r2 [218])) "timer.c":90:10 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 5 (set (reg/f:SI 3 r3 [219])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":90:17 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 5 (set (reg:SI 3 r3 [orig:130 mm.5_18 ] [130])
        (mem/c:SI (reg/f:SI 3 r3 [219]) [2 mm+0 S4 A32])) "timer.c":90:17 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 5 (set (reg:SI 3 r3 [orig:131 _19 ] [131])
        (plus:SI (reg:SI 3 r3 [orig:130 mm.5_18 ] [130])
            (const_int 1 [0x1]))) "timer.c":90:17 7 {*arm_addsi3}
     (nil))
(insn 63 62 64 5 (set (reg/f:SI 2 r2 [220])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":90:17 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 5 (set (mem/c:SI (reg/f:SI 2 r2 [220]) [2 mm+0 S4 A32])
        (reg:SI 3 r3 [orig:131 _19 ] [131])) "timer.c":90:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 132 221
(code_label 65 64 66 6 3 (nil) [1 uses])
(note 66 65 67 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 6 (set (reg/f:SI 3 r3 [221])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":92:12 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 6 (set (reg:SI 3 r3 [orig:132 mm.6_20 ] [132])
        (mem/c:SI (reg/f:SI 3 r3 [221]) [2 mm+0 S4 A32])) "timer.c":92:12 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:132 mm.6_20 ] [132])
            (const_int 60 [0x3c]))) "timer.c":92:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 70 69 71 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 80)
            (pc))) "timer.c":92:8 273 {arm_cond_branch}
     (nil)
 -> 80)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 133 134 222 223 224 225
(note 71 70 72 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 72 71 73 7 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":93:12 253 {*arm_movsi_insn}
     (nil))
(insn 73 72 74 7 (set (reg:SI 2 r2 [223])
        (const_int 0 [0])) "timer.c":93:12 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 7 (set (mem/c:SI (reg/f:SI 3 r3 [222]) [2 mm+0 S4 A32])
        (reg:SI 2 r2 [223])) "timer.c":93:12 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 7 (set (reg/f:SI 3 r3 [224])
        (symbol_ref:SI ("hh") [flags 0x40]  <var_decl 0x7f5060612480 hh>)) "timer.c":94:4 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 7 (set (reg:SI 3 r3 [orig:133 hh.7_21 ] [133])
        (mem/c:SI (reg/f:SI 3 r3 [224]) [2 hh+0 S4 A32])) "timer.c":94:4 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 7 (set (reg:SI 3 r3 [orig:134 _22 ] [134])
        (plus:SI (reg:SI 3 r3 [orig:133 hh.7_21 ] [133])
            (const_int 1 [0x1]))) "timer.c":94:4 7 {*arm_addsi3}
     (nil))
(insn 78 77 79 7 (set (reg/f:SI 2 r2 [225])
        (symbol_ref:SI ("hh") [flags 0x40]  <var_decl 0x7f5060612480 hh>)) "timer.c":94:4 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 7 (set (mem/c:SI (reg/f:SI 2 r2 [225]) [2 hh+0 S4 A32])
        (reg:SI 3 r3 [orig:134 _22 ] [134])) "timer.c":94:4 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 135 226
(code_label 80 79 81 8 4 (nil) [1 uses])
(note 81 80 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 8 (set (reg/f:SI 3 r3 [226])
        (symbol_ref:SI ("tick") [flags 0x2]  <var_decl 0x7f5060612630 tick>)) "timer.c":96:13 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 8 (set (reg:SI 3 r3 [orig:135 tick.8_23 ] [135])
        (mem/c:SI (reg/f:SI 3 r3 [226]) [2 tick+0 S4 A32])) "timer.c":96:13 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 tick.8_23 ] [135])
            (const_int 0 [0]))) "timer.c":96:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 85 84 86 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) "timer.c":96:8 273 {arm_cond_branch}
     (nil)
 -> 382)
;;  succ:       9 (FALLTHRU)
;;              27
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 136 227 228 229 230 231
(note 86 85 87 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 9 (set (reg/f:SI 3 r3 [227])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f50612f5480 color>)) "timer.c":97:16 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 9 (set (reg:SI 3 r3 [orig:136 color.9_24 ] [136])
        (mem/c:SI (reg/f:SI 3 r3 [227]) [2 color+0 S4 A32])) "timer.c":97:16 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 9 (set (reg/f:SI 2 r2 [228])
        (symbol_ref:SI ("oldcolor") [flags 0x2]  <var_decl 0x7f50606126c0 oldcolor>)) "timer.c":97:16 253 {*arm_movsi_insn}
     (nil))
(insn 90 89 91 9 (set (mem/c:SI (reg/f:SI 2 r2 [228]) [2 oldcolor+0 S4 A32])
        (reg:SI 3 r3 [orig:136 color.9_24 ] [136])) "timer.c":97:16 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 9 (set (reg/f:SI 3 r3 [229])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f50612f5480 color>)) "timer.c":98:13 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 9 (set (reg:SI 2 r2 [230])
        (const_int 1 [0x1])) "timer.c":98:13 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 9 (set (mem/c:SI (reg/f:SI 3 r3 [229]) [2 color+0 S4 A32])
        (reg:SI 2 r2 [230])) "timer.c":98:13 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 9 (set (reg:SI 3 r3 [231])
        (const_int 0 [0])) "timer.c":99:13 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 444 9 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [231])) "timer.c":99:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 444 95 445 9 (set (pc)
        (label_ref 112)) "timer.c":99:7 284 {*arm_jump}
     (nil)
 -> 112)
;;  succ:       11 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 445 444 114)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       11
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 137 138 232 233 234 235 236 237
(code_label 114 445 98 10 7 (nil) [1 uses])
(note 98 114 99 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 10 (set (reg/f:SI 2 r2 [232])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":100:11 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 10 (set (reg:SI 3 r3 [234])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":100:11 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 10 (set (reg/f:SI 3 r3 [233])
        (plus:SI (reg/f:SI 2 r2 [232])
            (reg:SI 3 r3 [234]))) "timer.c":100:11 7 {*arm_addsi3}
     (nil))
(insn 102 101 103 10 (set (reg:SI 0 r0 [orig:137 _25 ] [137])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [233]) [0 clock[i_88]+0 S1 A8]))) "timer.c":100:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 103 102 104 10 (set (reg:SI 3 r3 [235])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":100:11 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 10 (set (reg:SI 3 r3 [orig:138 _26 ] [138])
        (plus:SI (reg:SI 3 r3 [235])
            (const_int 70 [0x46]))) "timer.c":100:11 7 {*arm_addsi3}
     (nil))
(insn 105 104 106 10 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:138 _26 ] [138])) "timer.c":100:11 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 108 10 (set (reg:SI 1 r1)
        (const_int 0 [0])) "timer.c":100:11 253 {*arm_movsi_insn}
     (nil))
(call_insn 108 106 109 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x41]  <function_decl 0x7f506060aa00 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":100:11 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 109 108 110 10 (set (reg:SI 3 r3 [237])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":99:23 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 10 (set (reg:SI 3 r3 [236])
        (plus:SI (reg:SI 3 r3 [237])
            (const_int 1 [0x1]))) "timer.c":99:23 7 {*arm_addsi3}
     (nil))
(insn 111 110 112 10 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [236])) "timer.c":99:23 253 {*arm_movsi_insn}
     (nil))
;;  succ:       11 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU,DFS_BACK)
;;              9 [always] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 238
(code_label 112 111 113 11 6 (nil) [1 uses])
(note 113 112 117 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 117 113 118 11 (set (reg:SI 3 r3 [238])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":99:18 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [238])
            (const_int 7 [0x7]))) "timer.c":99:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 119 118 120 11 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 114)
            (pc))) "timer.c":99:18 273 {arm_cond_branch}
     (nil)
 -> 114)
;;  succ:       10
;;              12 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 348 349 350 351 352 353
(note 120 119 121 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 12 (set (reg/f:SI 3 r3 [239])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":103:23 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 12 (set (reg:SI 1 r1 [orig:139 ss.10_27 ] [139])
        (mem/c:SI (reg/f:SI 3 r3 [239]) [2 ss+0 S4 A32])) "timer.c":103:23 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 12 (set (reg:SI 3 r3 [241])
        (const_int 1717986919 [0x66666667])) "timer.c":103:23 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 12 (parallel [
            (set (reg:SI 3 r3 [240])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3 r3 [240]))
                            (sign_extend:DI (reg:SI 1 r1 [orig:139 ss.10_27 ] [139])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 2 r2 [348]))
        ]) "timer.c":103:23 71 {*smull_high}
     (nil))
(insn 125 124 126 12 (set (reg:SI 2 r2 [242])
        (ashiftrt:SI (reg:SI 3 r3 [240])
            (const_int 2 [0x2]))) "timer.c":103:23 147 {*arm_shiftsi3}
     (nil))
(insn 126 125 127 12 (set (reg:SI 3 r3 [243])
        (ashiftrt:SI (reg:SI 1 r1 [orig:139 ss.10_27 ] [139])
            (const_int 31 [0x1f]))) "timer.c":103:23 147 {*arm_shiftsi3}
     (nil))
(insn 127 126 128 12 (set (reg:SI 2 r2 [orig:140 _28 ] [140])
        (minus:SI (reg:SI 2 r2 [242])
            (reg:SI 3 r3 [243]))) "timer.c":103:23 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (div:SI (reg:SI 1 r1 [orig:139 ss.10_27 ] [139])
            (const_int 10 [0xa]))
        (nil)))
(insn 128 127 129 12 (set (reg:SI 3 r3 [244])
        (reg:SI 2 r2 [orig:140 _28 ] [140])) "timer.c":103:23 253 {*arm_movsi_insn}
     (nil))
(insn 129 128 130 12 (set (reg:SI 3 r3 [244])
        (ashift:SI (reg:SI 3 r3 [244])
            (const_int 2 [0x2]))) "timer.c":103:23 147 {*arm_shiftsi3}
     (nil))
(insn 130 129 131 12 (set (reg:SI 3 r3 [244])
        (plus:SI (reg:SI 3 r3 [244])
            (reg:SI 2 r2 [orig:140 _28 ] [140]))) "timer.c":103:23 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [orig:140 _28 ] [140])
            (const_int 5 [0x5]))
        (nil)))
(insn 131 130 133 12 (set (reg:SI 3 r3 [245])
        (ashift:SI (reg:SI 3 r3 [244])
            (const_int 1 [0x1]))) "timer.c":103:23 147 {*arm_shiftsi3}
     (nil))
(insn 133 131 134 12 (set (reg:SI 2 r2 [orig:140 _28 ] [140])
        (minus:SI (reg:SI 1 r1 [orig:139 ss.10_27 ] [139])
            (reg:SI 3 r3 [244]))) "timer.c":103:23 45 {*arm_subsi3_insn}
     (nil))
(insn 134 133 135 12 (set (reg:SI 3 r3 [orig:141 _29 ] [141])
        (and:SI (reg:SI 2 r2 [orig:140 _28 ] [140])
            (const_int 255 [0xff]))) "timer.c":103:19 90 {*arm_andsi3_insn}
     (nil))
(insn 135 134 136 12 (set (reg:SI 3 r3 [246])
        (plus:SI (reg:SI 3 r3 [orig:141 _29 ] [141])
            (const_int 48 [0x30]))) "timer.c":103:19 7 {*arm_addsi3}
     (nil))
(insn 136 135 137 12 (set (reg:SI 2 r2 [orig:142 _30 ] [142])
        (and:SI (reg:SI 3 r3 [246])
            (const_int 255 [0xff]))) "timer.c":103:19 90 {*arm_andsi3_insn}
     (nil))
(insn 137 136 139 12 (set (reg/f:SI 3 r3 [247])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":103:15 253 {*arm_movsi_insn}
     (nil))
(insn 139 137 140 12 (set (mem/c:QI (plus:SI (reg/f:SI 3 r3 [247])
                (const_int 7 [0x7])) [0 clock[7]+0 S1 A8])
        (reg:QI 2 r2 [248])) "timer.c":103:15 263 {*arm_movqi_insn}
     (nil))
(insn 140 139 141 12 (set (reg/f:SI 3 r3 [249])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":103:45 253 {*arm_movsi_insn}
     (nil))
(insn 141 140 142 12 (set (reg:SI 3 r3 [orig:143 ss.11_31 ] [143])
        (mem/c:SI (reg/f:SI 3 r3 [249]) [2 ss+0 S4 A32])) "timer.c":103:45 253 {*arm_movsi_insn}
     (nil))
(insn 142 141 143 12 (set (reg:SI 2 r2 [251])
        (const_int 1717986919 [0x66666667])) "timer.c":103:45 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 12 (parallel [
            (set (reg:SI 2 r2 [250])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 2 r2 [250]))
                            (sign_extend:DI (reg:SI 3 r3 [orig:143 ss.11_31 ] [143])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [349]))
        ]) "timer.c":103:45 71 {*smull_high}
     (nil))
(insn 144 143 145 12 (set (reg:SI 2 r2 [252])
        (ashiftrt:SI (reg:SI 2 r2 [250])
            (const_int 2 [0x2]))) "timer.c":103:45 147 {*arm_shiftsi3}
     (nil))
(insn 145 144 146 12 (set (reg:SI 3 r3 [253])
        (ashiftrt:SI (reg:SI 3 r3 [orig:143 ss.11_31 ] [143])
            (const_int 31 [0x1f]))) "timer.c":103:45 147 {*arm_shiftsi3}
     (nil))
(insn 146 145 147 12 (set (reg:SI 3 r3 [orig:144 _32 ] [144])
        (minus:SI (reg:SI 2 r2 [252])
            (reg:SI 3 r3 [253]))) "timer.c":103:45 45 {*arm_subsi3_insn}
     (nil))
(insn 147 146 148 12 (set (reg:SI 3 r3 [orig:145 _33 ] [145])
        (and:SI (reg:SI 3 r3 [orig:144 _32 ] [144])
            (const_int 255 [0xff]))) "timer.c":103:41 90 {*arm_andsi3_insn}
     (nil))
(insn 148 147 149 12 (set (reg:SI 3 r3 [254])
        (plus:SI (reg:SI 3 r3 [orig:145 _33 ] [145])
            (const_int 48 [0x30]))) "timer.c":103:41 7 {*arm_addsi3}
     (nil))
(insn 149 148 150 12 (set (reg:SI 2 r2 [orig:146 _34 ] [146])
        (and:SI (reg:SI 3 r3 [254])
            (const_int 255 [0xff]))) "timer.c":103:41 90 {*arm_andsi3_insn}
     (nil))
(insn 150 149 152 12 (set (reg/f:SI 3 r3 [255])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":103:37 253 {*arm_movsi_insn}
     (nil))
(insn 152 150 153 12 (set (mem/c:QI (plus:SI (reg/f:SI 3 r3 [255])
                (const_int 6 [0x6])) [0 clock[6]+0 S1 A16])
        (reg:QI 2 r2 [256])) "timer.c":103:37 263 {*arm_movqi_insn}
     (nil))
(insn 153 152 154 12 (set (reg/f:SI 3 r3 [257])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":104:23 253 {*arm_movsi_insn}
     (nil))
(insn 154 153 155 12 (set (reg:SI 1 r1 [orig:147 mm.12_35 ] [147])
        (mem/c:SI (reg/f:SI 3 r3 [257]) [2 mm+0 S4 A32])) "timer.c":104:23 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 12 (set (reg:SI 3 r3 [259])
        (const_int 1717986919 [0x66666667])) "timer.c":104:23 253 {*arm_movsi_insn}
     (nil))
(insn 156 155 157 12 (parallel [
            (set (reg:SI 3 r3 [258])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3 r3 [258]))
                            (sign_extend:DI (reg:SI 1 r1 [orig:147 mm.12_35 ] [147])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 2 r2 [350]))
        ]) "timer.c":104:23 71 {*smull_high}
     (nil))
(insn 157 156 158 12 (set (reg:SI 2 r2 [260])
        (ashiftrt:SI (reg:SI 3 r3 [258])
            (const_int 2 [0x2]))) "timer.c":104:23 147 {*arm_shiftsi3}
     (nil))
(insn 158 157 159 12 (set (reg:SI 3 r3 [261])
        (ashiftrt:SI (reg:SI 1 r1 [orig:147 mm.12_35 ] [147])
            (const_int 31 [0x1f]))) "timer.c":104:23 147 {*arm_shiftsi3}
     (nil))
(insn 159 158 160 12 (set (reg:SI 2 r2 [orig:148 _36 ] [148])
        (minus:SI (reg:SI 2 r2 [260])
            (reg:SI 3 r3 [261]))) "timer.c":104:23 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (div:SI (reg:SI 1 r1 [orig:147 mm.12_35 ] [147])
            (const_int 10 [0xa]))
        (nil)))
(insn 160 159 161 12 (set (reg:SI 3 r3 [262])
        (reg:SI 2 r2 [orig:148 _36 ] [148])) "timer.c":104:23 253 {*arm_movsi_insn}
     (nil))
(insn 161 160 162 12 (set (reg:SI 3 r3 [262])
        (ashift:SI (reg:SI 3 r3 [262])
            (const_int 2 [0x2]))) "timer.c":104:23 147 {*arm_shiftsi3}
     (nil))
(insn 162 161 163 12 (set (reg:SI 3 r3 [262])
        (plus:SI (reg:SI 3 r3 [262])
            (reg:SI 2 r2 [orig:148 _36 ] [148]))) "timer.c":104:23 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [orig:148 _36 ] [148])
            (const_int 5 [0x5]))
        (nil)))
(insn 163 162 165 12 (set (reg:SI 3 r3 [263])
        (ashift:SI (reg:SI 3 r3 [262])
            (const_int 1 [0x1]))) "timer.c":104:23 147 {*arm_shiftsi3}
     (nil))
(insn 165 163 166 12 (set (reg:SI 2 r2 [orig:148 _36 ] [148])
        (minus:SI (reg:SI 1 r1 [orig:147 mm.12_35 ] [147])
            (reg:SI 3 r3 [262]))) "timer.c":104:23 45 {*arm_subsi3_insn}
     (nil))
(insn 166 165 167 12 (set (reg:SI 3 r3 [orig:149 _37 ] [149])
        (and:SI (reg:SI 2 r2 [orig:148 _36 ] [148])
            (const_int 255 [0xff]))) "timer.c":104:19 90 {*arm_andsi3_insn}
     (nil))
(insn 167 166 168 12 (set (reg:SI 3 r3 [264])
        (plus:SI (reg:SI 3 r3 [orig:149 _37 ] [149])
            (const_int 48 [0x30]))) "timer.c":104:19 7 {*arm_addsi3}
     (nil))
(insn 168 167 169 12 (set (reg:SI 2 r2 [orig:150 _38 ] [150])
        (and:SI (reg:SI 3 r3 [264])
            (const_int 255 [0xff]))) "timer.c":104:19 90 {*arm_andsi3_insn}
     (nil))
(insn 169 168 171 12 (set (reg/f:SI 3 r3 [265])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":104:15 253 {*arm_movsi_insn}
     (nil))
(insn 171 169 172 12 (set (mem/c:QI (plus:SI (reg/f:SI 3 r3 [265])
                (const_int 4 [0x4])) [0 clock[4]+0 S1 A32])
        (reg:QI 2 r2 [266])) "timer.c":104:15 263 {*arm_movqi_insn}
     (nil))
(insn 172 171 173 12 (set (reg/f:SI 3 r3 [267])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":104:45 253 {*arm_movsi_insn}
     (nil))
(insn 173 172 174 12 (set (reg:SI 3 r3 [orig:151 mm.13_39 ] [151])
        (mem/c:SI (reg/f:SI 3 r3 [267]) [2 mm+0 S4 A32])) "timer.c":104:45 253 {*arm_movsi_insn}
     (nil))
(insn 174 173 175 12 (set (reg:SI 2 r2 [269])
        (const_int 1717986919 [0x66666667])) "timer.c":104:45 253 {*arm_movsi_insn}
     (nil))
(insn 175 174 176 12 (parallel [
            (set (reg:SI 2 r2 [268])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 2 r2 [268]))
                            (sign_extend:DI (reg:SI 3 r3 [orig:151 mm.13_39 ] [151])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [351]))
        ]) "timer.c":104:45 71 {*smull_high}
     (nil))
(insn 176 175 177 12 (set (reg:SI 2 r2 [270])
        (ashiftrt:SI (reg:SI 2 r2 [268])
            (const_int 2 [0x2]))) "timer.c":104:45 147 {*arm_shiftsi3}
     (nil))
(insn 177 176 178 12 (set (reg:SI 3 r3 [271])
        (ashiftrt:SI (reg:SI 3 r3 [orig:151 mm.13_39 ] [151])
            (const_int 31 [0x1f]))) "timer.c":104:45 147 {*arm_shiftsi3}
     (nil))
(insn 178 177 179 12 (set (reg:SI 3 r3 [orig:152 _40 ] [152])
        (minus:SI (reg:SI 2 r2 [270])
            (reg:SI 3 r3 [271]))) "timer.c":104:45 45 {*arm_subsi3_insn}
     (nil))
(insn 179 178 180 12 (set (reg:SI 3 r3 [orig:153 _41 ] [153])
        (and:SI (reg:SI 3 r3 [orig:152 _40 ] [152])
            (const_int 255 [0xff]))) "timer.c":104:41 90 {*arm_andsi3_insn}
     (nil))
(insn 180 179 181 12 (set (reg:SI 3 r3 [272])
        (plus:SI (reg:SI 3 r3 [orig:153 _41 ] [153])
            (const_int 48 [0x30]))) "timer.c":104:41 7 {*arm_addsi3}
     (nil))
(insn 181 180 182 12 (set (reg:SI 2 r2 [orig:154 _42 ] [154])
        (and:SI (reg:SI 3 r3 [272])
            (const_int 255 [0xff]))) "timer.c":104:41 90 {*arm_andsi3_insn}
     (nil))
(insn 182 181 184 12 (set (reg/f:SI 3 r3 [273])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":104:37 253 {*arm_movsi_insn}
     (nil))
(insn 184 182 185 12 (set (mem/c:QI (plus:SI (reg/f:SI 3 r3 [273])
                (const_int 3 [0x3])) [0 clock[3]+0 S1 A8])
        (reg:QI 2 r2 [274])) "timer.c":104:37 263 {*arm_movqi_insn}
     (nil))
(insn 185 184 186 12 (set (reg/f:SI 3 r3 [275])
        (symbol_ref:SI ("hh") [flags 0x40]  <var_decl 0x7f5060612480 hh>)) "timer.c":105:23 253 {*arm_movsi_insn}
     (nil))
(insn 186 185 187 12 (set (reg:SI 1 r1 [orig:155 hh.14_43 ] [155])
        (mem/c:SI (reg/f:SI 3 r3 [275]) [2 hh+0 S4 A32])) "timer.c":105:23 253 {*arm_movsi_insn}
     (nil))
(insn 187 186 188 12 (set (reg:SI 3 r3 [277])
        (const_int 1717986919 [0x66666667])) "timer.c":105:23 253 {*arm_movsi_insn}
     (nil))
(insn 188 187 189 12 (parallel [
            (set (reg:SI 3 r3 [276])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3 r3 [276]))
                            (sign_extend:DI (reg:SI 1 r1 [orig:155 hh.14_43 ] [155])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 2 r2 [352]))
        ]) "timer.c":105:23 71 {*smull_high}
     (nil))
(insn 189 188 190 12 (set (reg:SI 2 r2 [278])
        (ashiftrt:SI (reg:SI 3 r3 [276])
            (const_int 2 [0x2]))) "timer.c":105:23 147 {*arm_shiftsi3}
     (nil))
(insn 190 189 191 12 (set (reg:SI 3 r3 [279])
        (ashiftrt:SI (reg:SI 1 r1 [orig:155 hh.14_43 ] [155])
            (const_int 31 [0x1f]))) "timer.c":105:23 147 {*arm_shiftsi3}
     (nil))
(insn 191 190 192 12 (set (reg:SI 2 r2 [orig:156 _44 ] [156])
        (minus:SI (reg:SI 2 r2 [278])
            (reg:SI 3 r3 [279]))) "timer.c":105:23 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (div:SI (reg:SI 1 r1 [orig:155 hh.14_43 ] [155])
            (const_int 10 [0xa]))
        (nil)))
(insn 192 191 193 12 (set (reg:SI 3 r3 [280])
        (reg:SI 2 r2 [orig:156 _44 ] [156])) "timer.c":105:23 253 {*arm_movsi_insn}
     (nil))
(insn 193 192 194 12 (set (reg:SI 3 r3 [280])
        (ashift:SI (reg:SI 3 r3 [280])
            (const_int 2 [0x2]))) "timer.c":105:23 147 {*arm_shiftsi3}
     (nil))
(insn 194 193 195 12 (set (reg:SI 3 r3 [280])
        (plus:SI (reg:SI 3 r3 [280])
            (reg:SI 2 r2 [orig:156 _44 ] [156]))) "timer.c":105:23 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [orig:156 _44 ] [156])
            (const_int 5 [0x5]))
        (nil)))
(insn 195 194 197 12 (set (reg:SI 3 r3 [281])
        (ashift:SI (reg:SI 3 r3 [280])
            (const_int 1 [0x1]))) "timer.c":105:23 147 {*arm_shiftsi3}
     (nil))
(insn 197 195 198 12 (set (reg:SI 2 r2 [orig:156 _44 ] [156])
        (minus:SI (reg:SI 1 r1 [orig:155 hh.14_43 ] [155])
            (reg:SI 3 r3 [280]))) "timer.c":105:23 45 {*arm_subsi3_insn}
     (nil))
(insn 198 197 199 12 (set (reg:SI 3 r3 [orig:157 _45 ] [157])
        (and:SI (reg:SI 2 r2 [orig:156 _44 ] [156])
            (const_int 255 [0xff]))) "timer.c":105:19 90 {*arm_andsi3_insn}
     (nil))
(insn 199 198 200 12 (set (reg:SI 3 r3 [282])
        (plus:SI (reg:SI 3 r3 [orig:157 _45 ] [157])
            (const_int 48 [0x30]))) "timer.c":105:19 7 {*arm_addsi3}
     (nil))
(insn 200 199 201 12 (set (reg:SI 2 r2 [orig:158 _46 ] [158])
        (and:SI (reg:SI 3 r3 [282])
            (const_int 255 [0xff]))) "timer.c":105:19 90 {*arm_andsi3_insn}
     (nil))
(insn 201 200 203 12 (set (reg/f:SI 3 r3 [283])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":105:15 253 {*arm_movsi_insn}
     (nil))
(insn 203 201 204 12 (set (mem/c:QI (plus:SI (reg/f:SI 3 r3 [283])
                (const_int 1 [0x1])) [0 clock[1]+0 S1 A8])
        (reg:QI 2 r2 [284])) "timer.c":105:15 263 {*arm_movqi_insn}
     (nil))
(insn 204 203 205 12 (set (reg/f:SI 3 r3 [285])
        (symbol_ref:SI ("hh") [flags 0x40]  <var_decl 0x7f5060612480 hh>)) "timer.c":105:45 253 {*arm_movsi_insn}
     (nil))
(insn 205 204 206 12 (set (reg:SI 3 r3 [orig:159 hh.15_47 ] [159])
        (mem/c:SI (reg/f:SI 3 r3 [285]) [2 hh+0 S4 A32])) "timer.c":105:45 253 {*arm_movsi_insn}
     (nil))
(insn 206 205 207 12 (set (reg:SI 2 r2 [287])
        (const_int 1717986919 [0x66666667])) "timer.c":105:45 253 {*arm_movsi_insn}
     (nil))
(insn 207 206 208 12 (parallel [
            (set (reg:SI 2 r2 [286])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 2 r2 [286]))
                            (sign_extend:DI (reg:SI 3 r3 [orig:159 hh.15_47 ] [159])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [353]))
        ]) "timer.c":105:45 71 {*smull_high}
     (nil))
(insn 208 207 209 12 (set (reg:SI 2 r2 [288])
        (ashiftrt:SI (reg:SI 2 r2 [286])
            (const_int 2 [0x2]))) "timer.c":105:45 147 {*arm_shiftsi3}
     (nil))
(insn 209 208 210 12 (set (reg:SI 3 r3 [289])
        (ashiftrt:SI (reg:SI 3 r3 [orig:159 hh.15_47 ] [159])
            (const_int 31 [0x1f]))) "timer.c":105:45 147 {*arm_shiftsi3}
     (nil))
(insn 210 209 211 12 (set (reg:SI 3 r3 [orig:160 _48 ] [160])
        (minus:SI (reg:SI 2 r2 [288])
            (reg:SI 3 r3 [289]))) "timer.c":105:45 45 {*arm_subsi3_insn}
     (nil))
(insn 211 210 212 12 (set (reg:SI 3 r3 [orig:161 _49 ] [161])
        (and:SI (reg:SI 3 r3 [orig:160 _48 ] [160])
            (const_int 255 [0xff]))) "timer.c":105:41 90 {*arm_andsi3_insn}
     (nil))
(insn 212 211 213 12 (set (reg:SI 3 r3 [290])
        (plus:SI (reg:SI 3 r3 [orig:161 _49 ] [161])
            (const_int 48 [0x30]))) "timer.c":105:41 7 {*arm_addsi3}
     (nil))
(insn 213 212 214 12 (set (reg:SI 2 r2 [orig:162 _50 ] [162])
        (and:SI (reg:SI 3 r3 [290])
            (const_int 255 [0xff]))) "timer.c":105:41 90 {*arm_andsi3_insn}
     (nil))
(insn 214 213 216 12 (set (reg/f:SI 3 r3 [291])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":105:37 253 {*arm_movsi_insn}
     (nil))
(insn 216 214 217 12 (set (mem/c:QI (reg/f:SI 3 r3 [291]) [0 clock[0]+0 S1 A32])
        (reg:QI 2 r2 [292])) "timer.c":105:37 263 {*arm_movqi_insn}
     (nil))
(insn 217 216 218 12 (set (reg:SI 3 r3 [293])
        (const_int 0 [0])) "timer.c":107:13 253 {*arm_movsi_insn}
     (nil))
(insn 218 217 446 12 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [293])) "timer.c":107:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 446 218 447 12 (set (pc)
        (label_ref 235)) "timer.c":107:7 284 {*arm_jump}
     (nil)
 -> 235)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 447 446 237)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 163 164 294 295 296 297 298 299
(code_label 237 447 221 13 9 (nil) [1 uses])
(note 221 237 222 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 222 221 223 13 (set (reg/f:SI 2 r2 [294])
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":108:9 253 {*arm_movsi_insn}
     (nil))
(insn 223 222 224 13 (set (reg:SI 3 r3 [296])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":108:9 253 {*arm_movsi_insn}
     (nil))
(insn 224 223 225 13 (set (reg/f:SI 3 r3 [295])
        (plus:SI (reg/f:SI 2 r2 [294])
            (reg:SI 3 r3 [296]))) "timer.c":108:9 7 {*arm_addsi3}
     (nil))
(insn 225 224 226 13 (set (reg:SI 0 r0 [orig:163 _51 ] [163])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [295]) [0 clock[i_89]+0 S1 A8]))) "timer.c":108:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 226 225 227 13 (set (reg:SI 3 r3 [297])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":108:9 253 {*arm_movsi_insn}
     (nil))
(insn 227 226 228 13 (set (reg:SI 3 r3 [orig:164 _52 ] [164])
        (plus:SI (reg:SI 3 r3 [297])
            (const_int 70 [0x46]))) "timer.c":108:9 7 {*arm_addsi3}
     (nil))
(insn 228 227 229 13 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:164 _52 ] [164])) "timer.c":108:9 253 {*arm_movsi_insn}
     (nil))
(insn 229 228 231 13 (set (reg:SI 1 r1)
        (const_int 0 [0])) "timer.c":108:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 231 229 232 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x41]  <function_decl 0x7f506060a900 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":108:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 232 231 233 13 (set (reg:SI 3 r3 [299])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":107:23 253 {*arm_movsi_insn}
     (nil))
(insn 233 232 234 13 (set (reg:SI 3 r3 [298])
        (plus:SI (reg:SI 3 r3 [299])
            (const_int 1 [0x1]))) "timer.c":107:23 7 {*arm_addsi3}
     (nil))
(insn 234 233 235 13 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [298])) "timer.c":107:23 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              12 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 300
(code_label 235 234 236 14 8 (nil) [1 uses])
(note 236 235 240 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 240 236 241 14 (set (reg:SI 3 r3 [300])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":107:18 253 {*arm_movsi_insn}
     (nil))
(insn 241 240 242 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [300])
            (const_int 7 [0x7]))) "timer.c":107:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 242 241 243 14 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 237)
            (pc))) "timer.c":107:18 273 {arm_cond_branch}
     (nil)
 -> 237)
;;  succ:       13
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 301
(note 243 242 244 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 244 243 245 15 (set (reg:SI 3 r3 [301])
        (const_int 1 [0x1])) "timer.c":111:14 253 {*arm_movsi_insn}
     (nil))
(insn 245 244 448 15 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [301])) "timer.c":111:14 253 {*arm_movsi_insn}
     (nil))
(jump_insn 448 245 449 15 (set (pc)
        (label_ref 313)) "timer.c":111:8 284 {*arm_jump}
     (nil)
 -> 313)
;;  succ:       21 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 449 448 315)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (RTL, MODIFIED)
;;  pred:       21
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 165 302 303 304 305 306 307
(code_label 315 449 248 16 12 (nil) [1 uses])
(note 248 315 249 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 249 248 250 16 (set (reg:SI 2 r2 [302])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":112:12 253 {*arm_movsi_insn}
     (nil))
(insn 250 249 251 16 (set (reg:SI 3 r3 [303])
        (reg:SI 2 r2 [302])) "timer.c":112:12 253 {*arm_movsi_insn}
     (nil))
(insn 251 250 252 16 (set (reg:SI 3 r3 [303])
        (ashift:SI (reg:SI 3 r3 [303])
            (const_int 6 [0x6]))) "timer.c":112:12 147 {*arm_shiftsi3}
     (nil))
(insn 252 251 253 16 (set (reg:SI 3 r3 [303])
        (plus:SI (reg:SI 3 r3 [303])
            (reg:SI 2 r2 [302]))) "timer.c":112:12 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [302])
            (const_int 65 [0x41]))
        (nil)))
(insn 253 252 254 16 (set (reg:SI 3 r3 [303])
        (ashift:SI (reg:SI 3 r3 [303])
            (const_int 1 [0x1]))) "timer.c":112:12 147 {*arm_shiftsi3}
     (nil))
(insn 254 253 255 16 (set (reg:SI 3 r3 [303])
        (plus:SI (reg:SI 3 r3 [303])
            (reg:SI 2 r2 [302]))) "timer.c":112:12 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [302])
            (const_int 131 [0x83]))
        (nil)))
(insn 255 254 256 16 (set (reg:SI 3 r3 [303])
        (ashift:SI (reg:SI 3 r3 [303])
            (const_int 3 [0x3]))) "timer.c":112:12 147 {*arm_shiftsi3}
     (nil))
(insn 256 255 257 16 (set (reg:SI 3 r3 [303])
        (minus:SI (reg:SI 3 r3 [303])
            (reg:SI 2 r2 [302]))) "timer.c":112:12 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [302])
            (const_int 1047 [0x417]))
        (nil)))
(insn 257 256 259 16 (set (reg:SI 3 r3 [304])
        (ashift:SI (reg:SI 3 r3 [303])
            (const_int 2 [0x2]))) "timer.c":112:12 147 {*arm_shiftsi3}
     (nil))
(insn 259 257 260 16 (set (reg:SI 2 r2 [306])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f50612f55a0 proc>)) "timer.c":112:12 253 {*arm_movsi_insn}
     (nil))
(insn 260 259 261 16 (set (reg:SI 3 r3 [305])
        (plus:SI (reg:SI 3 r3 [303])
            (reg:SI 2 r2 [306]))) "timer.c":112:12 7 {*arm_addsi3}
     (nil))
(insn 261 260 262 16 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])
        (reg:SI 3 r3 [305])) "timer.c":112:12 253 {*arm_movsi_insn}
     (nil))
(insn 262 261 263 16 (set (reg/f:SI 3 r3 [307])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":113:8 253 {*arm_movsi_insn}
     (nil))
(insn 263 262 264 16 (set (reg:SI 3 r3 [orig:165 _53 ] [165])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [307])
                (const_int 28 [0x1c])) [2 p_137->status+0 S4 A32])) "timer.c":113:8 253 {*arm_movsi_insn}
     (nil))
(insn 264 263 265 16 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:165 _53 ] [165])
            (const_int 2 [0x2]))) "timer.c":113:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 265 264 266 16 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "timer.c":113:6 273 {arm_cond_branch}
     (nil)
 -> 308)
;;  succ:       17 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (RTL, MODIFIED)
;;  pred:       16 (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 166 308
(note 266 265 267 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 17 (set (reg/f:SI 3 r3 [308])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":113:28 253 {*arm_movsi_insn}
     (nil))
(insn 268 267 269 17 (set (reg:SI 3 r3 [orig:166 _54 ] [166])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [308])
                (const_int 44 [0x2c])) [2 p_137->event+0 S4 A32])) "timer.c":113:28 253 {*arm_movsi_insn}
     (nil))
(insn 269 268 270 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:166 _54 ] [166])
            (const_int 5 [0x5]))) "timer.c":113:24 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 270 269 271 17 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "timer.c":113:24 273 {arm_cond_branch}
     (nil)
 -> 308)
;;  succ:       18 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (RTL, MODIFIED)
;;  pred:       17 (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 167 168 169 170 309 310 311 312
(note 271 270 272 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 18 (set (reg/f:SI 3 r3 [309])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":114:6 253 {*arm_movsi_insn}
     (nil))
(insn 273 272 274 18 (set (reg:SI 3 r3 [orig:167 _55 ] [167])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [309])
                (const_int 68 [0x44])) [2 p_137->pause+0 S4 A32])) "timer.c":114:6 253 {*arm_movsi_insn}
     (nil))
(insn 274 273 275 18 (set (reg:SI 2 r2 [orig:168 _56 ] [168])
        (plus:SI (reg:SI 3 r3 [orig:167 _55 ] [167])
            (const_int -1 [0xffffffffffffffff]))) "timer.c":114:13 7 {*arm_addsi3}
     (nil))
(insn 275 274 276 18 (set (reg/f:SI 3 r3 [310])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":114:13 253 {*arm_movsi_insn}
     (nil))
(insn 276 275 277 18 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [310])
                (const_int 68 [0x44])) [2 p_137->pause+0 S4 A32])
        (reg:SI 2 r2 [orig:168 _56 ] [168])) "timer.c":114:13 253 {*arm_movsi_insn}
     (nil))
(insn 277 276 278 18 (set (reg/f:SI 3 r3 [311])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 278 277 279 18 (set (reg:SI 3 r3 [orig:169 _57 ] [169])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [311])
                (const_int 68 [0x44])) [2 p_137->pause+0 S4 A32])) "timer.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 279 278 280 18 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:169 _57 ] [169])) "timer.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 280 279 281 18 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f50606435a0 *.LC1>)) "timer.c":115:12 253 {*arm_movsi_insn}
     (nil))
(call_insn 281 280 282 18 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":115:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 282 281 283 18 (set (reg/f:SI 3 r3 [312])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":116:17 253 {*arm_movsi_insn}
     (nil))
(insn 283 282 286 18 (set (reg:SI 3 r3 [orig:170 _58 ] [170])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [312])
                (const_int 68 [0x44])) [2 p_137->pause+0 S4 A32])) "timer.c":116:17 253 {*arm_movsi_insn}
     (nil))
(insn 286 283 287 18 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:170 _58 ] [170])
            (const_int 0 [0]))) "timer.c":116:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 287 286 288 18 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 308)
            (pc))) "timer.c":116:15 273 {arm_cond_branch}
     (nil)
 -> 308)
;;  succ:       19 (FALLTHRU)
;;              20
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 171 313 314 315 316 317 318 319
(note 288 287 289 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 289 288 290 19 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":121:14 253 {*arm_movsi_insn}
     (nil))
(call_insn 290 289 291 19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("outSleep") [flags 0x41]  <function_decl 0x7f506060ad00 outSleep>) [0 outSleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":121:14 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 291 290 292 19 (set (reg/f:SI 3 r3 [313])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":122:24 253 {*arm_movsi_insn}
     (nil))
(insn 292 291 293 19 (set (reg:SI 2 r2 [314])
        (const_int 1 [0x1])) "timer.c":122:24 253 {*arm_movsi_insn}
     (nil))
(insn 293 292 294 19 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [313])
                (const_int 28 [0x1c])) [2 p_137->status+0 S4 A32])
        (reg:SI 2 r2 [314])) "timer.c":122:24 253 {*arm_movsi_insn}
     (nil))
(insn 294 293 295 19 (set (reg/f:SI 3 r3 [315])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":123:23 253 {*arm_movsi_insn}
     (nil))
(insn 295 294 296 19 (set (reg:SI 2 r2 [316])
        (const_int 0 [0])) "timer.c":123:23 253 {*arm_movsi_insn}
     (nil))
(insn 296 295 297 19 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [315])
                (const_int 44 [0x2c])) [2 p_137->event+0 S4 A32])
        (reg:SI 2 r2 [316])) "timer.c":123:23 253 {*arm_movsi_insn}
     (nil))
(insn 297 296 298 19 (set (reg/f:SI 3 r3 [317])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":124:26 253 {*arm_movsi_insn}
     (nil))
(insn 298 297 299 19 (set (reg:SI 2 r2 [318])
        (const_int 128 [0x80])) "timer.c":124:26 253 {*arm_movsi_insn}
     (nil))
(insn 299 298 300 19 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [317])
                (const_int 32 [0x20])) [2 p_137->priority+0 S4 A32])
        (reg:SI 2 r2 [318])) "timer.c":124:26 253 {*arm_movsi_insn}
     (nil))
(insn 300 299 301 19 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":125:7 253 {*arm_movsi_insn}
     (nil))
(insn 301 300 302 19 (set (reg:SI 0 r0)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7f50612f56c0 readyQueue>)) "timer.c":125:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 302 301 303 19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7f506060a000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":125:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 303 302 304 19 (set (reg/f:SI 3 r3 [319])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [6 p+0 S4 A64])) "timer.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 304 303 305 19 (set (reg:SI 3 r3 [orig:171 _59 ] [171])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [319])
                (const_int 24 [0x18])) [2 p_137->pid+0 S4 A32])) "timer.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 305 304 306 19 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:171 _59 ] [171])) "timer.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 306 305 307 19 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7f5060643630 *.LC2>)) "timer.c":127:14 253 {*arm_movsi_insn}
     (nil))
(call_insn 307 306 308 19 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":127:14 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       20 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (RTL, MODIFIED)
;;  pred:       16
;;              17
;;              18
;;              19 (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 320 321
(code_label 308 307 309 20 11 (nil) [3 uses])
(note 309 308 310 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 310 309 311 20 (set (reg:SI 3 r3 [321])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":111:28 253 {*arm_movsi_insn}
     (nil))
(insn 311 310 312 20 (set (reg:SI 3 r3 [320])
        (plus:SI (reg:SI 3 r3 [321])
            (const_int 1 [0x1]))) "timer.c":111:28 7 {*arm_addsi3}
     (nil))
(insn 312 311 313 20 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [320])) "timer.c":111:28 253 {*arm_movsi_insn}
     (nil))
;;  succ:       21 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (RTL, MODIFIED)
;;  pred:       20 (FALLTHRU,DFS_BACK)
;;              15 [always] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 322
(code_label 313 312 314 21 10 (nil) [1 uses])
(note 314 313 318 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 318 314 319 21 (set (reg:SI 3 r3 [322])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -40 [0xffffffffffffffd8])) [2 i+0 S4 A32])) "timer.c":111:19 253 {*arm_movsi_insn}
     (nil))
(insn 319 318 320 21 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [322])
            (const_int 63 [0x3f]))) "timer.c":111:19 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 320 319 321 21 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 315)
            (pc))) "timer.c":111:19 273 {arm_cond_branch}
     (nil)
 -> 315)
;;  succ:       16
;;              22 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (RTL, MODIFIED)
;;  pred:       21 (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 172 323
(note 321 320 322 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 322 321 323 22 (set (reg/f:SI 3 r3 [323])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":134:11 253 {*arm_movsi_insn}
     (nil))
(insn 323 322 324 22 (set (reg/f:SI 3 r3 [orig:172 tq.16_60 ] [172])
        (mem/f/c:SI (reg/f:SI 3 r3 [323]) [5 tq+0 S4 A32])) "timer.c":134:11 253 {*arm_movsi_insn}
     (nil))
(insn 324 323 325 22 (set (reg:CC 100 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:172 tq.16_60 ] [172])
            (const_int 0 [0]))) "timer.c":134:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 325 324 326 22 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 382)
            (pc))) "timer.c":134:10 273 {arm_cond_branch}
     (nil)
 -> 382)
;;  succ:       23 (FALLTHRU)
;;              27
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (RTL, MODIFIED)
;;  pred:       22 (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 324 325
(note 326 325 327 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 327 326 328 23 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printTQ") [flags 0x3]  <function_decl 0x7f506060af00 printTQ>) [0 printTQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":135:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 328 327 329 23 (set (reg/f:SI 3 r3 [324])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":136:15 253 {*arm_movsi_insn}
     (nil))
(insn 329 328 330 23 (set (reg/f:SI 3 r3 [325])
        (mem/f/c:SI (reg/f:SI 3 r3 [324]) [5 tq+0 S4 A32])) "timer.c":136:15 253 {*arm_movsi_insn}
     (nil))
(insn 330 329 450 23 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])
        (reg/f:SI 3 r3 [325])) "timer.c":136:15 253 {*arm_movsi_insn}
     (nil))
(jump_insn 450 330 451 23 (set (pc)
        (label_ref 376)) "timer.c":137:17 284 {*arm_jump}
     (nil)
 -> 376)
;;  succ:       26 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 451 450 378)
;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (RTL, MODIFIED)
;;  pred:       26
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 173 174 175 326 327 328
(code_label 378 451 333 24 15 (nil) [1 uses])
(note 333 378 334 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 334 333 335 24 (set (reg/f:SI 3 r3 [326])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":138:17 253 {*arm_movsi_insn}
     (nil))
(insn 335 334 336 24 (set (reg:SI 3 r3 [orig:173 _61 ] [173])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [326])
                (const_int 4 [0x4])) [2 tqq_91->time+0 S4 A32])) "timer.c":138:17 253 {*arm_movsi_insn}
     (nil))
(insn 336 335 337 24 (set (reg:SI 2 r2 [orig:174 _62 ] [174])
        (plus:SI (reg:SI 3 r3 [orig:173 _61 ] [173])
            (const_int -1 [0xffffffffffffffff]))) "timer.c":138:23 7 {*arm_addsi3}
     (nil))
(insn 337 336 338 24 (set (reg/f:SI 3 r3 [327])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":138:23 253 {*arm_movsi_insn}
     (nil))
(insn 338 337 339 24 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [327])
                (const_int 4 [0x4])) [2 tqq_91->time+0 S4 A32])
        (reg:SI 2 r2 [orig:174 _62 ] [174])) "timer.c":138:23 253 {*arm_movsi_insn}
     (nil))
(insn 339 338 340 24 (set (reg/f:SI 3 r3 [328])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":139:21 253 {*arm_movsi_insn}
     (nil))
(insn 340 339 343 24 (set (reg:SI 3 r3 [orig:175 _63 ] [175])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [328])
                (const_int 4 [0x4])) [2 tqq_91->time+0 S4 A32])) "timer.c":139:21 253 {*arm_movsi_insn}
     (nil))
(insn 343 340 344 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:175 _63 ] [175])
            (const_int 0 [0]))) "timer.c":139:17 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 344 343 345 24 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 456)
            (pc))) "timer.c":139:17 273 {arm_cond_branch}
     (nil)
 -> 456)
;;  succ:       25 (FALLTHRU)
;;              35
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (RTL, MODIFIED)
;;  pred:       24 (FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 176 177 178 179 180 181 182 183 184 329 330 331 332 333 334 335
(note 345 344 346 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 346 345 347 25 (set (reg/f:SI 3 r3 [329])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":140:44 253 {*arm_movsi_insn}
     (nil))
(insn 347 346 348 25 (set (reg/f:SI 3 r3 [orig:176 _64 ] [176])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [329])
                (const_int 8 [0x8])) [6 tqq_91->who+0 S4 A32])) "timer.c":140:44 253 {*arm_movsi_insn}
     (nil))
(insn 348 347 349 25 (set (reg:SI 3 r3 [orig:177 _65 ] [177])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:176 _64 ] [176])
                (const_int 24 [0x18])) [2 _64->pid+0 S4 A32])) "timer.c":140:9 253 {*arm_movsi_insn}
     (nil))
(insn 349 348 350 25 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:177 _65 ] [177])) "timer.c":140:9 253 {*arm_movsi_insn}
     (nil))
(insn 350 349 351 25 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f50606436c0 *.LC3>)) "timer.c":140:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 351 350 352 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":140:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 352 351 353 25 (set (reg/f:SI 3 r3 [330])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":141:21 253 {*arm_movsi_insn}
     (nil))
(insn 353 352 354 25 (set (reg/f:SI 3 r3 [orig:178 _66 ] [178])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [330])
                (const_int 8 [0x8])) [6 tqq_91->who+0 S4 A32])) "timer.c":141:21 253 {*arm_movsi_insn}
     (nil))
(insn 354 353 355 25 (set (reg/f:SI 3 r3 [orig:179 _67 ] [179])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [orig:178 _66 ] [178])
                (const_int 84 [0x54])) [11 _66->res+0 S4 A32])) "timer.c":141:26 253 {*arm_movsi_insn}
     (nil))
(insn 355 354 356 25 (set (reg:SI 2 r2 [orig:180 _68 ] [180])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:179 _67 ] [179])
                (const_int 92 [0x5c])) [2 _67->signal+0 S4 A32])) "timer.c":141:40 253 {*arm_movsi_insn}
     (nil))
(insn 356 355 357 25 (set (reg/f:SI 3 r3 [331])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":141:21 253 {*arm_movsi_insn}
     (nil))
(insn 357 356 358 25 (set (reg/f:SI 3 r3 [orig:181 _69 ] [181])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [331])
                (const_int 8 [0x8])) [6 tqq_91->who+0 S4 A32])) "timer.c":141:21 253 {*arm_movsi_insn}
     (nil))
(insn 358 357 359 25 (set (reg/f:SI 3 r3 [orig:182 _70 ] [182])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [orig:181 _69 ] [181])
                (const_int 84 [0x54])) [11 _69->res+0 S4 A32])) "timer.c":141:26 253 {*arm_movsi_insn}
     (nil))
(insn 359 358 360 25 (set (reg:SI 2 r2 [orig:183 _71 ] [183])
        (ior:SI (reg:SI 2 r2 [orig:180 _68 ] [180])
            (const_int 16384 [0x4000]))) "timer.c":141:40 106 {*iorsi3_insn}
     (nil))
(insn 360 359 361 25 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:182 _70 ] [182])
                (const_int 92 [0x5c])) [2 _70->signal+0 S4 A32])
        (reg:SI 2 r2 [orig:183 _71 ] [183])) "timer.c":141:40 253 {*arm_movsi_insn}
     (nil))
(insn 361 360 362 25 (set (reg/f:SI 3 r3 [332])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":144:26 253 {*arm_movsi_insn}
     (nil))
(insn 362 361 363 25 (set (reg/f:SI 3 r3 [orig:184 _72 ] [184])
        (mem/f:SI (reg/f:SI 3 r3 [332]) [5 tqq_91->next+0 S4 A32])) "timer.c":144:26 253 {*arm_movsi_insn}
     (nil))
(insn 363 362 364 25 (set (reg/f:SI 2 r2 [333])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":144:21 253 {*arm_movsi_insn}
     (nil))
(insn 364 363 365 25 (set (mem/f/c:SI (reg/f:SI 2 r2 [333]) [5 tq+0 S4 A32])
        (reg/f:SI 3 r3 [orig:184 _72 ] [184])) "timer.c":144:21 253 {*arm_movsi_insn}
     (nil))
(insn 365 364 366 25 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":145:18 253 {*arm_movsi_insn}
     (nil))
(call_insn 366 365 367 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("put_tnode") [flags 0x3]  <function_decl 0x7f506061b000 put_tnode>) [0 put_tnode S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":145:18 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 367 366 368 25 (set (reg/f:SI 3 r3 [334])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":146:22 253 {*arm_movsi_insn}
     (nil))
(insn 368 367 369 25 (set (reg/f:SI 3 r3 [335])
        (mem/f/c:SI (reg/f:SI 3 r3 [334]) [5 tq+0 S4 A32])) "timer.c":146:22 253 {*arm_movsi_insn}
     (nil))
(insn 369 368 376 25 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])
        (reg/f:SI 3 r3 [335])) "timer.c":146:22 253 {*arm_movsi_insn}
     (nil))
;;  succ:       26 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 34, flags: (RTL, MODIFIED)
;;  pred:       25 [always]  (FALLTHRU)
;;              23 [always] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 336
(code_label 376 369 377 26 13 (nil) [1 uses])
(note 377 376 379 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 379 377 380 26 (set (reg:SI 3 r3 [336])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -36 [0xffffffffffffffdc])) [5 tqq+0 S4 A64])) "timer.c":137:18 253 {*arm_movsi_insn}
     (nil))
(insn 380 379 381 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [336])
            (const_int 0 [0]))) "timer.c":137:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 381 380 452 26 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 378)
            (pc))) "timer.c":137:18 273 {arm_cond_branch}
     (nil)
 -> 378)
;;  succ:       24
;;              34 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 34, loop depth 0, maybe hot
;;  prev block 26, next block 35, flags: (RTL, MODIFIED)
;;  pred:       26 (FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 452 381 453 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(jump_insn 453 452 454 34 (set (pc)
        (label_ref 382)) 284 {*arm_jump}
     (nil)
 -> 382)
;;  succ:       27 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 454 453 456)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 27, flags: (RTL, MODIFIED)
;;  pred:       24
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 456 454 455 35 19 (nil) [1 uses])
(note 455 456 457 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 457 455 382 35 (const_int 0 [0]) "timer.c":150:20 311 {nop}
     (nil))
;;  succ:       27 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 27, loop depth 0, maybe hot
;;  prev block 35, next block 28, flags: (RTL, MODIFIED)
;;  pred:       8
;;              22
;;              35 [always]  (FALLTHRU)
;;              34 [always] 
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 185 186 337
(code_label 382 457 383 27 5 (nil) [3 uses])
(note 383 382 384 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 384 383 385 27 (set (reg/f:SI 3 r3 [337])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f50612f57e0 running>)) "timer.c":156:16 253 {*arm_movsi_insn}
     (nil))
(insn 385 384 386 27 (set (reg/f:SI 3 r3 [orig:185 running.17_73 ] [185])
        (mem/f/c:SI (reg/f:SI 3 r3 [337]) [6 running+0 S4 A32])) "timer.c":156:16 253 {*arm_movsi_insn}
     (nil))
(insn 386 385 387 27 (set (reg:SI 3 r3 [orig:186 _74 ] [186])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:185 running.17_73 ] [185])
                (const_int 24 [0x18])) [2 running.17_73->pid+0 S4 A32])) "timer.c":156:16 253 {*arm_movsi_insn}
     (nil))
(insn 387 386 388 27 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:186 _74 ] [186])
            (const_int 0 [0]))) "timer.c":156:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 388 387 389 27 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 395)
            (pc))) "timer.c":156:8 273 {arm_cond_branch}
     (nil)
 -> 395)
;;  succ:       28 (FALLTHRU)
;;              29
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (RTL, MODIFIED)
;;  pred:       27 (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 187 188 189 338
(note 389 388 390 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 390 389 391 28 (set (reg/f:SI 3 r3 [338])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f50612f57e0 running>)) "timer.c":157:15 253 {*arm_movsi_insn}
     (nil))
(insn 391 390 392 28 (set (reg/f:SI 3 r3 [orig:187 running.18_75 ] [187])
        (mem/f/c:SI (reg/f:SI 3 r3 [338]) [6 running+0 S4 A32])) "timer.c":157:15 253 {*arm_movsi_insn}
     (nil))
(insn 392 391 393 28 (set (reg:SI 2 r2 [orig:188 _76 ] [188])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:187 running.18_75 ] [187])
                (const_int 56 [0x38])) [2 running.18_75->time+0 S4 A32])) "timer.c":157:15 253 {*arm_movsi_insn}
     (nil))
(insn 393 392 394 28 (set (reg:SI 2 r2 [orig:189 _77 ] [189])
        (plus:SI (reg:SI 2 r2 [orig:188 _76 ] [188])
            (const_int -1 [0xffffffffffffffff]))) "timer.c":157:21 7 {*arm_addsi3}
     (nil))
(insn 394 393 395 28 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:187 running.18_75 ] [187])
                (const_int 56 [0x38])) [2 running.18_75->time+0 S4 A32])
        (reg:SI 2 r2 [orig:189 _77 ] [189])) "timer.c":157:21 253 {*arm_movsi_insn}
     (nil))
;;  succ:       29 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (RTL, MODIFIED)
;;  pred:       27
;;              28 (FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 190 191 192 339 340 341
(code_label 395 394 396 29 16 (nil) [1 uses])
(note 396 395 397 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(call_insn 397 396 398 29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_spsr") [flags 0x41]  <function_decl 0x7f506061b300 get_spsr>) [0 get_spsr S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":159:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 398 397 399 29 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 spsr+0 S4 A32])
        (reg:SI 0 r0)) "timer.c":159:12 253 {*arm_movsi_insn}
     (nil))
(insn 399 398 400 29 (set (reg:SI 0 r0)
        (const_int 0 [0])) "timer.c":167:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 400 399 401 29 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("timer_clearInterrupt") [flags 0x3]  <function_decl 0x7f506061b400 timer_clearInterrupt>) [0 timer_clearInterrupt S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":167:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 401 400 402 29 (set (reg/f:SI 3 r3 [339])
        (symbol_ref:SI ("oldcolor") [flags 0x2]  <var_decl 0x7f50606126c0 oldcolor>)) "timer.c":168:9 253 {*arm_movsi_insn}
     (nil))
(insn 402 401 403 29 (set (reg:SI 3 r3 [orig:190 oldcolor.19_78 ] [190])
        (mem/c:SI (reg/f:SI 3 r3 [339]) [2 oldcolor+0 S4 A32])) "timer.c":168:9 253 {*arm_movsi_insn}
     (nil))
(insn 403 402 404 29 (set (reg/f:SI 2 r2 [340])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f50612f5480 color>)) "timer.c":168:9 253 {*arm_movsi_insn}
     (nil))
(insn 404 403 405 29 (set (mem/c:SI (reg/f:SI 2 r2 [340]) [2 color+0 S4 A32])
        (reg:SI 3 r3 [orig:190 oldcolor.19_78 ] [190])) "timer.c":168:9 253 {*arm_movsi_insn}
     (nil))
(insn 405 404 406 29 (set (reg/f:SI 3 r3 [341])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f50612f57e0 running>)) "timer.c":170:14 253 {*arm_movsi_insn}
     (nil))
(insn 406 405 407 29 (set (reg/f:SI 3 r3 [orig:191 running.20_79 ] [191])
        (mem/f/c:SI (reg/f:SI 3 r3 [341]) [6 running+0 S4 A32])) "timer.c":170:14 253 {*arm_movsi_insn}
     (nil))
(insn 407 406 410 29 (set (reg:SI 3 r3 [orig:192 _80 ] [192])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:191 running.20_79 ] [191])
                (const_int 56 [0x38])) [2 running.20_79->time+0 S4 A32])) "timer.c":170:14 253 {*arm_movsi_insn}
     (nil))
(insn 410 407 411 29 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:192 _80 ] [192])
            (const_int 0 [0]))) "timer.c":170:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 411 410 412 29 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 461)
            (pc))) "timer.c":170:6 273 {arm_cond_branch}
     (nil)
 -> 461)
;;  succ:       30 (FALLTHRU)
;;              36
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (RTL, MODIFIED)
;;  pred:       29 (FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 193 342
(note 412 411 413 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 413 412 414 30 (set (reg:SI 3 r3 [342])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 spsr+0 S4 A32])) "timer.c":170:35 253 {*arm_movsi_insn}
     (nil))
(insn 414 413 415 30 (set (reg:SI 3 r3 [orig:193 _81 ] [193])
        (and:SI (reg:SI 3 r3 [342])
            (const_int 31 [0x1f]))) "timer.c":170:35 90 {*arm_andsi3_insn}
     (nil))
(insn 415 414 416 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:193 _81 ] [193])
            (const_int 16 [0x10]))) "timer.c":170:26 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 416 415 417 30 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 461)
            (pc))) "timer.c":170:26 273 {arm_cond_branch}
     (nil)
 -> 461)
;;  succ:       31 (FALLTHRU)
;;              36
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (RTL, MODIFIED)
;;  pred:       30 (FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 194 195 343
(note 417 416 418 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 31 (set (reg/f:SI 3 r3 [343])
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7f50612f56c0 readyQueue>)) "timer.c":170:63 253 {*arm_movsi_insn}
     (nil))
(insn 419 418 420 31 (set (reg/f:SI 3 r3 [orig:194 readyQueue.21_82 ] [194])
        (mem/f/c:SI (reg/f:SI 3 r3 [343]) [6 readyQueue+0 S4 A32])) "timer.c":170:63 253 {*arm_movsi_insn}
     (nil))
(insn 420 419 421 31 (set (reg:SI 3 r3 [orig:195 _83 ] [195])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:194 readyQueue.21_82 ] [194])
                (const_int 24 [0x18])) [2 readyQueue.21_82->pid+0 S4 A32])) "timer.c":170:63 253 {*arm_movsi_insn}
     (nil))
(insn 421 420 422 31 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:195 _83 ] [195])
            (const_int 0 [0]))) "timer.c":170:50 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 422 421 423 31 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 461)
            (pc))) "timer.c":170:50 273 {arm_cond_branch}
     (nil)
 -> 461)
;;  succ:       32 (FALLTHRU)
;;              36
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 36, flags: (RTL, MODIFIED)
;;  pred:       31 (FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 196 197 198 199 344 345 346 347
(note 423 422 424 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 424 423 425 32 (set (reg/f:SI 3 r3 [344])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f50612f57e0 running>)) "timer.c":171:54 253 {*arm_movsi_insn}
     (nil))
(insn 425 424 426 32 (set (reg/f:SI 3 r3 [orig:196 running.22_84 ] [196])
        (mem/f/c:SI (reg/f:SI 3 r3 [344]) [6 running+0 S4 A32])) "timer.c":171:54 253 {*arm_movsi_insn}
     (nil))
(insn 426 425 427 32 (set (reg:SI 1 r1 [orig:197 _85 ] [197])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:196 running.22_84 ] [196])
                (const_int 24 [0x18])) [2 running.22_84->pid+0 S4 A32])) "timer.c":171:5 253 {*arm_movsi_insn}
     (nil))
(insn 427 426 428 32 (set (reg/f:SI 3 r3 [345])
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7f50612f56c0 readyQueue>)) "timer.c":171:71 253 {*arm_movsi_insn}
     (nil))
(insn 428 427 429 32 (set (reg/f:SI 3 r3 [orig:198 readyQueue.23_86 ] [198])
        (mem/f/c:SI (reg/f:SI 3 r3 [345]) [6 readyQueue+0 S4 A32])) "timer.c":171:71 253 {*arm_movsi_insn}
     (nil))
(insn 429 428 430 32 (set (reg:SI 3 r3 [orig:199 _87 ] [199])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:198 readyQueue.23_86 ] [198])
                (const_int 24 [0x18])) [2 readyQueue.23_86->pid+0 S4 A32])) "timer.c":171:5 253 {*arm_movsi_insn}
     (nil))
(insn 430 429 432 32 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:199 _87 ] [199])) "timer.c":171:5 253 {*arm_movsi_insn}
     (nil))
(insn 432 430 433 32 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7f5060643750 *.LC4>)) "timer.c":171:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 433 432 434 32 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":171:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 434 433 435 32 (set (reg/f:SI 3 r3 [346])
        (symbol_ref:SI ("swflag") [flags 0x40]  <var_decl 0x7f506060d5a0 swflag>)) "timer.c":172:12 253 {*arm_movsi_insn}
     (nil))
(insn 435 434 436 32 (set (reg:SI 2 r2 [347])
        (const_int 1 [0x1])) "timer.c":172:12 253 {*arm_movsi_insn}
     (nil))
(insn 436 435 443 32 (set (mem/v/c:SI (reg/f:SI 3 r3 [346]) [2 swflag+0 S4 A32])
        (reg:SI 2 r2 [347])) "timer.c":172:12 253 {*arm_movsi_insn}
     (nil))
(insn 443 436 461 32 (const_int 0 [0]) "timer.c":175:3 311 {nop}
     (nil))
;;  succ:       36 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 36, loop depth 0, maybe hot
;;  prev block 32, next block 33, flags: (RTL, MODIFIED)
;;  pred:       29
;;              31
;;              32 [always]  (FALLTHRU)
;;              30
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 461 443 460 36 20 (nil) [3 uses])
(note 460 461 462 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 462 460 441 36 (const_int 0 [0]) "timer.c":175:3 311 {nop}
     (nil))
;;  succ:       33 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 33, loop depth 0, maybe hot
;;  prev block 36, next block 1, flags: (RTL, MODIFIED)
;;  pred:       36 [always]  (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 441 462 442 33 1 (nil) [0 uses])
(note 442 441 469 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 469 442 0 NOTE_INSN_DELETED)

;; Function timer_init (timer_init, funcdef_no=1, decl_uid=4558, cgraph_uid=2, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) K {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 33:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 37:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 42:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 48:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 52:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 53:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 58:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 60:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 61:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 68:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 72:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 75:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 79:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 80:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 87:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 88:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 89:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 94:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 96:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 98:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 105:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 107:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 109:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 110:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 112:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 113:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 119:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 126:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 127:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 128:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7 8 9

********** Pseudo live ranges #1: **********

  BB 9
   Insn 136: point = 0, n_alt = -1
  BB 8
   Insn 128: point = 0, n_alt = 5
   Insn 127: point = 1, n_alt = 1
   Insn 126: point = 2, n_alt = 4
   Insn 125: point = 3, n_alt = 5
   Insn 124: point = 4, n_alt = 1
   Insn 123: point = 5, n_alt = 4
  BB 7
   Insn 121: point = 6, n_alt = -1
   Insn 120: point = 6, n_alt = 3
   Insn 119: point = 7, n_alt = 4
  BB 5
   Insn 133: point = 8, n_alt = -1
   Insn 89: point = 8, n_alt = 5
   Insn 88: point = 9, n_alt = 1
   Insn 87: point = 10, n_alt = 5
   Insn 86: point = 11, n_alt = 4
   Insn 85: point = 12, n_alt = 4
   Insn 84: point = 13, n_alt = 5
   Insn 83: point = 14, n_alt = 4
   Insn 82: point = 15, n_alt = 4
   Insn 81: point = 17, n_alt = 4
   Insn 80: point = 18, n_alt = 5
   Insn 79: point = 19, n_alt = 4
   Insn 78: point = 20, n_alt = 4
   Insn 77: point = 22, n_alt = 4
   Insn 76: point = 23, n_alt = 5
   Insn 75: point = 24, n_alt = 1
   Insn 74: point = 25, n_alt = 4
   Insn 73: point = 26, n_alt = -1
   Insn 72: point = 26, n_alt = 4
   Insn 71: point = 26, n_alt = 4
  BB 4
   Insn 69: point = 26, n_alt = -1
   Insn 68: point = 26, n_alt = 3
   Insn 67: point = 27, n_alt = 4
  BB 2
   Insn 131: point = 28, n_alt = -1
   Insn 20: point = 28, n_alt = 5
   Insn 19: point = 29, n_alt = 1
   Insn 18: point = 30, n_alt = 5
   Insn 17: point = 31, n_alt = 4
   Insn 16: point = 32, n_alt = 4
   Insn 15: point = 33, n_alt = 5
   Insn 14: point = 34, n_alt = 4
   Insn 13: point = 35, n_alt = 4
   Insn 12: point = 36, n_alt = 5
   Insn 11: point = 37, n_alt = 4
   Insn 10: point = 38, n_alt = 4
   Insn 9: point = 39, n_alt = 5
   Insn 8: point = 40, n_alt = 4
   Insn 7: point = 41, n_alt = 4
   Insn 6: point = 42, n_alt = -1
   Insn 5: point = 42, n_alt = 4
  BB 3
   Insn 61: point = 42, n_alt = 5
   Insn 60: point = 43, n_alt = 4
   Insn 59: point = 45, n_alt = 4
   Insn 58: point = 46, n_alt = 5
   Insn 57: point = 47, n_alt = 1
   Insn 56: point = 48, n_alt = 4
   Insn 55: point = 50, n_alt = 4
   Insn 54: point = 51, n_alt = 4
   Insn 53: point = 52, n_alt = 5
   Insn 52: point = 53, n_alt = 1
   Insn 51: point = 54, n_alt = 4
   Insn 50: point = 56, n_alt = 4
   Insn 49: point = 57, n_alt = 4
   Insn 48: point = 58, n_alt = 5
   Insn 47: point = 59, n_alt = 1
   Insn 46: point = 60, n_alt = 4
   Insn 45: point = 62, n_alt = 4
   Insn 44: point = 63, n_alt = 4
   Insn 43: point = 64, n_alt = 5
   Insn 42: point = 65, n_alt = 1
   Insn 41: point = 66, n_alt = 4
   Insn 40: point = 68, n_alt = 4
   Insn 39: point = 69, n_alt = 4
   Insn 38: point = 70, n_alt = 5
   Insn 37: point = 71, n_alt = 1
   Insn 36: point = 72, n_alt = 4
   Insn 35: point = 74, n_alt = 4
   Insn 34: point = 75, n_alt = 4
   Insn 33: point = 76, n_alt = 5
   Insn 32: point = 77, n_alt = 2
   Insn 31: point = 78, n_alt = 4
   Insn 30: point = 80, n_alt = 4
   Insn 29: point = 81, n_alt = 4
   Insn 28: point = 82, n_alt = 5
   Insn 27: point = 83, n_alt = 1
   Insn 26: point = 84, n_alt = 4
   Insn 25: point = 86, n_alt = 4
   Insn 24: point = 87, n_alt = 4
  BB 6
   Insn 113: point = 88, n_alt = 5
   Insn 112: point = 89, n_alt = 4
   Insn 111: point = 91, n_alt = 4
   Insn 110: point = 92, n_alt = 5
   Insn 109: point = 93, n_alt = 4
   Insn 108: point = 95, n_alt = -2
   Insn 107: point = 97, n_alt = 2
   Insn 106: point = 99, n_alt = 4
   Insn 105: point = 101, n_alt = 2
   Insn 104: point = 102, n_alt = -2
   Insn 103: point = 103, n_alt = 4
   Insn 102: point = 104, n_alt = 4
   Insn 101: point = 105, n_alt = 4
   Insn 100: point = 107, n_alt = 4
   Insn 99: point = 108, n_alt = -2
   Insn 98: point = 110, n_alt = 2
   Insn 97: point = 112, n_alt = 4
   Insn 96: point = 114, n_alt = 2
   Insn 95: point = 115, n_alt = -2
   Insn 94: point = 116, n_alt = 4
   Insn 93: point = 118, n_alt = 4
 r113: [82..84]
 r114: [76..78]
 r115: [70..72]
 r116: [64..66]
 r117: [58..60]
 r118: [52..54]
 r119: [46..48]
 r120: [18..20]
 r121: [13..15]
 r122: [113..116]
 r123: [92..105]
 r124: [39..41]
 r125: [39..40]
 r126: [36..38]
 r127: [36..37]
 r128: [33..35]
 r129: [33..34]
 r130: [30..32]
 r131: [30..31]
 r132: [28..29]
 r133: [85..87]
 r134: [85..86]
 r135: [82..83]
 r136: [79..81]
 r137: [79..80]
 r138: [76..77]
 r139: [73..75]
 r140: [73..74]
 r141: [70..71]
 r142: [67..69]
 r143: [67..68]
 r144: [64..65]
 r145: [61..63]
 r146: [61..62]
 r147: [58..59]
 r148: [55..57]
 r149: [55..56]
 r150: [52..53]
 r151: [49..51]
 r152: [49..50]
 r153: [46..47]
 r154: [42..43]
 r155: [44..45]
 r156: [26..27]
 r157: [23..25]
 r158: [23..24]
 r159: [21..22]
 r160: [18..19]
 r161: [16..17]
 r162: [13..14]
 r163: [10..12]
 r164: [10..11]
 r165: [8..9]
 r166: [117..118]
 r167: [111..115] [106..108]
 r168: [109..110]
 r169: [106..107]
 r170: [94..104]
 r171: [100..103]
 r172: [98..102] [94..95]
 r173: [96..97]
 r174: [92..93]
 r175: [88..89]
 r176: [90..91]
 r177: [6..7]
 r178: [3..5]
 r179: [3..4]
 r180: [0..2]
 r181: [0..1]
Compressing live ranges: from 119 to 84 - 70%
Ranges after the compression:
 r113: [60..61]
 r114: [56..57]
 r115: [52..53]
 r116: [48..49]
 r117: [44..45]
 r118: [40..41]
 r119: [36..37]
 r120: [14..15]
 r121: [10..11]
 r122: [80..81]
 r123: [68..75]
 r124: [30..31]
 r125: [30..31]
 r126: [28..29]
 r127: [28..29]
 r128: [26..27]
 r129: [26..27]
 r130: [24..25]
 r131: [24..25]
 r132: [22..23]
 r133: [62..63]
 r134: [62..63]
 r135: [60..61]
 r136: [58..59]
 r137: [58..59]
 r138: [56..57]
 r139: [54..55]
 r140: [54..55]
 r141: [52..53]
 r142: [50..51]
 r143: [50..51]
 r144: [48..49]
 r145: [46..47]
 r146: [46..47]
 r147: [44..45]
 r148: [42..43]
 r149: [42..43]
 r150: [40..41]
 r151: [38..39]
 r152: [38..39]
 r153: [36..37]
 r154: [32..33]
 r155: [34..35]
 r156: [20..21]
 r157: [18..19]
 r158: [18..19]
 r159: [16..17]
 r160: [14..15]
 r161: [12..13]
 r162: [10..11]
 r163: [8..9]
 r164: [8..9]
 r165: [6..7]
 r166: [82..83]
 r167: [80..81] [76..77]
 r168: [78..79]
 r169: [76..77]
 r170: [70..75]
 r171: [74..75]
 r172: [74..75] [70..71]
 r173: [72..73]
 r174: [68..69]
 r175: [64..65]
 r176: [66..67]
 r177: [4..5]
 r178: [2..3]
 r179: [2..3]
 r180: [0..1]
 r181: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 38
changing reg in insn 41
changing reg in insn 43
changing reg in insn 46
changing reg in insn 48
changing reg in insn 51
changing reg in insn 53
changing reg in insn 56
changing reg in insn 58
changing reg in insn 78
changing reg in insn 80
changing reg in insn 82
changing reg in insn 84
changing reg in insn 94
changing reg in insn 97
changing reg in insn 95
changing reg in insn 97
changing reg in insn 101
changing reg in insn 110
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 59
changing reg in insn 60
changing reg in insn 67
changing reg in insn 68
changing reg in insn 74
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 94
changing reg in insn 99
changing reg in insn 97
changing reg in insn 96
changing reg in insn 95
changing reg in insn 101
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 109
changing reg in insn 103
changing reg in insn 106
changing reg in insn 104
changing reg in insn 106
changing reg in insn 108
changing reg in insn 106
changing reg in insn 105
changing reg in insn 104
changing reg in insn 109
changing reg in insn 107
changing reg in insn 106
changing reg in insn 105
changing reg in insn 107
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 112
changing reg in insn 113
changing reg in insn 111
changing reg in insn 112
changing reg in insn 119
changing reg in insn 120
changing reg in insn 123
changing reg in insn 125
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
deleting insn with uid = 99.
deleting insn with uid = 108.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 73.


timer_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={6d,3u} r1={5d,2u} r2={30d,29u,2e} r3={47d,44u} r11={1d,26u} r12={4d} r13={1d,11u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 400{280d,118u,2e} in 107{105 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 126 127 128 129 130 131 132
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f50606437e0 *.LC5>)) "timer.c":181:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 6 5 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":181:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 7 6 8 2 (set (reg/f:SI 3 r3 [124])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":184:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 2 r2 [125])
        (const_int 270409728 [0x101e2000])) "timer.c":184:9 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (reg/f:SI 3 r3 [124]) [1 tp[0]+0 S4 A32])
        (reg:SI 2 r2 [125])) "timer.c":184:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [126])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":185:9 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [127])
        (const_int 270409760 [0x101e2020])) "timer.c":185:9 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [126])
                (const_int 4 [0x4])) [1 tp[1]+0 S4 A32])
        (reg:SI 2 r2 [127])) "timer.c":185:9 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [128])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":186:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 2 r2 [129])
        (const_int 270413824 [0x101e3000])) "timer.c":186:9 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [128])
                (const_int 8 [0x8])) [1 tp[2]+0 S4 A32])
        (reg:SI 2 r2 [129])) "timer.c":186:9 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [130])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":187:9 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2 [131])
        (const_int 270413856 [0x101e3020])) "timer.c":187:9 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [130])
                (const_int 12 [0xc])) [1 tp[3]+0 S4 A32])
        (reg:SI 2 r2 [131])) "timer.c":187:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 3 r3 [132])
        (const_int 0 [0])) "timer.c":190:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 131 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [132])) "timer.c":190:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 131 20 132 2 (set (pc)
        (label_ref 62)) "timer.c":190:3 284 {*arm_jump}
     (nil)
 -> 62)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 132 131 64)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 119 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155
(code_label 64 132 23 3 25 (nil) [1 uses])
(note 23 64 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:SI 2 r2 [133])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":191:7 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 3 r3 [134])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":191:7 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [134])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [133])) [1 tp[i_12]+0 S4 A32])) "timer.c":191:7 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 3 (set (reg:SI 2 r2 [135])
        (const_int 0 [0])) "timer.c":191:17 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/v:SI (reg/f:SI 3 r3 [orig:113 _1 ] [113]) [2 _1->LOAD+0 S4 A32])
        (reg:SI 2 r2 [135])) "timer.c":191:17 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg/f:SI 2 r2 [136])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":192:7 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 3 r3 [137])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":192:7 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [137])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [136])) [1 tp[i_12]+0 S4 A32])) "timer.c":192:7 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 3 (set (reg:SI 2 r2 [138])
        (const_int -1 [0xffffffffffffffff])) "timer.c":192:17 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 3 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:114 _2 ] [114])
                (const_int 4 [0x4])) [2 _2->VALUE+0 S4 A32])
        (reg:SI 2 r2 [138])) "timer.c":192:17 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 3 (set (reg/f:SI 2 r2 [139])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":195:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 3 (set (reg:SI 3 r3 [140])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":195:7 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 3 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [140])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [139])) [1 tp[i_12]+0 S4 A32])) "timer.c":195:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 3 (set (reg:SI 2 r2 [141])
        (const_int 0 [0])) "timer.c":195:17 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 3 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:115 _3 ] [115])
                (const_int 16 [0x10])) [2 _3->RIS+0 S4 A32])
        (reg:SI 2 r2 [141])) "timer.c":195:17 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 3 (set (reg/f:SI 2 r2 [142])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":196:7 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 3 (set (reg:SI 3 r3 [143])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":196:7 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 3 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [142])) [1 tp[i_12]+0 S4 A32])) "timer.c":196:7 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 3 (set (reg:SI 2 r2 [144])
        (const_int 0 [0])) "timer.c":196:17 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 3 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:116 _4 ] [116])
                (const_int 20 [0x14])) [2 _4->MIS+0 S4 A32])
        (reg:SI 2 r2 [144])) "timer.c":196:17 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 3 (set (reg/f:SI 2 r2 [145])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":197:7 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 3 (set (reg:SI 3 r3 [146])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":197:7 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 3 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [146])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [145])) [1 tp[i_12]+0 S4 A32])) "timer.c":197:7 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 3 (set (reg:SI 2 r2 [147])
        (const_int 256 [0x100])) "timer.c":197:20 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 3 (set (mem/v:SI (reg/f:SI 3 r3 [orig:117 _5 ] [117]) [2 _5->LOAD+0 S4 A32])
        (reg:SI 2 r2 [147])) "timer.c":197:20 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 3 (set (reg/f:SI 2 r2 [148])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":198:7 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 3 (set (reg:SI 3 r3 [149])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":198:7 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 3 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [149])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [148])) [1 tp[i_12]+0 S4 A32])) "timer.c":198:7 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 3 (set (reg:SI 2 r2 [150])
        (const_int 98 [0x62])) "timer.c":198:20 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 3 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:118 _6 ] [118])
                (const_int 8 [0x8])) [2 _6->CONTROL+0 S4 A32])
        (reg:SI 2 r2 [150])) "timer.c":198:20 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 3 (set (reg/f:SI 2 r2 [151])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":200:7 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 3 (set (reg:SI 3 r3 [152])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":200:7 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 3 (set (reg/f:SI 3 r3 [orig:119 _7 ] [119])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [152])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [151])) [1 tp[i_12]+0 S4 A32])) "timer.c":200:7 253 {*arm_movsi_insn}
     (nil))
(insn 57 56 58 3 (set (reg:SI 2 r2 [153])
        (const_int 61440 [0xf000])) "timer.c":200:22 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 3 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [orig:119 _7 ] [119])
                (const_int 24 [0x18])) [2 _7->BGLOAD+0 S4 A32])
        (reg:SI 2 r2 [153])) "timer.c":200:22 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 3 (set (reg:SI 3 r3 [155])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":190:19 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 3 (set (reg:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [155])
            (const_int 1 [0x1]))) "timer.c":190:19 7 {*arm_addsi3}
     (nil))
(insn 61 60 62 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [154])) "timer.c":190:19 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 156
(code_label 62 61 63 4 24 (nil) [1 uses])
(note 63 62 67 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 67 63 68 4 (set (reg:SI 3 r3 [156])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":190:14 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [156])
            (const_int 3 [0x3]))) "timer.c":190:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 69 68 70 4 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 64)
            (pc))) "timer.c":190:14 273 {arm_cond_branch}
     (nil)
 -> 64)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 157 158 159 160 161 162 163 164 165
(note 70 69 71 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 5 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7f5060643870 *.LC6>)) "timer.c":203:3 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 5 (set (reg:SI 0 r0)
        (symbol_ref:SI ("clock") [flags 0x2]  <var_decl 0x7f5060612360 clock>)) "timer.c":203:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 73 72 74 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x7f506060a800 strcpy>) [0 strcpy S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":203:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 74 73 75 5 (set (reg/f:SI 3 r3 [157])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":204:16 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 5 (set (reg:SI 2 r2 [158])
        (const_int 0 [0])) "timer.c":204:16 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 5 (set (mem/c:SI (reg/f:SI 3 r3 [157]) [2 ss+0 S4 A32])
        (reg:SI 2 r2 [158])) "timer.c":204:16 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 5 (set (reg/f:SI 3 r3 [159])
        (symbol_ref:SI ("ss") [flags 0x40]  <var_decl 0x7f50606125a0 ss>)) "timer.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 5 (set (reg:SI 3 r3 [orig:120 ss.24_8 ] [120])
        (mem/c:SI (reg/f:SI 3 r3 [159]) [2 ss+0 S4 A32])) "timer.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 5 (set (reg/f:SI 2 r2 [160])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 5 (set (mem/c:SI (reg/f:SI 2 r2 [160]) [2 mm+0 S4 A32])
        (reg:SI 3 r3 [orig:120 ss.24_8 ] [120])) "timer.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 82 5 (set (reg/f:SI 3 r3 [161])
        (symbol_ref:SI ("mm") [flags 0x40]  <var_decl 0x7f5060612510 mm>)) "timer.c":204:6 253 {*arm_movsi_insn}
     (nil))
(insn 82 81 83 5 (set (reg:SI 3 r3 [orig:121 mm.25_9 ] [121])
        (mem/c:SI (reg/f:SI 3 r3 [161]) [2 mm+0 S4 A32])) "timer.c":204:6 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 5 (set (reg/f:SI 2 r2 [162])
        (symbol_ref:SI ("hh") [flags 0x40]  <var_decl 0x7f5060612480 hh>)) "timer.c":204:6 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 5 (set (mem/c:SI (reg/f:SI 2 r2 [162]) [2 hh+0 S4 A32])
        (reg:SI 3 r3 [orig:121 mm.25_9 ] [121])) "timer.c":204:6 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 5 (set (reg/f:SI 3 r3 [163])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":206:6 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 5 (set (reg/f:SI 2 r2 [164])
        (symbol_ref:SI ("tnode") [flags 0x2]  <var_decl 0x7f5060612750 tnode>)) "timer.c":206:6 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 5 (set (mem/f/c:SI (reg/f:SI 3 r3 [163]) [5 ft+0 S4 A32])
        (reg/f:SI 2 r2 [164])) "timer.c":206:6 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 5 (set (reg:SI 3 r3 [165])
        (const_int 0 [0])) "timer.c":207:9 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 133 5 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [165])) "timer.c":207:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 133 89 134 5 (set (pc)
        (label_ref 114)) "timer.c":207:3 284 {*arm_jump}
     (nil)
 -> 114)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 134 133 116)
;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 122 123 166 167 168 169 170 171 172 173 174 175 176
(code_label 116 134 92 6 27 (nil) [1 uses])
(note 92 116 93 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 93 92 94 6 (set (reg:SI 3 r3 [166])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":208:29 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 6 (set (reg:SI 2 r2 [orig:122 _10 ] [122])
        (plus:SI (reg:SI 3 r3 [166])
            (const_int 1 [0x1]))) "timer.c":208:29 7 {*arm_addsi3}
     (nil))
(insn 95 94 96 6 (set (reg:SI 3 r3 [167])
        (reg:SI 2 r2 [orig:122 _10 ] [122])) "timer.c":208:21 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 97 6 (set (reg:SI 3 r3 [167])
        (ashift:SI (reg:SI 3 r3 [167])
            (const_int 1 [0x1]))) "timer.c":208:21 147 {*arm_shiftsi3}
     (nil))
(insn 97 96 98 6 (set (reg:SI 3 r3 [167])
        (plus:SI (reg:SI 3 r3 [167])
            (reg:SI 2 r2 [orig:122 _10 ] [122]))) "timer.c":208:21 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [orig:122 _10 ] [122])
            (const_int 3 [0x3]))
        (nil)))
(insn 98 97 100 6 (set (reg:SI 3 r3 [168])
        (ashift:SI (reg:SI 3 r3 [167])
            (const_int 2 [0x2]))) "timer.c":208:21 147 {*arm_shiftsi3}
     (nil))
(insn 100 98 101 6 (set (reg:SI 2 r2 [169])
        (symbol_ref:SI ("tnode") [flags 0x2]  <var_decl 0x7f5060612750 tnode>)) "timer.c":208:21 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 6 (set (reg/f:SI 1 r1 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 3 r3 [167])
            (reg:SI 2 r2 [169]))) "timer.c":208:21 7 {*arm_addsi3}
     (nil))
(insn 102 101 103 6 (set (reg/f:SI 0 r0 [170])
        (symbol_ref:SI ("tnode") [flags 0x2]  <var_decl 0x7f5060612750 tnode>)) "timer.c":208:19 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 6 (set (reg:SI 2 r2 [171])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":208:19 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 6 (set (reg:SI 3 r3 [172])
        (reg:SI 2 r2 [171])) "timer.c":208:19 253 {*arm_movsi_insn}
     (nil))
(insn 105 104 106 6 (set (reg:SI 3 r3 [172])
        (ashift:SI (reg:SI 3 r3 [172])
            (const_int 1 [0x1]))) "timer.c":208:19 147 {*arm_shiftsi3}
     (nil))
(insn 106 105 107 6 (set (reg:SI 3 r3 [172])
        (plus:SI (reg:SI 3 r3 [172])
            (reg:SI 2 r2 [171]))) "timer.c":208:19 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [171])
            (const_int 3 [0x3]))
        (nil)))
(insn 107 106 109 6 (set (reg:SI 3 r3 [173])
        (ashift:SI (reg:SI 3 r3 [172])
            (const_int 2 [0x2]))) "timer.c":208:19 147 {*arm_shiftsi3}
     (nil))
(insn 109 107 110 6 (set (reg/f:SI 3 r3 [174])
        (plus:SI (reg/f:SI 0 r0 [170])
            (reg:SI 3 r3 [172]))) "timer.c":208:19 7 {*arm_addsi3}
     (nil))
(insn 110 109 111 6 (set (mem/f:SI (reg/f:SI 3 r3 [174]) [5 tnode[i_13].next+0 S4 A32])
        (reg/f:SI 1 r1 [orig:123 _11 ] [123])) "timer.c":208:19 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 6 (set (reg:SI 3 r3 [176])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":207:23 253 {*arm_movsi_insn}
     (nil))
(insn 112 111 113 6 (set (reg:SI 3 r3 [175])
        (plus:SI (reg:SI 3 r3 [176])
            (const_int 1 [0x1]))) "timer.c":207:23 7 {*arm_addsi3}
     (nil))
(insn 113 112 114 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])
        (reg:SI 3 r3 [175])) "timer.c":207:23 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              5 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 177
(code_label 114 113 115 7 26 (nil) [1 uses])
(note 115 114 119 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 119 115 120 7 (set (reg:SI 3 r3 [177])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 i+0 S4 A32])) "timer.c":207:14 253 {*arm_movsi_insn}
     (nil))
(insn 120 119 121 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [177])
            (const_int 63 [0x3f]))) "timer.c":207:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 121 120 122 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 116)
            (pc))) "timer.c":207:14 273 {arm_cond_branch}
     (nil)
 -> 116)
;;  succ:       6
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 178 179 180 181
(note 122 121 123 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 8 (set (reg/f:SI 3 r3 [178])
        (symbol_ref:SI ("tnode") [flags 0x2]  <var_decl 0x7f5060612750 tnode>)) "timer.c":209:22 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 8 (set (reg:SI 2 r2 [179])
        (const_int 0 [0])) "timer.c":209:22 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 3 r3 [178])
                (const_int 756 [0x2f4])) [5 tnode[63].next+0 S4 A32])
        (reg:SI 2 r2 [179])) "timer.c":209:22 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 127 8 (set (reg/f:SI 3 r3 [180])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":210:6 253 {*arm_movsi_insn}
     (nil))
(insn 127 126 128 8 (set (reg:SI 2 r2 [181])
        (const_int 0 [0])) "timer.c":210:6 253 {*arm_movsi_insn}
     (nil))
(insn 128 127 135 8 (set (mem/f/c:SI (reg/f:SI 3 r3 [180]) [5 tq+0 S4 A32])
        (reg:SI 2 r2 [181])) "timer.c":210:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (RTL, MODIFIED)
;;  pred:       8 [always]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 135 128 136 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 136 135 141 9 (const_int 0 [0]) "timer.c":213:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 141 136 0 NOTE_INSN_DELETED)

;; Function timer_start (timer_start, funcdef_no=2, decl_uid=4570, cgraph_uid=3, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 20: point = 0, n_alt = -1
  BB 2
   Insn 16: point = 0, n_alt = 5
   Insn 15: point = 1, n_alt = 4
   Insn 14: point = 2, n_alt = 0
   Insn 13: point = 4, n_alt = 4
   Insn 12: point = 6, n_alt = 4
   Insn 11: point = 7, n_alt = 5
   Insn 10: point = 8, n_alt = 4
   Insn 9: point = 10, n_alt = 4
   Insn 8: point = 11, n_alt = 4
   Insn 7: point = 12, n_alt = -1
   Insn 6: point = 12, n_alt = 4
   Insn 2: point = 12, n_alt = 5
 r113: [3..4]
 r114: [0..2]
 r115: [9..11]
 r116: [9..10]
 r117: [7..8]
 r118: [5..6]
 r119: [0..1]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r113: [2..3]
 r114: [0..1]
 r115: [8..9]
 r116: [8..9]
 r117: [6..7]
 r118: [4..5]
 r119: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.


timer_start

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={3d,2u} r1={2d} r2={4d,2u} r3={7d,5u} r11={1d,8u} r12={2d} r13={1d,4u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 135{113d,22u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])
        (reg:SI 0 r0 [ n ])) "timer.c":216:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7f5060643900 *.LC7>)) "timer.c":218:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":218:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg/f:SI 2 r2 [115])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 3 r3 [116])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])) "timer.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [117])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [116])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [115])) [1 tp[n_5(D)]+0 S4 A32])) "timer.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tpr+0 S4 A32])
        (reg/f:SI 3 r3 [117])) "timer.c":219:7 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tpr+0 S4 A32])) "timer.c":220:16 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [118])
                (const_int 8 [0x8])) [2 tpr_6->CONTROL+0 S4 A32])) "timer.c":220:16 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (ior:SI (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 128 [0x80]))) "timer.c":220:16 106 {*iorsi3_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tpr+0 S4 A32])) "timer.c":220:16 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 19 2 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [119])
                (const_int 8 [0x8])) [2 tpr_6->CONTROL+0 S4 A32])
        (reg:SI 2 r2 [orig:114 _2 ] [114])) "timer.c":220:16 253 {*arm_movsi_insn}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 19 16 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (const_int 0 [0]) "timer.c":221:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 21 20 0 NOTE_INSN_DELETED)

;; Function timer_clearInterrupt (timer_clearInterrupt, funcdef_no=3, decl_uid=4540, cgraph_uid=4, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) K {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -1
   Insn 16: point = 1, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = 5
   Insn 11: point = 3, n_alt = 2
   Insn 10: point = 4, n_alt = 4
   Insn 9: point = 5, n_alt = 5
   Insn 8: point = 6, n_alt = 4
   Insn 7: point = 8, n_alt = 4
   Insn 6: point = 9, n_alt = 4
   Insn 2: point = 10, n_alt = 5
 r113: [0..1]
 r114: [7..9]
 r115: [7..8]
 r116: [5..6]
 r117: [2..4]
 r118: [2..3]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r113: [0..1]
 r114: [6..7]
 r115: [6..7]
 r116: [4..5]
 r117: [2..3]
 r118: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 14
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


timer_clearInterrupt

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={3d,2u} r3={5d,4u} r11={1d,6u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 34{16d,18u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])
        (reg:SI 0 r0 [ n ])) "timer.c":223:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 2 r2 [114])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":225:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [115])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])) "timer.c":225:10 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [116])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [115])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [114])) [1 tp[n_2(D)]+0 S4 A32])) "timer.c":225:10 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tpr+0 S4 A32])
        (reg/f:SI 3 r3 [116])) "timer.c":225:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tpr+0 S4 A32])) "timer.c":226:15 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [118])
        (const_int -1 [0xffffffffffffffff])) "timer.c":226:15 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [117])
                (const_int 12 [0xc])) [2 tpr_3->INTCLR+0 S4 A32])
        (reg:SI 2 r2 [118])) "timer.c":226:15 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "timer.c":227:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "timer.c":227:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "timer.c":227:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "timer.c":227:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 20 2 (use (reg/i:SI 0 r0)) "timer.c":227:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function timer_stop (timer_stop, funcdef_no=4, decl_uid=4578, cgraph_uid=5, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 12:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3

********** Pseudo live ranges #1: **********

  BB 3
   Insn 18: point = 0, n_alt = -1
  BB 2
   Insn 14: point = 0, n_alt = 5
   Insn 13: point = 1, n_alt = 4
   Insn 12: point = 2, n_alt = 0
   Insn 11: point = 4, n_alt = 4
   Insn 10: point = 6, n_alt = 4
   Insn 9: point = 7, n_alt = 5
   Insn 8: point = 8, n_alt = 4
   Insn 7: point = 10, n_alt = 4
   Insn 6: point = 11, n_alt = 4
   Insn 2: point = 12, n_alt = 5
 r113: [3..4]
 r114: [0..2]
 r115: [9..11]
 r116: [9..10]
 r117: [7..8]
 r118: [5..6]
 r119: [0..1]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r113: [2..3]
 r114: [0..1]
 r115: [8..9]
 r116: [8..9]
 r117: [6..7]
 r118: [4..5]
 r119: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
starting the processing of deferred insns
ending the processing of deferred insns


timer_stop

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={1d,1u} r1={1d} r2={3d,2u} r3={6d,5u} r11={1d,8u} r13={1d,3u} r14={1d} r102={1d,1u} 
;;    total ref usage 35{15d,20u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 119
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])
        (reg:SI 0 r0 [ n ])) "timer.c":230:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 2 r2 [115])
        (symbol_ref:SI ("tp") [flags 0x2]  <var_decl 0x7f5060612000 tp>)) "timer.c":231:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [116])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 n+0 S4 A32])) "timer.c":231:10 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [117])
        (mem/f:SI (plus:SI (mult:SI (reg:SI 3 r3 [116])
                    (const_int 4 [0x4]))
                (reg/f:SI 2 r2 [115])) [1 tp[n_4(D)]+0 S4 A32])) "timer.c":231:10 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tptr+0 S4 A32])
        (reg/f:SI 3 r3 [117])) "timer.c":231:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tptr+0 S4 A32])) "timer.c":232:17 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [118])
                (const_int 8 [0x8])) [2 tptr_5->CONTROL+0 S4 A32])) "timer.c":232:17 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (and:SI (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 127 [0x7f]))) "timer.c":232:17 90 {*arm_andsi3_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [1 tptr+0 S4 A32])) "timer.c":232:17 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 17 2 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [119])
                (const_int 8 [0x8])) [2 tptr_5->CONTROL+0 S4 A32])
        (reg:SI 2 r2 [orig:114 _2 ] [114])) "timer.c":232:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2 [always]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 17 14 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (const_int 0 [0]) "timer.c":233:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 19 18 0 NOTE_INSN_DELETED)

;; Function get_tnode (get_tnode, funcdef_no=5, decl_uid=4581, cgraph_uid=6, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 20: point = 0, n_alt = -2
   Insn 16: point = 1, n_alt = -2
   Insn 13: point = 3, n_alt = 4
   Insn 12: point = 4, n_alt = 5
   Insn 11: point = 5, n_alt = 4
   Insn 10: point = 6, n_alt = 4
   Insn 9: point = 8, n_alt = 4
   Insn 8: point = 10, n_alt = 4
   Insn 7: point = 11, n_alt = 5
   Insn 6: point = 12, n_alt = 4
   Insn 5: point = 14, n_alt = 4
 r113: [7..8]
 r114: [4..6]
 r115: [2..3]
 r116: [0..1]
 r117: [13..14]
 r118: [11..12]
 r119: [9..10]
 r120: [4..5]
Compressing live ranges: from 15 to 14 - 93%
Ranges after the compression:
 r113: [6..7]
 r114: [4..5]
 r115: [2..3]
 r116: [0..1]
 r117: [12..13]
 r118: [10..11]
 r119: [8..9]
 r120: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 16
changing reg in insn 20
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns


get_tnode

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={2d,2u} r1={1d} r2={2d,1u} r3={7d,6u} r11={1d,4u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 32{16d,16u,0e} in 11{11 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118 119 120
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [117])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":237:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (reg/f:SI 3 r3 [117]) [5 ft+0 S4 A32])) "timer.c":237:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])
        (reg/f:SI 3 r3 [118])) "timer.c":237:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [119])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":238:12 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [orig:113 ft.26_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [119]) [5 ft+0 S4 A32])) "timer.c":238:12 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (mem/f:SI (reg/f:SI 3 r3 [orig:113 ft.26_1 ] [113]) [5 ft.26_1->next+0 S4 A32])) "timer.c":238:12 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 2 r2 [120])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":238:8 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/f/c:SI (reg/f:SI 2 r2 [120]) [5 ft+0 S4 A32])
        (reg/f:SI 3 r3 [orig:114 _2 ] [114])) "timer.c":238:8 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 20 2 (set (reg/f:SI 3 r3 [orig:115 _6 ] [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 20 13 21 2 (set (reg/i:SI 0 r0)
        (reg/f:SI 3 r3 [orig:116 <retval> ] [116])) "timer.c":240:1 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 23 2 (use (reg/i:SI 0 r0)) "timer.c":240:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 23 21 0 NOTE_INSN_DELETED)

;; Function put_tnode (put_tnode, funcdef_no=6, decl_uid=4536, cgraph_uid=7, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -1
   Insn 16: point = 1, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = 5
   Insn 11: point = 3, n_alt = 4
   Insn 10: point = 4, n_alt = 4
   Insn 9: point = 5, n_alt = 5
   Insn 8: point = 6, n_alt = 4
   Insn 7: point = 7, n_alt = 4
   Insn 6: point = 9, n_alt = 4
   Insn 2: point = 10, n_alt = 5
 r113: [5..7]
 r114: [0..1]
 r115: [8..9]
 r116: [5..6]
 r117: [2..4]
 r118: [2..3]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r113: [4..5]
 r114: [0..1]
 r115: [6..7]
 r116: [4..5]
 r117: [2..3]
 r118: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 9
changing reg in insn 16
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns


put_tnode

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={3d,3u} r1={1d} r2={3d,2u} r3={5d,4u} r11={1d,5u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 33{16d,17u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])
        (reg:SI 0 r0 [ tp ])) "timer.c":243:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [115])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":244:14 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 2 r2 [orig:113 ft.27_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [115]) [5 ft+0 S4 A32])) "timer.c":244:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":244:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f:SI (reg/f:SI 3 r3 [116]) [5 tp_3(D)->next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:113 ft.27_1 ] [113])) "timer.c":244:14 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 2 r2 [117])
        (symbol_ref:SI ("ft") [flags 0x2]  <var_decl 0x7f5060612870 ft>)) "timer.c":245:8 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":245:8 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (mem/f/c:SI (reg/f:SI 2 r2 [117]) [5 ft+0 S4 A32])
        (reg/f:SI 3 r3 [118])) "timer.c":245:8 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "timer.c":246:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 3 r3 [orig:114 <retval> ] [114])) "timer.c":246:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "timer.c":246:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:114 <retval> ] [114])) "timer.c":246:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 20 2 (use (reg/i:SI 0 r0)) "timer.c":246:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function printTQ (printTQ, funcdef_no=7, decl_uid=4535, cgraph_uid=8, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 38: point = 0, n_alt = -1
   Insn 35: point = 0, n_alt = -2
   Insn 40: point = 1, n_alt = -1
   Insn 37: point = 1, n_alt = -1
   Insn 36: point = 2, n_alt = -1
   Insn 33: point = 2, n_alt = -1
   Insn 32: point = 2, n_alt = 4
  BB 4
   Insn 30: point = 2, n_alt = -1
   Insn 29: point = 2, n_alt = 3
   Insn 28: point = 3, n_alt = 4
  BB 2
   Insn 41: point = 4, n_alt = -1
   Insn 9: point = 4, n_alt = -1
   Insn 8: point = 4, n_alt = 4
   Insn 7: point = 4, n_alt = 5
   Insn 6: point = 5, n_alt = 4
   Insn 5: point = 7, n_alt = 4
  BB 3
   Insn 24: point = 8, n_alt = 5
   Insn 23: point = 9, n_alt = 4
   Insn 22: point = 11, n_alt = 4
   Insn 21: point = 12, n_alt = -1
   Insn 20: point = 12, n_alt = 4
   Insn 19: point = 12, n_alt = -2
   Insn 18: point = 13, n_alt = -2
   Insn 17: point = 14, n_alt = 4
   Insn 16: point = 16, n_alt = 4
   Insn 15: point = 17, n_alt = 4
   Insn 14: point = 19, n_alt = 4
   Insn 13: point = 21, n_alt = 4
 r113: [18..19]
 r114: [12..17]
 r115: [13..14]
 r116: [0..1]
 r117: [6..7]
 r118: [4..5]
 r119: [20..21]
 r120: [15..16]
 r121: [10..11]
 r122: [8..9]
 r123: [2..3]
Compressing live ranges: from 22 to 20 - 90%
Ranges after the compression:
 r113: [16..17]
 r114: [12..15]
 r115: [12..13]
 r116: [0..1]
 r117: [6..7]
 r118: [4..5]
 r119: [18..19]
 r120: [14..15]
 r121: [10..11]
 r122: [8..9]
 r123: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 37
changing reg in insn 35
changing reg in insn 5
changing reg in insn 6
changing reg in insn 6
changing reg in insn 7
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 33.


printTQ

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,5u} r1={5d,1u} r2={5d,1u} r3={14d,10u} r11={1d,11u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,1u} r104={3d} r105={3d} r106={3d} 
;;    total ref usage 355{317d,38u,0e} in 27{24 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 118
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [117])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":251:7 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (reg/f:SI 3 r3 [117]) [5 tq+0 S4 A32])) "timer.c":251:7 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])
        (reg/f:SI 3 r3 [118])) "timer.c":251:7 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7f5060643990 *.LC8>)) "timer.c":253:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 41 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":253:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 41 9 42 2 (set (pc)
        (label_ref 25)) "timer.c":255:9 284 {*arm_jump}
     (nil)
 -> 25)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 42 41 27)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 119 120 121 122
(code_label 27 42 12 3 48 (nil) [1 uses])
(note 12 27 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":256:34 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (mem/f:SI (plus:SI (reg/f:SI 3 r3 [119])
                (const_int 8 [0x8])) [6 tp_4->who+0 S4 A32])) "timer.c":256:34 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 1 r1 [orig:114 _2 ] [114])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:113 _1 ] [113])
                (const_int 24 [0x18])) [2 _1->pid+0 S4 A32])) "timer.c":256:7 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 3 r3 [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":256:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [120])
                (const_int 4 [0x4])) [2 tp_4->time+0 S4 A32])) "timer.c":256:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 20 3 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [orig:115 _3 ] [115])) "timer.c":256:7 253 {*arm_movsi_insn}
     (nil))
(insn 20 18 21 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7f5060643a20 *.LC9>)) "timer.c":256:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":256:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 22 21 23 3 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":257:10 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 3 r3 [122])
        (mem/f:SI (reg/f:SI 3 r3 [121]) [5 tp_4->next+0 S4 A32])) "timer.c":257:10 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])
        (reg/f:SI 3 r3 [122])) "timer.c":257:10 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 123
(code_label 25 24 26 4 47 (nil) [1 uses])
(note 26 25 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 26 29 4 (set (reg:SI 3 r3 [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 tp+0 S4 A32])) "timer.c":255:10 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [123])
            (const_int 0 [0]))) "timer.c":255:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 30 29 31 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "timer.c":255:10 273 {arm_cond_branch}
     (nil)
 -> 27)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 116
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x7f5060643ab0 *.LC10>)) "timer.c":259:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 33 32 36 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f506060a700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":259:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 36 33 37 5 (clobber (reg/i:SI 0 r0)) "timer.c":260:1 -1
     (nil))
(insn 37 36 40 5 (clobber (reg:SI 3 r3 [orig:116 <retval> ] [116])) "timer.c":260:1 -1
     (nil))
(insn 40 37 35 5 (const_int 0 [0]) "timer.c":260:1 311 {nop}
     (nil))
(insn 35 40 38 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:116 <retval> ] [116])) "timer.c":260:1 253 {*arm_movsi_insn}
     (nil))
(insn 38 35 43 5 (use (reg/i:SI 0 r0)) "timer.c":260:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 43 38 0 NOTE_INSN_DELETED)

;; Function kitimer (kitimer, funcdef_no=8, decl_uid=4594, cgraph_uid=9, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 43:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 46:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 56:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 57:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 61:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 62:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 67:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 78:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 79:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 80:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 85:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) r {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 95:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 105:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 108:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7 14
EBB 15
EBB 8 9
EBB 10 11
EBB 12
EBB 13

********** Pseudo live ranges #1: **********

  BB 13
   Insn 118: point = 0, n_alt = -1
   Insn 115: point = 0, n_alt = -2
   Insn 120: point = 1, n_alt = -1
   Insn 117: point = 1, n_alt = -1
   Insn 116: point = 2, n_alt = -1
   Insn 113: point = 2, n_alt = -1
   Insn 112: point = 2, n_alt = -1
   Insn 111: point = 2, n_alt = 4
  BB 11
   Insn 125: point = 2, n_alt = -1
   Insn 98: point = 2, n_alt = 5
   Insn 97: point = 3, n_alt = 4
   Insn 96: point = 4, n_alt = 4
   Insn 95: point = 5, n_alt = 5
   Insn 94: point = 6, n_alt = 4
   Insn 93: point = 7, n_alt = 4
   Insn 92: point = 9, n_alt = 4
  BB 3
   Insn 121: point = 10, n_alt = -1
   Insn 27: point = 10, n_alt = 5
   Insn 26: point = 11, n_alt = 1
   Insn 25: point = 12, n_alt = 4
   Insn 24: point = 13, n_alt = 5
   Insn 23: point = 14, n_alt = 4
   Insn 22: point = 15, n_alt = 4
  BB 12
   Insn 108: point = 16, n_alt = 5
   Insn 107: point = 17, n_alt = 4
   Insn 106: point = 18, n_alt = 4
   Insn 105: point = 19, n_alt = 5
   Insn 104: point = 20, n_alt = 4
   Insn 103: point = 21, n_alt = 4
  BB 10
   Insn 90: point = 22, n_alt = -1
   Insn 89: point = 22, n_alt = 2
   Insn 88: point = 23, n_alt = 4
   Insn 87: point = 24, n_alt = 4
   Insn 86: point = 26, n_alt = 4
   Insn 85: point = 27, n_alt = 5
   Insn 84: point = 28, n_alt = 4
   Insn 83: point = 29, n_alt = 4
  BB 9
   Insn 80: point = 30, n_alt = 5
   Insn 79: point = 31, n_alt = 4
   Insn 78: point = 32, n_alt = 6
   Insn 77: point = 34, n_alt = 4
   Insn 76: point = 35, n_alt = 4
   Insn 75: point = 37, n_alt = 4
  BB 8
   Insn 73: point = 38, n_alt = -1
   Insn 72: point = 38, n_alt = 3
   Insn 71: point = 39, n_alt = 4
  BB 14
   Insn 128: point = 40, n_alt = -1
  BB 15
   Insn 132: point = 40, n_alt = -1
  BB 5
   Insn 47: point = 40, n_alt = -1
   Insn 46: point = 40, n_alt = 3
   Insn 43: point = 41, n_alt = 6
   Insn 42: point = 43, n_alt = 4
   Insn 41: point = 44, n_alt = 4
   Insn 40: point = 46, n_alt = 4
  BB 7
   Insn 68: point = 47, n_alt = -1
   Insn 67: point = 47, n_alt = 3
   Insn 66: point = 48, n_alt = 4
  BB 4
   Insn 123: point = 49, n_alt = -1
   Insn 36: point = 49, n_alt = 5
   Insn 35: point = 50, n_alt = 4
   Insn 34: point = 51, n_alt = 5
   Insn 33: point = 52, n_alt = 4
   Insn 32: point = 54, n_alt = 4
  BB 2
   Insn 20: point = 55, n_alt = -1
   Insn 19: point = 55, n_alt = 3
   Insn 18: point = 56, n_alt = 4
   Insn 17: point = 58, n_alt = 4
   Insn 16: point = 59, n_alt = 5
   Insn 15: point = 60, n_alt = 4
   Insn 14: point = 61, n_alt = 4
   Insn 13: point = 63, n_alt = 4
   Insn 12: point = 64, n_alt = 5
   Insn 11: point = 65, n_alt = 4
   Insn 10: point = 66, n_alt = 4
   Insn 9: point = 67, n_alt = 5
   Insn 8: point = 67, n_alt = -1
   Insn 7: point = 67, n_alt = 5
   Insn 6: point = 67, n_alt = -1
   Insn 2: point = 67, n_alt = 5
  BB 6
   Insn 62: point = 67, n_alt = 5
   Insn 61: point = 68, n_alt = 4
   Insn 60: point = 70, n_alt = 4
   Insn 59: point = 71, n_alt = 5
   Insn 58: point = 72, n_alt = 4
   Insn 57: point = 73, n_alt = 5
   Insn 56: point = 74, n_alt = 6
   Insn 55: point = 76, n_alt = 4
   Insn 54: point = 77, n_alt = 4
   Insn 53: point = 79, n_alt = 4
 r113: [59..61]
 r114: [55..56]
 r115: [42..44]
 r116: [40..41]
 r117: [75..77]
 r118: [33..35]
 r119: [30..32]
 r120: [22..24]
 r121: [5..7]
 r122: [0..1]
 r123: [64..66]
 r124: [64..65]
 r125: [62..63]
 r126: [59..60]
 r127: [57..58]
 r128: [13..15]
 r129: [13..14]
 r130: [10..12]
 r131: [10..11]
 r132: [53..54]
 r133: [51..52]
 r134: [49..50]
 r135: [45..46]
 r136: [42..43]
 r137: [78..79]
 r138: [73..74]
 r139: [75..76]
 r140: [71..72]
 r141: [69..70]
 r142: [67..68]
 r143: [47..48]
 r144: [38..39]
 r145: [36..37]
 r146: [33..34]
 r147: [30..31]
 r148: [27..29]
 r149: [27..28]
 r150: [25..26]
 r151: [22..23]
 r152: [8..9]
 r153: [5..6]
 r154: [2..4]
 r155: [2..3]
 r156: [19..21]
 r157: [19..20]
 r158: [16..18]
 r159: [16..17]
Compressing live ranges: from 80 to 66 - 82%
Ranges after the compression:
 r113: [48..49]
 r114: [44..45]
 r115: [32..33]
 r116: [30..31]
 r117: [62..63]
 r118: [24..25]
 r119: [22..23]
 r120: [16..17]
 r121: [4..5]
 r122: [0..1]
 r123: [52..53]
 r124: [52..53]
 r125: [50..51]
 r126: [48..49]
 r127: [46..47]
 r128: [10..11]
 r129: [10..11]
 r130: [8..9]
 r131: [8..9]
 r132: [42..43]
 r133: [40..41]
 r134: [38..39]
 r135: [34..35]
 r136: [32..33]
 r137: [64..65]
 r138: [60..61]
 r139: [62..63]
 r140: [58..59]
 r141: [56..57]
 r142: [54..55]
 r143: [36..37]
 r144: [28..29]
 r145: [26..27]
 r146: [24..25]
 r147: [22..23]
 r148: [20..21]
 r149: [20..21]
 r150: [18..19]
 r151: [16..17]
 r152: [6..7]
 r153: [4..5]
 r154: [2..3]
 r155: [2..3]
 r156: [14..15]
 r157: [14..15]
 r158: [12..13]
 r159: [12..13]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 41
changing reg in insn 43
changing reg in insn 43
changing reg in insn 46
changing reg in insn 54
changing reg in insn 56
changing reg in insn 76
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 87
changing reg in insn 89
changing reg in insn 93
changing reg in insn 95
changing reg in insn 117
changing reg in insn 115
changing reg in insn 10
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 24
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 53
changing reg in insn 54
changing reg in insn 56
changing reg in insn 57
changing reg in insn 55
changing reg in insn 56
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 97
changing reg in insn 98
changing reg in insn 103
changing reg in insn 105
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 107
changing reg in insn 108
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 113.


kitimer

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={8d,6u} r1={5d} r2={19d,14u} r3={38d,33u} r11={1d,50u} r12={8d} r13={1d,19u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={9d,5u} r101={4d} r102={1d,1u} r104={4d} r105={4d} r106={4d} 
;;    total ref usage 579{451d,128u,0e} in 89{85 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 123 124 125 126 127
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])
        (reg:SI 0 r0 [ time ])) "timer.c":263:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7f5060622600 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":268:10 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 ps+0 S4 A64])
        (reg:SI 0 r0)) "timer.c":268:10 253 {*arm_movsi_insn}
     (nil))
(call_insn 8 7 9 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_tnode") [flags 0x3]  <function_decl 0x7f506061bf00 get_tnode>) [0 get_tnode S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":269:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])
        (reg:SI 0 r0)) "timer.c":269:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":270:13 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [124])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])) "timer.c":270:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [123])
                (const_int 4 [0x4])) [2 t_19->time+0 S4 A32])
        (reg:SI 2 r2 [124])) "timer.c":270:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 3 r3 [125])
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7f50612f57e0 running>)) "timer.c":271:12 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 2 r2 [orig:113 running.28_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [125]) [6 running+0 S4 A32])) "timer.c":271:12 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 3 r3 [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":271:12 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (mem/f:SI (plus:SI (reg/f:SI 3 r3 [126])
                (const_int 8 [0x8])) [6 t_19->who+0 S4 A32])
        (reg/f:SI 2 r2 [orig:113 running.28_1 ] [113])) "timer.c":271:12 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [127])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":274:11 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 3 r3 [orig:114 tq.29_2 ] [114])
        (mem/f/c:SI (reg/f:SI 3 r3 [127]) [5 tq+0 S4 A32])) "timer.c":274:11 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:CC 100 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:114 tq.29_2 ] [114])
            (const_int 0 [0]))) "timer.c":274:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 30)
            (pc))) "timer.c":274:8 273 {arm_cond_branch}
     (nil)
 -> 30)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 128 129 130 131
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 2 r2 [128])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":275:12 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 3 r3 [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":275:12 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (mem/f/c:SI (reg/f:SI 2 r2 [128]) [5 tq+0 S4 A32])
        (reg/f:SI 3 r3 [129])) "timer.c":275:12 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 3 r3 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":276:17 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg:SI 2 r2 [131])
        (const_int 0 [0])) "timer.c":276:17 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 121 3 (set (mem/f:SI (reg/f:SI 3 r3 [130]) [5 t_19->next+0 S4 A32])
        (reg:SI 2 r2 [131])) "timer.c":276:17 253 {*arm_movsi_insn}
     (nil))
(jump_insn 121 27 122 3 (set (pc)
        (label_ref 109)) 284 {*arm_jump}
     (nil)
 -> 109)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 122 121 30)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 132 133 134
(code_label 30 122 31 4 52 (nil) [1 uses])
(note 31 30 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg/f:SI 3 r3 [132])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":279:17 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg/f:SI 3 r3 [133])
        (mem/f/c:SI (reg/f:SI 3 r3 [132]) [5 tq+0 S4 A32])) "timer.c":279:17 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])
        (reg/f:SI 3 r3 [133])) "timer.c":279:17 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 4 (set (reg/f:SI 3 r3 [134])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":279:13 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 123 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 q+0 S4 A32])
        (reg/f:SI 3 r3 [134])) "timer.c":279:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 123 36 124 4 (set (pc)
        (label_ref 63)) "timer.c":280:17 284 {*arm_jump}
     (nil)
 -> 63)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 124 123 65)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115 116 135 136
(code_label 65 124 39 5 57 (nil) [1 uses])
(note 39 65 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 5 (set (reg/f:SI 3 r3 [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":281:27 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [2 p_11->time+0 S4 A32])) "timer.c":281:27 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (reg:SI 2 r2 [136])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])) "timer.c":281:24 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 46 5 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (minus:SI (reg:SI 2 r2 [136])
            (reg:SI 3 r3 [orig:115 _3 ] [115]))) "timer.c":281:24 45 {*arm_subsi3_insn}
     (nil))
(insn 46 43 47 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 0 [0]))) "timer.c":281:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 47 46 52 5 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 131)
            (pc))) "timer.c":281:18 273 {arm_cond_branch}
     (nil)
 -> 131)
;;  succ:       15
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 117 137 138 139 140 141 142
(note 52 47 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 6 (set (reg/f:SI 3 r3 [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":283:24 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 6 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [137])
                (const_int 4 [0x4])) [2 p_11->time+0 S4 A32])) "timer.c":283:24 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 6 (set (reg:SI 2 r2 [139])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])) "timer.c":283:20 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 6 (set (reg:SI 3 r3 [138])
        (minus:SI (reg:SI 2 r2 [139])
            (reg:SI 3 r3 [orig:117 _5 ] [117]))) "timer.c":283:20 45 {*arm_subsi3_insn}
     (nil))
(insn 57 56 58 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])
        (reg:SI 3 r3 [138])) "timer.c":283:20 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 6 (set (reg/f:SI 3 r3 [140])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":284:17 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 q+0 S4 A32])
        (reg/f:SI 3 r3 [140])) "timer.c":284:17 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 6 (set (reg/f:SI 3 r3 [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":285:17 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 6 (set (reg/f:SI 3 r3 [142])
        (mem/f:SI (reg/f:SI 3 r3 [141]) [5 p_11->next+0 S4 A32])) "timer.c":285:17 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])
        (reg/f:SI 3 r3 [142])) "timer.c":285:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 14, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              4 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 143
(code_label 63 62 64 7 54 (nil) [1 uses])
(note 64 63 66 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 66 64 67 7 (set (reg:SI 3 r3 [143])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":280:18 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [143])
            (const_int 0 [0]))) "timer.c":280:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 68 67 127 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) "timer.c":280:18 273 {arm_cond_branch}
     (nil)
 -> 65)
;;  succ:       5
;;              14 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 7, next block 15, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 127 68 128 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(jump_insn 128 127 129 14 (set (pc)
        (label_ref 69)) 284 {*arm_jump}
     (nil)
 -> 69)
;;  succ:       8 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 129 128 131)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 131 129 130 15 60 (nil) [1 uses])
(note 130 131 132 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 132 130 69 15 (const_int 0 [0]) "timer.c":282:19 311 {nop}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 15, next block 9, flags: (RTL, MODIFIED)
;;  pred:       15 [always]  (FALLTHRU)
;;              14 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 144
(code_label 69 132 70 8 56 (nil) [1 uses])
(note 70 69 71 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 71 70 72 8 (set (reg:SI 3 r3 [144])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":287:14 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [144])
            (const_int 0 [0]))) "timer.c":287:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 73 72 74 8 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 81)
            (pc))) "timer.c":287:14 273 {arm_cond_branch}
     (nil)
 -> 81)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 118 119 145 146 147
(note 74 73 75 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 9 (set (reg/f:SI 3 r3 [145])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":288:23 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 9 (set (reg:SI 2 r2 [orig:118 _6 ] [118])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [145])
                (const_int 4 [0x4])) [2 p_11->time+0 S4 A32])) "timer.c":288:23 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 9 (set (reg:SI 3 r3 [146])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])) "timer.c":288:23 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 9 (set (reg:SI 2 r2 [orig:119 _7 ] [119])
        (minus:SI (reg:SI 2 r2 [orig:118 _6 ] [118])
            (reg:SI 3 r3 [146]))) "timer.c":288:23 45 {*arm_subsi3_insn}
     (nil))
(insn 79 78 80 9 (set (reg/f:SI 3 r3 [147])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":288:23 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 9 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [147])
                (const_int 4 [0x4])) [2 p_11->time+0 S4 A32])
        (reg:SI 2 r2 [orig:119 _7 ] [119])) "timer.c":288:23 253 {*arm_movsi_insn}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 120 148 149 150 151
(code_label 81 80 82 10 58 (nil) [1 uses])
(note 82 81 83 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 10 (set (reg/f:SI 3 r3 [148])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":290:19 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 10 (set (reg:SI 2 r2 [149])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [2 time+0 S4 A32])) "timer.c":290:19 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 10 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [148])
                (const_int 4 [0x4])) [2 t_19->time+0 S4 A32])
        (reg:SI 2 r2 [149])) "timer.c":290:19 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 10 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":291:16 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 10 (set (reg/f:SI 3 r3 [orig:120 tq.30_8 ] [120])
        (mem/f/c:SI (reg/f:SI 3 r3 [150]) [5 tq+0 S4 A32])) "timer.c":291:16 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 10 (set (reg:SI 2 r2 [151])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":291:14 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [151])
            (reg/f:SI 3 r3 [orig:120 tq.30_8 ] [120]))) "timer.c":291:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 90 89 91 10 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 101)
            (pc))) "timer.c":291:14 273 {arm_cond_branch}
     (nil)
 -> 101)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 121 152 153 154 155
(note 91 90 92 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 11 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":292:23 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 11 (set (reg/f:SI 2 r2 [orig:121 tq.31_9 ] [121])
        (mem/f/c:SI (reg/f:SI 3 r3 [152]) [5 tq+0 S4 A32])) "timer.c":292:23 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 11 (set (reg/f:SI 3 r3 [153])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":292:23 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 11 (set (mem/f:SI (reg/f:SI 3 r3 [153]) [5 t_19->next+0 S4 A32])
        (reg/f:SI 2 r2 [orig:121 tq.31_9 ] [121])) "timer.c":292:23 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 97 11 (set (reg/f:SI 2 r2 [154])
        (symbol_ref:SI ("tq") [flags 0x2]  <var_decl 0x7f50606127e0 tq>)) "timer.c":293:18 253 {*arm_movsi_insn}
     (nil))
(insn 97 96 98 11 (set (reg/f:SI 3 r3 [155])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":293:18 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 125 11 (set (mem/f/c:SI (reg/f:SI 2 r2 [154]) [5 tq+0 S4 A32])
        (reg/f:SI 3 r3 [155])) "timer.c":293:18 253 {*arm_movsi_insn}
     (nil))
(jump_insn 125 98 126 11 (set (pc)
        (label_ref 109)) 284 {*arm_jump}
     (nil)
 -> 109)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 126 125 101)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 156 157 158 159
(code_label 101 126 102 12 59 (nil) [1 uses])
(note 102 101 103 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 103 102 104 12 (set (reg/f:SI 3 r3 [156])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":296:25 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 12 (set (reg/f:SI 2 r2 [157])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [5 p+0 S4 A64])) "timer.c":296:25 253 {*arm_movsi_insn}
     (nil))
(insn 105 104 106 12 (set (mem/f:SI (reg/f:SI 3 r3 [156]) [5 t_19->next+0 S4 A32])
        (reg/f:SI 2 r2 [157])) "timer.c":296:25 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 12 (set (reg/f:SI 3 r3 [158])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 q+0 S4 A32])) "timer.c":297:25 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 12 (set (reg/f:SI 2 r2 [159])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 t+0 S4 A32])) "timer.c":297:25 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 109 12 (set (mem/f:SI (reg/f:SI 3 r3 [158]) [5 q_12->next+0 S4 A32])
        (reg/f:SI 2 r2 [159])) "timer.c":297:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       13 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 1, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;;              3 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122
(code_label 109 108 110 13 53 (nil) [2 uses])
(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 111 110 112 13 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 ps+0 S4 A64])) "timer.c":302:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 112 111 113 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7f5060622700 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":302:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(call_insn 113 112 116 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printTQ") [flags 0x3]  <function_decl 0x7f506060af00 printTQ>) [0 printTQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "timer.c":304:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 116 113 117 13 (clobber (reg/i:SI 0 r0)) "timer.c":308:1 -1
     (nil))
(insn 117 116 120 13 (clobber (reg:SI 3 r3 [orig:122 <retval> ] [122])) "timer.c":308:1 -1
     (nil))
(insn 120 117 115 13 (const_int 0 [0]) "timer.c":308:1 311 {nop}
     (nil))
(insn 115 120 118 13 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:122 <retval> ] [122])) "timer.c":308:1 253 {*arm_movsi_insn}
     (nil))
(insn 118 115 133 13 (use (reg/i:SI 0 r0)) "timer.c":308:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 133 118 0 NOTE_INSN_DELETED)
