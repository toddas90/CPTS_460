
;; Function kbd_init (kbd_init, funcdef_no=0, decl_uid=4487, cgraph_uid=1, symbol_order=10)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":58:10 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 127)
        (const_int 1 [0x1])) "kbd.c":58:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/v/c:SI (reg/f:SI 126) [3 keyset+0 S4 A32])
        (reg:SI 127)) "kbd.c":58:10 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 128)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":60:8 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 128)) "kbd.c":60:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":61:12 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 130)
        (const_int 268460032 [0x10006000])) "kbd.c":61:12 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem/v/f:SI (reg/f:SI 129) [2 kp_16->base+0 S4 A32])
        (reg:SI 130)) "kbd.c":61:12 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":62:7 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 131) [2 kp_16->base+0 S4 A32])) "kbd.c":62:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 132)
        (const_int 16 [0x10])) "kbd.c":62:23 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "kbd.c":62:23 263 {*arm_movqi_insn}
     (nil))
(insn 17 16 18 2 (set (mem:QI (reg/f:SI 113 [ _1 ]) [0 *_1+0 S1 A8])
        (reg:QI 133)) "kbd.c":62:23 263 {*arm_movqi_insn}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":63:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 114 [ _2 ])
        (mem/v/f:SI (reg/f:SI 134) [2 kp_16->base+0 S4 A32])) "kbd.c":63:7 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 114 [ _2 ])
            (const_int 12 [0xc]))) "kbd.c":63:14 7 {*arm_addsi3}
     (nil))
(insn 21 20 22 2 (set (reg:SI 135)
        (const_int 8 [0x8])) "kbd.c":63:23 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (reg:QI 136)
        (subreg:QI (reg:SI 135) 0)) "kbd.c":63:23 263 {*arm_movqi_insn}
     (nil))
(insn 23 22 24 2 (set (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])
        (reg:QI 136)) "kbd.c":63:23 263 {*arm_movqi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 116 [ _4 ])
        (const_int 0 [0])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 136 [0x88])) [3 kp_16->tail+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:23 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:12 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 132 [0x84])) [3 kp_16->head+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:12 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:12 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 2 (set (reg:SI 140)
        (const_int 0 [0])) "kbd.c":65:12 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 2 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 140 [0x8c])) [3 kp_16->data+0 S4 A32])
        (reg:SI 140)) "kbd.c":65:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:26 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (reg:SI 142)
        (const_int 128 [0x80])) "kbd.c":65:26 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 2 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 144 [0x90])) [3 kp_16->room+0 S4 A32])
        (reg:SI 142)) "kbd.c":65:26 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 2 (set (reg/f:SI 143)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":66:11 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 2 (set (reg:SI 144)
        (const_int 0 [0])) "kbd.c":66:11 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 2 (set (mem/c:SI (reg/f:SI 143) [3 shifted+0 S4 A32])
        (reg:SI 144)) "kbd.c":66:11 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 2 (set (reg/f:SI 145)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (mem/c:SI (reg/f:SI 145) [3 release+0 S4 A32])
        (reg:SI 146)) "kbd.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 2 (set (reg/f:SI 147)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":68:11 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 2 (set (reg:SI 148)
        (const_int 0 [0])) "kbd.c":68:11 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 2 (set (mem/c:SI (reg/f:SI 147) [3 control+0 S4 A32])
        (reg:SI 148)) "kbd.c":68:11 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fcdc0b61870 *.LC0>)) "kbd.c":70:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 45 44 53 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":70:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
;;              4 (DFS_BACK)
(code_label 53 45 46 4 2 (nil) [1 uses])
(note 46 53 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 4 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 4 (set (reg/f:SI 117 [ _5 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_16->base+0 S4 A32])) "kbd.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 4 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 4 [0x4]))) "kbd.c":71:22 7 {*arm_addsi3}
     (nil))
(insn 50 49 51 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8]))) "kbd.c":71:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 51 50 52 4 (set (reg:SI 120 [ _8 ])
        (reg:SI 119 [ _7 ])) "kbd.c":71:31 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 54 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 16 [0x10]))) "kbd.c":71:31 90 {*arm_andsi3_insn}
     (nil))
(insn 54 52 55 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "kbd.c":71:39 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "kbd.c":71:39 273 {arm_cond_branch}
     (nil)
 -> 53)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg/f:SI 150)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":72:15 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 5 (set (reg/f:SI 122 [ _10 ])
        (mem/v/f:SI (reg/f:SI 150) [2 kp_16->base+0 S4 A32])) "kbd.c":72:15 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 5 (set (reg:QI 151)
        (mem:QI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 8 [0x8])) [0 MEM[(char *)_10 + 8B]+0 S1 A8])) "kbd.c":72:9 263 {*arm_movqi_insn}
     (nil))
(insn 60 59 61 5 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8])
        (reg:QI 151)) "kbd.c":72:9 263 {*arm_movqi_insn}
     (nil))
(insn 61 60 62 5 (set (reg:SI 123 [ _11 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":73:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "kbd.c":73:3 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7fcdc0b61900 *.LC1>)) "kbd.c":73:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":73:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":74:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 152)
            (const_int 90 [0x5a]))) "kbd.c":74:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "kbd.c":74:6 273 {arm_cond_branch}
     (nil)
 -> 72)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 153)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":75:11 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 6 (set (reg:SI 154)
        (const_int 2 [0x2])) "kbd.c":75:11 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 6 (set (mem/v/c:SI (reg/f:SI 153) [3 keyset+0 S4 A32])
        (reg:SI 154)) "kbd.c":75:11 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 72 71 73 7 3 (nil) [1 uses])
(note 73 72 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 7 (set (reg/f:SI 155)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 7 (set (reg:SI 124 [ keyset.0_12 ])
        (mem/v/c:SI (reg/f:SI 155) [3 keyset+0 S4 A32])) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 7 (set (reg:SI 1 r1)
        (reg:SI 124 [ keyset.0_12 ])) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 7 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7fcdc0b61990 *.LC2>)) "kbd.c":76:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 81 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":76:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 81 78 82 7 (clobber (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (nil))
(insn 82 81 85 7 (clobber (reg:SI 125 [ <retval> ])) "kbd.c":77:1 -1
     (nil))
(insn 85 82 80 7 (const_int 0 [0]) "kbd.c":77:1 311 {nop}
     (nil))
(insn 80 85 83 7 (set (reg/i:SI 0 r0)
        (reg:SI 125 [ <retval> ])) "kbd.c":77:1 253 {*arm_movsi_insn}
     (nil))
(insn 83 80 0 7 (use (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF1 (doF1, funcdef_no=1, decl_uid=4503, cgraph_uid=2, symbol_order=16)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fcdc17fe7e0 running>)) "kbd.c":105:33 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ running.1_1 ])
        (mem/f/c:SI (reg/f:SI 116) [6 running+0 S4 A32])) "kbd.c":105:33 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 114 [ _2 ])
        (mem:SI (plus:SI (reg/f:SI 113 [ running.1_1 ])
                (const_int 24 [0x18])) [3 running.1_1->pid+0 S4 A32])) "kbd.c":105:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "kbd.c":105:3 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fcdc0b61ab0 *.LC3>)) "kbd.c":105:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 10 9 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":105:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 10 14 2 (clobber (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (nil))
(insn 14 13 17 2 (clobber (reg:SI 115 [ <retval> ])) "kbd.c":106:1 -1
     (nil))
(insn 17 14 12 2 (const_int 0 [0]) "kbd.c":106:1 311 {nop}
     (nil))
(insn 12 17 15 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "kbd.c":106:1 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 0 2 (use (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF2 (doF2, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=17)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fcdc17fe6c0 readyQueue>)) "kbd.c":109:5 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ readyQueue.2_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 readyQueue+0 S4 A32])) "kbd.c":109:5 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ readyQueue.2_1 ])) "kbd.c":109:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printQ") [flags 0x41]  <function_decl 0x7fcdc0b13200 printQ>) [0 printQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":109:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (nil))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":110:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":110:1 311 {nop}
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":110:1 253 {*arm_movsi_insn}
     (nil))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF3 (doF3, funcdef_no=3, decl_uid=4508, cgraph_uid=4, symbol_order=18)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("sleepList") [flags 0x40]  <var_decl 0x7fcdc17fe750 sleepList>)) "kbd.c":113:3 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ sleepList.3_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 sleepList+0 S4 A32])) "kbd.c":113:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ sleepList.3_1 ])) "kbd.c":113:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printSleepList") [flags 0x41]  <function_decl 0x7fcdc0b13300 printSleepList>) [0 printSleepList S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":113:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (nil))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":114:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":114:1 311 {nop}
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":114:1 253 {*arm_movsi_insn}
     (nil))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF4 (doF4, funcdef_no=4, decl_uid=4510, cgraph_uid=5, symbol_order=19)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kps") [flags 0x41]  <function_decl 0x7fcdc0b26500 kps>) [0 kps S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":117:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 8 5 9 2 (clobber (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (nil))
(insn 9 8 12 2 (clobber (reg:SI 113 [ <retval> ])) "kbd.c":118:1 -1
     (nil))
(insn 12 9 7 2 (const_int 0 [0]) "kbd.c":118:1 311 {nop}
     (nil))
(insn 7 12 10 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "kbd.c":118:1 253 {*arm_movsi_insn}
     (nil))
(insn 10 7 0 2 (use (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler1 (kbd_handler1, funcdef_no=5, decl_uid=4514, cgraph_uid=6, symbol_order=20)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 170)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":124:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 170)) "kbd.c":124:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":126:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 171) [2 kp_77->base+0 S4 A32])) "kbd.c":126:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":126:21 7 {*arm_addsi3}
     (nil))
(insn 10 9 11 2 (set (reg:QI 172)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":126:8 263 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 172)) "kbd.c":126:8 263 {*arm_movqi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 173)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":135:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 173)
            (const_int 224 [0xe0]))) "kbd.c":135:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":135:6 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 174)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 4 (set (reg:SI 115 [ esc.4_3 ])
        (mem/c:SI (reg/f:SI 174) [3 esc+0 S4 A32])) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 4 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 115 [ esc.4_3 ])
            (const_int 1 [0x1]))) "kbd.c":136:9 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 175)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 4 (set (mem/c:SI (reg/f:SI 175) [3 esc+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":136:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU)
(code_label 21 20 22 5 17 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg/f:SI 176)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 5 (set (reg:SI 117 [ esc.5_5 ])
        (mem/c:SI (reg/f:SI 176) [3 esc+0 S4 A32])) "kbd.c":138:7 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ esc.5_5 ])
            (const_int 0 [0]))) "kbd.c":138:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":138:6 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       6 (FALLTHRU)
;;              8

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:SI 177)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:18 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 32 6 (set (reg:SI 118 [ esc.6_6 ])
        (mem/c:SI (reg/f:SI 177) [3 esc+0 S4 A32])) "kbd.c":138:18 253 {*arm_movsi_insn}
     (nil))
(insn 32 29 33 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ esc.6_6 ])
            (const_int 1 [0x1]))) "kbd.c":138:11 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 33 32 34 6 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":138:11 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 35 34 36 7 (set (pc)
        (label_ref 577)) "kbd.c":139:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 36 35 37)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6
(code_label 37 36 38 8 18 (nil) [2 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg/f:SI 178)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":141:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 8 (set (reg:SI 119 [ esc.7_7 ])
        (mem/c:SI (reg/f:SI 178) [3 esc+0 S4 A32])) "kbd.c":141:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ esc.7_7 ])
            (const_int 2 [0x2]))) "kbd.c":141:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "kbd.c":141:6 273 {arm_cond_branch}
     (nil)
 -> 184)
;;  succ:       9 (FALLTHRU)
;;              26

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:SI 179)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":142:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 45 44 46 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 179)
            (const_int 224 [0xe0]))) "kbd.c":142:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "kbd.c":142:8 273 {arm_cond_branch}
     (nil)
 -> 50)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 48 47 49 10 (set (pc)
        (label_ref 577)) "kbd.c":143:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 49 48 50)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 50 49 51 11 21 (nil) [1 uses])
(note 51 50 52 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 11 (set (reg:QI 180)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":147:11 263 {*arm_movqi_insn}
     (nil))
(insn 53 52 54 11 (set (reg:SI 181)
        (and:SI (subreg:SI (reg:QI 180) 0)
            (const_int 127 [0x7f]))) "kbd.c":147:11 90 {*arm_andsi3_insn}
     (nil))
(insn 54 53 55 11 (set (reg:QI 182)
        (subreg:QI (reg:SI 181) 0)) "kbd.c":147:11 263 {*arm_movqi_insn}
     (nil))
(insn 55 54 56 11 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 182)) "kbd.c":147:11 263 {*arm_movqi_insn}
     (nil))
(insn 56 55 57 11 (set (reg:SI 183)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":149:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 57 56 58 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 183)
            (const_int 83 [0x53]))) "kbd.c":149:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 58 57 59 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "kbd.c":149:9 273 {arm_cond_branch}
     (nil)
 -> 62)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 59 58 60 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 60 59 61 12 (set (pc)
        (label_ref 577)) "kbd.c":152:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 61 60 62)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 62 61 63 13 22 (nil) [1 uses])
(note 63 62 64 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 13 (set (reg:SI 184)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":155:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 65 64 66 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 184)
            (const_int 56 [0x38]))) "kbd.c":155:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 66 65 67 13 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "kbd.c":155:9 273 {arm_cond_branch}
     (nil)
 -> 73)
;;  succ:       14 (FALLTHRU)
;;              15

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 (FALLTHRU)
(note 67 66 68 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 14 (set (reg/f:SI 185)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":156:12 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 14 (set (reg:SI 186)
        (const_int 0 [0])) "kbd.c":156:12 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 14 (set (mem/c:SI (reg/f:SI 185) [3 alt+0 S4 A32])
        (reg:SI 186)) "kbd.c":156:12 253 {*arm_movsi_insn}
     (nil))
(jump_insn 71 70 72 14 (set (pc)
        (label_ref 577)) "kbd.c":157:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 72 71 73)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       13
(code_label 73 72 74 15 23 (nil) [1 uses])
(note 74 73 75 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 15 (set (reg:SI 187)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":160:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 76 75 77 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 187)
            (const_int 29 [0x1d]))) "kbd.c":160:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 77 76 78 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "kbd.c":160:9 273 {arm_cond_branch}
     (nil)
 -> 84)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 (FALLTHRU)
(note 78 77 79 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 16 (set (reg/f:SI 188)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":161:16 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 16 (set (reg:SI 189)
        (const_int 0 [0])) "kbd.c":161:16 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 82 16 (set (mem/c:SI (reg/f:SI 188) [3 control+0 S4 A32])
        (reg:SI 189)) "kbd.c":161:16 253 {*arm_movsi_insn}
     (nil))
(jump_insn 82 81 83 16 (set (pc)
        (label_ref 577)) "kbd.c":162:8 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 83 82 84)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
(code_label 84 83 85 17 24 (nil) [1 uses])
(note 85 84 86 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 17 (set (reg:SI 190)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":165:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 87 86 88 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 190)
            (const_int 72 [0x48]))) "kbd.c":165:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 88 87 89 17 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) "kbd.c":165:9 273 {arm_cond_branch}
     (nil)
 -> 93)
;;  succ:       18 (FALLTHRU)
;;              19

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       17 (FALLTHRU)
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 18 (set (reg/f:SI 191)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":166:15 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 18 (set (reg:SI 192)
        (const_int 11 [0xb])) "kbd.c":166:15 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 18 (set (mem/c:SI (reg/f:SI 191) [3 escKey+0 S4 A32])
        (reg:SI 192)) "kbd.c":166:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       19 (FALLTHRU)

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       17
;;              18 (FALLTHRU)
(code_label 93 92 94 19 25 (nil) [1 uses])
(note 94 93 95 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 19 (set (reg:SI 193)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":167:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 96 95 97 19 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 193)
            (const_int 80 [0x50]))) "kbd.c":167:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 97 96 98 19 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "kbd.c":167:9 273 {arm_cond_branch}
     (nil)
 -> 102)
;;  succ:       20 (FALLTHRU)
;;              21

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
(note 98 97 99 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 20 (set (reg/f:SI 194)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 20 (set (reg:SI 195)
        (const_int 12 [0xc])) "kbd.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 20 (set (mem/c:SI (reg/f:SI 194) [3 escKey+0 S4 A32])
        (reg:SI 195)) "kbd.c":168:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       21 (FALLTHRU)

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       19
;;              20 (FALLTHRU)
(code_label 102 101 103 21 26 (nil) [1 uses])
(note 103 102 104 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 21 (set (reg:SI 196)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":169:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 105 104 106 21 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 196)
            (const_int 75 [0x4b]))) "kbd.c":169:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 106 105 107 21 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) "kbd.c":169:9 273 {arm_cond_branch}
     (nil)
 -> 111)
;;  succ:       22 (FALLTHRU)
;;              23

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       21 (FALLTHRU)
(note 107 106 108 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 22 (set (reg/f:SI 197)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 22 (set (reg:SI 198)
        (const_int 13 [0xd])) "kbd.c":170:15 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 22 (set (mem/c:SI (reg/f:SI 197) [3 escKey+0 S4 A32])
        (reg:SI 198)) "kbd.c":170:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       23 (FALLTHRU)

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       21
;;              22 (FALLTHRU)
(code_label 111 110 112 23 27 (nil) [1 uses])
(note 112 111 113 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 23 (set (reg:SI 199)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":171:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 114 113 115 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 199)
            (const_int 77 [0x4d]))) "kbd.c":171:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 115 114 116 23 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "kbd.c":171:9 273 {arm_cond_branch}
     (nil)
 -> 120)
;;  succ:       24 (FALLTHRU)
;;              25

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       23 (FALLTHRU)
(note 116 115 117 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 24 (set (reg/f:SI 200)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":172:15 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 24 (set (reg:SI 201)
        (const_int 14 [0xe])) "kbd.c":172:15 253 {*arm_movsi_insn}
     (nil))
(insn 119 118 120 24 (set (mem/c:SI (reg/f:SI 200) [3 escKey+0 S4 A32])
        (reg:SI 201)) "kbd.c":172:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       25 (FALLTHRU)

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       23
;;              24 (FALLTHRU)
(code_label 120 119 121 25 28 (nil) [1 uses])
(note 121 120 122 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 25 (set (reg/f:SI 202)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":174:26 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 25 (set (reg:SI 120 [ escKey.8_8 ])
        (mem/c:SI (reg/f:SI 202) [3 escKey+0 S4 A32])) "kbd.c":174:26 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 25 (set (reg/f:SI 203)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:16 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 25 (set (reg:SI 121 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 203)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":174:16 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 127 25 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":174:22 7 {*arm_addsi3}
     (nil))
(insn 127 126 128 25 (set (reg/f:SI 204)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:22 253 {*arm_movsi_insn}
     (nil))
(insn 128 127 129 25 (set (mem/v:SI (plus:SI (reg/f:SI 204)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":174:22 253 {*arm_movsi_insn}
     (nil))
(insn 129 128 130 25 (set (reg:SI 123 [ _12 ])
        (and:SI (reg:SI 120 [ escKey.8_8 ])
            (const_int 255 [0xff]))) "kbd.c":174:26 90 {*arm_andsi3_insn}
     (nil))
(insn 130 129 131 25 (set (reg/f:SI 205)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:26 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 25 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 205)
            (reg:SI 121 [ _9 ]))) "kbd.c":174:26 7 {*arm_addsi3}
     (nil))
(insn 132 131 133 25 (set (reg:QI 207)
        (subreg/s/v:QI (reg:SI 123 [ _12 ]) 0)) "kbd.c":174:26 263 {*arm_movqi_insn}
     (nil))
(insn 133 132 134 25 (set (mem/v:QI (plus:SI (reg/f:SI 206)
                (const_int 4 [0x4])) [0 kp_77->buf[_10]+0 S1 A8])
        (reg:QI 207)) "kbd.c":174:26 263 {*arm_movqi_insn}
     (nil))
(insn 134 133 135 25 (set (reg/f:SI 208)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 135 134 136 25 (set (reg:SI 124 [ _13 ])
        (mem/v:SI (plus:SI (reg/f:SI 208)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 136 135 137 25 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 124 [ _13 ]))
                    (const_int 0 [0])))
            (set (reg:SI 209)
                (minus:SI (const_int 0 [0])
                    (reg:SI 124 [ _13 ])))
        ]) "kbd.c":175:15 46 {subsi3_compare0}
     (nil))
(insn 137 136 138 25 (set (reg:SI 125 [ _14 ])
        (and:SI (reg:SI 124 [ _13 ])
            (const_int 127 [0x7f]))) "kbd.c":175:15 90 {*arm_andsi3_insn}
     (nil))
(insn 138 137 139 25 (set (reg:SI 210)
        (and:SI (reg:SI 209)
            (const_int 127 [0x7f]))) "kbd.c":175:15 90 {*arm_andsi3_insn}
     (nil))
(insn 139 138 140 25 (set (reg:SI 125 [ _14 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 210))
            (reg:SI 125 [ _14 ]))) "kbd.c":175:15 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 124 [ _13 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 140 139 141 25 (set (reg/f:SI 211)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 141 140 142 25 (set (mem/v:SI (plus:SI (reg/f:SI 211)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":175:15 253 {*arm_movsi_insn}
     (nil))
(insn 142 141 143 25 (set (reg/f:SI 212)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 25 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 212)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":177:8 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 145 25 (set (reg:SI 127 [ _16 ])
        (plus:SI (reg:SI 126 [ _15 ])
            (const_int 1 [0x1]))) "kbd.c":177:14 7 {*arm_addsi3}
     (nil))
(insn 145 144 146 25 (set (reg/f:SI 213)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:14 253 {*arm_movsi_insn}
     (nil))
(insn 146 145 147 25 (set (mem/v:SI (plus:SI (reg/f:SI 213)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 127 [ _16 ])) "kbd.c":177:14 253 {*arm_movsi_insn}
     (nil))
(insn 147 146 148 25 (set (reg/f:SI 214)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:16 253 {*arm_movsi_insn}
     (nil))
(insn 148 147 149 25 (set (reg:SI 128 [ _17 ])
        (mem/v:SI (plus:SI (reg/f:SI 214)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":179:16 253 {*arm_movsi_insn}
     (nil))
(insn 149 148 150 25 (set (reg:SI 129 [ _19 ])
        (plus:SI (reg:SI 128 [ _17 ])
            (const_int 1 [0x1]))) "kbd.c":179:22 7 {*arm_addsi3}
     (nil))
(insn 150 149 151 25 (set (reg/f:SI 215)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:22 253 {*arm_movsi_insn}
     (nil))
(insn 151 150 152 25 (set (mem/v:SI (plus:SI (reg/f:SI 215)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 129 [ _19 ])) "kbd.c":179:22 253 {*arm_movsi_insn}
     (nil))
(insn 152 151 153 25 (set (reg/f:SI 216)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:26 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 25 (set (reg/f:SI 217)
        (plus:SI (reg/f:SI 216)
            (reg:SI 128 [ _17 ]))) "kbd.c":179:26 7 {*arm_addsi3}
     (nil))
(insn 154 153 155 25 (set (reg:SI 218)
        (const_int 10 [0xa])) "kbd.c":179:26 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 25 (set (reg:QI 219)
        (subreg:QI (reg:SI 218) 0)) "kbd.c":179:26 263 {*arm_movqi_insn}
     (nil))
(insn 156 155 157 25 (set (mem/v:QI (plus:SI (reg/f:SI 217)
                (const_int 4 [0x4])) [0 kp_77->buf[_18]+0 S1 A8])
        (reg:QI 219)) "kbd.c":179:26 263 {*arm_movqi_insn}
     (nil))
(insn 157 156 158 25 (set (reg/f:SI 220)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 158 157 159 25 (set (reg:SI 130 [ _20 ])
        (mem/v:SI (plus:SI (reg/f:SI 220)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 159 158 160 25 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 130 [ _20 ]))
                    (const_int 0 [0])))
            (set (reg:SI 221)
                (minus:SI (const_int 0 [0])
                    (reg:SI 130 [ _20 ])))
        ]) "kbd.c":180:15 46 {subsi3_compare0}
     (nil))
(insn 160 159 161 25 (set (reg:SI 131 [ _21 ])
        (and:SI (reg:SI 130 [ _20 ])
            (const_int 127 [0x7f]))) "kbd.c":180:15 90 {*arm_andsi3_insn}
     (nil))
(insn 161 160 162 25 (set (reg:SI 222)
        (and:SI (reg:SI 221)
            (const_int 127 [0x7f]))) "kbd.c":180:15 90 {*arm_andsi3_insn}
     (nil))
(insn 162 161 163 25 (set (reg:SI 131 [ _21 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 222))
            (reg:SI 131 [ _21 ]))) "kbd.c":180:15 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 130 [ _20 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 163 162 164 25 (set (reg/f:SI 223)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 164 163 165 25 (set (mem/v:SI (plus:SI (reg/f:SI 223)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 131 [ _21 ])) "kbd.c":180:15 253 {*arm_movsi_insn}
     (nil))
(insn 165 164 166 25 (set (reg/f:SI 224)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:8 253 {*arm_movsi_insn}
     (nil))
(insn 166 165 167 25 (set (reg:SI 132 [ _22 ])
        (mem/v:SI (plus:SI (reg/f:SI 224)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":181:8 253 {*arm_movsi_insn}
     (nil))
(insn 167 166 168 25 (set (reg:SI 133 [ _23 ])
        (plus:SI (reg:SI 132 [ _22 ])
            (const_int 1 [0x1]))) "kbd.c":181:14 7 {*arm_addsi3}
     (nil))
(insn 168 167 169 25 (set (reg/f:SI 225)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:14 253 {*arm_movsi_insn}
     (nil))
(insn 169 168 170 25 (set (mem/v:SI (plus:SI (reg/f:SI 225)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 133 [ _23 ])) "kbd.c":181:14 253 {*arm_movsi_insn}
     (nil))
(insn 170 169 171 25 (set (reg/f:SI 226)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:20 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 172 25 (set (reg:SI 134 [ _24 ])
        (mem/v:SI (plus:SI (reg/f:SI 226)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])) "kbd.c":181:20 253 {*arm_movsi_insn}
     (nil))
(insn 172 171 173 25 (set (reg:SI 135 [ _25 ])
        (plus:SI (reg:SI 134 [ _24 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":181:26 7 {*arm_addsi3}
     (nil))
(insn 173 172 174 25 (set (reg/f:SI 227)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:26 253 {*arm_movsi_insn}
     (nil))
(insn 174 173 175 25 (set (mem/v:SI (plus:SI (reg/f:SI 227)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])
        (reg:SI 135 [ _25 ])) "kbd.c":181:26 253 {*arm_movsi_insn}
     (nil))
(insn 175 174 176 25 (set (reg:SI 228)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":184:6 253 {*arm_movsi_insn}
     (nil))
(insn 176 175 177 25 (set (reg/f:SI 136 [ _26 ])
        (plus:SI (reg:SI 228)
            (const_int 140 [0x8c]))) "kbd.c":184:6 7 {*arm_addsi3}
     (nil))
(insn 177 176 178 25 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ _26 ])) "kbd.c":184:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 178 177 179 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":184:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 179 178 180 25 (set (reg/f:SI 229)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":186:10 253 {*arm_movsi_insn}
     (nil))
(insn 180 179 181 25 (set (reg:SI 230)
        (const_int 0 [0])) "kbd.c":186:10 253 {*arm_movsi_insn}
     (nil))
(insn 181 180 182 25 (set (mem/c:SI (reg/f:SI 229) [3 esc+0 S4 A32])
        (reg:SI 230)) "kbd.c":186:10 253 {*arm_movsi_insn}
     (nil))
(jump_insn 182 181 183 25 (set (pc)
        (label_ref 577)) "kbd.c":187:6 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 183 182 184)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 184 183 185 26 20 (nil) [1 uses])
(note 185 184 186 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 191 26 (set (reg:SI 137 [ code.9_27 ])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":190:7 183 {*arm_extendqisi}
     (nil))
(insn 191 186 192 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137 [ code.9_27 ])
            (const_int 0 [0]))) "kbd.c":190:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 192 191 193 26 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 232)
            (pc))) "kbd.c":190:6 273 {arm_cond_branch}
     (nil)
 -> 232)
;;  succ:       27 (FALLTHRU)
;;              35

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       26 (FALLTHRU)
(note 193 192 194 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 27 (set (reg:QI 233)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":192:10 263 {*arm_movqi_insn}
     (nil))
(insn 195 194 196 27 (set (reg:SI 234)
        (and:SI (subreg:SI (reg:QI 233) 0)
            (const_int 127 [0x7f]))) "kbd.c":192:10 90 {*arm_andsi3_insn}
     (nil))
(insn 196 195 197 27 (set (reg:QI 235)
        (subreg:QI (reg:SI 234) 0)) "kbd.c":192:10 263 {*arm_movqi_insn}
     (nil))
(insn 197 196 198 27 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 235)) "kbd.c":192:10 263 {*arm_movqi_insn}
     (nil))
(insn 198 197 199 27 (set (reg:SI 236)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 199 198 200 27 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 236)
            (const_int 42 [0x2a]))) "kbd.c":193:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 200 199 201 27 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "kbd.c":193:8 273 {arm_cond_branch}
     (nil)
 -> 205)
;;  succ:       29
;;              28 (FALLTHRU)

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 (FALLTHRU)
(note 201 200 202 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 28 (set (reg:SI 237)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 203 202 204 28 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 237)
            (const_int 54 [0x36]))) "kbd.c":193:24 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 204 203 205 28 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "kbd.c":193:24 273 {arm_cond_branch}
     (nil)
 -> 210)
;;  succ:       29 (FALLTHRU)
;;              30

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       27
;;              28 (FALLTHRU)
(code_label 205 204 206 29 30 (nil) [1 uses])
(note 206 205 207 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 29 (set (reg/f:SI 238)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":194:13 253 {*arm_movsi_insn}
     (nil))
(insn 208 207 209 29 (set (reg:SI 239)
        (const_int 0 [0])) "kbd.c":194:13 253 {*arm_movsi_insn}
     (nil))
(insn 209 208 210 29 (set (mem/c:SI (reg/f:SI 238) [3 shift+0 S4 A32])
        (reg:SI 239)) "kbd.c":194:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       30 (FALLTHRU)

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       28
;;              29 (FALLTHRU)
(code_label 210 209 211 30 31 (nil) [1 uses])
(note 211 210 212 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 30 (set (reg:SI 240)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":195:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 213 212 214 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 240)
            (const_int 29 [0x1d]))) "kbd.c":195:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 214 213 215 30 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) "kbd.c":195:8 273 {arm_cond_branch}
     (nil)
 -> 219)
;;  succ:       31 (FALLTHRU)
;;              32

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       30 (FALLTHRU)
(note 215 214 216 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 31 (set (reg/f:SI 241)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":196:15 253 {*arm_movsi_insn}
     (nil))
(insn 217 216 218 31 (set (reg:SI 242)
        (const_int 0 [0])) "kbd.c":196:15 253 {*arm_movsi_insn}
     (nil))
(insn 218 217 219 31 (set (mem/c:SI (reg/f:SI 241) [3 control+0 S4 A32])
        (reg:SI 242)) "kbd.c":196:15 253 {*arm_movsi_insn}
     (nil))
;;  succ:       32 (FALLTHRU)

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;;              31 (FALLTHRU)
(code_label 219 218 220 32 32 (nil) [1 uses])
(note 220 219 221 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 32 (set (reg:SI 243)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":197:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 222 221 223 32 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 243)
            (const_int 56 [0x38]))) "kbd.c":197:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 223 222 224 32 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 577)
            (pc))) "kbd.c":197:8 273 {arm_cond_branch}
     (nil)
 -> 577)
;;  succ:       33 (FALLTHRU)
;;              83

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 35, flags: (NEW, REACHABLE, RTL)
;;  pred:       32 (FALLTHRU)
(note 224 223 225 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 33 (set (reg/f:SI 244)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":198:11 253 {*arm_movsi_insn}
     (nil))
(insn 226 225 227 33 (set (reg:SI 245)
        (const_int 0 [0])) "kbd.c":198:11 253 {*arm_movsi_insn}
     (nil))
(insn 227 226 230 33 (set (mem/c:SI (reg/f:SI 244) [3 alt+0 S4 A32])
        (reg:SI 245)) "kbd.c":198:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 230 227 231 33 (set (pc)
        (label_ref 577)) "kbd.c":199:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 231 230 232)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 33, next block 36, flags: (NEW, REACHABLE, RTL)
;;  pred:       26
(code_label 232 231 233 35 29 (nil) [1 uses])
(note 233 232 234 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 35 (set (reg:SI 246)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 235 234 236 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 246)
            (const_int 42 [0x2a]))) "kbd.c":203:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 236 235 237 35 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 241)
            (pc))) "kbd.c":203:6 273 {arm_cond_branch}
     (nil)
 -> 241)
;;  succ:       37
;;              36 (FALLTHRU)

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL)
;;  pred:       35 (FALLTHRU)
(note 237 236 238 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 36 (set (reg:SI 247)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 239 238 240 36 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 247)
            (const_int 54 [0x36]))) "kbd.c":203:22 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 240 239 241 36 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "kbd.c":203:22 273 {arm_cond_branch}
     (nil)
 -> 248)
;;  succ:       37 (FALLTHRU)
;;              38

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL)
;;  pred:       35
;;              36 (FALLTHRU)
(code_label 241 240 242 37 34 (nil) [1 uses])
(note 242 241 243 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 244 37 (set (reg/f:SI 248)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 244 243 245 37 (set (reg:SI 249)
        (const_int 1 [0x1])) "kbd.c":204:11 253 {*arm_movsi_insn}
     (nil))
(insn 245 244 246 37 (set (mem/c:SI (reg/f:SI 248) [3 shift+0 S4 A32])
        (reg:SI 249)) "kbd.c":204:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 246 245 247 37 (set (pc)
        (label_ref 577)) "kbd.c":205:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 247 246 248)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL)
;;  pred:       36
(code_label 248 247 249 38 35 (nil) [1 uses])
(note 249 248 250 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 38 (set (reg:SI 250)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":207:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 251 250 252 38 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 250)
            (const_int 56 [0x38]))) "kbd.c":207:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 252 251 253 38 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) "kbd.c":207:6 273 {arm_cond_branch}
     (nil)
 -> 259)
;;  succ:       39 (FALLTHRU)
;;              40

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL)
;;  pred:       38 (FALLTHRU)
(note 253 252 254 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 39 (set (reg/f:SI 251)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":208:9 253 {*arm_movsi_insn}
     (nil))
(insn 255 254 256 39 (set (reg:SI 252)
        (const_int 1 [0x1])) "kbd.c":208:9 253 {*arm_movsi_insn}
     (nil))
(insn 256 255 257 39 (set (mem/c:SI (reg/f:SI 251) [3 alt+0 S4 A32])
        (reg:SI 252)) "kbd.c":208:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 257 256 258 39 (set (pc)
        (label_ref 577)) "kbd.c":209:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 258 257 259)
;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL)
;;  pred:       38
(code_label 259 258 260 40 36 (nil) [1 uses])
(note 260 259 261 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 40 (set (reg:SI 253)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":211:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 262 261 263 40 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 253)
            (const_int 29 [0x1d]))) "kbd.c":211:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 263 262 264 40 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) "kbd.c":211:6 273 {arm_cond_branch}
     (nil)
 -> 270)
;;  succ:       41 (FALLTHRU)
;;              42

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL)
;;  pred:       40 (FALLTHRU)
(note 264 263 265 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 41 (set (reg/f:SI 254)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":212:13 253 {*arm_movsi_insn}
     (nil))
(insn 266 265 267 41 (set (reg:SI 255)
        (const_int 1 [0x1])) "kbd.c":212:13 253 {*arm_movsi_insn}
     (nil))
(insn 267 266 268 41 (set (mem/c:SI (reg/f:SI 254) [3 control+0 S4 A32])
        (reg:SI 255)) "kbd.c":212:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 268 267 269 41 (set (pc)
        (label_ref 577)) "kbd.c":213:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 269 268 270)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL)
;;  pred:       40
(code_label 270 269 271 42 37 (nil) [1 uses])
(note 271 270 272 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 42 (set (reg:SI 256)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":216:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 273 272 274 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 256)
            (const_int 58 [0x3a]))) "kbd.c":216:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 274 273 275 42 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":216:6 273 {arm_cond_branch}
     (nil)
 -> 283)
;;  succ:       43 (FALLTHRU)
;;              44

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL)
;;  pred:       42 (FALLTHRU)
(note 275 274 276 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 43 (set (reg/f:SI 257)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:18 253 {*arm_movsi_insn}
     (nil))
(insn 277 276 278 43 (set (reg:SI 138 [ capslock.10_28 ])
        (mem/c:SI (reg/f:SI 257) [3 capslock+0 S4 A32])) "kbd.c":217:18 253 {*arm_movsi_insn}
     (nil))
(insn 278 277 279 43 (set (reg:SI 139 [ _29 ])
        (minus:SI (const_int 1 [0x1])
            (reg:SI 138 [ capslock.10_28 ]))) "kbd.c":217:18 45 {*arm_subsi3_insn}
     (nil))
(insn 279 278 280 43 (set (reg/f:SI 258)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:14 253 {*arm_movsi_insn}
     (nil))
(insn 280 279 281 43 (set (mem/c:SI (reg/f:SI 258) [3 capslock+0 S4 A32])
        (reg:SI 139 [ _29 ])) "kbd.c":217:14 253 {*arm_movsi_insn}
     (nil))
(jump_insn 281 280 282 43 (set (pc)
        (label_ref 577)) "kbd.c":218:5 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 282 281 283)
;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL)
;;  pred:       42
(code_label 283 282 284 44 38 (nil) [1 uses])
(note 284 283 285 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 44 (set (reg/f:SI 259)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":221:7 253 {*arm_movsi_insn}
     (nil))
(insn 286 285 287 44 (set (reg:SI 140 [ control.11_30 ])
        (mem/c:SI (reg/f:SI 259) [3 control+0 S4 A32])) "kbd.c":221:7 253 {*arm_movsi_insn}
     (nil))
(insn 287 286 288 44 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140 [ control.11_30 ])
            (const_int 0 [0]))) "kbd.c":221:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 288 287 289 44 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:6 273 {arm_cond_branch}
     (nil)
 -> 301)
;;  succ:       45 (FALLTHRU)
;;              48

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL)
;;  pred:       44 (FALLTHRU)
(note 289 288 290 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 45 (set (reg/f:SI 260)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":221:15 253 {*arm_movsi_insn}
     (nil))
(insn 291 290 292 45 (set (reg:SI 141 [ alt.12_31 ])
        (mem/c:SI (reg/f:SI 260) [3 alt+0 S4 A32])) "kbd.c":221:15 253 {*arm_movsi_insn}
     (nil))
(insn 292 291 293 45 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 141 [ alt.12_31 ])
            (const_int 0 [0]))) "kbd.c":221:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 293 292 294 45 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:15 273 {arm_cond_branch}
     (nil)
 -> 301)
;;  succ:       46 (FALLTHRU)
;;              48

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL)
;;  pred:       45 (FALLTHRU)
(note 294 293 295 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 46 (set (reg:SI 261)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":221:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 296 295 297 46 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 261)
            (const_int 83 [0x53]))) "kbd.c":221:22 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 297 296 298 46 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:22 273 {arm_cond_branch}
     (nil)
 -> 301)
;;  succ:       47 (FALLTHRU)
;;              48

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL)
;;  pred:       46 (FALLTHRU)
(note 298 297 299 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(jump_insn 299 298 300 47 (set (pc)
        (label_ref 577)) "kbd.c":223:7 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 300 299 301)
;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL)
;;  pred:       44
;;              45
;;              46
(code_label 301 300 302 48 39 (nil) [3 uses])
(note 302 301 303 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 303 302 304 48 (set (reg:SI 262)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":226:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 304 303 305 48 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 262)
            (const_int 59 [0x3b]))) "kbd.c":226:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 305 304 306 48 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) "kbd.c":226:6 273 {arm_cond_branch}
     (nil)
 -> 310)
;;  succ:       49 (FALLTHRU)
;;              50

;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL)
;;  pred:       48 (FALLTHRU)
(note 306 305 307 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(call_insn 307 306 308 49 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF1") [flags 0x3]  <function_decl 0x7fcdc0b13c00 doF1>) [0 doF1 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":227:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 308 307 309 49 (set (pc)
        (label_ref 577)) "kbd.c":227:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 309 308 310)
;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL)
;;  pred:       48
(code_label 310 309 311 50 40 (nil) [1 uses])
(note 311 310 312 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 50 (set (reg:SI 263)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":229:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 313 312 314 50 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 263)
            (const_int 60 [0x3c]))) "kbd.c":229:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 314 313 315 50 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) "kbd.c":229:6 273 {arm_cond_branch}
     (nil)
 -> 319)
;;  succ:       51 (FALLTHRU)
;;              52

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL)
;;  pred:       50 (FALLTHRU)
(note 315 314 316 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(call_insn 316 315 317 51 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF2") [flags 0x3]  <function_decl 0x7fcdc0b13f00 doF2>) [0 doF2 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":230:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 317 316 318 51 (set (pc)
        (label_ref 577)) "kbd.c":230:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 318 317 319)
;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL)
;;  pred:       50
(code_label 319 318 320 52 41 (nil) [1 uses])
(note 320 319 321 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 52 (set (reg:SI 264)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":232:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 322 321 323 52 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 264)
            (const_int 61 [0x3d]))) "kbd.c":232:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 323 322 324 52 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) "kbd.c":232:6 273 {arm_cond_branch}
     (nil)
 -> 328)
;;  succ:       53 (FALLTHRU)
;;              54

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL)
;;  pred:       52 (FALLTHRU)
(note 324 323 325 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(call_insn 325 324 326 53 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF3") [flags 0x3]  <function_decl 0x7fcdc0b26100 doF3>) [0 doF3 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":233:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 326 325 327 53 (set (pc)
        (label_ref 577)) "kbd.c":233:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 327 326 328)
;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL)
;;  pred:       52
(code_label 328 327 329 54 42 (nil) [1 uses])
(note 329 328 330 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 330 329 331 54 (set (reg:SI 265)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":235:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 331 330 332 54 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 265)
            (const_int 62 [0x3e]))) "kbd.c":235:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 332 331 333 54 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 337)
            (pc))) "kbd.c":235:6 273 {arm_cond_branch}
     (nil)
 -> 337)
;;  succ:       55 (FALLTHRU)
;;              56

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL)
;;  pred:       54 (FALLTHRU)
(note 333 332 334 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(call_insn 334 333 335 55 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF4") [flags 0x3]  <function_decl 0x7fcdc0b26300 doF4>) [0 doF4 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":236:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 335 334 336 55 (set (pc)
        (label_ref 577)) "kbd.c":236:14 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 336 335 337)
;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL)
;;  pred:       54
(code_label 337 336 338 56 43 (nil) [1 uses])
(note 338 337 339 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 56 (set (reg/f:SI 266)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":239:14 253 {*arm_movsi_insn}
     (nil))
(insn 340 339 341 56 (set (reg:SI 142 [ shift.14_32 ])
        (mem/c:SI (reg/f:SI 266) [3 shift+0 S4 A32])) "kbd.c":239:14 253 {*arm_movsi_insn}
     (nil))
(insn 341 340 342 56 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 142 [ shift.14_32 ])
            (const_int 0 [0]))) "kbd.c":239:5 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 342 341 343 56 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 349)
            (pc))) "kbd.c":239:5 273 {arm_cond_branch}
     (nil)
 -> 349)
;;  succ:       57 (FALLTHRU)
;;              58

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL)
;;  pred:       56 (FALLTHRU)
(note 343 342 344 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 57 (set (reg:SI 143 [ _33 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:18 175 {*arm_zero_extendqisi2}
     (nil))
(insn 345 344 346 57 (set (reg/f:SI 267)
        (symbol_ref:SI ("sh") [flags 0x2]  <var_decl 0x7fcdc0b1a090 sh>)) "kbd.c":239:5 253 {*arm_movsi_insn}
     (nil))
(insn 346 345 347 57 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 267)
                    (reg:SI 143 [ _33 ])) [0 sh[_33]+0 S1 A8]))) "kbd.c":239:5 175 {*arm_zero_extendqisi2}
     (nil))
(jump_insn 347 346 348 57 (set (pc)
        (label_ref 354)) 284 {*arm_jump}
     (nil)
 -> 354)
;;  succ:       59

(barrier 348 347 349)
;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL)
;;  pred:       56
(code_label 349 348 350 58 44 (nil) [1 uses])
(note 350 349 351 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 58 (set (reg:SI 144 [ _34 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:31 175 {*arm_zero_extendqisi2}
     (nil))
(insn 352 351 353 58 (set (reg/f:SI 268)
        (symbol_ref:SI ("unsh") [flags 0x2]  <var_decl 0x7fcdc0b165a0 unsh>)) "kbd.c":239:5 253 {*arm_movsi_insn}
     (nil))
(insn 353 352 354 58 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 268)
                    (reg:SI 144 [ _34 ])) [0 unsh[_34]+0 S1 A8]))) "kbd.c":239:5 175 {*arm_zero_extendqisi2}
     (nil))
;;  succ:       59 (FALLTHRU)

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL)
;;  pred:       57
;;              58 (FALLTHRU)
(code_label 354 353 355 59 45 (nil) [1 uses])
(note 355 354 356 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 59 (set (reg:QI 269)
        (subreg/s/v:QI (reg:SI 169 [ iftmp.13_64 ]) 0)) "kbd.c":239:5 263 {*arm_movqi_insn}
     (nil))
(insn 357 356 358 59 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 269)) "kbd.c":239:5 263 {*arm_movqi_insn}
     (nil))
(insn 358 357 359 59 (set (reg/f:SI 270)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":241:7 253 {*arm_movsi_insn}
     (nil))
(insn 359 358 360 59 (set (reg:SI 145 [ capslock.15_35 ])
        (mem/c:SI (reg/f:SI 270) [3 capslock+0 S4 A32])) "kbd.c":241:7 253 {*arm_movsi_insn}
     (nil))
(insn 360 359 361 59 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145 [ capslock.15_35 ])
            (const_int 0 [0]))) "kbd.c":241:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 361 360 362 59 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":241:6 273 {arm_cond_branch}
     (nil)
 -> 407)
;;  succ:       60 (FALLTHRU)
;;              66

;; basic block 60, loop depth 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL)
;;  pred:       59 (FALLTHRU)
(note 362 361 367 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 367 362 368 60 (set (reg:SI 273)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 368 367 369 60 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 273)
            (const_int 64 [0x40]))) "kbd.c":242:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 369 368 370 60 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:8 273 {arm_cond_branch}
     (nil)
 -> 385)
;;  succ:       61 (FALLTHRU)
;;              63

;; basic block 61, loop depth 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL)
;;  pred:       60 (FALLTHRU)
(note 370 369 375 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 375 370 376 61 (set (reg:SI 276)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:18 175 {*arm_zero_extendqisi2}
     (nil))
(insn 376 375 377 61 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 276)
            (const_int 90 [0x5a]))) "kbd.c":242:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 377 376 378 61 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:18 273 {arm_cond_branch}
     (nil)
 -> 385)
;;  succ:       62 (FALLTHRU)
;;              63

;; basic block 62, loop depth 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL)
;;  pred:       61 (FALLTHRU)
(note 378 377 379 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 62 (set (reg:QI 277)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":243:4 263 {*arm_movqi_insn}
     (nil))
(insn 380 379 381 62 (set (reg:SI 278)
        (plus:SI (subreg:SI (reg:QI 277) 0)
            (const_int 32 [0x20]))) "kbd.c":243:4 7 {*arm_addsi3}
     (nil))
(insn 381 380 382 62 (set (reg:QI 279)
        (subreg:QI (reg:SI 278) 0)) "kbd.c":243:4 263 {*arm_movqi_insn}
     (nil))
(insn 382 381 383 62 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 279)) "kbd.c":243:4 263 {*arm_movqi_insn}
     (nil))
(jump_insn 383 382 384 62 (set (pc)
        (label_ref 407)) "kbd.c":243:4 284 {*arm_jump}
     (nil)
 -> 407)
;;  succ:       66

(barrier 384 383 385)
;; basic block 63, loop depth 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL)
;;  pred:       60
;;              61
(code_label 385 384 386 63 47 (nil) [2 uses])
(note 386 385 391 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 391 386 392 63 (set (reg:SI 282)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:13 175 {*arm_zero_extendqisi2}
     (nil))
(insn 392 391 393 63 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 282)
            (const_int 96 [0x60]))) "kbd.c":244:13 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 393 392 394 63 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:13 273 {arm_cond_branch}
     (nil)
 -> 407)
;;  succ:       64 (FALLTHRU)
;;              66

;; basic block 64, loop depth 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL)
;;  pred:       63 (FALLTHRU)
(note 394 393 399 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 399 394 400 64 (set (reg:SI 285)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:23 175 {*arm_zero_extendqisi2}
     (nil))
(insn 400 399 401 64 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 285)
            (const_int 122 [0x7a]))) "kbd.c":244:23 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 401 400 402 64 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:23 273 {arm_cond_branch}
     (nil)
 -> 407)
;;  succ:       65 (FALLTHRU)
;;              66

;; basic block 65, loop depth 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL)
;;  pred:       64 (FALLTHRU)
(note 402 401 403 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 65 (set (reg:QI 286)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":245:4 263 {*arm_movqi_insn}
     (nil))
(insn 404 403 405 65 (set (reg:SI 287)
        (plus:SI (subreg:SI (reg:QI 286) 0)
            (const_int -32 [0xffffffffffffffe0]))) "kbd.c":245:4 7 {*arm_addsi3}
     (nil))
(insn 405 404 406 65 (set (reg:QI 288)
        (subreg:QI (reg:SI 287) 0)) "kbd.c":245:4 263 {*arm_movqi_insn}
     (nil))
(insn 406 405 407 65 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 288)) "kbd.c":245:4 263 {*arm_movqi_insn}
     (nil))
;;  succ:       66 (FALLTHRU)

;; basic block 66, loop depth 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL)
;;  pred:       59
;;              62
;;              63
;;              64
;;              65 (FALLTHRU)
(code_label 407 406 408 66 46 (nil) [4 uses])
(note 408 407 409 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 66 (set (reg/f:SI 289)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":248:7 253 {*arm_movsi_insn}
     (nil))
(insn 410 409 411 66 (set (reg:SI 146 [ control.16_36 ])
        (mem/c:SI (reg/f:SI 289) [3 control+0 S4 A32])) "kbd.c":248:7 253 {*arm_movsi_insn}
     (nil))
(insn 411 410 412 66 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 146 [ control.16_36 ])
            (const_int 0 [0]))) "kbd.c":248:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 412 411 413 66 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:6 273 {arm_cond_branch}
     (nil)
 -> 510)
;;  succ:       67 (FALLTHRU)
;;              75

;; basic block 67, loop depth 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL)
;;  pred:       66 (FALLTHRU)
(note 413 412 414 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 67 (set (reg:SI 290)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":248:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 415 414 416 67 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 290)
            (const_int 99 [0x63]))) "kbd.c":248:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 416 415 417 67 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:15 273 {arm_cond_branch}
     (nil)
 -> 510)
;;  succ:       68 (FALLTHRU)
;;              75

;; basic block 68, loop depth 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL)
;;  pred:       67 (FALLTHRU)
(note 417 416 418 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 68 (set (reg:SI 291)
        (const_int 1 [0x1])) "kbd.c":250:11 253 {*arm_movsi_insn}
     (nil))
(insn 419 418 420 68 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 291)) "kbd.c":250:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 420 419 421 68 (set (pc)
        (label_ref 498)) "kbd.c":250:5 284 {*arm_jump}
     (nil)
 -> 498)
;;  succ:       73

(barrier 421 420 500)
;; basic block 69, loop depth 1, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL)
;;  pred:       73
(code_label 500 421 422 69 51 (nil) [1 uses])
(note 422 500 423 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 69 (set (reg/f:SI 292)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 424 423 425 69 (set (reg:SI 293)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 425 424 426 69 (set (reg:SI 294)
        (reg:SI 293)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 426 425 427 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 6 [0x6]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 427 426 428 69 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 65 [0x41]))
        (nil)))
(insn 428 427 429 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 1 [0x1]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 429 428 430 69 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 131 [0x83]))
        (nil)))
(insn 430 429 431 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 3 [0x3]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 431 430 432 69 (set (reg:SI 294)
        (minus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 1047 [0x417]))
        (nil)))
(insn 432 431 433 69 (set (reg:SI 295)
        (ashift:SI (reg:SI 294)
            (const_int 2 [0x2]))) "kbd.c":251:18 147 {*arm_shiftsi3}
     (nil))
(insn 433 432 434 69 (set (reg:SI 294)
        (reg:SI 295)) "kbd.c":251:18 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 434 433 435 69 (set (reg:SI 296)
        (plus:SI (reg/f:SI 292)
            (reg:SI 294))) "kbd.c":251:18 7 {*arm_addsi3}
     (nil))
(insn 435 434 436 69 (set (reg/f:SI 297)
        (plus:SI (reg:SI 296)
            (const_int 28 [0x1c]))) "kbd.c":251:18 7 {*arm_addsi3}
     (nil))
(insn 436 435 437 69 (set (reg:SI 147 [ _37 ])
        (mem:SI (reg/f:SI 297) [3 proc[i_63].status+0 S4 A32])) "kbd.c":251:18 253 {*arm_movsi_insn}
     (nil))
(insn 437 436 438 69 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 147 [ _37 ])
            (const_int 0 [0]))) "kbd.c":251:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 438 437 439 69 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:10 273 {arm_cond_branch}
     (nil)
 -> 493)
;;  succ:       70 (FALLTHRU)
;;              72

;; basic block 70, loop depth 1, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL)
;;  pred:       69 (FALLTHRU)
(note 439 438 440 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 70 (set (reg/f:SI 298)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 441 440 442 70 (set (reg:SI 299)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 442 441 443 70 (set (reg:SI 300)
        (reg:SI 299)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 443 442 444 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 6 [0x6]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 444 443 445 70 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 65 [0x41]))
        (nil)))
(insn 445 444 446 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 1 [0x1]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 446 445 447 70 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 131 [0x83]))
        (nil)))
(insn 447 446 448 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 3 [0x3]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 448 447 449 70 (set (reg:SI 300)
        (minus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 1047 [0x417]))
        (nil)))
(insn 449 448 450 70 (set (reg:SI 301)
        (ashift:SI (reg:SI 300)
            (const_int 2 [0x2]))) "kbd.c":251:51 147 {*arm_shiftsi3}
     (nil))
(insn 450 449 451 70 (set (reg:SI 300)
        (reg:SI 301)) "kbd.c":251:51 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 451 450 452 70 (set (reg:SI 302)
        (plus:SI (reg/f:SI 298)
            (reg:SI 300))) "kbd.c":251:51 7 {*arm_addsi3}
     (nil))
(insn 452 451 453 70 (set (reg/f:SI 303)
        (plus:SI (reg:SI 302)
            (const_int 84 [0x54]))) "kbd.c":251:51 7 {*arm_addsi3}
     (nil))
(insn 453 452 454 70 (set (reg/f:SI 148 [ _38 ])
        (mem/f:SI (reg/f:SI 303) [9 proc[i_63].res+0 S4 A32])) "kbd.c":251:51 253 {*arm_movsi_insn}
     (nil))
(insn 454 453 455 70 (set (reg/f:SI 149 [ _39 ])
        (plus:SI (reg/f:SI 148 [ _38 ])
            (const_int 60 [0x3c]))) "kbd.c":251:55 7 {*arm_addsi3}
     (nil))
(insn 455 454 456 70 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":251:37 253 {*arm_movsi_insn}
     (nil))
(insn 456 455 457 70 (set (reg:SI 0 r0)
        (reg/f:SI 149 [ _39 ])) "kbd.c":251:37 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 457 456 458 70 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":251:37 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 458 457 459 70 (set (reg:SI 150 [ _40 ])
        (reg:SI 0 r0)) "kbd.c":251:37 253 {*arm_movsi_insn}
     (nil))
(insn 459 458 460 70 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 150 [ _40 ])
            (const_int 0 [0]))) "kbd.c":251:34 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 460 459 461 70 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:34 273 {arm_cond_branch}
     (nil)
 -> 493)
;;  succ:       71 (FALLTHRU)
;;              72

;; basic block 71, loop depth 1, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL)
;;  pred:       70 (FALLTHRU)
(note 461 460 462 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 71 (set (reg/f:SI 304)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 463 462 464 71 (set (reg:SI 305)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 464 463 465 71 (set (reg:SI 306)
        (reg:SI 305)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 465 464 466 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 6 [0x6]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 466 465 467 71 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 65 [0x41]))
        (nil)))
(insn 467 466 468 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 1 [0x1]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 468 467 469 71 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 131 [0x83]))
        (nil)))
(insn 469 468 470 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 3 [0x3]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 470 469 471 71 (set (reg:SI 306)
        (minus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 1047 [0x417]))
        (nil)))
(insn 471 470 472 71 (set (reg:SI 307)
        (ashift:SI (reg:SI 306)
            (const_int 2 [0x2]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 472 471 473 71 (set (reg:SI 306)
        (reg:SI 307)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 473 472 474 71 (set (reg:SI 308)
        (plus:SI (reg/f:SI 304)
            (reg:SI 306))) "kbd.c":252:9 7 {*arm_addsi3}
     (nil))
(insn 474 473 475 71 (set (reg/f:SI 309)
        (plus:SI (reg:SI 308)
            (const_int 84 [0x54]))) "kbd.c":252:9 7 {*arm_addsi3}
     (nil))
(insn 475 474 476 71 (set (reg/f:SI 151 [ _41 ])
        (mem/f:SI (reg/f:SI 309) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 476 475 477 71 (set (reg:SI 152 [ _42 ])
        (mem:SI (plus:SI (reg/f:SI 151 [ _41 ])
                (const_int 92 [0x5c])) [3 _41->signal+0 S4 A32])) "kbd.c":252:22 253 {*arm_movsi_insn}
     (nil))
(insn 477 476 478 71 (set (reg/f:SI 310)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 478 477 479 71 (set (reg:SI 311)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 479 478 480 71 (set (reg:SI 312)
        (reg:SI 311)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 480 479 481 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 6 [0x6]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 481 480 482 71 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 65 [0x41]))
        (nil)))
(insn 482 481 483 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 1 [0x1]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 483 482 484 71 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 131 [0x83]))
        (nil)))
(insn 484 483 485 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 3 [0x3]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 485 484 486 71 (set (reg:SI 312)
        (minus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 1047 [0x417]))
        (nil)))
(insn 486 485 487 71 (set (reg:SI 313)
        (ashift:SI (reg:SI 312)
            (const_int 2 [0x2]))) "kbd.c":252:9 147 {*arm_shiftsi3}
     (nil))
(insn 487 486 488 71 (set (reg:SI 312)
        (reg:SI 313)) "kbd.c":252:9 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 488 487 489 71 (set (reg:SI 314)
        (plus:SI (reg/f:SI 310)
            (reg:SI 312))) "kbd.c":252:9 7 {*arm_addsi3}
     (nil))
(insn 489 488 490 71 (set (reg/f:SI 315)
        (plus:SI (reg:SI 314)
            (const_int 84 [0x54]))) "kbd.c":252:9 7 {*arm_addsi3}
     (nil))
(insn 490 489 491 71 (set (reg/f:SI 153 [ _43 ])
        (mem/f:SI (reg/f:SI 315) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 253 {*arm_movsi_insn}
     (nil))
(insn 491 490 492 71 (set (reg:SI 154 [ _44 ])
        (ior:SI (reg:SI 152 [ _42 ])
            (const_int 4 [0x4]))) "kbd.c":252:22 106 {*iorsi3_insn}
     (nil))
(insn 492 491 493 71 (set (mem:SI (plus:SI (reg/f:SI 153 [ _43 ])
                (const_int 92 [0x5c])) [3 _43->signal+0 S4 A32])
        (reg:SI 154 [ _44 ])) "kbd.c":252:22 253 {*arm_movsi_insn}
     (nil))
;;  succ:       72 (FALLTHRU)

;; basic block 72, loop depth 1, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL)
;;  pred:       69
;;              70
;;              71 (FALLTHRU)
(code_label 493 492 494 72 50 (nil) [2 uses])
(note 494 493 495 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 496 72 (set (reg:SI 317)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:25 253 {*arm_movsi_insn}
     (nil))
(insn 496 495 497 72 (set (reg:SI 316)
        (plus:SI (reg:SI 317)
            (const_int 1 [0x1]))) "kbd.c":250:25 7 {*arm_addsi3}
     (nil))
(insn 497 496 498 72 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 316)) "kbd.c":250:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       73 (FALLTHRU,DFS_BACK)

;; basic block 73, loop depth 1, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL)
;;  pred:       68
;;              72 (FALLTHRU,DFS_BACK)
(code_label 498 497 499 73 49 (nil) [1 uses])
(note 499 498 503 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 503 499 504 73 (set (reg:SI 318)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:16 253 {*arm_movsi_insn}
     (nil))
(insn 504 503 505 73 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 318)
            (const_int 63 [0x3f]))) "kbd.c":250:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 505 504 506 73 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 500)
            (pc))) "kbd.c":250:16 273 {arm_cond_branch}
     (nil)
 -> 500)
;;  succ:       69
;;              74 (FALLTHRU)

;; basic block 74, loop depth 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL)
;;  pred:       73 (FALLTHRU)
(note 506 505 507 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 74 (set (reg:SI 319)
        (const_int 10 [0xa])) "kbd.c":255:7 253 {*arm_movsi_insn}
     (nil))
(insn 508 507 509 74 (set (reg:QI 320)
        (subreg:QI (reg:SI 319) 0)) "kbd.c":255:7 263 {*arm_movqi_insn}
     (nil))
(insn 509 508 510 74 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 320)) "kbd.c":255:7 263 {*arm_movqi_insn}
     (nil))
;;  succ:       75 (FALLTHRU)

;; basic block 75, loop depth 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL)
;;  pred:       66
;;              67
;;              74 (FALLTHRU)
(code_label 510 509 511 75 48 (nil) [2 uses])
(note 511 510 512 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 75 (set (reg/f:SI 321)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":258:7 253 {*arm_movsi_insn}
     (nil))
(insn 513 512 514 75 (set (reg:SI 155 [ control.17_45 ])
        (mem/c:SI (reg/f:SI 321) [3 control+0 S4 A32])) "kbd.c":258:7 253 {*arm_movsi_insn}
     (nil))
(insn 514 513 515 75 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155 [ control.17_45 ])
            (const_int 0 [0]))) "kbd.c":258:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 515 514 516 75 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:6 273 {arm_cond_branch}
     (nil)
 -> 529)
;;  succ:       76 (FALLTHRU)
;;              79

;; basic block 76, loop depth 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL)
;;  pred:       75 (FALLTHRU)
(note 516 515 517 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 76 (set (reg:SI 322)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 518 517 519 76 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 322)
            (const_int 100 [0x64]))) "kbd.c":258:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 519 518 520 76 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 524)
            (pc))) "kbd.c":258:15 273 {arm_cond_branch}
     (nil)
 -> 524)
;;  succ:       78
;;              77 (FALLTHRU)

;; basic block 77, loop depth 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL)
;;  pred:       76 (FALLTHRU)
(note 520 519 521 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 77 (set (reg:SI 323)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:25 175 {*arm_zero_extendqisi2}
     (nil))
(insn 522 521 523 77 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 323)
            (const_int 68 [0x44]))) "kbd.c":258:25 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 523 522 524 77 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:25 273 {arm_cond_branch}
     (nil)
 -> 529)
;;  succ:       78 (FALLTHRU)
;;              79

;; basic block 78, loop depth 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL)
;;  pred:       76
;;              77 (FALLTHRU)
(code_label 524 523 525 78 53 (nil) [1 uses])
(note 525 524 526 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 526 525 527 78 (set (reg:SI 324)
        (const_int 4 [0x4])) "kbd.c":259:7 253 {*arm_movsi_insn}
     (nil))
(insn 527 526 528 78 (set (reg:QI 325)
        (subreg:QI (reg:SI 324) 0)) "kbd.c":259:7 263 {*arm_movqi_insn}
     (nil))
(insn 528 527 529 78 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 325)) "kbd.c":259:7 263 {*arm_movqi_insn}
     (nil))
;;  succ:       79 (FALLTHRU)

;; basic block 79, loop depth 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL)
;;  pred:       75
;;              77
;;              78 (FALLTHRU)
(code_label 529 528 530 79 52 (nil) [2 uses])
(note 530 529 531 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 532 79 (set (reg/f:SI 326)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":264:9 253 {*arm_movsi_insn}
     (nil))
(insn 532 531 533 79 (set (reg:SI 156 [ _46 ])
        (mem/v:SI (plus:SI (reg/f:SI 326)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":264:9 253 {*arm_movsi_insn}
     (nil))
(insn 533 532 534 79 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 156 [ _46 ])
            (const_int 128 [0x80]))) "kbd.c":264:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 534 533 535 79 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 538)
            (pc))) "kbd.c":264:6 273 {arm_cond_branch}
     (nil)
 -> 538)
;;  succ:       80 (FALLTHRU)
;;              81

;; basic block 80, loop depth 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL)
;;  pred:       79 (FALLTHRU)
(note 535 534 536 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(jump_insn 536 535 537 80 (set (pc)
        (label_ref 577)) "kbd.c":265:6 284 {*arm_jump}
     (nil)
 -> 577)
;;  succ:       83

(barrier 537 536 538)
;; basic block 81, loop depth 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL)
;;  pred:       79
(code_label 538 537 539 81 54 (nil) [1 uses])
(note 539 538 540 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 81 (set (reg/f:SI 327)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:13 253 {*arm_movsi_insn}
     (nil))
(insn 541 540 542 81 (set (reg:SI 157 [ _47 ])
        (mem/v:SI (plus:SI (reg/f:SI 327)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":267:13 253 {*arm_movsi_insn}
     (nil))
(insn 542 541 543 81 (set (reg:SI 158 [ _49 ])
        (plus:SI (reg:SI 157 [ _47 ])
            (const_int 1 [0x1]))) "kbd.c":267:19 7 {*arm_addsi3}
     (nil))
(insn 543 542 544 81 (set (reg/f:SI 328)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:19 253 {*arm_movsi_insn}
     (nil))
(insn 544 543 545 81 (set (mem/v:SI (plus:SI (reg/f:SI 328)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 158 [ _49 ])) "kbd.c":267:19 253 {*arm_movsi_insn}
     (nil))
(insn 545 544 546 81 (set (reg/f:SI 329)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:23 253 {*arm_movsi_insn}
     (nil))
(insn 546 545 547 81 (set (reg/f:SI 330)
        (plus:SI (reg/f:SI 329)
            (reg:SI 157 [ _47 ]))) "kbd.c":267:23 7 {*arm_addsi3}
     (nil))
(insn 547 546 548 81 (set (reg:QI 331)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":267:23 263 {*arm_movqi_insn}
     (nil))
(insn 548 547 549 81 (set (mem/v:QI (plus:SI (reg/f:SI 330)
                (const_int 4 [0x4])) [0 kp_77->buf[_48]+0 S1 A8])
        (reg:QI 331)) "kbd.c":267:23 263 {*arm_movqi_insn}
     (nil))
(insn 549 548 550 81 (set (reg/f:SI 332)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 550 549 551 81 (set (reg:SI 159 [ _50 ])
        (mem/v:SI (plus:SI (reg/f:SI 332)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 551 550 552 81 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 159 [ _50 ]))
                    (const_int 0 [0])))
            (set (reg:SI 333)
                (minus:SI (const_int 0 [0])
                    (reg:SI 159 [ _50 ])))
        ]) "kbd.c":268:12 46 {subsi3_compare0}
     (nil))
(insn 552 551 553 81 (set (reg:SI 160 [ _51 ])
        (and:SI (reg:SI 159 [ _50 ])
            (const_int 127 [0x7f]))) "kbd.c":268:12 90 {*arm_andsi3_insn}
     (nil))
(insn 553 552 554 81 (set (reg:SI 334)
        (and:SI (reg:SI 333)
            (const_int 127 [0x7f]))) "kbd.c":268:12 90 {*arm_andsi3_insn}
     (nil))
(insn 554 553 555 81 (set (reg:SI 160 [ _51 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 334))
            (reg:SI 160 [ _51 ]))) "kbd.c":268:12 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 159 [ _50 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 555 554 556 81 (set (reg/f:SI 335)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 556 555 557 81 (set (mem/v:SI (plus:SI (reg/f:SI 335)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 160 [ _51 ])) "kbd.c":268:12 253 {*arm_movsi_insn}
     (nil))
(insn 557 556 558 81 (set (reg/f:SI 336)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:5 253 {*arm_movsi_insn}
     (nil))
(insn 558 557 559 81 (set (reg:SI 161 [ _52 ])
        (mem/v:SI (plus:SI (reg/f:SI 336)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":270:5 253 {*arm_movsi_insn}
     (nil))
(insn 559 558 560 81 (set (reg:SI 162 [ _53 ])
        (plus:SI (reg:SI 161 [ _52 ])
            (const_int 1 [0x1]))) "kbd.c":270:11 7 {*arm_addsi3}
     (nil))
(insn 560 559 561 81 (set (reg/f:SI 337)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:11 253 {*arm_movsi_insn}
     (nil))
(insn 561 560 562 81 (set (mem/v:SI (plus:SI (reg/f:SI 337)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 162 [ _53 ])) "kbd.c":270:11 253 {*arm_movsi_insn}
     (nil))
(insn 562 561 563 81 (set (reg:SI 338)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":271:3 253 {*arm_movsi_insn}
     (nil))
(insn 563 562 564 81 (set (reg/f:SI 163 [ _54 ])
        (plus:SI (reg:SI 338)
            (const_int 140 [0x8c]))) "kbd.c":271:3 7 {*arm_addsi3}
     (nil))
(insn 564 563 565 81 (set (reg:SI 0 r0)
        (reg/f:SI 163 [ _54 ])) "kbd.c":271:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 565 564 566 81 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":271:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 566 565 567 81 (set (reg:SI 339)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":273:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 567 566 568 81 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 339)
            (const_int 13 [0xd]))) "kbd.c":273:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 568 567 569 81 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 577)
            (pc))) "kbd.c":273:6 273 {arm_cond_branch}
     (nil)
 -> 577)
;;  succ:       82 (FALLTHRU)
;;              83

;; basic block 82, loop depth 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL)
;;  pred:       81 (FALLTHRU)
(note 569 568 570 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 570 569 571 82 (set (reg/f:SI 340)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 571 570 572 82 (set (reg:SI 164 [ kline.18_55 ])
        (mem/v/c:SI (reg/f:SI 340) [3 kline+0 S4 A32])) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 572 571 573 82 (set (reg:SI 165 [ _56 ])
        (plus:SI (reg:SI 164 [ kline.18_55 ])
            (const_int 1 [0x1]))) "kbd.c":274:10 7 {*arm_addsi3}
     (nil))
(insn 573 572 574 82 (set (reg/f:SI 341)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 574 573 575 82 (set (mem/v/c:SI (reg/f:SI 341) [3 kline+0 S4 A32])
        (reg:SI 165 [ _56 ])) "kbd.c":274:10 253 {*arm_movsi_insn}
     (nil))
(insn 575 574 576 82 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":275:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 576 575 577 82 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":275:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       83 (FALLTHRU)

;; basic block 83, loop depth 0, maybe hot
;;  prev block 82, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              10
;;              12
;;              14
;;              16
;;              25
;;              33
;;              37
;;              39
;;              41
;;              43
;;              47
;;              49
;;              51
;;              53
;;              55
;;              80
;;              81
;;              82 (FALLTHRU)
;;              32
(code_label 577 576 578 83 19 ("out") [19 uses])
(note 578 577 579 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 579 578 580 83 (set (reg/f:SI 342)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":278:7 253 {*arm_movsi_insn}
     (nil))
(insn 580 579 581 83 (set (reg/f:SI 166 [ _57 ])
        (mem/v/f:SI (reg/f:SI 342) [2 kp_77->base+0 S4 A32])) "kbd.c":278:7 253 {*arm_movsi_insn}
     (nil))
(insn 581 580 582 83 (set (reg/f:SI 167 [ _58 ])
        (plus:SI (reg/f:SI 166 [ _57 ])
            (const_int 4 [0x4]))) "kbd.c":278:14 7 {*arm_addsi3}
     (nil))
(insn 582 581 583 83 (set (reg:SI 343)
        (const_int -1 [0xffffffffffffffff])) "kbd.c":278:23 253 {*arm_movsi_insn}
     (nil))
(insn 583 582 584 83 (set (reg:QI 344)
        (subreg:QI (reg:SI 343) 0)) "kbd.c":278:23 263 {*arm_movqi_insn}
     (nil))
(insn 584 583 585 83 (set (mem:QI (reg/f:SI 167 [ _58 ]) [0 *_58+0 S1 A8])
        (reg:QI 344)) "kbd.c":278:23 263 {*arm_movqi_insn}
     (nil))
(insn 585 584 586 83 (set (reg/f:SI 168 [ _59 ])
        (const_int 269746224 [0x10140030])) "kbd.c":279:3 253 {*arm_movsi_insn}
     (nil))
(insn 586 585 587 83 (set (reg:SI 345)
        (const_int 255 [0xff])) "kbd.c":279:13 253 {*arm_movsi_insn}
     (nil))
(insn 587 586 0 83 (set (mem/v:SI (reg/f:SI 168 [ _59 ]) [3 *_59+0 S4 A32])
        (reg:SI 345)) "kbd.c":279:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler2 (kbd_handler2, funcdef_no=6, decl_uid=4529, cgraph_uid=7, symbol_order=21)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 148)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":321:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 148)) "kbd.c":321:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":323:15 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_48->base+0 S4 A32])) "kbd.c":323:15 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":323:22 7 {*arm_addsi3}
     (nil))
(insn 10 9 11 2 (set (reg:QI 150)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":323:9 263 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8])
        (reg:QI 150)) "kbd.c":323:9 263 {*arm_movqi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 151)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":326:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 151)
            (const_int 240 [0xf0]))) "kbd.c":326:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":326:6 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 152)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":327:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 4 (set (reg:SI 153)
        (const_int 1 [0x1])) "kbd.c":327:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 4 (set (mem/c:SI (reg/f:SI 152) [3 release+0 S4 A32])
        (reg:SI 153)) "kbd.c":327:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (label_ref:SI 329)) "kbd.c":328:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 20 19 21)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 21 20 22 5 65 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg/f:SI 154)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":331:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 5 (set (reg:SI 115 [ release.19_3 ])
        (mem/c:SI (reg/f:SI 154) [3 release+0 S4 A32])) "kbd.c":331:7 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ release.19_3 ])
            (const_int 0 [0]))) "kbd.c":331:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:6 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       6 (FALLTHRU)
;;              8

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 155)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":331:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 29 28 30 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155)
            (const_int 18 [0x12]))) "kbd.c":331:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 30 29 31 6 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:15 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg/f:SI 156)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":332:13 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 7 (set (reg:SI 157)
        (const_int 0 [0])) "kbd.c":332:13 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 7 (set (mem/c:SI (reg/f:SI 156) [3 release+0 S4 A32])
        (reg:SI 157)) "kbd.c":332:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 35 34 36 7 (set (pc)
        (label_ref:SI 329)) "kbd.c":333:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 36 35 37)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6
(code_label 37 36 38 8 67 (nil) [2 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg/f:SI 158)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":336:7 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 8 (set (reg:SI 116 [ release.20_4 ])
        (mem/c:SI (reg/f:SI 158) [3 release+0 S4 A32])) "kbd.c":336:7 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ release.20_4 ])
            (const_int 0 [0]))) "kbd.c":336:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:6 273 {arm_cond_branch}
     (nil)
 -> 56)
;;  succ:       9 (FALLTHRU)
;;              11

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:SI 159)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":336:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 45 44 46 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 159)
            (const_int 18 [0x12]))) "kbd.c":336:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:15 273 {arm_cond_branch}
     (nil)
 -> 56)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 10 (set (reg/f:SI 160)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":337:13 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 10 (set (reg:SI 161)
        (const_int 0 [0])) "kbd.c":337:13 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 10 (set (mem/c:SI (reg/f:SI 160) [3 release+0 S4 A32])
        (reg:SI 161)) "kbd.c":337:13 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 10 (set (reg/f:SI 162)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":338:13 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 10 (set (reg:SI 163)
        (const_int 0 [0])) "kbd.c":338:13 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 10 (set (mem/c:SI (reg/f:SI 162) [3 shifted+0 S4 A32])
        (reg:SI 163)) "kbd.c":338:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 54 53 55 10 (set (pc)
        (label_ref:SI 329)) "kbd.c":339:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 55 54 56)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9
(code_label 56 55 57 11 68 (nil) [2 uses])
(note 57 56 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 11 (set (reg/f:SI 164)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":342:7 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 11 (set (reg:SI 117 [ release.21_5 ])
        (mem/c:SI (reg/f:SI 164) [3 release+0 S4 A32])) "kbd.c":342:7 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ release.21_5 ])
            (const_int 0 [0]))) "kbd.c":342:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 61 60 62 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:6 273 {arm_cond_branch}
     (nil)
 -> 75)
;;  succ:       12 (FALLTHRU)
;;              14

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 62 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 12 (set (reg:SI 165)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":342:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 64 63 65 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 165)
            (const_int 18 [0x12]))) "kbd.c":342:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 65 64 66 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:16 273 {arm_cond_branch}
     (nil)
 -> 75)
;;  succ:       13 (FALLTHRU)
;;              14

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 13 (set (reg/f:SI 166)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":343:13 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 13 (set (reg:SI 167)
        (const_int 0 [0])) "kbd.c":343:13 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 13 (set (mem/c:SI (reg/f:SI 166) [3 release+0 S4 A32])
        (reg:SI 167)) "kbd.c":343:13 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 13 (set (reg/f:SI 168)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":344:13 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 13 (set (reg:SI 169)
        (const_int 1 [0x1])) "kbd.c":344:13 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 13 (set (mem/c:SI (reg/f:SI 168) [3 shifted+0 S4 A32])
        (reg:SI 169)) "kbd.c":344:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 73 72 74 13 (set (pc)
        (label_ref:SI 329)) "kbd.c":345:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 74 73 75)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12
(code_label 75 74 76 14 69 (nil) [2 uses])
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg/f:SI 170)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":348:7 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 14 (set (reg:SI 118 [ release.22_6 ])
        (mem/c:SI (reg/f:SI 170) [3 release+0 S4 A32])) "kbd.c":348:7 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ release.22_6 ])
            (const_int 0 [0]))) "kbd.c":348:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 80 79 81 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:6 273 {arm_cond_branch}
     (nil)
 -> 94)
;;  succ:       15 (FALLTHRU)
;;              17

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
(note 81 80 82 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 15 (set (reg:SI 171)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":348:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 83 82 84 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 171)
            (const_int 20 [0x14]))) "kbd.c":348:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 84 83 85 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:16 273 {arm_cond_branch}
     (nil)
 -> 94)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
(note 85 84 86 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 16 (set (reg/f:SI 172)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 16 (set (reg:SI 173)
        (const_int 0 [0])) "kbd.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 16 (set (mem/c:SI (reg/f:SI 172) [3 release+0 S4 A32])
        (reg:SI 173)) "kbd.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 16 (set (reg/f:SI 174)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":350:13 253 {*arm_movsi_insn}
     (nil))
(insn 90 89 91 16 (set (reg:SI 175)
        (const_int 1 [0x1])) "kbd.c":350:13 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 16 (set (mem/c:SI (reg/f:SI 174) [3 control+0 S4 A32])
        (reg:SI 175)) "kbd.c":350:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 92 91 93 16 (set (pc)
        (label_ref:SI 329)) "kbd.c":351:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 93 92 94)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
;;              15
(code_label 94 93 95 17 70 (nil) [2 uses])
(note 95 94 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 17 (set (reg/f:SI 176)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":354:7 253 {*arm_movsi_insn}
     (nil))
(insn 97 96 98 17 (set (reg:SI 119 [ release.23_7 ])
        (mem/c:SI (reg/f:SI 176) [3 release+0 S4 A32])) "kbd.c":354:7 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ release.23_7 ])
            (const_int 0 [0]))) "kbd.c":354:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 99 98 100 17 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:6 273 {arm_cond_branch}
     (nil)
 -> 113)
;;  succ:       18 (FALLTHRU)
;;              20

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       17 (FALLTHRU)
(note 100 99 101 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 18 (set (reg:SI 177)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":354:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 102 101 103 18 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 177)
            (const_int 20 [0x14]))) "kbd.c":354:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 103 102 104 18 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:15 273 {arm_cond_branch}
     (nil)
 -> 113)
;;  succ:       19 (FALLTHRU)
;;              20

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
(note 104 103 105 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 19 (set (reg/f:SI 178)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":355:13 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 19 (set (reg:SI 179)
        (const_int 0 [0])) "kbd.c":355:13 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 19 (set (mem/c:SI (reg/f:SI 178) [3 release+0 S4 A32])
        (reg:SI 179)) "kbd.c":355:13 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 109 19 (set (reg/f:SI 180)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":356:13 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 19 (set (reg:SI 181)
        (const_int 0 [0])) "kbd.c":356:13 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 19 (set (mem/c:SI (reg/f:SI 180) [3 control+0 S4 A32])
        (reg:SI 181)) "kbd.c":356:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 111 110 112 19 (set (pc)
        (label_ref:SI 329)) "kbd.c":357:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 112 111 113)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       17
;;              18
(code_label 113 112 114 20 71 (nil) [2 uses])
(note 114 113 115 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 20 (set (reg/f:SI 182)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":360:7 253 {*arm_movsi_insn}
     (nil))
(insn 116 115 117 20 (set (reg:SI 120 [ shifted.24_8 ])
        (mem/c:SI (reg/f:SI 182) [3 shifted+0 S4 A32])) "kbd.c":360:7 253 {*arm_movsi_insn}
     (nil))
(insn 117 116 118 20 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120 [ shifted.24_8 ])
            (const_int 0 [0]))) "kbd.c":360:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 118 117 119 20 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "kbd.c":360:6 273 {arm_cond_branch}
     (nil)
 -> 126)
;;  succ:       21 (FALLTHRU)
;;              22

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       20 (FALLTHRU)
(note 119 118 120 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 21 (set (reg:SI 121 [ _9 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":361:14 175 {*arm_zero_extendqisi2}
     (nil))
(insn 121 120 122 21 (set (reg/f:SI 183)
        (symbol_ref:SI ("ltab") [flags 0x2]  <var_decl 0x7fcdc0b1a1b0 ltab>)) "kbd.c":361:8 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 21 (set (reg:QI 184)
        (mem:QI (plus:SI (reg/f:SI 183)
                (reg:SI 121 [ _9 ])) [0 ltab[_9]+0 S1 A8])) "kbd.c":361:8 263 {*arm_movqi_insn}
     (nil))
(insn 123 122 124 21 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 184)) "kbd.c":361:8 263 {*arm_movqi_insn}
     (nil))
(jump_insn 124 123 125 21 (set (pc)
        (label_ref 132)) 284 {*arm_jump}
     (nil)
 -> 132)
;;  succ:       23

(barrier 125 124 126)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       20
(code_label 126 125 127 22 72 (nil) [1 uses])
(note 127 126 128 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 22 (set (reg:SI 122 [ _10 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":363:14 175 {*arm_zero_extendqisi2}
     (nil))
(insn 129 128 130 22 (set (reg/f:SI 185)
        (symbol_ref:SI ("utab") [flags 0x2]  <var_decl 0x7fcdc0b1a360 utab>)) "kbd.c":363:8 253 {*arm_movsi_insn}
     (nil))
(insn 130 129 131 22 (set (reg:QI 186)
        (mem:QI (plus:SI (reg/f:SI 185)
                (reg:SI 122 [ _10 ])) [0 utab[_10]+0 S1 A8])) "kbd.c":363:8 263 {*arm_movqi_insn}
     (nil))
(insn 131 130 132 22 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 186)) "kbd.c":363:8 263 {*arm_movqi_insn}
     (nil))
;;  succ:       23 (FALLTHRU)

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       21
;;              22 (FALLTHRU)
(code_label 132 131 133 23 73 (nil) [1 uses])
(note 133 132 134 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 23 (set (reg/f:SI 187)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":366:7 253 {*arm_movsi_insn}
     (nil))
(insn 135 134 136 23 (set (reg:SI 123 [ control.25_11 ])
        (mem/c:SI (reg/f:SI 187) [3 control+0 S4 A32])) "kbd.c":366:7 253 {*arm_movsi_insn}
     (nil))
(insn 136 135 137 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123 [ control.25_11 ])
            (const_int 0 [0]))) "kbd.c":366:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 137 136 138 23 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:6 273 {arm_cond_branch}
     (nil)
 -> 244)
;;  succ:       24 (FALLTHRU)
;;              32

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       23 (FALLTHRU)
(note 138 137 139 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 24 (set (reg:SI 188)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":366:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 140 139 141 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 188)
            (const_int 33 [0x21]))) "kbd.c":366:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 141 140 142 24 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:15 273 {arm_cond_branch}
     (nil)
 -> 244)
;;  succ:       25 (FALLTHRU)
;;              32

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 (FALLTHRU)
(note 142 141 143 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 25 (set (reg:SI 124 [ _12 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":368:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 144 143 145 25 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "kbd.c":368:5 253 {*arm_movsi_insn}
     (nil))
(insn 145 144 146 25 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7fcdc0b61cf0 *.LC5>)) "kbd.c":368:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 146 145 147 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":368:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 147 146 148 25 (set (reg:SI 189)
        (const_int 1 [0x1])) "kbd.c":369:11 253 {*arm_movsi_insn}
     (nil))
(insn 148 147 149 25 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 189)) "kbd.c":369:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 149 148 150 25 (set (pc)
        (label_ref 227)) "kbd.c":369:5 284 {*arm_jump}
     (nil)
 -> 227)
;;  succ:       30

(barrier 150 149 229)
;; basic block 26, loop depth 1, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       30
(code_label 229 150 151 26 77 (nil) [1 uses])
(note 151 229 152 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 26 (set (reg/f:SI 190)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 26 (set (reg:SI 191)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 154 153 155 26 (set (reg:SI 192)
        (reg:SI 191)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 6 [0x6]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 156 155 157 26 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 65 [0x41]))
        (nil)))
(insn 157 156 158 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 1 [0x1]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 158 157 159 26 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 131 [0x83]))
        (nil)))
(insn 159 158 160 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 3 [0x3]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 160 159 161 26 (set (reg:SI 192)
        (minus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 1047 [0x417]))
        (nil)))
(insn 161 160 162 26 (set (reg:SI 193)
        (ashift:SI (reg:SI 192)
            (const_int 2 [0x2]))) "kbd.c":370:18 147 {*arm_shiftsi3}
     (nil))
(insn 162 161 163 26 (set (reg:SI 192)
        (reg:SI 193)) "kbd.c":370:18 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 163 162 164 26 (set (reg:SI 194)
        (plus:SI (reg/f:SI 190)
            (reg:SI 192))) "kbd.c":370:18 7 {*arm_addsi3}
     (nil))
(insn 164 163 165 26 (set (reg/f:SI 195)
        (plus:SI (reg:SI 194)
            (const_int 28 [0x1c]))) "kbd.c":370:18 7 {*arm_addsi3}
     (nil))
(insn 165 164 166 26 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 195) [3 proc[i_41].status+0 S4 A32])) "kbd.c":370:18 253 {*arm_movsi_insn}
     (nil))
(insn 166 165 167 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "kbd.c":370:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 167 166 168 26 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:10 273 {arm_cond_branch}
     (nil)
 -> 222)
;;  succ:       27 (FALLTHRU)
;;              29

;; basic block 27, loop depth 1, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       26 (FALLTHRU)
(note 168 167 169 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 27 (set (reg/f:SI 196)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 170 169 171 27 (set (reg:SI 197)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 172 27 (set (reg:SI 198)
        (reg:SI 197)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 172 171 173 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 6 [0x6]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 173 172 174 27 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 65 [0x41]))
        (nil)))
(insn 174 173 175 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 1 [0x1]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 175 174 176 27 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 131 [0x83]))
        (nil)))
(insn 176 175 177 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 3 [0x3]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 177 176 178 27 (set (reg:SI 198)
        (minus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 1047 [0x417]))
        (nil)))
(insn 178 177 179 27 (set (reg:SI 199)
        (ashift:SI (reg:SI 198)
            (const_int 2 [0x2]))) "kbd.c":370:51 147 {*arm_shiftsi3}
     (nil))
(insn 179 178 180 27 (set (reg:SI 198)
        (reg:SI 199)) "kbd.c":370:51 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 180 179 181 27 (set (reg:SI 200)
        (plus:SI (reg/f:SI 196)
            (reg:SI 198))) "kbd.c":370:51 7 {*arm_addsi3}
     (nil))
(insn 181 180 182 27 (set (reg/f:SI 201)
        (plus:SI (reg:SI 200)
            (const_int 84 [0x54]))) "kbd.c":370:51 7 {*arm_addsi3}
     (nil))
(insn 182 181 183 27 (set (reg/f:SI 126 [ _14 ])
        (mem/f:SI (reg/f:SI 201) [9 proc[i_41].res+0 S4 A32])) "kbd.c":370:51 253 {*arm_movsi_insn}
     (nil))
(insn 183 182 184 27 (set (reg/f:SI 127 [ _15 ])
        (plus:SI (reg/f:SI 126 [ _14 ])
            (const_int 60 [0x3c]))) "kbd.c":370:55 7 {*arm_addsi3}
     (nil))
(insn 184 183 185 27 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":370:37 253 {*arm_movsi_insn}
     (nil))
(insn 185 184 186 27 (set (reg:SI 0 r0)
        (reg/f:SI 127 [ _15 ])) "kbd.c":370:37 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 186 185 187 27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":370:37 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 187 186 188 27 (set (reg:SI 128 [ _16 ])
        (reg:SI 0 r0)) "kbd.c":370:37 253 {*arm_movsi_insn}
     (nil))
(insn 188 187 189 27 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 128 [ _16 ])
            (const_int 0 [0]))) "kbd.c":370:34 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 189 188 190 27 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:34 273 {arm_cond_branch}
     (nil)
 -> 222)
;;  succ:       28 (FALLTHRU)
;;              29

;; basic block 28, loop depth 1, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 (FALLTHRU)
(note 190 189 191 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 28 (set (reg/f:SI 202)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 192 191 193 28 (set (reg:SI 203)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 193 192 194 28 (set (reg:SI 204)
        (reg:SI 203)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 194 193 195 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 6 [0x6]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 195 194 196 28 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 65 [0x41]))
        (nil)))
(insn 196 195 197 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 1 [0x1]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 197 196 198 28 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 131 [0x83]))
        (nil)))
(insn 198 197 199 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 3 [0x3]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 199 198 200 28 (set (reg:SI 204)
        (minus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 1047 [0x417]))
        (nil)))
(insn 200 199 201 28 (set (reg:SI 205)
        (ashift:SI (reg:SI 204)
            (const_int 2 [0x2]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 201 200 202 28 (set (reg:SI 204)
        (reg:SI 205)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 202 201 203 28 (set (reg:SI 206)
        (plus:SI (reg/f:SI 202)
            (reg:SI 204))) "kbd.c":371:9 7 {*arm_addsi3}
     (nil))
(insn 203 202 204 28 (set (reg/f:SI 207)
        (plus:SI (reg:SI 206)
            (const_int 84 [0x54]))) "kbd.c":371:9 7 {*arm_addsi3}
     (nil))
(insn 204 203 205 28 (set (reg/f:SI 129 [ _17 ])
        (mem/f:SI (reg/f:SI 207) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 205 204 206 28 (set (reg:SI 130 [ _18 ])
        (mem:SI (plus:SI (reg/f:SI 129 [ _17 ])
                (const_int 92 [0x5c])) [3 _17->signal+0 S4 A32])) "kbd.c":371:22 253 {*arm_movsi_insn}
     (nil))
(insn 206 205 207 28 (set (reg/f:SI 208)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 207 206 208 28 (set (reg:SI 209)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 208 207 209 28 (set (reg:SI 210)
        (reg:SI 209)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 209 208 210 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 6 [0x6]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 210 209 211 28 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 65 [0x41]))
        (nil)))
(insn 211 210 212 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 1 [0x1]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 212 211 213 28 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 131 [0x83]))
        (nil)))
(insn 213 212 214 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 3 [0x3]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 214 213 215 28 (set (reg:SI 210)
        (minus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 1047 [0x417]))
        (nil)))
(insn 215 214 216 28 (set (reg:SI 211)
        (ashift:SI (reg:SI 210)
            (const_int 2 [0x2]))) "kbd.c":371:9 147 {*arm_shiftsi3}
     (nil))
(insn 216 215 217 28 (set (reg:SI 210)
        (reg:SI 211)) "kbd.c":371:9 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 217 216 218 28 (set (reg:SI 212)
        (plus:SI (reg/f:SI 208)
            (reg:SI 210))) "kbd.c":371:9 7 {*arm_addsi3}
     (nil))
(insn 218 217 219 28 (set (reg/f:SI 213)
        (plus:SI (reg:SI 212)
            (const_int 84 [0x54]))) "kbd.c":371:9 7 {*arm_addsi3}
     (nil))
(insn 219 218 220 28 (set (reg/f:SI 131 [ _19 ])
        (mem/f:SI (reg/f:SI 213) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 253 {*arm_movsi_insn}
     (nil))
(insn 220 219 221 28 (set (reg:SI 132 [ _20 ])
        (ior:SI (reg:SI 130 [ _18 ])
            (const_int 4 [0x4]))) "kbd.c":371:22 106 {*iorsi3_insn}
     (nil))
(insn 221 220 222 28 (set (mem:SI (plus:SI (reg/f:SI 131 [ _19 ])
                (const_int 92 [0x5c])) [3 _19->signal+0 S4 A32])
        (reg:SI 132 [ _20 ])) "kbd.c":371:22 253 {*arm_movsi_insn}
     (nil))
;;  succ:       29 (FALLTHRU)

;; basic block 29, loop depth 1, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       26
;;              27
;;              28 (FALLTHRU)
(code_label 222 221 223 29 76 (nil) [2 uses])
(note 223 222 224 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 29 (set (reg:SI 215)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:25 253 {*arm_movsi_insn}
     (nil))
(insn 225 224 226 29 (set (reg:SI 214)
        (plus:SI (reg:SI 215)
            (const_int 1 [0x1]))) "kbd.c":369:25 7 {*arm_addsi3}
     (nil))
(insn 226 225 227 29 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 214)) "kbd.c":369:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)

;; basic block 30, loop depth 1, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       25
;;              29 (FALLTHRU,DFS_BACK)
(code_label 227 226 228 30 75 (nil) [1 uses])
(note 228 227 232 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 232 228 233 30 (set (reg:SI 216)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:16 253 {*arm_movsi_insn}
     (nil))
(insn 233 232 234 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 216)
            (const_int 63 [0x3f]))) "kbd.c":369:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 234 233 235 30 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 229)
            (pc))) "kbd.c":369:16 273 {arm_cond_branch}
     (nil)
 -> 229)
;;  succ:       26
;;              31 (FALLTHRU)

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       30 (FALLTHRU)
(note 235 234 236 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 31 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7fcdc0b61d80 *.LC6>)) "kbd.c":374:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 237 236 238 31 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":374:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 238 237 239 31 (set (reg:SI 217)
        (const_int 13 [0xd])) "kbd.c":375:7 253 {*arm_movsi_insn}
     (nil))
(insn 239 238 240 31 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) "kbd.c":375:7 263 {*arm_movqi_insn}
     (nil))
(insn 240 239 241 31 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 218)) "kbd.c":375:7 263 {*arm_movqi_insn}
     (nil))
(insn 241 240 242 31 (set (reg/f:SI 219)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":377:13 253 {*arm_movsi_insn}
     (nil))
(insn 242 241 243 31 (set (reg:SI 220)
        (const_int 0 [0])) "kbd.c":377:13 253 {*arm_movsi_insn}
     (nil))
(insn 243 242 244 31 (set (mem/c:SI (reg/f:SI 219) [3 control+0 S4 A32])
        (reg:SI 220)) "kbd.c":377:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       32 (FALLTHRU)

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL)
;;  pred:       23
;;              24
;;              31 (FALLTHRU)
(code_label 244 243 245 32 74 (nil) [2 uses])
(note 245 244 246 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 32 (set (reg/f:SI 221)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":380:7 253 {*arm_movsi_insn}
     (nil))
(insn 247 246 248 32 (set (reg:SI 133 [ control.26_21 ])
        (mem/c:SI (reg/f:SI 221) [3 control+0 S4 A32])) "kbd.c":380:7 253 {*arm_movsi_insn}
     (nil))
(insn 248 247 249 32 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133 [ control.26_21 ])
            (const_int 0 [0]))) "kbd.c":380:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 249 248 250 32 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:6 273 {arm_cond_branch}
     (nil)
 -> 265)
;;  succ:       33 (FALLTHRU)
;;              35

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL)
;;  pred:       32 (FALLTHRU)
(note 250 249 251 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 33 (set (reg:SI 222)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":380:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 252 251 253 33 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 222)
            (const_int 35 [0x23]))) "kbd.c":380:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 253 252 254 33 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:15 273 {arm_cond_branch}
     (nil)
 -> 265)
;;  succ:       34 (FALLTHRU)
;;              35

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL)
;;  pred:       33 (FALLTHRU)
(note 254 253 255 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 34 (set (reg:SI 223)
        (const_int 4 [0x4])) "kbd.c":381:7 253 {*arm_movsi_insn}
     (nil))
(insn 256 255 257 34 (set (reg:QI 224)
        (subreg:QI (reg:SI 223) 0)) "kbd.c":381:7 263 {*arm_movqi_insn}
     (nil))
(insn 257 256 258 34 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 224)) "kbd.c":381:7 263 {*arm_movqi_insn}
     (nil))
(insn 258 257 259 34 (set (reg:SI 134 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":382:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 259 258 260 34 (set (reg:SI 1 r1)
        (reg:SI 134 [ _22 ])) "kbd.c":382:5 253 {*arm_movsi_insn}
     (nil))
(insn 260 259 261 34 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":382:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 261 260 262 34 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":382:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 262 261 263 34 (set (reg/f:SI 225)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":383:13 253 {*arm_movsi_insn}
     (nil))
(insn 263 262 264 34 (set (reg:SI 226)
        (const_int 0 [0])) "kbd.c":383:13 253 {*arm_movsi_insn}
     (nil))
(insn 264 263 265 34 (set (mem/c:SI (reg/f:SI 225) [3 control+0 S4 A32])
        (reg:SI 226)) "kbd.c":383:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       35 (FALLTHRU)

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL)
;;  pred:       32
;;              33
;;              34 (FALLTHRU)
(code_label 265 264 266 35 78 (nil) [2 uses])
(note 266 265 267 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 35 (set (reg/f:SI 227)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":386:7 253 {*arm_movsi_insn}
     (nil))
(insn 268 267 269 35 (set (reg:SI 135 [ control.27_23 ])
        (mem/c:SI (reg/f:SI 227) [3 control+0 S4 A32])) "kbd.c":386:7 253 {*arm_movsi_insn}
     (nil))
(insn 269 268 270 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135 [ control.27_23 ])
            (const_int 0 [0]))) "kbd.c":386:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 270 269 271 35 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:6 273 {arm_cond_branch}
     (nil)
 -> 283)
;;  succ:       36 (FALLTHRU)
;;              38

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL)
;;  pred:       35 (FALLTHRU)
(note 271 270 272 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 36 (set (reg:SI 228)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":386:15 175 {*arm_zero_extendqisi2}
     (nil))
(insn 273 272 274 36 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 228)
            (const_int 35 [0x23]))) "kbd.c":386:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 274 273 275 36 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:15 273 {arm_cond_branch}
     (nil)
 -> 283)
;;  succ:       37 (FALLTHRU)
;;              38

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL)
;;  pred:       36 (FALLTHRU)
(note 275 274 276 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 37 (set (reg:SI 229)
        (const_int 4 [0x4])) "kbd.c":387:7 253 {*arm_movsi_insn}
     (nil))
(insn 277 276 278 37 (set (reg:QI 230)
        (subreg:QI (reg:SI 229) 0)) "kbd.c":387:7 263 {*arm_movqi_insn}
     (nil))
(insn 278 277 279 37 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 230)) "kbd.c":387:7 263 {*arm_movqi_insn}
     (nil))
(insn 279 278 280 37 (set (reg:SI 136 [ _24 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":388:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 280 279 281 37 (set (reg:SI 1 r1)
        (reg:SI 136 [ _24 ])) "kbd.c":388:5 253 {*arm_movsi_insn}
     (nil))
(insn 281 280 282 37 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":388:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 282 281 283 37 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":388:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       38 (FALLTHRU)

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              36
;;              37 (FALLTHRU)
(code_label 283 282 284 38 79 (nil) [2 uses])
(note 284 283 285 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 38 (set (reg/f:SI 231)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:13 253 {*arm_movsi_insn}
     (nil))
(insn 286 285 287 38 (set (reg:SI 137 [ _25 ])
        (mem/v:SI (plus:SI (reg/f:SI 231)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":391:13 253 {*arm_movsi_insn}
     (nil))
(insn 287 286 288 38 (set (reg:SI 138 [ _27 ])
        (plus:SI (reg:SI 137 [ _25 ])
            (const_int 1 [0x1]))) "kbd.c":391:19 7 {*arm_addsi3}
     (nil))
(insn 288 287 289 38 (set (reg/f:SI 232)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:19 253 {*arm_movsi_insn}
     (nil))
(insn 289 288 290 38 (set (mem/v:SI (plus:SI (reg/f:SI 232)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 138 [ _27 ])) "kbd.c":391:19 253 {*arm_movsi_insn}
     (nil))
(insn 290 289 291 38 (set (reg/f:SI 233)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:23 253 {*arm_movsi_insn}
     (nil))
(insn 291 290 292 38 (set (reg/f:SI 234)
        (plus:SI (reg/f:SI 233)
            (reg:SI 137 [ _25 ]))) "kbd.c":391:23 7 {*arm_addsi3}
     (nil))
(insn 292 291 293 38 (set (reg:QI 235)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":391:23 263 {*arm_movqi_insn}
     (nil))
(insn 293 292 294 38 (set (mem/v:QI (plus:SI (reg/f:SI 234)
                (const_int 4 [0x4])) [0 kp_48->buf[_26]+0 S1 A8])
        (reg:QI 235)) "kbd.c":391:23 263 {*arm_movqi_insn}
     (nil))
(insn 294 293 295 38 (set (reg/f:SI 236)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 295 294 296 38 (set (reg:SI 139 [ _28 ])
        (mem/v:SI (plus:SI (reg/f:SI 236)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 296 295 297 38 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 139 [ _28 ]))
                    (const_int 0 [0])))
            (set (reg:SI 237)
                (minus:SI (const_int 0 [0])
                    (reg:SI 139 [ _28 ])))
        ]) "kbd.c":392:12 46 {subsi3_compare0}
     (nil))
(insn 297 296 298 38 (set (reg:SI 140 [ _29 ])
        (and:SI (reg:SI 139 [ _28 ])
            (const_int 127 [0x7f]))) "kbd.c":392:12 90 {*arm_andsi3_insn}
     (nil))
(insn 298 297 299 38 (set (reg:SI 238)
        (and:SI (reg:SI 237)
            (const_int 127 [0x7f]))) "kbd.c":392:12 90 {*arm_andsi3_insn}
     (nil))
(insn 299 298 300 38 (set (reg:SI 140 [ _29 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 238))
            (reg:SI 140 [ _29 ]))) "kbd.c":392:12 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 139 [ _28 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 300 299 301 38 (set (reg/f:SI 239)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 301 300 302 38 (set (mem/v:SI (plus:SI (reg/f:SI 239)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 140 [ _29 ])) "kbd.c":392:12 253 {*arm_movsi_insn}
     (nil))
(insn 302 301 303 38 (set (reg/f:SI 240)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:5 253 {*arm_movsi_insn}
     (nil))
(insn 303 302 304 38 (set (reg:SI 141 [ _30 ])
        (mem/v:SI (plus:SI (reg/f:SI 240)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])) "kbd.c":393:5 253 {*arm_movsi_insn}
     (nil))
(insn 304 303 305 38 (set (reg:SI 142 [ _31 ])
        (plus:SI (reg:SI 141 [ _30 ])
            (const_int 1 [0x1]))) "kbd.c":393:11 7 {*arm_addsi3}
     (nil))
(insn 305 304 306 38 (set (reg/f:SI 241)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:11 253 {*arm_movsi_insn}
     (nil))
(insn 306 305 307 38 (set (mem/v:SI (plus:SI (reg/f:SI 241)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])
        (reg:SI 142 [ _31 ])) "kbd.c":393:11 253 {*arm_movsi_insn}
     (nil))
(insn 307 306 308 38 (set (reg/f:SI 242)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:17 253 {*arm_movsi_insn}
     (nil))
(insn 308 307 309 38 (set (reg:SI 143 [ _32 ])
        (mem/v:SI (plus:SI (reg/f:SI 242)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])) "kbd.c":393:17 253 {*arm_movsi_insn}
     (nil))
(insn 309 308 310 38 (set (reg:SI 144 [ _33 ])
        (plus:SI (reg:SI 143 [ _32 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":393:23 7 {*arm_addsi3}
     (nil))
(insn 310 309 311 38 (set (reg/f:SI 243)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:23 253 {*arm_movsi_insn}
     (nil))
(insn 311 310 312 38 (set (mem/v:SI (plus:SI (reg/f:SI 243)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])
        (reg:SI 144 [ _33 ])) "kbd.c":393:23 253 {*arm_movsi_insn}
     (nil))
(insn 312 311 313 38 (set (reg:SI 244)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":394:3 253 {*arm_movsi_insn}
     (nil))
(insn 313 312 314 38 (set (reg/f:SI 145 [ _34 ])
        (plus:SI (reg:SI 244)
            (const_int 140 [0x8c]))) "kbd.c":394:3 7 {*arm_addsi3}
     (nil))
(insn 314 313 315 38 (set (reg:SI 0 r0)
        (reg/f:SI 145 [ _34 ])) "kbd.c":394:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 315 314 316 38 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":394:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 316 315 317 38 (set (reg:SI 245)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":396:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 317 316 318 38 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 245)
            (const_int 13 [0xd]))) "kbd.c":396:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 318 317 319 38 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 329)
            (pc))) "kbd.c":396:6 273 {arm_cond_branch}
     (nil)
 -> 329)
;;  succ:       39 (FALLTHRU)
;;              41

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 41, flags: (NEW, REACHABLE, RTL)
;;  pred:       38 (FALLTHRU)
(note 319 318 320 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 321 39 (set (reg/f:SI 246)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 321 320 322 39 (set (reg:SI 146 [ kline.28_35 ])
        (mem/v/c:SI (reg/f:SI 246) [3 kline+0 S4 A32])) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 322 321 323 39 (set (reg:SI 147 [ _36 ])
        (plus:SI (reg:SI 146 [ kline.28_35 ])
            (const_int 1 [0x1]))) "kbd.c":397:10 7 {*arm_addsi3}
     (nil))
(insn 323 322 324 39 (set (reg/f:SI 247)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 324 323 325 39 (set (mem/v/c:SI (reg/f:SI 247) [3 kline+0 S4 A32])
        (reg:SI 147 [ _36 ])) "kbd.c":397:10 253 {*arm_movsi_insn}
     (nil))
(insn 325 324 326 39 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":398:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 326 325 329 39 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":398:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       41 (FALLTHRU)

;; basic block 41, loop depth 0, maybe hot
;;  prev block 39, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       39 (FALLTHRU)
;;              4 [always] 
;;              7 [always] 
;;              10 [always] 
;;              13 [always] 
;;              16 [always] 
;;              19 [always] 
;;              38
(code_label 329 326 330 41 64 (nil) [7 uses])
(note 330 329 0 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler (kbd_handler, funcdef_no=7, decl_uid=4544, cgraph_uid=8, symbol_order=22)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 114)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":404:14 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ keyset.29_1 ])
        (mem/v/c:SI (reg/f:SI 114) [3 keyset+0 S4 A32])) "kbd.c":404:14 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ keyset.29_1 ])
            (const_int 1 [0x1]))) "kbd.c":404:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "kbd.c":404:6 273 {arm_cond_branch}
     (nil)
 -> 13)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 10 9 11 4 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler1") [flags 0x3]  <function_decl 0x7fcdc0b26700 kbd_handler1>) [0 kbd_handler1 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":405:5 290 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 11 10 12 4 (set (pc)
        (label_ref:SI 18)) 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       7 [always] 

(barrier 12 11 13)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 13 12 14 5 83 (nil) [1 uses])
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 18 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler2") [flags 0x3]  <function_decl 0x7fcdc0b26d00 kbd_handler2>) [0 kbd_handler2 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":407:5 290 {*call_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [always] 
(code_label 18 15 19 7 82 (nil) [1 uses])
(note 19 18 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgetc (kgetc, funcdef_no=8, decl_uid=4546, cgraph_uid=9, symbol_order=23)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 125)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":414:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 125)) "kbd.c":414:8 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":416:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 17)) "kbd.c":418:8 284 {*arm_jump}
     (nil)
 -> 17)
;;  succ:       5

(barrier 9 8 21)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 21 9 10 4 90 (nil) [1 uses])
(note 10 21 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 11 10 12 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":419:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 12 11 13 4 (set (reg:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":420:5 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 4 (set (reg/f:SI 113 [ _1 ])
        (plus:SI (reg:SI 126)
            (const_int 140 [0x8c]))) "kbd.c":420:5 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 4 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ _1 ])) "kbd.c":420:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":420:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(call_insn 16 15 17 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":421:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 17 16 18 5 89 (nil) [1 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":418:11 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 22 5 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":418:11 253 {*arm_movsi_insn}
     (nil))
(insn 22 20 23 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "kbd.c":418:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":418:18 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 6 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:17 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 6 (set (reg:SI 115 [ _3 ])
        (mem/v:SI (plus:SI (reg/f:SI 128)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":424:17 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 6 (set (reg:SI 116 [ _5 ])
        (plus:SI (reg:SI 115 [ _3 ])
            (const_int 1 [0x1]))) "kbd.c":424:23 7 {*arm_addsi3}
     (nil))
(insn 28 27 29 6 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:23 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 6 (set (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 116 [ _5 ])) "kbd.c":424:23 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 6 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:5 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 131)
        (plus:SI (reg/f:SI 130)
            (reg:SI 115 [ _3 ]))) "kbd.c":424:5 7 {*arm_addsi3}
     (nil))
(insn 32 31 33 6 (set (reg:QI 132)
        (mem/v:QI (plus:SI (reg/f:SI 131)
                (const_int 4 [0x4])) [0 kp_13->buf[_4]+0 S1 A8])) "kbd.c":424:5 263 {*arm_movqi_insn}
     (nil))
(insn 33 32 34 6 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 132)) "kbd.c":424:5 263 {*arm_movqi_insn}
     (nil))
(insn 34 33 35 6 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 6 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 133)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 134)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":425:12 46 {subsi3_compare0}
     (nil))
(insn 37 36 38 6 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":425:12 90 {*arm_andsi3_insn}
     (nil))
(insn 38 37 39 6 (set (reg:SI 135)
        (and:SI (reg:SI 134)
            (const_int 127 [0x7f]))) "kbd.c":425:12 90 {*arm_andsi3_insn}
     (nil))
(insn 39 38 40 6 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 135))
            (reg:SI 118 [ _7 ]))) "kbd.c":425:12 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 40 39 41 6 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":425:12 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 6 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:5 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 6 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":426:5 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 6 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":426:11 7 {*arm_addsi3}
     (nil))
(insn 45 44 46 6 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:11 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":426:11 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 6 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:17 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 6 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])) "kbd.c":426:17 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 6 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":426:23 7 {*arm_addsi3}
     (nil))
(insn 50 49 51 6 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:23 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":426:23 253 {*arm_movsi_insn}
     (nil))
(call_insn 52 51 53 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":427:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 53 52 56 6 (set (reg:SI 123 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":428:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 56 53 60 6 (set (reg:SI 124 [ <retval> ])
        (reg:SI 123 [ _22 ])) "kbd.c":428:10 253 {*arm_movsi_insn}
     (nil))
(insn 60 56 61 6 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "kbd.c":429:1 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 0 6 (use (reg/i:SI 0 r0)) "kbd.c":429:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgets (kgets, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=24)

(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":432:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 6 3 7 2 (set (pc)
        (label_ref 25)) "kbd.c":434:8 284 {*arm_jump}
     (nil)
 -> 25)
;;  succ:       7

(barrier 7 6 31)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 31 7 8 4 97 (nil) [1 uses])
(note 8 31 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg:SI 118)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":435:8 175 {*arm_zero_extendqisi2}
     (nil))
(insn 10 9 11 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 8 [0x8]))) "kbd.c":435:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 11 10 12 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "kbd.c":435:8 273 {arm_cond_branch}
     (nil)
 -> 18)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":436:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 5 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":436:8 7 {*arm_addsi3}
     (nil))
(insn 15 14 16 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 119)) "kbd.c":436:8 253 {*arm_movsi_insn}
     (nil))
(jump_insn 16 15 17 5 (set (pc)
        (label_ref 25)) "kbd.c":437:7 284 {*arm_jump}
     (nil)
 -> 25)
;;  succ:       7 (DFS_BACK)

(barrier 17 16 18)
;; basic block 6, loop depth 1, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 18 17 19 6 96 (nil) [1 uses])
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg/f:SI 113 [ s.30_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":439:7 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 6 (set (reg:SI 121)
        (plus:SI (reg/f:SI 113 [ s.30_1 ])
            (const_int 1 [0x1]))) "kbd.c":439:7 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 121)) "kbd.c":439:7 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 6 (set (reg:QI 122)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "kbd.c":439:10 263 {*arm_movqi_insn}
     (nil))
(insn 24 23 25 6 (set (mem:QI (reg/f:SI 113 [ s.30_1 ]) [0 *s.30_1+0 S1 A8])
        (reg:QI 122)) "kbd.c":439:10 263 {*arm_movqi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              5 (DFS_BACK)
;;              6 (FALLTHRU,DFS_BACK)
(code_label 25 24 26 7 95 (nil) [2 uses])
(note 26 25 27 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 27 26 28 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x3]  <function_decl 0x7fcdc0b31600 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":434:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 28 27 29 7 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "kbd.c":434:15 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 7 (set (reg:QI 123)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "kbd.c":434:13 263 {*arm_movqi_insn}
     (nil))
(insn 30 29 32 7 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 123)) "kbd.c":434:13 263 {*arm_movqi_insn}
     (nil))
(insn 32 30 33 7 (set (reg:SI 124)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":434:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124)
            (const_int 13 [0xd]))) "kbd.c":434:24 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "kbd.c":434:24 273 {arm_cond_branch}
     (nil)
 -> 31)
;;  succ:       4
;;              8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 8 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":441:6 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 8 (set (reg:SI 126)
        (const_int 0 [0])) "kbd.c":441:6 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 8 (set (reg:QI 127)
        (subreg:QI (reg:SI 126) 0)) "kbd.c":441:6 263 {*arm_movqi_insn}
     (nil))
(insn 39 38 40 8 (set (mem:QI (reg/f:SI 125) [0 *s_4+0 S1 A8])
        (reg:QI 127)) "kbd.c":441:6 263 {*arm_movqi_insn}
     (nil))
(insn 40 39 41 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 41 40 42 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7fcdc0d96100 strlen>) [0 __builtin_strlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":442:10 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 42 41 43 8 (set (reg:SI 115 [ _3 ])
        (reg:SI 0 r0)) "kbd.c":442:10 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 46 8 (set (reg:SI 116 [ _11 ])
        (reg:SI 115 [ _3 ])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (nil))
(insn 46 43 50 8 (set (reg:SI 117 [ <retval> ])
        (reg:SI 116 [ _11 ])) "kbd.c":442:10 253 {*arm_movsi_insn}
     (nil))
(insn 50 46 51 8 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "kbd.c":443:1 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 0 8 (use (reg/i:SI 0 r0)) "kbd.c":443:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function mgetc (mgetc, funcdef_no=10, decl_uid=4568, cgraph_uid=11, symbol_order=25)

(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":464:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 124)) "kbd.c":464:8 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":466:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
;;              4 (DFS_BACK)
(code_label 11 7 8 4 100 (nil) [1 uses])
(note 8 11 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":467:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 12 4 (set (reg:SI 113 [ _1 ])
        (mem/v:SI (plus:SI (reg/f:SI 125)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":467:11 253 {*arm_movsi_insn}
     (nil))
(insn 12 10 13 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 0 [0]))) "kbd.c":467:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 13 12 14 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "kbd.c":467:18 273 {arm_cond_branch}
     (nil)
 -> 11)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 16 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":469:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 16 15 17 5 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:17 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 5 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 126)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":470:17 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 5 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":470:23 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 5 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:23 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 5 (set (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":470:23 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 5 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:5 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 5 (set (reg/f:SI 129)
        (plus:SI (reg/f:SI 128)
            (reg:SI 114 [ _2 ]))) "kbd.c":470:5 7 {*arm_addsi3}
     (nil))
(insn 23 22 24 5 (set (reg:QI 130)
        (mem/v:QI (plus:SI (reg/f:SI 129)
                (const_int 4 [0x4])) [0 kp_11->buf[_3]+0 S1 A8])) "kbd.c":470:5 263 {*arm_movqi_insn}
     (nil))
(insn 24 23 25 5 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 130)) "kbd.c":470:5 263 {*arm_movqi_insn}
     (nil))
(insn 25 24 26 5 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 5 (set (reg:SI 116 [ _5 ])
        (mem/v:SI (plus:SI (reg/f:SI 131)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 116 [ _5 ]))
                    (const_int 0 [0])))
            (set (reg:SI 132)
                (minus:SI (const_int 0 [0])
                    (reg:SI 116 [ _5 ])))
        ]) "kbd.c":471:12 46 {subsi3_compare0}
     (nil))
(insn 28 27 29 5 (set (reg:SI 117 [ _6 ])
        (and:SI (reg:SI 116 [ _5 ])
            (const_int 127 [0x7f]))) "kbd.c":471:12 90 {*arm_andsi3_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 133)
        (and:SI (reg:SI 132)
            (const_int 127 [0x7f]))) "kbd.c":471:12 90 {*arm_andsi3_insn}
     (nil))
(insn 30 29 31 5 (set (reg:SI 117 [ _6 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 133))
            (reg:SI 117 [ _6 ]))) "kbd.c":471:12 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 116 [ _5 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 31 30 32 5 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 5 (set (mem/v:SI (plus:SI (reg/f:SI 134)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 117 [ _6 ])) "kbd.c":471:12 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 5 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:5 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 5 (set (reg:SI 118 [ _7 ])
        (mem/v:SI (plus:SI (reg/f:SI 135)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":472:5 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 5 (set (reg:SI 119 [ _8 ])
        (plus:SI (reg:SI 118 [ _7 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":472:11 7 {*arm_addsi3}
     (nil))
(insn 36 35 37 5 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:11 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 5 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])
        (reg:SI 119 [ _8 ])) "kbd.c":472:11 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 5 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:17 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 5 (set (reg:SI 120 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])) "kbd.c":472:17 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 121 [ _10 ])
        (plus:SI (reg:SI 120 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":472:23 7 {*arm_addsi3}
     (nil))
(insn 41 40 42 5 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:23 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])
        (reg:SI 121 [ _10 ])) "kbd.c":472:23 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 44 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":473:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 44 43 47 5 (set (reg:SI 122 [ _21 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":474:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 47 44 51 5 (set (reg:SI 123 [ <retval> ])
        (reg:SI 122 [ _21 ])) "kbd.c":474:10 253 {*arm_movsi_insn}
     (nil))
(insn 51 47 52 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "kbd.c":475:1 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 0 5 (use (reg/i:SI 0 r0)) "kbd.c":475:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgetline (kgetline, funcdef_no=11, decl_uid=4578, cgraph_uid=12, symbol_order=26)

(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":478:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":480:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 127)) "kbd.c":480:8 253 {*arm_movsi_insn}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 13)) "kbd.c":482:9 284 {*arm_jump}
     (nil)
 -> 13)
;;  succ:       5

(barrier 9 8 17)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 17 9 10 4 106 (nil) [1 uses])
(note 10 17 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":483:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":483:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 13 12 14 5 105 (nil) [1 uses])
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (set (reg/f:SI 128)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":482:15 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 18 5 (set (reg:SI 113 [ kline.31_1 ])
        (mem/v/c:SI (reg/f:SI 128) [3 kline+0 S4 A32])) "kbd.c":482:15 253 {*arm_movsi_insn}
     (nil))
(insn 18 16 19 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ kline.31_1 ])
            (const_int 0 [0]))) "kbd.c":482:15 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 19 18 20 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kbd.c":482:15 273 {arm_cond_branch}
     (nil)
 -> 17)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 20 19 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 21 20 63 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":486:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
;;              9 (DFS_BACK)
(code_label 63 21 22 7 109 (nil) [1 uses])
(note 22 63 23 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 7 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:21 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 7 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":488:21 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 7 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":488:27 7 {*arm_addsi3}
     (nil))
(insn 26 25 27 7 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:27 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 7 (set (mem/v:SI (plus:SI (reg/f:SI 130)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":488:27 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 7 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 7 (set (reg/f:SI 132)
        (plus:SI (reg/f:SI 131)
            (reg:SI 114 [ _2 ]))) "kbd.c":488:9 7 {*arm_addsi3}
     (nil))
(insn 30 29 31 7 (set (reg:QI 133)
        (mem/v:QI (plus:SI (reg/f:SI 132)
                (const_int 4 [0x4])) [0 kp_18->buf[_3]+0 S1 A8])) "kbd.c":488:9 263 {*arm_movqi_insn}
     (nil))
(insn 31 30 32 7 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 133)) "kbd.c":488:9 263 {*arm_movqi_insn}
     (nil))
(insn 32 31 33 7 (set (reg/f:SI 116 [ s.32_5 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":489:9 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 7 (set (reg:SI 134)
        (plus:SI (reg/f:SI 116 [ s.32_5 ])
            (const_int 1 [0x1]))) "kbd.c":489:9 7 {*arm_addsi3}
     (nil))
(insn 34 33 35 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 134)) "kbd.c":489:9 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 7 (set (reg:QI 135)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "kbd.c":489:12 263 {*arm_movqi_insn}
     (nil))
(insn 36 35 37 7 (set (mem:QI (reg/f:SI 116 [ s.32_5 ]) [0 *s.32_5+0 S1 A8])
        (reg:QI 135)) "kbd.c":489:12 263 {*arm_movqi_insn}
     (nil))
(insn 37 36 38 7 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 7 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 7 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 137)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":490:16 46 {subsi3_compare0}
     (nil))
(insn 40 39 41 7 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":490:16 90 {*arm_andsi3_insn}
     (nil))
(insn 41 40 42 7 (set (reg:SI 138)
        (and:SI (reg:SI 137)
            (const_int 127 [0x7f]))) "kbd.c":490:16 90 {*arm_andsi3_insn}
     (nil))
(insn 42 41 43 7 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 138))
            (reg:SI 118 [ _7 ]))) "kbd.c":490:16 371 {*if_neg_move}
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 43 42 44 7 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 7 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":490:16 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 7 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:9 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 7 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])) "kbd.c":491:9 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 7 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":491:15 7 {*arm_addsi3}
     (nil))
(insn 48 47 49 7 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:15 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 7 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":491:15 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 7 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:21 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 142)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])) "kbd.c":491:21 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 7 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":491:27 7 {*arm_addsi3}
     (nil))
(insn 53 52 54 7 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:27 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 7 (set (mem/v:SI (plus:SI (reg/f:SI 143)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":491:27 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 7 (set (reg:SI 144)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":492:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 56 55 57 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144)
            (const_int 13 [0xd]))) "kbd.c":492:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 57 56 58 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "kbd.c":492:10 273 {arm_cond_branch}
     (nil)
 -> 61)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 59 58 60 8 (set (pc)
        (label_ref 66)) "kbd.c":493:2 284 {*arm_jump}
     (nil)
 -> 66)
;;  succ:       10

(barrier 60 59 61)
;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 61 60 62 9 107 (nil) [1 uses])
(note 62 61 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 64 62 65 9 (set (pc)
        (label_ref 63)) "kbd.c":488:9 284 {*arm_jump}
     (nil)
 -> 63)
;;  succ:       7 (DFS_BACK)

(barrier 65 64 66)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
(code_label 66 65 67 10 108 (nil) [1 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":495:6 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (reg/f:SI 123 [ _12 ])
        (plus:SI (reg:SI 145)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":495:6 7 {*arm_addsi3}
     (nil))
(insn 70 69 71 10 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":495:10 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 10 (set (reg:QI 147)
        (subreg:QI (reg:SI 146) 0)) "kbd.c":495:10 263 {*arm_movqi_insn}
     (nil))
(insn 72 71 73 10 (set (mem:QI (reg/f:SI 123 [ _12 ]) [0 *_12+0 S1 A8])
        (reg:QI 147)) "kbd.c":495:10 263 {*arm_movqi_insn}
     (nil))
(insn 73 72 74 10 (set (reg/f:SI 148)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 124 [ kline.33_13 ])
        (mem/v/c:SI (reg/f:SI 148) [3 kline+0 S4 A32])) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ kline.33_13 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":496:8 7 {*arm_addsi3}
     (nil))
(insn 76 75 77 10 (set (reg/f:SI 149)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 10 (set (mem/v/c:SI (reg/f:SI 149) [3 kline+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":496:8 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 81 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":497:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 81 78 82 10 (clobber (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (nil))
(insn 82 81 85 10 (clobber (reg:SI 126 [ <retval> ])) "kbd.c":498:1 -1
     (nil))
(insn 85 82 80 10 (const_int 0 [0]) "kbd.c":498:1 311 {nop}
     (nil))
(insn 80 85 83 10 (set (reg/i:SI 0 r0)
        (reg:SI 126 [ <retval> ])) "kbd.c":498:1 253 {*arm_movsi_insn}
     (nil))
(insn 83 80 0 10 (use (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

