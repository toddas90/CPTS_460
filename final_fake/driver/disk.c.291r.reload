
;; Function get_block (get_block, funcdef_no=0, decl_uid=4481, cgraph_uid=1, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = -2
   Insn 17: point = 1, n_alt = -1
   Insn 14: point = 1, n_alt = -1
   Insn 13: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 4
   Insn 8: point = 2, n_alt = 4
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r113: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r113: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


get_block

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={3d,1u} r11={1d,7u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 129{110d,19u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [4 dev+0 S4 A32])
        (reg:SI 0 r0 [ dev ])) "disk.c":45:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [4 blk+0 S4 A32])
        (reg:SI 1 r1 [ blk ])) "disk.c":45:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 buf+0 S4 A32])
        (reg:SI 2 r2 [ buf ])) "disk.c":45:1 253 {*arm_movsi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 buf+0 S4 A32])) "disk.c":46:4 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [4 blk+0 S4 A32])) "disk.c":46:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 10 9 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":46:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 10 14 2 (clobber (reg/i:SI 0 r0)) "disk.c":47:1 -1
     (nil))
(insn 14 13 17 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":47:1 -1
     (nil))
(insn 17 14 12 2 (const_int 0 [0]) "disk.c":47:1 311 {nop}
     (nil))
(insn 12 17 15 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":47:1 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 18 2 (use (reg/i:SI 0 r0)) "disk.c":47:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 18 15 0 NOTE_INSN_DELETED)

;; Function put_block (put_block, funcdef_no=1, decl_uid=4488, cgraph_uid=2, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0, n_alt = -1
   Insn 12: point = 0, n_alt = -2
   Insn 17: point = 1, n_alt = -1
   Insn 14: point = 1, n_alt = -1
   Insn 13: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = -1
   Insn 9: point = 2, n_alt = 4
   Insn 8: point = 2, n_alt = 4
   Insn 4: point = 2, n_alt = 5
   Insn 3: point = 2, n_alt = 5
   Insn 2: point = 2, n_alt = 5
 r113: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r113: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 12
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.


put_block

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={2d,1u} r3={3d,1u} r11={1d,7u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 129{110d,19u,0e} in 11{10 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [4 dev+0 S4 A32])
        (reg:SI 0 r0 [ dev ])) "disk.c":49:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [4 blk+0 S4 A32])
        (reg:SI 1 r1 [ blk ])) "disk.c":49:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 buf+0 S4 A32])
        (reg:SI 2 r2 [ buf ])) "disk.c":49:1 253 {*arm_movsi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [1 buf+0 S4 A32])) "disk.c":50:4 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [4 blk+0 S4 A32])) "disk.c":50:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 10 9 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putblock") [flags 0x41]  <function_decl 0x7f1b8dc71d00 putblock>) [0 putblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":50:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 10 14 2 (clobber (reg/i:SI 0 r0)) "disk.c":51:1 -1
     (nil))
(insn 14 13 17 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":51:1 -1
     (nil))
(insn 17 14 12 2 (const_int 0 [0]) "disk.c":51:1 311 {nop}
     (nil))
(insn 12 17 15 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":51:1 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 18 2 (use (reg/i:SI 0 r0)) "disk.c":51:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 18 15 0 NOTE_INSN_DELETED)

;; Function getblk (getblk, funcdef_no=2, decl_uid=4494, cgraph_uid=3, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 21: point = 1, n_alt = -2
   Insn 18: point = 3, n_alt = 4
   Insn 17: point = 4, n_alt = 5
   Insn 16: point = 5, n_alt = 1
   Insn 15: point = 6, n_alt = 4
   Insn 14: point = 7, n_alt = 5
   Insn 13: point = 8, n_alt = 4
   Insn 12: point = 9, n_alt = 4
   Insn 11: point = 10, n_alt = 5
   Insn 10: point = 11, n_alt = 4
   Insn 9: point = 12, n_alt = 4
   Insn 8: point = 13, n_alt = 5
   Insn 7: point = 14, n_alt = 4
   Insn 3: point = 15, n_alt = 5
   Insn 2: point = 15, n_alt = 5
 r113: [2..3]
 r114: [0..1]
 r115: [13..14]
 r116: [10..12]
 r117: [10..11]
 r118: [7..9]
 r119: [7..8]
 r120: [4..6]
 r121: [4..5]
Compressing live ranges: from 15 to 12 - 80%
Ranges after the compression:
 r113: [2..3]
 r114: [0..1]
 r115: [10..11]
 r116: [8..9]
 r117: [8..9]
 r118: [6..7]
 r119: [6..7]
 r120: [4..5]
 r121: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 16
changing reg in insn 17
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns


getblk

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={2d,3u} r1={1d,1u} r2={4d,3u} r3={6d,5u} r11={1d,11u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 43{17d,26u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118 119 120 121
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])
        (reg:SI 0 r0 [ dev ])) "disk.c":54:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])
        (reg:SI 1 r1 [ blk ])) "disk.c":54:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 3 r3 [115])
        (symbol_ref:SI ("writebuf") [flags 0x2]  <var_decl 0x7f1b8dc79090 writebuf>)) "disk.c":56:15 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg/f:SI 3 r3 [115])) "disk.c":56:15 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":57:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 r2 [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])) "disk.c":57:11 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [116])
                (const_int 12 [0xc])) [4 bp_1->dev+0 S4 A32])
        (reg:SI 2 r2 [117])) "disk.c":57:11 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":57:26 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])) "disk.c":57:26 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [118])
                (const_int 16 [0x10])) [4 bp_1->blk+0 S4 A32])
        (reg:SI 2 r2 [119])) "disk.c":57:26 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 3 r3 [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":58:13 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:SI 2 r2 [121])
        (const_int 0 [0])) "disk.c":58:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [120])
                (const_int 20 [0x14])) [4 bp_1->dirty+0 S4 A32])
        (reg:SI 2 r2 [121])) "disk.c":58:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 25 2 (set (reg/f:SI 3 r3 [orig:113 _8 ] [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":59:10 253 {*arm_movsi_insn}
     (nil))
(insn 25 18 26 2 (set (reg/i:SI 0 r0)
        (reg/f:SI 3 r3 [orig:114 <retval> ] [114])) "disk.c":60:1 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 28 2 (use (reg/i:SI 0 r0)) "disk.c":60:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 28 26 0 NOTE_INSN_DELETED)

;; Function bread (bread, funcdef_no=3, decl_uid=4471, cgraph_uid=4, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 16:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
   Insn 20: point = 3, n_alt = 4
   Insn 19: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 4
   Insn 17: point = 4, n_alt = -2
   Insn 16: point = 5, n_alt = 4
   Insn 15: point = 7, n_alt = 4
   Insn 14: point = 8, n_alt = 5
   Insn 13: point = 9, n_alt = 4
   Insn 12: point = 10, n_alt = 4
   Insn 11: point = 11, n_alt = 5
   Insn 10: point = 12, n_alt = 4
   Insn 9: point = 13, n_alt = 4
   Insn 8: point = 14, n_alt = 5
   Insn 7: point = 15, n_alt = 4
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r113: [4..5]
 r114: [2..3]
 r115: [0..1]
 r116: [14..15]
 r117: [11..13]
 r118: [11..12]
 r119: [8..10]
 r120: [8..9]
 r121: [6..7]
Compressing live ranges: from 16 to 14 - 87%
Ranges after the compression:
 r113: [4..5]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [10..11]
 r118: [10..11]
 r119: [8..9]
 r120: [8..9]
 r121: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.


bread

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={4d,2u} r3={8d,6u} r11={1d,12u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 146{116d,30u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])
        (reg:SI 0 r0 [ dev ])) "disk.c":63:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])
        (reg:SI 1 r1 [ blk ])) "disk.c":63:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 3 r3 [116])
        (symbol_ref:SI ("readbuf") [flags 0x2]  <var_decl 0x7f1b8dc79000 readbuf>)) "disk.c":66:15 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg/f:SI 3 r3 [116])) "disk.c":66:15 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 r2 [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])) "disk.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [117])
                (const_int 12 [0xc])) [4 bp_2->dev+0 S4 A32])
        (reg:SI 2 r2 [118])) "disk.c":67:11 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":67:26 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2 [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])) "disk.c":67:26 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [119])
                (const_int 16 [0x10])) [4 bp_2->blk+0 S4 A32])
        (reg:SI 2 r2 [120])) "disk.c":67:26 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":68:19 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (plus:SI (reg:SI 3 r3 [121])
            (const_int 56 [0x38]))) "disk.c":68:19 7 {*arm_addsi3}
     (nil))
(insn 17 16 18 2 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:113 _1 ] [113])) "disk.c":68:3 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])) "disk.c":68:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 20 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":68:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 20 19 27 2 (set (reg/f:SI 3 r3 [orig:114 _9 ] [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":69:10 253 {*arm_movsi_insn}
     (nil))
(insn 27 20 28 2 (set (reg/i:SI 0 r0)
        (reg/f:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":70:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 30 2 (use (reg/i:SI 0 r0)) "disk.c":70:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 30 28 0 NOTE_INSN_DELETED)

;; Function bwrite (bwrite, funcdef_no=4, decl_uid=4504, cgraph_uid=5, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 9:  (0) r  (1) rk  (2) rI {*arm_addsi3}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -1
   Insn 16: point = 1, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 9: point = 4, n_alt = 4
   Insn 8: point = 6, n_alt = 4
   Insn 7: point = 7, n_alt = 4
   Insn 6: point = 9, n_alt = 4
   Insn 2: point = 10, n_alt = 5
 r113: [2..7]
 r114: [3..4]
 r115: [0..1]
 r116: [8..9]
 r117: [5..6]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r113: [2..5]
 r114: [2..3]
 r115: [0..1]
 r116: [6..7]
 r117: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


bwrite

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,1u} r2={3d,1u} r3={6d,4u} r11={1d,5u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 133{114d,19u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg:SI 0 r0 [ bp ])) "disk.c":73:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":75:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 r2 [orig:113 _1 ] [113])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [116])
                (const_int 16 [0x10])) [4 bp_4(D)->blk+0 S4 A32])) "disk.c":75:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":75:23 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [117])
            (const_int 56 [0x38]))) "disk.c":75:23 7 {*arm_addsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:114 _2 ] [114])) "disk.c":75:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:113 _1 ] [113])) "disk.c":75:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putblock") [flags 0x41]  <function_decl 0x7f1b8dc71d00 putblock>) [0 putblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":75:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "disk.c":76:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":76:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "disk.c":76:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":76:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 20 2 (use (reg/i:SI 0 r0)) "disk.c":76:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function bread1 (bread1, funcdef_no=5, decl_uid=4509, cgraph_uid=6, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 16:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 28: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -2
   Insn 20: point = 3, n_alt = 4
   Insn 19: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 4
   Insn 17: point = 4, n_alt = -2
   Insn 16: point = 5, n_alt = 4
   Insn 15: point = 7, n_alt = 4
   Insn 14: point = 8, n_alt = 5
   Insn 13: point = 9, n_alt = 4
   Insn 12: point = 10, n_alt = 4
   Insn 11: point = 11, n_alt = 5
   Insn 10: point = 12, n_alt = 4
   Insn 9: point = 13, n_alt = 4
   Insn 8: point = 14, n_alt = 5
   Insn 7: point = 15, n_alt = 4
   Insn 3: point = 16, n_alt = 5
   Insn 2: point = 16, n_alt = 5
 r113: [4..5]
 r114: [2..3]
 r115: [0..1]
 r116: [14..15]
 r117: [11..13]
 r118: [11..12]
 r119: [8..10]
 r120: [8..9]
 r121: [6..7]
Compressing live ranges: from 16 to 14 - 87%
Ranges after the compression:
 r113: [4..5]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [10..11]
 r118: [10..11]
 r119: [8..9]
 r120: [8..9]
 r121: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 23
changing reg in insn 23
changing reg in insn 27
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
deleting insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.


bread1

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={4d,4u} r1={3d,2u} r2={4d,2u} r3={8d,6u} r11={1d,12u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 146{116d,30u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])
        (reg:SI 0 r0 [ dev ])) "disk.c":78:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])
        (reg:SI 1 r1 [ blk ])) "disk.c":78:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:SI 3 r3 [116])
        (symbol_ref:SI ("rbuf1") [flags 0x2]  <var_decl 0x7f1b8dc79120 rbuf1>)) "disk.c":81:15 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg/f:SI 3 r3 [116])) "disk.c":81:15 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 2 r2 [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [4 dev+0 S4 A32])) "disk.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [117])
                (const_int 12 [0xc])) [4 bp_2->dev+0 S4 A32])
        (reg:SI 2 r2 [118])) "disk.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":82:26 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2 [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])) "disk.c":82:26 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [119])
                (const_int 16 [0x10])) [4 bp_2->blk+0 S4 A32])
        (reg:SI 2 r2 [120])) "disk.c":82:26 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":83:19 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (plus:SI (reg:SI 3 r3 [121])
            (const_int 56 [0x38]))) "disk.c":83:19 7 {*arm_addsi3}
     (nil))
(insn 17 16 18 2 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:113 _1 ] [113])) "disk.c":83:3 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [4 blk+0 S4 A32])) "disk.c":83:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 20 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":83:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 20 19 27 2 (set (reg/f:SI 3 r3 [orig:114 _9 ] [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":84:10 253 {*arm_movsi_insn}
     (nil))
(insn 27 20 28 2 (set (reg/i:SI 0 r0)
        (reg/f:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":85:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 30 2 (use (reg/i:SI 0 r0)) "disk.c":85:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 30 28 0 NOTE_INSN_DELETED)

;; Function bwrite1 (bwrite1, funcdef_no=6, decl_uid=4514, cgraph_uid=7, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 9:  (0) r  (1) rk  (2) rI {*arm_addsi3}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -1
   Insn 16: point = 1, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = -2
   Insn 10: point = 3, n_alt = -2
   Insn 9: point = 4, n_alt = 4
   Insn 8: point = 6, n_alt = 4
   Insn 7: point = 7, n_alt = 4
   Insn 6: point = 9, n_alt = 4
   Insn 2: point = 10, n_alt = 5
 r113: [2..7]
 r114: [3..4]
 r115: [0..1]
 r116: [8..9]
 r117: [5..6]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r113: [2..5]
 r114: [2..3]
 r115: [0..1]
 r116: [6..7]
 r117: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 16
changing reg in insn 14
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


bwrite1

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,1u} r2={3d,1u} r3={6d,4u} r11={1d,5u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 133{114d,19u,0e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg:SI 0 r0 [ bp ])) "disk.c":88:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":90:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 2 r2 [orig:113 _1 ] [113])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [116])
                (const_int 16 [0x10])) [4 bp_4(D)->blk+0 S4 A32])) "disk.c":90:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [117])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":90:23 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg:SI 3 r3 [117])
            (const_int 56 [0x38]))) "disk.c":90:23 7 {*arm_addsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:114 _2 ] [114])) "disk.c":90:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:113 _1 ] [113])) "disk.c":90:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putblock") [flags 0x41]  <function_decl 0x7f1b8dc71d00 putblock>) [0 putblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":90:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "disk.c":91:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":91:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "disk.c":91:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "disk.c":91:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 20 2 (use (reg/i:SI 0 r0)) "disk.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function awrite (awrite, funcdef_no=7, decl_uid=4518, cgraph_uid=8, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0, n_alt = -1
   Insn 9: point = 0, n_alt = -2
   Insn 14: point = 1, n_alt = -1
   Insn 11: point = 1, n_alt = -1
   Insn 10: point = 2, n_alt = -1
   Insn 7: point = 2, n_alt = -1
   Insn 6: point = 2, n_alt = 4
   Insn 2: point = 2, n_alt = 5
 r113: [0..1]
Compressing live ranges: from 2 to 2 - 100%
Ranges after the compression:
 r113: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 9
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.


awrite

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={3d,1u} r11={1d,4u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 122{109d,13u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg:SI 0 r0 [ bp ])) "disk.c":94:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":96:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("bwrite") [flags 0x3]  <function_decl 0x7f1b8dc7d400 bwrite>) [0 bwrite S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":96:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 10 7 11 2 (clobber (reg/i:SI 0 r0)) "disk.c":97:1 -1
     (nil))
(insn 11 10 14 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":97:1 -1
     (nil))
(insn 14 11 9 2 (const_int 0 [0]) "disk.c":97:1 311 {nop}
     (nil))
(insn 9 14 12 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "disk.c":97:1 253 {*arm_movsi_insn}
     (nil))
(insn 12 9 15 2 (use (reg/i:SI 0 r0)) "disk.c":97:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 15 12 0 NOTE_INSN_DELETED)

;; Function brelse (brelse, funcdef_no=8, decl_uid=4521, cgraph_uid=9, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 19: point = 0, n_alt = -1
   Insn 16: point = 0, n_alt = -2
   Insn 21: point = 1, n_alt = -1
   Insn 18: point = 1, n_alt = -1
   Insn 17: point = 2, n_alt = -1
  BB 3
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = 4
  BB 2
   Insn 9: point = 2, n_alt = -1
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 4
   Insn 6: point = 5, n_alt = 4
   Insn 2: point = 6, n_alt = 5
 r113: [2..3]
 r114: [0..1]
 r115: [4..5]
Compressing live ranges: from 6 to 6 - 100%
Ranges after the compression:
 r113: [2..3]
 r114: [0..1]
 r115: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 18
changing reg in insn 16
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


brelse

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={5d,3u} r11={1d,7u} r12={2d} r13={1d,5u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 133{112d,21u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 115
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])
        (reg:SI 0 r0 [ bp ])) "disk.c":100:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":102:9 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [115])
                (const_int 20 [0x14])) [4 bp_4(D)->dirty+0 S4 A32])) "disk.c":102:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 0 [0]))) "disk.c":102:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "disk.c":102:6 273 {arm_cond_branch}
     (nil)
 -> 13)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 bp+0 S4 A32])) "disk.c":103:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("bwrite") [flags 0x3]  <function_decl 0x7f1b8dc7d400 bwrite>) [0 bwrite S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":103:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 114
(code_label 13 12 14 4 19 (nil) [1 uses])
(note 14 13 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 14 18 4 (clobber (reg/i:SI 0 r0)) "disk.c":104:1 -1
     (nil))
(insn 18 17 21 4 (clobber (reg:SI 3 r3 [orig:114 <retval> ] [114])) "disk.c":104:1 -1
     (nil))
(insn 21 18 16 4 (const_int 0 [0]) "disk.c":104:1 311 {nop}
     (nil))
(insn 16 21 19 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:114 <retval> ] [114])) "disk.c":104:1 253 {*arm_movsi_insn}
     (nil))
(insn 19 16 22 4 (use (reg/i:SI 0 r0)) "disk.c":104:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 22 19 0 NOTE_INSN_DELETED)

;; Function testFS (testFS, funcdef_no=9, decl_uid=4526, cgraph_uid=10, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=2092, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=2088, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            2 Scratch win: reject+=2
            3 Scratch win: reject+=2
          alt=1,overall=4,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) m  (1) X  (2) &r  (3) &r {*stack_protect_combined_set_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 8:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 9:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 13:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 14:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) m {*arm_zero_extendhisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 30:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 31:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 33:  (0) r  (1) I {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 35:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 36:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 47:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 56:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 68:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 69:  (0) r  (1) rk  (2) L {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 73:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 74:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 75:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 84:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 85:  (0) r  (1) rk  (2) L {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 89:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 90:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 91:  (0) m  (1) rk {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 92:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 93:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 103:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 104:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 105:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 106:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 112:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 113:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 114:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 115:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 116:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) m {*arm_zero_extendhisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 120:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 121:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 124:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 129:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 132:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 133:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 137:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 140:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 141:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 142:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 145:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 146:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 148:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 149:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 150:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 151:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 152:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 153:  (0) r  (1) m {*arm_zero_extendhisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 156:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 157:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 158:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 159:  (0) m  (1) rk {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 162:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 163:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 164:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 166:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 167:  (0) r  (1) r {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 170:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 171:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 173:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 174:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 175:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 176:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 177:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 178:  (0) r  (1) 0  (2) r {*if_neg_move}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 179:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 180:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 181:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 182:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 183:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 187:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 188:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 189:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 190:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 191:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 192:  (0) r  (1) 0  (2) r {*if_neg_move}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 194:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 195:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 196:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 197:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 198:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 199:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 200:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 201:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 202:  (0) r  (1) rk  (2) L {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 206:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 207:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 208:  (0) m  (1) rk {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 209:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 210:  (0) r  (1) rk  (2) L {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 211:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 215:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 216:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 218:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 219:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 220:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 221:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 222:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 223:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 225:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 226:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 227:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 228:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 229:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 230:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 231:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 232:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 233:  (0) r  (1) m {*arm_zero_extendhisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 235:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 236:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 238:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 239:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 240:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 244:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 246:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 247:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 249:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 250:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 251:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 252:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 253:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 254:  (0) r  (1) m {*arm_zero_extendhisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 256:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 257:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 258:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 259:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 260:  (0) m  (1) rk {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
          alt=15,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 15 in insn 263:  (0) r  (1) rk  (2) ?n {*arm_addsi3}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 264:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 265:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 267:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 268:  (0) r  (1) r {*arm_cmpsi_insn}
            3 Scratch win: reject+=2
            4 Scratch win: reject+=2
          alt=1,overall=4,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 272:  (0) m  (1) X  (3) &r  (4) &r {*stack_protect_combined_test_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9 10 11
EBB 12

********** Pseudo live ranges #1: **********

  BB 11
   Insn 273: point = 0, n_alt = -1
  BB 12
   Insn 279: point = 0, n_alt = -1
   Insn 276: point = 0, n_alt = -2
  BB 10
   Insn 272: point = 2, n_alt = 1
   Insn 283: point = 4, n_alt = -1
   Insn 278: point = 4, n_alt = -1
   Insn 277: point = 5, n_alt = -1
  BB 9
   Insn 269: point = 5, n_alt = -1
   Insn 268: point = 5, n_alt = 2
   Insn 267: point = 6, n_alt = 4
   Insn 265: point = 7, n_alt = 4
   Insn 264: point = 8, n_alt = 10
   Insn 263: point = 9, n_alt = 15
  BB 7
   Insn 286: point = 10, n_alt = -1
   Insn 211: point = 10, n_alt = 5
   Insn 210: point = 11, n_alt = 10
   Insn 209: point = 12, n_alt = 15
   Insn 208: point = 13, n_alt = 5
   Insn 207: point = 14, n_alt = 10
   Insn 206: point = 15, n_alt = 15
   Insn 205: point = 16, n_alt = -1
   Insn 204: point = 16, n_alt = -2
   Insn 203: point = 17, n_alt = -2
   Insn 202: point = 18, n_alt = 10
   Insn 201: point = 19, n_alt = 15
   Insn 200: point = 20, n_alt = 4
   Insn 199: point = 22, n_alt = 4
   Insn 198: point = 23, n_alt = 5
   Insn 197: point = 24, n_alt = 4
   Insn 196: point = 26, n_alt = 10
   Insn 195: point = 27, n_alt = 15
   Insn 194: point = 28, n_alt = 2
   Insn 193: point = 30, n_alt = -2
   Insn 192: point = 32, n_alt = 1
   Insn 191: point = 34, n_alt = 0
   Insn 190: point = 36, n_alt = 0
   Insn 189: point = 38, n_alt = 2
   Insn 188: point = 39, n_alt = 10
   Insn 187: point = 41, n_alt = 4
   Insn 186: point = 42, n_alt = -1
   Insn 185: point = 42, n_alt = -2
   Insn 184: point = 43, n_alt = -2
   Insn 183: point = 44, n_alt = 10
   Insn 182: point = 45, n_alt = 15
   Insn 181: point = 46, n_alt = 4
   Insn 180: point = 48, n_alt = 4
   Insn 179: point = 50, n_alt = 4
   Insn 178: point = 51, n_alt = 1
   Insn 177: point = 53, n_alt = 0
   Insn 176: point = 55, n_alt = 0
   Insn 175: point = 57, n_alt = 2
   Insn 174: point = 58, n_alt = 10
   Insn 173: point = 60, n_alt = 4
   Insn 172: point = 61, n_alt = -1
   Insn 171: point = 61, n_alt = 4
   Insn 170: point = 61, n_alt = 4
  BB 6
   Insn 168: point = 61, n_alt = -1
   Insn 167: point = 61, n_alt = 2
   Insn 166: point = 62, n_alt = 4
   Insn 164: point = 63, n_alt = 4
   Insn 163: point = 64, n_alt = 10
   Insn 162: point = 65, n_alt = 15
  BB 2
   Insn 284: point = 66, n_alt = -1
   Insn 96: point = 66, n_alt = -1
   Insn 95: point = 66, n_alt = 4
   Insn 94: point = 66, n_alt = 5
   Insn 93: point = 67, n_alt = 10
   Insn 92: point = 68, n_alt = 15
   Insn 91: point = 69, n_alt = 5
   Insn 90: point = 70, n_alt = 10
   Insn 89: point = 71, n_alt = 15
   Insn 88: point = 72, n_alt = -1
   Insn 87: point = 72, n_alt = -2
   Insn 86: point = 73, n_alt = -2
   Insn 85: point = 74, n_alt = 10
   Insn 84: point = 75, n_alt = 15
   Insn 83: point = 76, n_alt = 4
   Insn 82: point = 78, n_alt = 4
   Insn 81: point = 79, n_alt = -1
   Insn 80: point = 79, n_alt = 4
   Insn 79: point = 79, n_alt = -2
   Insn 78: point = 80, n_alt = 4
   Insn 77: point = 82, n_alt = 4
   Insn 76: point = 83, n_alt = 5
   Insn 75: point = 84, n_alt = 4
   Insn 74: point = 86, n_alt = 10
   Insn 73: point = 87, n_alt = 15
   Insn 72: point = 88, n_alt = -1
   Insn 71: point = 88, n_alt = -2
   Insn 70: point = 89, n_alt = -2
   Insn 69: point = 90, n_alt = 10
   Insn 68: point = 91, n_alt = 15
   Insn 67: point = 92, n_alt = 4
   Insn 66: point = 94, n_alt = 4
   Insn 65: point = 95, n_alt = -1
   Insn 64: point = 95, n_alt = 4
   Insn 63: point = 95, n_alt = -1
   Insn 62: point = 95, n_alt = 4
   Insn 61: point = 95, n_alt = -2
   Insn 60: point = 96, n_alt = -2
   Insn 59: point = 97, n_alt = -2
   Insn 58: point = 98, n_alt = 4
   Insn 57: point = 100, n_alt = 4
   Insn 56: point = 101, n_alt = 4
   Insn 55: point = 103, n_alt = 4
   Insn 54: point = 104, n_alt = 4
   Insn 53: point = 106, n_alt = 4
   Insn 52: point = 107, n_alt = 5
   Insn 51: point = 108, n_alt = 4
   Insn 50: point = 109, n_alt = -2
   Insn 49: point = 111, n_alt = 4
   Insn 48: point = 113, n_alt = 4
   Insn 47: point = 114, n_alt = 5
   Insn 46: point = 115, n_alt = 4
   Insn 45: point = 116, n_alt = -2
   Insn 44: point = 118, n_alt = 4
   Insn 43: point = 120, n_alt = 4
   Insn 42: point = 121, n_alt = 5
   Insn 41: point = 122, n_alt = 4
   Insn 40: point = 123, n_alt = -2
   Insn 39: point = 125, n_alt = 4
   Insn 38: point = 127, n_alt = 4
   Insn 37: point = 128, n_alt = 5
   Insn 36: point = 129, n_alt = 10
   Insn 35: point = 130, n_alt = 15
   Insn 34: point = 131, n_alt = -1
   Insn 33: point = 131, n_alt = 1
   Insn 32: point = 131, n_alt = -2
   Insn 31: point = 132, n_alt = 10
   Insn 30: point = 133, n_alt = 15
   Insn 29: point = 134, n_alt = -1
   Insn 28: point = 134, n_alt = 4
   Insn 27: point = 134, n_alt = -1
   Insn 26: point = 134, n_alt = 4
   Insn 25: point = 134, n_alt = -2
   Insn 24: point = 135, n_alt = -2
   Insn 23: point = 136, n_alt = -2
   Insn 22: point = 137, n_alt = 4
   Insn 21: point = 139, n_alt = 4
   Insn 20: point = 140, n_alt = 4
   Insn 19: point = 142, n_alt = 4
   Insn 18: point = 143, n_alt = -2
   Insn 17: point = 145, n_alt = 1
   Insn 16: point = 147, n_alt = 4
   Insn 15: point = 148, n_alt = 5
   Insn 14: point = 149, n_alt = 10
   Insn 13: point = 150, n_alt = 15
   Insn 12: point = 151, n_alt = -1
   Insn 11: point = 151, n_alt = 1
   Insn 10: point = 151, n_alt = -2
   Insn 9: point = 152, n_alt = 10
   Insn 8: point = 153, n_alt = 15
   Insn 7: point = 154, n_alt = -1
   Insn 6: point = 154, n_alt = 4
   Insn 3: point = 154, n_alt = 1
  BB 5
   Insn 159: point = 156, n_alt = 5
   Insn 158: point = 157, n_alt = 4
   Insn 157: point = 158, n_alt = 5
   Insn 156: point = 159, n_alt = 4
   Insn 155: point = 161, n_alt = 4
   Insn 154: point = 162, n_alt = -2
   Insn 153: point = 164, n_alt = 1
   Insn 152: point = 166, n_alt = 4
   Insn 151: point = 167, n_alt = 8
   Insn 150: point = 168, n_alt = 7
   Insn 149: point = 169, n_alt = 4
   Insn 148: point = 171, n_alt = 4
   Insn 147: point = 172, n_alt = -2
   Insn 146: point = 174, n_alt = 1
   Insn 145: point = 176, n_alt = 4
  BB 4
   Insn 142: point = 177, n_alt = 5
   Insn 141: point = 178, n_alt = 4
   Insn 140: point = 180, n_alt = 4
  BB 3
   Insn 138: point = 181, n_alt = -1
   Insn 137: point = 181, n_alt = 3
   Insn 136: point = 182, n_alt = -2
   Insn 135: point = 183, n_alt = -1
   Insn 134: point = 183, n_alt = -2
   Insn 133: point = 184, n_alt = 4
   Insn 132: point = 184, n_alt = 4
   Insn 131: point = 186, n_alt = 4
   Insn 130: point = 187, n_alt = -1
   Insn 129: point = 187, n_alt = 4
   Insn 128: point = 187, n_alt = -2
   Insn 127: point = 188, n_alt = -2
   Insn 126: point = 189, n_alt = -2
   Insn 125: point = 190, n_alt = 5
   Insn 124: point = 191, n_alt = 4
   Insn 123: point = 193, n_alt = 4
   Insn 122: point = 194, n_alt = -2
   Insn 121: point = 196, n_alt = 1
   Insn 120: point = 198, n_alt = 4
   Insn 119: point = 199, n_alt = -2
   Insn 118: point = 201, n_alt = 1
   Insn 117: point = 203, n_alt = 4
   Insn 116: point = 204, n_alt = 4
   Insn 115: point = 206, n_alt = 4
   Insn 114: point = 207, n_alt = 8
   Insn 113: point = 208, n_alt = 1
   Insn 112: point = 210, n_alt = 1
   Insn 111: point = 211, n_alt = 4
   Insn 110: point = 213, n_alt = 4
   Insn 109: point = 214, n_alt = -2
   Insn 108: point = 216, n_alt = 1
   Insn 107: point = 218, n_alt = 4
   Insn 106: point = 219, n_alt = 8
   Insn 105: point = 220, n_alt = 7
   Insn 104: point = 222, n_alt = 4
   Insn 103: point = 224, n_alt = 4
   Insn 102: point = 225, n_alt = -2
   Insn 101: point = 227, n_alt = 1
   Insn 100: point = 229, n_alt = 4
  BB 8
   Insn 260: point = 230, n_alt = 5
   Insn 259: point = 231, n_alt = 4
   Insn 258: point = 232, n_alt = 5
   Insn 257: point = 233, n_alt = 4
   Insn 256: point = 235, n_alt = 4
   Insn 255: point = 236, n_alt = -2
   Insn 254: point = 238, n_alt = 1
   Insn 253: point = 240, n_alt = 4
   Insn 252: point = 241, n_alt = 8
   Insn 251: point = 242, n_alt = 7
   Insn 250: point = 243, n_alt = 4
   Insn 249: point = 245, n_alt = 4
   Insn 248: point = 246, n_alt = -2
   Insn 247: point = 248, n_alt = 1
   Insn 246: point = 250, n_alt = 4
   Insn 245: point = 251, n_alt = -1
   Insn 244: point = 251, n_alt = 4
   Insn 243: point = 251, n_alt = -2
   Insn 242: point = 252, n_alt = -2
   Insn 241: point = 253, n_alt = -2
   Insn 240: point = 254, n_alt = 5
   Insn 239: point = 255, n_alt = 4
   Insn 238: point = 257, n_alt = 4
   Insn 237: point = 258, n_alt = -2
   Insn 236: point = 260, n_alt = 1
   Insn 235: point = 262, n_alt = 4
   Insn 234: point = 263, n_alt = -2
   Insn 233: point = 265, n_alt = 1
   Insn 232: point = 267, n_alt = 4
   Insn 231: point = 268, n_alt = 4
   Insn 230: point = 270, n_alt = 4
   Insn 229: point = 271, n_alt = 8
   Insn 228: point = 272, n_alt = 1
   Insn 227: point = 274, n_alt = 1
   Insn 226: point = 275, n_alt = 4
   Insn 225: point = 277, n_alt = 4
   Insn 224: point = 278, n_alt = -2
   Insn 223: point = 280, n_alt = 1
   Insn 222: point = 282, n_alt = 4
   Insn 221: point = 283, n_alt = 8
   Insn 220: point = 284, n_alt = 7
   Insn 219: point = 286, n_alt = 4
   Insn 218: point = 288, n_alt = 4
   Insn 217: point = 289, n_alt = -2
   Insn 216: point = 291, n_alt = 1
   Insn 215: point = 293, n_alt = 4
 r113: [144..145]
 r114: [134..143]
 r115: [135..140]
 r116: [136..137]
 r117: [124..125]
 r118: [121..123]
 r119: [117..118]
 r120: [114..116]
 r121: [110..111]
 r122: [107..109]
 r123: [95..104]
 r124: [96..101]
 r125: [97..98]
 r126: [88..92]
 r127: [79..80]
 r128: [72..76]
 r129: [226..227]
 r130: [223..225]
 r131: [215..216]
 r132: [212..214]
 r133: [187..204]
 r134: [200..201]
 r135: [188..199]
 r136: [195..196]
 r137: [189..194]
 r138: [190..191]
 r139: [183..184]
 r140: [181..182]
 r141: [177..178]
 r142: [173..174]
 r143: [170..172]
 r144: [163..164]
 r145: [160..162]
 r146: [61..65]
 r147: [56..58]
 r148: [47..55]
 r149: [47..48]
 r150: [42..46]
 r151: [37..39]
 r152: [31..36]
 r153: [29..30]
 r154: [25..28]
 r155: [16..20]
 r156: [290..291]
 r157: [287..289]
 r158: [279..280]
 r159: [276..278]
 r160: [251..268]
 r161: [264..265]
 r162: [252..263]
 r163: [259..260]
 r164: [253..258]
 r165: [254..255]
 r166: [247..248]
 r167: [244..246]
 r168: [237..238]
 r169: [234..236]
 r170: [5..9]
 r171: [0..4]
 r172: [151..153]
 r173: [148..150]
 r174: [146..147]
 r175: [141..142]
 r176: [138..139]
 r177: [131..133]
 r178: [128..130]
 r179: [126..127]
 r180: [121..122]
 r181: [119..120]
 r182: [114..115]
 r183: [112..113]
 r184: [107..108]
 r185: [105..106]
 r186: [102..103]
 r187: [99..100]
 r188: [93..94]
 r189: [89..91]
 r190: [85..87]
 r191: [83..84]
 r192: [81..82]
 r193: [77..78]
 r194: [73..75]
 r195: [69..71]
 r196: [66..68]
 r197: [228..229]
 r198: [223..224]
 r199: [221..222]
 r200: [219..220]
 r201: [217..218]
 r202: [212..213]
 r203: [207..211]
 r204: [209..210]
 r205: [207..208]
 r206: [205..206]
 r207: [202..203]
 r208: [197..198]
 r209: [192..193]
 r210: [185..186]
 r211: [179..180]
 r212: [175..176]
 r213: [170..171]
 r214: [167..169]
 r215: [167..168]
 r216: [165..166]
 r217: [158..159]
 r218: [160..161]
 r219: [156..157]
 r220: [61..62]
 r221: [59..60]
 r222: [54..57]
 r223: [52..53]
 r224: [49..50]
 r225: [43..45]
 r226: [40..41]
 r227: [35..38]
 r228: [33..34]
 r229: [25..27]
 r230: [23..24]
 r231: [21..22]
 r232: [17..19]
 r233: [13..15]
 r234: [10..12]
 r235: [292..293]
 r236: [287..288]
 r237: [285..286]
 r238: [283..284]
 r239: [281..282]
 r240: [276..277]
 r241: [271..275]
 r242: [273..274]
 r243: [271..272]
 r244: [269..270]
 r245: [266..267]
 r246: [261..262]
 r247: [256..257]
 r248: [249..250]
 r249: [244..245]
 r250: [241..243]
 r251: [241..242]
 r252: [239..240]
 r253: [232..233]
 r254: [234..235]
 r255: [230..231]
 r256: [5..6]
 r257: [154..155]
 r258: [154..155]
 r259: [2..3]
 r260: [2..3]
Compressing live ranges: from 294 to 222 - 75%
Ranges after the compression:
 r113: [98..99]
 r114: [92..97]
 r115: [92..95]
 r116: [92..93]
 r117: [84..85]
 r118: [82..83]
 r119: [78..79]
 r120: [76..77]
 r121: [72..73]
 r122: [70..71]
 r123: [62..67]
 r124: [62..65]
 r125: [62..63]
 r126: [58..59]
 r127: [50..51]
 r128: [46..47]
 r129: [166..167]
 r130: [164..165]
 r131: [156..157]
 r132: [154..155]
 r133: [136..147]
 r134: [144..145]
 r135: [136..143]
 r136: [140..141]
 r137: [136..139]
 r138: [136..137]
 r139: [132..133]
 r140: [130..131]
 r141: [126..127]
 r142: [122..123]
 r143: [120..121]
 r144: [114..115]
 r145: [112..113]
 r146: [40..41]
 r147: [36..37]
 r148: [28..35]
 r149: [28..29]
 r150: [26..27]
 r151: [22..23]
 r152: [18..21]
 r153: [16..17]
 r154: [14..15]
 r155: [8..9]
 r156: [218..219]
 r157: [216..217]
 r158: [208..209]
 r159: [206..207]
 r160: [188..199]
 r161: [196..197]
 r162: [188..195]
 r163: [192..193]
 r164: [188..191]
 r165: [188..189]
 r166: [184..185]
 r167: [182..183]
 r168: [176..177]
 r169: [174..175]
 r170: [2..3]
 r171: [0..1]
 r172: [104..105]
 r173: [102..103]
 r174: [100..101]
 r175: [96..97]
 r176: [94..95]
 r177: [90..91]
 r178: [88..89]
 r179: [86..87]
 r180: [82..83]
 r181: [80..81]
 r182: [76..77]
 r183: [74..75]
 r184: [70..71]
 r185: [68..69]
 r186: [66..67]
 r187: [64..65]
 r188: [60..61]
 r189: [58..59]
 r190: [56..57]
 r191: [54..55]
 r192: [52..53]
 r193: [48..49]
 r194: [46..47]
 r195: [44..45]
 r196: [42..43]
 r197: [168..169]
 r198: [164..165]
 r199: [162..163]
 r200: [160..161]
 r201: [158..159]
 r202: [154..155]
 r203: [150..153]
 r204: [152..153]
 r205: [150..151]
 r206: [148..149]
 r207: [146..147]
 r208: [142..143]
 r209: [138..139]
 r210: [134..135]
 r211: [128..129]
 r212: [124..125]
 r213: [120..121]
 r214: [118..119]
 r215: [118..119]
 r216: [116..117]
 r217: [110..111]
 r218: [112..113]
 r219: [108..109]
 r220: [40..41]
 r221: [38..39]
 r222: [34..37]
 r223: [32..33]
 r224: [30..31]
 r225: [26..27]
 r226: [24..25]
 r227: [20..23]
 r228: [18..19]
 r229: [14..15]
 r230: [12..13]
 r231: [10..11]
 r232: [8..9]
 r233: [6..7]
 r234: [4..5]
 r235: [220..221]
 r236: [216..217]
 r237: [214..215]
 r238: [212..213]
 r239: [210..211]
 r240: [206..207]
 r241: [202..205]
 r242: [204..205]
 r243: [202..203]
 r244: [200..201]
 r245: [198..199]
 r246: [194..195]
 r247: [190..191]
 r248: [186..187]
 r249: [182..183]
 r250: [180..181]
 r251: [180..181]
 r252: [178..179]
 r253: [172..173]
 r254: [174..175]
 r255: [170..171]
 r256: [2..3]
 r257: [106..107]
 r258: [106..107]
 r259: [0..1]
 r260: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=2092, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=2088, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 25
changing reg in insn 20
changing reg in insn 24
changing reg in insn 22
changing reg in insn 23
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 52
changing reg in insn 54
changing reg in insn 61
changing reg in insn 56
changing reg in insn 60
changing reg in insn 58
changing reg in insn 59
changing reg in insn 67
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 87
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 111
changing reg in insn 116
changing reg in insn 128
changing reg in insn 118
changing reg in insn 119
changing reg in insn 119
changing reg in insn 127
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 126
changing reg in insn 124
changing reg in insn 125
changing reg in insn 132
changing reg in insn 134
changing reg in insn 136
changing reg in insn 137
changing reg in insn 141
changing reg in insn 142
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 149
changing reg in insn 153
changing reg in insn 154
changing reg in insn 154
changing reg in insn 156
changing reg in insn 164
changing reg in insn 163
changing reg in insn 162
changing reg in insn 167
changing reg in insn 164
changing reg in insn 163
changing reg in insn 174
changing reg in insn 176
changing reg in insn 175
changing reg in insn 175
changing reg in insn 178
changing reg in insn 176
changing reg in insn 181
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 185
changing reg in insn 188
changing reg in insn 190
changing reg in insn 189
changing reg in insn 189
changing reg in insn 192
changing reg in insn 190
changing reg in insn 193
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 197
changing reg in insn 200
changing reg in insn 204
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 219
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 226
changing reg in insn 231
changing reg in insn 243
changing reg in insn 233
changing reg in insn 234
changing reg in insn 234
changing reg in insn 242
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 241
changing reg in insn 239
changing reg in insn 240
changing reg in insn 247
changing reg in insn 248
changing reg in insn 248
changing reg in insn 250
changing reg in insn 254
changing reg in insn 255
changing reg in insn 255
changing reg in insn 257
changing reg in insn 265
changing reg in insn 264
changing reg in insn 263
changing reg in insn 268
changing reg in insn 265
changing reg in insn 264
changing reg in insn 278
changing reg in insn 276
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 14
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 31
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 66
changing reg in insn 67
changing reg in insn 69
changing reg in insn 68
changing reg in insn 70
changing reg in insn 69
changing reg in insn 74
changing reg in insn 73
changing reg in insn 75
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 90
changing reg in insn 89
changing reg in insn 91
changing reg in insn 90
changing reg in insn 93
changing reg in insn 92
changing reg in insn 94
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 107
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 111
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 120
changing reg in insn 121
changing reg in insn 123
changing reg in insn 124
changing reg in insn 131
changing reg in insn 132
changing reg in insn 140
changing reg in insn 141
changing reg in insn 145
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 150
changing reg in insn 151
changing reg in insn 152
changing reg in insn 153
changing reg in insn 156
changing reg in insn 157
changing reg in insn 155
changing reg in insn 156
changing reg in insn 158
changing reg in insn 159
changing reg in insn 166
changing reg in insn 167
changing reg in insn 173
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 177
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 183
changing reg in insn 182
changing reg in insn 184
changing reg in insn 183
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 191
changing reg in insn 191
changing reg in insn 192
changing reg in insn 196
changing reg in insn 195
changing reg in insn 197
changing reg in insn 196
changing reg in insn 197
changing reg in insn 198
changing reg in insn 199
changing reg in insn 200
changing reg in insn 202
changing reg in insn 201
changing reg in insn 203
changing reg in insn 202
changing reg in insn 207
changing reg in insn 206
changing reg in insn 208
changing reg in insn 207
changing reg in insn 210
changing reg in insn 209
changing reg in insn 211
changing reg in insn 210
changing reg in insn 215
changing reg in insn 216
changing reg in insn 218
changing reg in insn 219
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 225
changing reg in insn 226
changing reg in insn 226
changing reg in insn 229
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 231
changing reg in insn 232
changing reg in insn 233
changing reg in insn 235
changing reg in insn 236
changing reg in insn 238
changing reg in insn 239
changing reg in insn 246
changing reg in insn 247
changing reg in insn 249
changing reg in insn 250
changing reg in insn 250
changing reg in insn 252
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 257
changing reg in insn 258
changing reg in insn 256
changing reg in insn 257
changing reg in insn 259
changing reg in insn 260
changing reg in insn 267
changing reg in insn 268
changing reg in insn 3
changing reg in insn 3
changing reg in insn 272
changing reg in insn 272
deleting insn with uid = 23.
deleting insn with uid = 24.
deleting insn with uid = 25.
deleting insn with uid = 59.
deleting insn with uid = 60.
deleting insn with uid = 61.
deleting insn with uid = 113.
deleting insn with uid = 127.
deleting insn with uid = 128.
deleting insn with uid = 193.
deleting insn with uid = 228.
deleting insn with uid = 242.
deleting insn with uid = 243.
starting the processing of deferred insns
ending the processing of deferred insns


testFS

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={40d,22u} r1={33d,13u} r2={53d,32u} r3={145d,129u} r11={1d,89u} r12={36d} r13={1d,34u} r14={19d} r15={18d} r16={18d} r17={18d} r18={18d} r19={18d} r20={18d} r21={18d} r22={18d} r23={18d} r24={18d} r25={18d} r26={18d} r27={18d} r28={18d} r29={18d} r30={18d} r31={18d} r32={18d} r33={18d} r34={18d} r35={18d} r36={18d} r37={18d} r38={18d} r39={18d} r40={18d} r41={18d} r42={18d} r43={18d} r44={18d} r45={18d} r46={18d} r47={18d} r48={18d} r49={18d} r50={18d} r51={18d} r52={18d} r53={18d} r54={18d} r55={18d} r56={18d} r57={18d} r58={18d} r59={18d} r60={18d} r61={18d} r62={18d} r63={18d} r64={18d} r65={18d} r66={18d} r67={18d} r68={18d} r69={18d} r70={18d} r71={18d} r72={18d} r73={18d} r74={18d} r75={18d} r76={18d} r77={18d} r78={18d} r79={18d} r80={18d} r81={18d} r82={18d} r83={18d} r84={18d} r85={18d} r86={18d} r87={18d} r88={18d} r89={18d} r90={18d} r91={18d} r92={18d} r93={18d} r94={18d} r95={18d} r96={18d} r97={18d} r98={18d} r99={18d} r100={24d,5u} r101={18d} r102={1d,1u,16e} r104={18d} r105={18d} r106={18d} 
;;    total ref usage 2296{1955d,325u,16e} in 245{227 regular + 18 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 257 258
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:SI (plus:SI (reg/f:SI 11 fp)
                        (const_int -8 [0xfffffffffffffff8])) [8 D.4573+0 S4 A32])
                (unspec:SI [
                        (mem/v/f/c:SI (symbol_ref:SI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7f1b8dcb7090 __stack_chk_guard>) [8 __stack_chk_guard+0 S4 A32])
                    ] UNSPEC_SP_SET))
            (clobber (reg:SI 3 r3 [257]))
            (clobber (reg:SI 2 r2 [258]))
        ]) "disk.c":109:1 304 {*stack_protect_combined_set_insn}
     (nil))
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7f1b8dcb7120 *.LC0>)) "disk.c":119:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":119:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg:SI 3 r3 [172])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":120:3 7 {*arm_addsi3}
     (nil))
(insn 9 8 10 2 (set (reg:SI 3 r3 [172])
        (plus:SI (reg:SI 3 r3 [172])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":120:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [172])) "disk.c":120:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) "disk.c":120:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":120:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 12 14 2 (set (reg:SI 3 r3 [173])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":121:6 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [173])
        (plus:SI (reg:SI 3 r3 [173])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":121:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 15 14 16 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2068 [0xfffffffffffff7ec])) [11 sp+0 S4 A64])
        (reg:SI 3 r3 [173])) "disk.c":121:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [174])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2068 [0xfffffffffffff7ec])) [11 sp+0 S4 A64])) "disk.c":122:47 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:HI (plus:SI (reg/f:SI 3 r3 [174])
                    (const_int 56 [0x38])) [14 sp_70->s_magic+0 S2 A32]))) "disk.c":122:47 172 {*arm_zero_extendhisi2}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1 [orig:114 _2 ] [114])
        (reg:SI 3 r3 [orig:113 _1 ] [113])) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 3 r3 [175])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2068 [0xfffffffffffff7ec])) [11 sp+0 S4 A64])) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 2 r2 [orig:115 _3 ] [115])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [175])
                (const_int 4 [0x4])) [4 sp_70->s_blocks_count+0 S4 A32])) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 3 r3 [176])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2068 [0xfffffffffffff7ec])) [11 sp+0 S4 A64])) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 26 2 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (mem:SI (reg/f:SI 3 r3 [176]) [4 sp_70->s_inodes_count+0 S4 A32])) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(insn 26 22 27 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f1b8dcb71b0 *.LC1>)) "disk.c":122:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":122:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (expr_list:SI (use (reg:SI 3 r3))
                        (nil)))))))
(insn 28 27 29 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7f1b8dcb7240 *.LC2>)) "disk.c":125:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 29 28 30 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":125:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 30 29 31 2 (set (reg:SI 3 r3 [177])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":126:3 7 {*arm_addsi3}
     (nil))
(insn 31 30 32 2 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [177])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":126:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 32 31 33 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [177])) "disk.c":126:3 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 2 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) "disk.c":126:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":126:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 35 34 36 2 (set (reg:SI 3 r3 [178])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":127:6 7 {*arm_addsi3}
     (nil))
(insn 36 35 37 2 (set (reg:SI 3 r3 [178])
        (plus:SI (reg:SI 3 r3 [178])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":127:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 37 36 38 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2064 [0xfffffffffffff7f0])) [10 gp+0 S4 A32])
        (reg:SI 3 r3 [178])) "disk.c":127:6 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 2 (set (reg/f:SI 3 r3 [179])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2064 [0xfffffffffffff7f0])) [10 gp+0 S4 A32])) "disk.c":128:12 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 2 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (mem:SI (reg/f:SI 3 r3 [179]) [4 gp_74->bg_block_bitmap+0 S4 A32])) "disk.c":128:12 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 2 (set (reg:SI 2 r2 [orig:118 _6 ] [118])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "disk.c":128:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 2 (set (reg/f:SI 3 r3 [180])
        (symbol_ref:SI ("bmap") [flags 0x2]  <var_decl 0x7f1b8dc79360 bmap>)) "disk.c":128:8 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 2 (set (mem/c:SI (reg/f:SI 3 r3 [180]) [4 bmap+0 S4 A32])
        (reg:SI 2 r2 [orig:118 _6 ] [118])) "disk.c":128:8 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 2 (set (reg/f:SI 3 r3 [181])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2064 [0xfffffffffffff7f0])) [10 gp+0 S4 A32])) "disk.c":129:12 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 2 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [181])
                (const_int 4 [0x4])) [4 gp_74->bg_inode_bitmap+0 S4 A32])) "disk.c":129:12 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 2 (set (reg:SI 2 r2 [orig:120 _8 ] [120])
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "disk.c":129:12 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 2 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("imap") [flags 0x2]  <var_decl 0x7f1b8dc793f0 imap>)) "disk.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 2 (set (mem/c:SI (reg/f:SI 3 r3 [182]) [4 imap+0 S4 A32])
        (reg:SI 2 r2 [orig:120 _8 ] [120])) "disk.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 2 (set (reg/f:SI 3 r3 [183])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2064 [0xfffffffffffff7f0])) [10 gp+0 S4 A32])) "disk.c":130:12 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 2 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [183])
                (const_int 8 [0x8])) [4 gp_74->bg_inode_table+0 S4 A32])) "disk.c":130:12 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 2 (set (reg:SI 2 r2 [orig:122 _10 ] [122])
        (reg:SI 3 r3 [orig:121 _9 ] [121])) "disk.c":130:12 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 2 (set (reg/f:SI 3 r3 [184])
        (symbol_ref:SI ("iblk") [flags 0x2]  <var_decl 0x7f1b8dc79480 iblk>)) "disk.c":130:8 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 2 (set (mem/c:SI (reg/f:SI 3 r3 [184]) [4 iblk+0 S4 A32])
        (reg:SI 2 r2 [orig:122 _10 ] [122])) "disk.c":130:8 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 2 (set (reg/f:SI 3 r3 [185])
        (symbol_ref:SI ("bmap") [flags 0x2]  <var_decl 0x7f1b8dc79360 bmap>)) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 2 (set (reg:SI 1 r1 [orig:123 bmap.0_11 ] [123])
        (mem/c:SI (reg/f:SI 3 r3 [185]) [4 bmap+0 S4 A32])) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 2 (set (reg/f:SI 3 r3 [186])
        (symbol_ref:SI ("imap") [flags 0x2]  <var_decl 0x7f1b8dc793f0 imap>)) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 2 (set (reg:SI 2 r2 [orig:124 imap.1_12 ] [124])
        (mem/c:SI (reg/f:SI 3 r3 [186]) [4 imap+0 S4 A32])) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 57 56 58 2 (set (reg/f:SI 3 r3 [187])
        (symbol_ref:SI ("iblk") [flags 0x2]  <var_decl 0x7f1b8dc79480 iblk>)) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 62 2 (set (reg:SI 3 r3 [orig:125 iblk.2_13 ] [125])
        (mem/c:SI (reg/f:SI 3 r3 [187]) [4 iblk+0 S4 A32])) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(insn 62 58 63 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f1b8dcb72d0 *.LC3>)) "disk.c":131:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 63 62 64 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":131:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (expr_list:SI (use (reg:SI 3 r3))
                        (nil)))))))
(insn 64 63 65 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7f1b8dcb7360 *.LC4>)) "disk.c":134:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 65 64 66 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":134:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 66 65 67 2 (set (reg/f:SI 3 r3 [188])
        (symbol_ref:SI ("iblk") [flags 0x2]  <var_decl 0x7f1b8dc79480 iblk>)) "disk.c":135:3 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 2 (set (reg:SI 2 r2 [orig:126 iblk.3_14 ] [126])
        (mem/c:SI (reg/f:SI 3 r3 [188]) [4 iblk+0 S4 A32])) "disk.c":135:3 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 2 (set (reg:SI 3 r3 [189])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":135:3 7 {*arm_addsi3}
     (nil))
(insn 69 68 70 2 (set (reg:SI 3 r3 [189])
        (plus:SI (reg:SI 3 r3 [189])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":135:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 70 69 71 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [189])) "disk.c":135:3 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 2 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:126 iblk.3_14 ] [126])) "disk.c":135:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 72 71 73 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":135:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 73 72 74 2 (set (reg:SI 3 r3 [190])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":136:6 7 {*arm_addsi3}
     (nil))
(insn 74 73 75 2 (set (reg:SI 3 r3 [190])
        (plus:SI (reg:SI 3 r3 [190])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":136:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 75 74 76 2 (set (reg:SI 3 r3 [191])
        (plus:SI (reg:SI 3 r3 [190])
            (const_int 128 [0x80]))) "disk.c":136:6 7 {*arm_addsi3}
     (nil))
(insn 76 75 77 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2060 [0xfffffffffffff7f4])) [9 ip+0 S4 A64])
        (reg:SI 3 r3 [191])) "disk.c":136:6 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 2 (set (reg/f:SI 3 r3 [192])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2060 [0xfffffffffffff7f4])) [9 ip+0 S4 A64])) "disk.c":137:3 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 2 (set (reg:SI 3 r3 [orig:127 _15 ] [127])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [192])
                (const_int 40 [0x28])) [4 ip_81->i_block[0]+0 S4 A32])) "disk.c":137:3 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:127 _15 ] [127])) "disk.c":137:3 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f1b8dcb73f0 *.LC5>)) "disk.c":137:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 81 80 82 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":137:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 82 81 83 2 (set (reg/f:SI 3 r3 [193])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2060 [0xfffffffffffff7f4])) [9 ip+0 S4 A64])) "disk.c":138:3 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 2 (set (reg:SI 2 r2 [orig:128 _16 ] [128])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [193])
                (const_int 40 [0x28])) [4 ip_81->i_block[0]+0 S4 A32])) "disk.c":138:3 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 2 (set (reg:SI 3 r3 [194])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":138:3 7 {*arm_addsi3}
     (nil))
(insn 85 84 86 2 (set (reg:SI 3 r3 [194])
        (plus:SI (reg:SI 3 r3 [194])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":138:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 86 85 87 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [194])) "disk.c":138:3 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 2 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:128 _16 ] [128])) "disk.c":138:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 88 87 89 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":138:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 89 88 90 2 (set (reg:SI 3 r3 [195])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":140:6 7 {*arm_addsi3}
     (nil))
(insn 90 89 91 2 (set (reg:SI 3 r3 [195])
        (plus:SI (reg:SI 3 r3 [195])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":140:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 91 90 92 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])
        (reg:SI 3 r3 [195])) "disk.c":140:6 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 2 (set (reg:SI 3 r3 [196])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":141:6 7 {*arm_addsi3}
     (nil))
(insn 93 92 94 2 (set (reg:SI 3 r3 [196])
        (plus:SI (reg:SI 3 r3 [196])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":141:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 94 93 95 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])
        (reg:SI 3 r3 [196])) "disk.c":141:6 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7f1b8dcb7480 *.LC6>)) "disk.c":143:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 96 95 284 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":143:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 284 96 285 2 (set (pc)
        (label_ref 160)) "disk.c":144:8 284 {*arm_jump}
     (nil)
 -> 160)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 285 284 165)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 129 130 131 132 133 134 135 136 137 138 139 140 197 198 199 200 201 202 203 204 205 206 207 208 209 210
(code_label 165 285 99 3 23 (nil) [1 uses])
(note 99 165 100 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 3 (set (reg/f:SI 3 r3 [197])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":145:20 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 3 (set (reg:SI 3 r3 [orig:129 _17 ] [129])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [197])
                    (const_int 6 [0x6])) [0 dp_59->name_len+0 S1 A16]))) "disk.c":145:20 175 {*arm_zero_extendqisi2}
     (nil))
(insn 102 101 103 3 (set (reg:SI 2 r2 [orig:130 _18 ] [130])
        (reg:SI 3 r3 [orig:129 _17 ] [129])) "disk.c":145:20 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 3 (set (reg/f:SI 3 r3 [198])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":145:7 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 3 (set (reg/f:SI 3 r3 [199])
        (plus:SI (reg/f:SI 3 r3 [198])
            (reg:SI 2 r2 [orig:130 _18 ] [130]))) "disk.c":145:7 7 {*arm_addsi3}
     (nil))
(insn 105 104 106 3 (set (reg:QI 3 r3 [200])
        (mem:QI (plus:SI (reg/f:SI 3 r3 [199])
                (const_int 8 [0x8])) [0 dp_59->name[_18]+0 S1 A8])) "disk.c":145:7 263 {*arm_movqi_insn}
     (nil))
(insn 106 105 107 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -2081 [0xfffffffffffff7df])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [200])) "disk.c":145:7 263 {*arm_movqi_insn}
     (nil))
(insn 107 106 108 3 (set (reg/f:SI 3 r3 [201])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":146:16 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 109 3 (set (reg:SI 3 r3 [orig:131 _19 ] [131])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [201])
                    (const_int 6 [0x6])) [0 dp_59->name_len+0 S1 A16]))) "disk.c":146:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 109 108 110 3 (set (reg:SI 2 r2 [orig:132 _20 ] [132])
        (reg:SI 3 r3 [orig:131 _19 ] [131])) "disk.c":146:16 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 3 (set (reg/f:SI 3 r3 [202])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":146:28 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 3 (set (reg/f:SI 3 r3 [203])
        (plus:SI (reg/f:SI 3 r3 [202])
            (reg:SI 2 r2 [orig:132 _20 ] [132]))) "disk.c":146:28 7 {*arm_addsi3}
     (nil))
(insn 112 111 114 3 (set (reg:SI 2 r2 [204])
        (const_int 0 [0])) "disk.c":146:28 253 {*arm_movsi_insn}
     (nil))
(insn 114 112 115 3 (set (mem:QI (plus:SI (reg/f:SI 3 r3 [203])
                (const_int 8 [0x8])) [0 dp_59->name[_20]+0 S1 A8])
        (reg:QI 2 r2 [205])) "disk.c":146:28 263 {*arm_movqi_insn}
     (nil))
(insn 115 114 116 3 (set (reg/f:SI 3 r3 [206])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 116 115 117 3 (set (reg:SI 1 r1 [orig:133 _21 ] [133])
        (mem:SI (reg/f:SI 3 r3 [206]) [4 dp_59->inode+0 S4 A32])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 117 116 118 3 (set (reg/f:SI 3 r3 [207])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":147:42 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 3 (set (reg:SI 3 r3 [orig:134 _22 ] [134])
        (zero_extend:SI (mem:HI (plus:SI (reg/f:SI 3 r3 [207])
                    (const_int 4 [0x4])) [14 dp_59->rec_len+0 S2 A32]))) "disk.c":147:42 172 {*arm_zero_extendhisi2}
     (nil))
(insn 119 118 120 3 (set (reg:SI 2 r2 [orig:135 _23 ] [135])
        (reg:SI 3 r3 [orig:134 _22 ] [134])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 120 119 121 3 (set (reg/f:SI 3 r3 [208])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":147:55 253 {*arm_movsi_insn}
     (nil))
(insn 121 120 122 3 (set (reg:SI 3 r3 [orig:136 _24 ] [136])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [208])
                    (const_int 6 [0x6])) [0 dp_59->name_len+0 S1 A16]))) "disk.c":147:55 175 {*arm_zero_extendqisi2}
     (nil))
(insn 122 121 123 3 (set (reg:SI 0 r0 [orig:137 _25 ] [137])
        (reg:SI 3 r3 [orig:136 _24 ] [136])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 3 (set (reg:SI 3 r3 [209])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":147:69 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 3 (set (reg/f:SI 3 r3 [orig:138 _26 ] [138])
        (plus:SI (reg:SI 3 r3 [209])
            (const_int 8 [0x8]))) "disk.c":147:69 7 {*arm_addsi3}
     (nil))
(insn 125 124 126 3 (set (mem:SI (reg/f:SI 13 sp) [0  S4 A32])
        (reg/f:SI 3 r3 [orig:138 _26 ] [138])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 129 3 (set (reg:SI 3 r3)
        (reg:SI 0 r0 [orig:137 _25 ] [137])) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(insn 129 126 130 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7f1b8dcb7510 *.LC7>)) "disk.c":147:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 130 129 131 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":147:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (expr_list:SI (use (reg:SI 3 r3))
                        (expr_list:SI (use (mem/f:SI (reg/f:SI 13 sp) [0  S4 A32]))
                            (nil))))))))
(insn 131 130 132 3 (set (reg:SI 3 r3 [210])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 132 131 133 3 (set (reg/f:SI 3 r3 [orig:139 _27 ] [139])
        (plus:SI (reg:SI 3 r3 [210])
            (const_int 8 [0x8]))) "disk.c":148:18 7 {*arm_addsi3}
     (nil))
(insn 133 132 134 3 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x7f1b8dcb75a0 *.LC8>)) "disk.c":148:9 253 {*arm_movsi_insn}
     (nil))
(insn 134 133 135 3 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:139 _27 ] [139])) "disk.c":148:9 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 135 134 136 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7f1b8def1700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":148:9 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 136 135 137 3 (set (reg:SI 3 r3 [orig:140 _28 ] [140])
        (reg:SI 0 r0)) "disk.c":148:9 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 _28 ] [140])
            (const_int 0 [0]))) "disk.c":148:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 138 137 139 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) "disk.c":148:8 273 {arm_cond_branch}
     (nil)
 -> 143)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 141 211
(note 139 138 140 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 140 139 141 4 (set (reg/f:SI 3 r3 [211])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":149:16 253 {*arm_movsi_insn}
     (nil))
(insn 141 140 142 4 (set (reg:SI 3 r3 [orig:141 _29 ] [141])
        (mem:SI (reg/f:SI 3 r3 [211]) [4 dp_59->inode+0 S4 A32])) "disk.c":149:16 253 {*arm_movsi_insn}
     (nil))
(insn 142 141 143 4 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2072 [0xfffffffffffff7e8])) [4 bino+0 S4 A32])
        (reg:SI 3 r3 [orig:141 _29 ] [141])) "disk.c":149:12 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 142 143 144 145 212 213 214 215 216 217 218 219
(code_label 143 142 144 5 22 (nil) [1 uses])
(note 144 143 145 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 5 (set (reg/f:SI 3 r3 [212])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":150:16 253 {*arm_movsi_insn}
     (nil))
(insn 146 145 147 5 (set (reg:SI 3 r3 [orig:142 _30 ] [142])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [212])
                    (const_int 6 [0x6])) [0 dp_59->name_len+0 S1 A16]))) "disk.c":150:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 147 146 148 5 (set (reg:SI 2 r2 [orig:143 _31 ] [143])
        (reg:SI 3 r3 [orig:142 _30 ] [142])) "disk.c":150:16 253 {*arm_movsi_insn}
     (nil))
(insn 148 147 149 5 (set (reg/f:SI 3 r3 [213])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":150:28 253 {*arm_movsi_insn}
     (nil))
(insn 149 148 150 5 (set (reg/f:SI 3 r3 [214])
        (plus:SI (reg/f:SI 3 r3 [213])
            (reg:SI 2 r2 [orig:143 _31 ] [143]))) "disk.c":150:28 7 {*arm_addsi3}
     (nil))
(insn 150 149 151 5 (set (reg:QI 2 r2 [215])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -2081 [0xfffffffffffff7df])) [0 c+0 S1 A8])) "disk.c":150:28 263 {*arm_movqi_insn}
     (nil))
(insn 151 150 152 5 (set (mem:QI (plus:SI (reg/f:SI 3 r3 [214])
                (const_int 8 [0x8])) [0 dp_59->name[_31]+0 S1 A8])
        (reg:QI 2 r2 [215])) "disk.c":150:28 263 {*arm_movqi_insn}
     (nil))
(insn 152 151 153 5 (set (reg/f:SI 3 r3 [216])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":151:13 253 {*arm_movsi_insn}
     (nil))
(insn 153 152 154 5 (set (reg:SI 3 r3 [orig:144 _32 ] [144])
        (zero_extend:SI (mem:HI (plus:SI (reg/f:SI 3 r3 [216])
                    (const_int 4 [0x4])) [14 dp_59->rec_len+0 S2 A32]))) "disk.c":151:13 172 {*arm_zero_extendhisi2}
     (nil))
(insn 154 153 155 5 (set (reg:SI 2 r2 [orig:145 _33 ] [145])
        (reg:SI 3 r3 [orig:144 _32 ] [144])) "disk.c":151:13 253 {*arm_movsi_insn}
     (nil))
(insn 155 154 156 5 (set (reg:SI 3 r3 [218])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":151:8 253 {*arm_movsi_insn}
     (nil))
(insn 156 155 157 5 (set (reg:SI 3 r3 [217])
        (plus:SI (reg:SI 3 r3 [218])
            (reg:SI 2 r2 [orig:145 _33 ] [145]))) "disk.c":151:8 7 {*arm_addsi3}
     (nil))
(insn 157 156 158 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])
        (reg:SI 3 r3 [217])) "disk.c":151:8 253 {*arm_movsi_insn}
     (nil))
(insn 158 157 159 5 (set (reg/f:SI 3 r3 [219])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":152:8 253 {*arm_movsi_insn}
     (nil))
(insn 159 158 160 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])
        (reg/f:SI 3 r3 [219])) "disk.c":152:8 253 {*arm_movsi_insn}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 146 220
(code_label 160 159 161 6 21 (nil) [1 uses])
(note 161 160 162 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 162 161 163 6 (set (reg/f:SI 3 r3 [orig:146 _34 ] [146])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":144:18 7 {*arm_addsi3}
     (nil))
(insn 163 162 164 6 (set (reg/f:SI 3 r3 [orig:146 _34 ] [146])
        (plus:SI (reg/f:SI 3 r3 [orig:146 _34 ] [146])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":144:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 164 163 166 6 (set (reg/f:SI 3 r3 [orig:146 _34 ] [146])
        (plus:SI (reg/f:SI 3 r3 [orig:146 _34 ] [146])
            (const_int 1024 [0x400]))) "disk.c":144:18 7 {*arm_addsi3}
     (nil))
(insn 166 164 167 6 (set (reg:SI 2 r2 [220])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":144:12 253 {*arm_movsi_insn}
     (nil))
(insn 167 166 168 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [220])
            (reg/f:SI 3 r3 [orig:146 _34 ] [146]))) "disk.c":144:12 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 168 167 169 6 (set (pc)
        (if_then_else (ltu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 165)
            (pc))) "disk.c":144:12 273 {arm_cond_branch}
     (nil)
 -> 165)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 147 148 149 150 151 152 153 154 155 221 222 223 224 225 226 227 228 229 230 231 232 233 234
(note 169 168 170 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 170 169 171 7 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2072 [0xfffffffffffff7e8])) [4 bino+0 S4 A32])) "disk.c":154:3 253 {*arm_movsi_insn}
     (nil))
(insn 171 170 172 7 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x7f1b8dcb7630 *.LC9>)) "disk.c":154:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 172 171 173 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":154:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 173 172 174 7 (set (reg:SI 3 r3 [221])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2072 [0xfffffffffffff7e8])) [4 bino+0 S4 A32])) "disk.c":155:22 253 {*arm_movsi_insn}
     (nil))
(insn 174 173 175 7 (set (reg:SI 3 r3 [orig:147 _35 ] [147])
        (plus:SI (reg:SI 3 r3 [221])
            (const_int -1 [0xffffffffffffffff]))) "disk.c":155:22 7 {*arm_addsi3}
     (nil))
(insn 175 174 176 7 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [orig:147 _35 ] [147]))
                    (const_int 0 [0])))
            (set (reg:SI 2 r2 [222])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [orig:147 _35 ] [147])))
        ]) "disk.c":155:25 46 {subsi3_compare0}
     (nil))
(insn 176 175 177 7 (set (reg:SI 3 r3 [orig:148 _36 ] [148])
        (and:SI (reg:SI 3 r3 [orig:147 _35 ] [147])
            (const_int 7 [0x7]))) "disk.c":155:25 90 {*arm_andsi3_insn}
     (nil))
(insn 177 176 178 7 (set (reg:SI 2 r2 [223])
        (and:SI (reg:SI 2 r2 [222])
            (const_int 7 [0x7]))) "disk.c":155:25 90 {*arm_andsi3_insn}
     (nil))
(insn 178 177 179 7 (set (reg:SI 3 r3 [orig:148 _36 ] [148])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 2 r2 [223]))
            (reg:SI 3 r3 [orig:148 _36 ] [148]))) "disk.c":155:25 371 {*if_neg_move}
     (nil))
(insn 179 178 180 7 (set (reg/f:SI 2 r2 [224])
        (symbol_ref:SI ("iblk") [flags 0x2]  <var_decl 0x7f1b8dc79480 iblk>)) "disk.c":155:3 253 {*arm_movsi_insn}
     (nil))
(insn 180 179 181 7 (set (reg:SI 2 r2 [orig:149 iblk.4_37 ] [149])
        (mem/c:SI (reg/f:SI 2 r2 [224]) [4 iblk+0 S4 A32])) "disk.c":155:3 253 {*arm_movsi_insn}
     (nil))
(insn 181 180 182 7 (set (reg:SI 2 r2 [orig:150 _38 ] [150])
        (plus:SI (reg:SI 3 r3 [orig:148 _36 ] [148])
            (reg:SI 2 r2 [orig:149 iblk.4_37 ] [149]))) "disk.c":155:3 7 {*arm_addsi3}
     (nil))
(insn 182 181 183 7 (set (reg:SI 3 r3 [225])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":155:3 7 {*arm_addsi3}
     (nil))
(insn 183 182 184 7 (set (reg:SI 3 r3 [225])
        (plus:SI (reg:SI 3 r3 [225])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":155:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 184 183 185 7 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [225])) "disk.c":155:3 253 {*arm_movsi_insn}
     (nil))
(insn 185 184 186 7 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:150 _38 ] [150])) "disk.c":155:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 186 185 187 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":155:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 187 186 188 7 (set (reg:SI 3 r3 [226])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2072 [0xfffffffffffff7e8])) [4 bino+0 S4 A32])) "disk.c":156:28 253 {*arm_movsi_insn}
     (nil))
(insn 188 187 189 7 (set (reg:SI 3 r3 [orig:151 _39 ] [151])
        (plus:SI (reg:SI 3 r3 [226])
            (const_int -1 [0xffffffffffffffff]))) "disk.c":156:28 7 {*arm_addsi3}
     (nil))
(insn 189 188 190 7 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [orig:151 _39 ] [151]))
                    (const_int 0 [0])))
            (set (reg:SI 2 r2 [227])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [orig:151 _39 ] [151])))
        ]) "disk.c":156:31 46 {subsi3_compare0}
     (nil))
(insn 190 189 191 7 (set (reg:SI 3 r3 [orig:152 _40 ] [152])
        (and:SI (reg:SI 3 r3 [orig:151 _39 ] [151])
            (const_int 7 [0x7]))) "disk.c":156:31 90 {*arm_andsi3_insn}
     (nil))
(insn 191 190 192 7 (set (reg:SI 2 r2 [228])
        (and:SI (reg:SI 2 r2 [227])
            (const_int 7 [0x7]))) "disk.c":156:31 90 {*arm_andsi3_insn}
     (nil))
(insn 192 191 194 7 (set (reg:SI 3 r3 [orig:152 _40 ] [152])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 2 r2 [228]))
            (reg:SI 3 r3 [orig:152 _40 ] [152]))) "disk.c":156:31 371 {*if_neg_move}
     (nil))
(insn 194 192 195 7 (set (reg:SI 2 r2 [orig:154 _42 ] [154])
        (ashift:SI (reg:SI 3 r3 [orig:153 _41 ] [153])
            (const_int 7 [0x7]))) "disk.c":156:21 147 {*arm_shiftsi3}
     (nil))
(insn 195 194 196 7 (set (reg:SI 3 r3 [229])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -2052 [0xfffffffffffff7fc]))) "disk.c":156:6 7 {*arm_addsi3}
     (nil))
(insn 196 195 197 7 (set (reg:SI 3 r3 [229])
        (plus:SI (reg:SI 3 r3 [229])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":156:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -2052 [0xfffffffffffff7fc]))
        (nil)))
(insn 197 196 198 7 (set (reg:SI 3 r3 [230])
        (plus:SI (reg:SI 3 r3 [229])
            (reg:SI 2 r2 [orig:154 _42 ] [154]))) "disk.c":156:6 7 {*arm_addsi3}
     (nil))
(insn 198 197 199 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2060 [0xfffffffffffff7f4])) [9 ip+0 S4 A64])
        (reg:SI 3 r3 [230])) "disk.c":156:6 253 {*arm_movsi_insn}
     (nil))
(insn 199 198 200 7 (set (reg/f:SI 3 r3 [231])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2060 [0xfffffffffffff7f4])) [9 ip+0 S4 A64])) "disk.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 200 199 201 7 (set (reg:SI 2 r2 [orig:155 _43 ] [155])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [231])
                (const_int 40 [0x28])) [4 ip_90->i_block[0]+0 S4 A32])) "disk.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 201 200 202 7 (set (reg:SI 3 r3 [232])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":158:3 7 {*arm_addsi3}
     (nil))
(insn 202 201 203 7 (set (reg:SI 3 r3 [232])
        (plus:SI (reg:SI 3 r3 [232])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":158:3 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 203 202 204 7 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [232])) "disk.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 204 203 205 7 (set (reg:SI 0 r0)
        (reg:SI 2 r2 [orig:155 _43 ] [155])) "disk.c":158:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 205 204 206 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("getblock") [flags 0x41]  <function_decl 0x7f1b8dc71900 getblock>) [0 getblock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":158:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 206 205 207 7 (set (reg:SI 3 r3 [233])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":159:6 7 {*arm_addsi3}
     (nil))
(insn 207 206 208 7 (set (reg:SI 3 r3 [233])
        (plus:SI (reg:SI 3 r3 [233])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":159:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 208 207 209 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])
        (reg:SI 3 r3 [233])) "disk.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 209 208 210 7 (set (reg:SI 3 r3 [234])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":160:6 7 {*arm_addsi3}
     (nil))
(insn 210 209 211 7 (set (reg:SI 3 r3 [234])
        (plus:SI (reg:SI 3 r3 [234])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":160:6 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 211 210 286 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])
        (reg:SI 3 r3 [234])) "disk.c":160:6 253 {*arm_movsi_insn}
     (nil))
(jump_insn 286 211 287 7 (set (pc)
        (label_ref 261)) "disk.c":161:8 284 {*arm_jump}
     (nil)
 -> 261)
;;  succ:       9 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 287 286 266)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 156 157 158 159 160 161 162 163 164 165 166 167 168 169 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255
(code_label 266 287 214 8 25 (nil) [1 uses])
(note 214 266 215 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 215 214 216 8 (set (reg/f:SI 3 r3 [235])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":162:20 253 {*arm_movsi_insn}
     (nil))
(insn 216 215 217 8 (set (reg:SI 3 r3 [orig:156 _44 ] [156])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [235])
                    (const_int 6 [0x6])) [0 dp_60->name_len+0 S1 A16]))) "disk.c":162:20 175 {*arm_zero_extendqisi2}
     (nil))
(insn 217 216 218 8 (set (reg:SI 2 r2 [orig:157 _45 ] [157])
        (reg:SI 3 r3 [orig:156 _44 ] [156])) "disk.c":162:20 253 {*arm_movsi_insn}
     (nil))
(insn 218 217 219 8 (set (reg/f:SI 3 r3 [236])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":162:7 253 {*arm_movsi_insn}
     (nil))
(insn 219 218 220 8 (set (reg/f:SI 3 r3 [237])
        (plus:SI (reg/f:SI 3 r3 [236])
            (reg:SI 2 r2 [orig:157 _45 ] [157]))) "disk.c":162:7 7 {*arm_addsi3}
     (nil))
(insn 220 219 221 8 (set (reg:QI 3 r3 [238])
        (mem:QI (plus:SI (reg/f:SI 3 r3 [237])
                (const_int 8 [0x8])) [0 dp_60->name[_45]+0 S1 A8])) "disk.c":162:7 263 {*arm_movqi_insn}
     (nil))
(insn 221 220 222 8 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -2081 [0xfffffffffffff7df])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [238])) "disk.c":162:7 263 {*arm_movqi_insn}
     (nil))
(insn 222 221 223 8 (set (reg/f:SI 3 r3 [239])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":163:16 253 {*arm_movsi_insn}
     (nil))
(insn 223 222 224 8 (set (reg:SI 3 r3 [orig:158 _46 ] [158])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [239])
                    (const_int 6 [0x6])) [0 dp_60->name_len+0 S1 A16]))) "disk.c":163:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 224 223 225 8 (set (reg:SI 2 r2 [orig:159 _47 ] [159])
        (reg:SI 3 r3 [orig:158 _46 ] [158])) "disk.c":163:16 253 {*arm_movsi_insn}
     (nil))
(insn 225 224 226 8 (set (reg/f:SI 3 r3 [240])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":163:28 253 {*arm_movsi_insn}
     (nil))
(insn 226 225 227 8 (set (reg/f:SI 3 r3 [241])
        (plus:SI (reg/f:SI 3 r3 [240])
            (reg:SI 2 r2 [orig:159 _47 ] [159]))) "disk.c":163:28 7 {*arm_addsi3}
     (nil))
(insn 227 226 229 8 (set (reg:SI 2 r2 [242])
        (const_int 0 [0])) "disk.c":163:28 253 {*arm_movsi_insn}
     (nil))
(insn 229 227 230 8 (set (mem:QI (plus:SI (reg/f:SI 3 r3 [241])
                (const_int 8 [0x8])) [0 dp_60->name[_47]+0 S1 A8])
        (reg:QI 2 r2 [243])) "disk.c":163:28 263 {*arm_movqi_insn}
     (nil))
(insn 230 229 231 8 (set (reg/f:SI 3 r3 [244])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 231 230 232 8 (set (reg:SI 1 r1 [orig:160 _48 ] [160])
        (mem:SI (reg/f:SI 3 r3 [244]) [4 dp_60->inode+0 S4 A32])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 232 231 233 8 (set (reg/f:SI 3 r3 [245])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":164:42 253 {*arm_movsi_insn}
     (nil))
(insn 233 232 234 8 (set (reg:SI 3 r3 [orig:161 _49 ] [161])
        (zero_extend:SI (mem:HI (plus:SI (reg/f:SI 3 r3 [245])
                    (const_int 4 [0x4])) [14 dp_60->rec_len+0 S2 A32]))) "disk.c":164:42 172 {*arm_zero_extendhisi2}
     (nil))
(insn 234 233 235 8 (set (reg:SI 2 r2 [orig:162 _50 ] [162])
        (reg:SI 3 r3 [orig:161 _49 ] [161])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 235 234 236 8 (set (reg/f:SI 3 r3 [246])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":164:55 253 {*arm_movsi_insn}
     (nil))
(insn 236 235 237 8 (set (reg:SI 3 r3 [orig:163 _51 ] [163])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [246])
                    (const_int 6 [0x6])) [0 dp_60->name_len+0 S1 A16]))) "disk.c":164:55 175 {*arm_zero_extendqisi2}
     (nil))
(insn 237 236 238 8 (set (reg:SI 0 r0 [orig:164 _52 ] [164])
        (reg:SI 3 r3 [orig:163 _51 ] [163])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 238 237 239 8 (set (reg:SI 3 r3 [247])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":164:69 253 {*arm_movsi_insn}
     (nil))
(insn 239 238 240 8 (set (reg/f:SI 3 r3 [orig:165 _53 ] [165])
        (plus:SI (reg:SI 3 r3 [247])
            (const_int 8 [0x8]))) "disk.c":164:69 7 {*arm_addsi3}
     (nil))
(insn 240 239 241 8 (set (mem:SI (reg/f:SI 13 sp) [0  S4 A32])
        (reg/f:SI 3 r3 [orig:165 _53 ] [165])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 241 240 244 8 (set (reg:SI 3 r3)
        (reg:SI 0 r0 [orig:164 _52 ] [164])) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(insn 244 241 245 8 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7f1b8dcb7510 *.LC7>)) "disk.c":164:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 245 244 246 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f1b8dc80200 kprintf>) [0 kprintf S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":164:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (expr_list:SI (use (reg:SI 3 r3))
                        (expr_list:SI (use (mem/f:SI (reg/f:SI 13 sp) [0  S4 A32]))
                            (nil))))))))
(insn 246 245 247 8 (set (reg/f:SI 3 r3 [248])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":168:16 253 {*arm_movsi_insn}
     (nil))
(insn 247 246 248 8 (set (reg:SI 3 r3 [orig:166 _54 ] [166])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 3 r3 [248])
                    (const_int 6 [0x6])) [0 dp_60->name_len+0 S1 A16]))) "disk.c":168:16 175 {*arm_zero_extendqisi2}
     (nil))
(insn 248 247 249 8 (set (reg:SI 2 r2 [orig:167 _55 ] [167])
        (reg:SI 3 r3 [orig:166 _54 ] [166])) "disk.c":168:16 253 {*arm_movsi_insn}
     (nil))
(insn 249 248 250 8 (set (reg/f:SI 3 r3 [249])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":168:28 253 {*arm_movsi_insn}
     (nil))
(insn 250 249 251 8 (set (reg/f:SI 3 r3 [250])
        (plus:SI (reg/f:SI 3 r3 [249])
            (reg:SI 2 r2 [orig:167 _55 ] [167]))) "disk.c":168:28 7 {*arm_addsi3}
     (nil))
(insn 251 250 252 8 (set (reg:QI 2 r2 [251])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -2081 [0xfffffffffffff7df])) [0 c+0 S1 A8])) "disk.c":168:28 263 {*arm_movqi_insn}
     (nil))
(insn 252 251 253 8 (set (mem:QI (plus:SI (reg/f:SI 3 r3 [250])
                (const_int 8 [0x8])) [0 dp_60->name[_55]+0 S1 A8])
        (reg:QI 2 r2 [251])) "disk.c":168:28 263 {*arm_movqi_insn}
     (nil))
(insn 253 252 254 8 (set (reg/f:SI 3 r3 [252])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])) "disk.c":169:13 253 {*arm_movsi_insn}
     (nil))
(insn 254 253 255 8 (set (reg:SI 3 r3 [orig:168 _56 ] [168])
        (zero_extend:SI (mem:HI (plus:SI (reg/f:SI 3 r3 [252])
                    (const_int 4 [0x4])) [14 dp_60->rec_len+0 S2 A32]))) "disk.c":169:13 172 {*arm_zero_extendhisi2}
     (nil))
(insn 255 254 256 8 (set (reg:SI 2 r2 [orig:169 _57 ] [169])
        (reg:SI 3 r3 [orig:168 _56 ] [168])) "disk.c":169:13 253 {*arm_movsi_insn}
     (nil))
(insn 256 255 257 8 (set (reg:SI 3 r3 [254])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":169:8 253 {*arm_movsi_insn}
     (nil))
(insn 257 256 258 8 (set (reg:SI 3 r3 [253])
        (plus:SI (reg:SI 3 r3 [254])
            (reg:SI 2 r2 [orig:169 _57 ] [169]))) "disk.c":169:8 7 {*arm_addsi3}
     (nil))
(insn 258 257 259 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])
        (reg:SI 3 r3 [253])) "disk.c":169:8 253 {*arm_movsi_insn}
     (nil))
(insn 259 258 260 8 (set (reg/f:SI 3 r3 [255])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":170:8 253 {*arm_movsi_insn}
     (nil))
(insn 260 259 261 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2080 [0xfffffffffffff7e0])) [12 dp+0 S4 A32])
        (reg/f:SI 3 r3 [255])) "disk.c":170:8 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              7 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 170 256
(code_label 261 260 262 9 24 (nil) [1 uses])
(note 262 261 263 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 263 262 264 9 (set (reg/f:SI 3 r3 [orig:170 _58 ] [170])
        (plus:SI (reg/f:SI 11 fp)
            (const_int -1028 [0xfffffffffffffbfc]))) "disk.c":161:18 7 {*arm_addsi3}
     (nil))
(insn 264 263 265 9 (set (reg/f:SI 3 r3 [orig:170 _58 ] [170])
        (plus:SI (reg/f:SI 3 r3 [orig:170 _58 ] [170])
            (const_int -4 [0xfffffffffffffffc]))) "disk.c":161:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 102 sfp)
            (const_int -1028 [0xfffffffffffffbfc]))
        (nil)))
(insn 265 264 267 9 (set (reg/f:SI 3 r3 [orig:170 _58 ] [170])
        (plus:SI (reg/f:SI 3 r3 [orig:170 _58 ] [170])
            (const_int 1024 [0x400]))) "disk.c":161:18 7 {*arm_addsi3}
     (nil))
(insn 267 265 268 9 (set (reg:SI 2 r2 [256])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -2076 [0xfffffffffffff7e4])) [1 cp+0 S4 A64])) "disk.c":161:12 253 {*arm_movsi_insn}
     (nil))
(insn 268 267 269 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 2 r2 [256])
            (reg/f:SI 3 r3 [orig:170 _58 ] [170]))) "disk.c":161:12 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 269 268 270 9 (set (pc)
        (if_then_else (ltu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 266)
            (pc))) "disk.c":161:12 273 {arm_cond_branch}
     (nil)
 -> 266)
;;  succ:       8
;;              10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 100 [cc] 171 259 260
(note 270 269 277 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 277 270 278 10 (clobber (reg/i:SI 0 r0)) "disk.c":173:1 -1
     (nil))
(insn 278 277 283 10 (clobber (reg:SI 3 r3 [orig:171 <retval> ] [171])) "disk.c":173:1 -1
     (nil))
(insn 283 278 272 10 (const_int 0 [0]) "disk.c":173:1 311 {nop}
     (nil))
(jump_insn 272 283 281 10 (parallel [
            (set (pc)
                (if_then_else (eq (mem/v/f/c:SI (plus:SI (reg/f:SI 11 fp)
                                (const_int -8 [0xfffffffffffffff8])) [8 D.4573+0 S4 A32])
                        (unspec:SI [
                                (mem/v/f/c:SI (symbol_ref:SI ("__stack_chk_guard") [flags 0x40]  <var_decl 0x7f1b8dcb7090 __stack_chk_guard>) [8 __stack_chk_guard+0 S4 A32])
                            ] UNSPEC_SP_TEST))
                    (label_ref 275)
                    (pc)))
            (clobber (reg:SI 2 r2 [259]))
            (clobber (reg:SI 1 r1 [260]))
            (clobber (reg:CC 100 cc))
        ]) "disk.c":173:1 306 {*stack_protect_combined_test_insn}
     (nil)
 -> 275)
;;  succ:       12
;;              11 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 171

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 281 272 273 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 273 281 274 11 (parallel [
            (call (mem:SI (symbol_ref:SI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f1b8dcacc00 __stack_chk_fail>) [0 __stack_chk_fail S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "disk.c":173:1 290 {*call_symbol}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:      
;; lr  out 	 13 [sp] 102 [sfp] 103 [afp]

(barrier 274 273 275)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 171
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp] 171
;; lr  def 	 0 [r0]
(code_label 275 274 282 12 26 (nil) [1 uses])
(note 282 275 276 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 276 282 279 12 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:171 <retval> ] [171])) "disk.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 279 276 288 12 (use (reg/i:SI 0 r0)) "disk.c":173:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 288 279 0 NOTE_INSN_DELETED)
