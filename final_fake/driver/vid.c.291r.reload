
;; Function fbuf_init (fbuf_init, funcdef_no=0, decl_uid=4480, cgraph_uid=1, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 30:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 42:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 49:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 56:  (0) m  (1) r {*arm_movqi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 61: point = 0, n_alt = -1
   Insn 58: point = 0, n_alt = -2
   Insn 63: point = 1, n_alt = -1
   Insn 60: point = 1, n_alt = -1
   Insn 59: point = 2, n_alt = -1
   Insn 56: point = 2, n_alt = 8
   Insn 55: point = 3, n_alt = 1
   Insn 54: point = 5, n_alt = 1
   Insn 53: point = 6, n_alt = 4
  BB 4
   Insn 51: point = 7, n_alt = -1
   Insn 50: point = 7, n_alt = 3
   Insn 49: point = 8, n_alt = 4
  BB 2
   Insn 64: point = 9, n_alt = -1
   Insn 30: point = 9, n_alt = 5
   Insn 29: point = 10, n_alt = 1
   Insn 28: point = 11, n_alt = 5
   Insn 27: point = 12, n_alt = 4
   Insn 26: point = 13, n_alt = 4
   Insn 25: point = 14, n_alt = 5
   Insn 24: point = 15, n_alt = 1
   Insn 23: point = 16, n_alt = 4
   Insn 22: point = 17, n_alt = 5
   Insn 21: point = 18, n_alt = 4
   Insn 20: point = 19, n_alt = 4
   Insn 19: point = 20, n_alt = 5
   Insn 18: point = 21, n_alt = 4
   Insn 17: point = 22, n_alt = 4
   Insn 16: point = 23, n_alt = 5
   Insn 15: point = 24, n_alt = 4
   Insn 14: point = 25, n_alt = 4
   Insn 13: point = 26, n_alt = 5
   Insn 12: point = 27, n_alt = 4
   Insn 11: point = 28, n_alt = 4
   Insn 10: point = 29, n_alt = 5
   Insn 9: point = 30, n_alt = 4
   Insn 8: point = 31, n_alt = 4
   Insn 7: point = 32, n_alt = 5
   Insn 6: point = 33, n_alt = 1
   Insn 5: point = 34, n_alt = 4
  BB 3
   Insn 43: point = 35, n_alt = 5
   Insn 42: point = 36, n_alt = 4
   Insn 41: point = 38, n_alt = 4
   Insn 40: point = 39, n_alt = 5
   Insn 39: point = 40, n_alt = 1
   Insn 38: point = 41, n_alt = 4
   Insn 37: point = 43, n_alt = 2
   Insn 36: point = 45, n_alt = 4
   Insn 35: point = 46, n_alt = 4
   Insn 34: point = 48, n_alt = 4
 r113: [26..28]
 r114: [23..25]
 r115: [20..22]
 r116: [17..19]
 r117: [14..16]
 r118: [11..13]
 r119: [42..46]
 r120: [44..45]
 r121: [42..43]
 r122: [39..41]
 r123: [0..1]
 r124: [32..34]
 r125: [32..33]
 r126: [29..31]
 r127: [29..30]
 r128: [26..27]
 r129: [23..24]
 r130: [20..21]
 r131: [17..18]
 r132: [14..15]
 r133: [11..12]
 r134: [9..10]
 r135: [47..48]
 r136: [39..40]
 r137: [35..36]
 r138: [37..38]
 r139: [7..8]
 r140: [2..6]
 r141: [4..5]
 r142: [2..3]
Compressing live ranges: from 49 to 38 - 77%
Ranges after the compression:
 r113: [20..21]
 r114: [18..19]
 r115: [16..17]
 r116: [14..15]
 r117: [12..13]
 r118: [10..11]
 r119: [32..35]
 r120: [34..35]
 r121: [32..33]
 r122: [30..31]
 r123: [0..1]
 r124: [24..25]
 r125: [24..25]
 r126: [22..23]
 r127: [22..23]
 r128: [20..21]
 r129: [18..19]
 r130: [16..17]
 r131: [14..15]
 r132: [12..13]
 r133: [10..11]
 r134: [8..9]
 r135: [36..37]
 r136: [30..31]
 r137: [26..27]
 r138: [28..29]
 r139: [6..7]
 r140: [2..5]
 r141: [4..5]
 r142: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 35
changing reg in insn 38
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 40
changing reg in insn 60
changing reg in insn 58
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 34
changing reg in insn 35
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 50
changing reg in insn 53
changing reg in insn 56
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
deleting insn with uid = 55.
starting the processing of deferred insns
ending the processing of deferred insns


fbuf_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={12d,11u} r3={19d,18u} r11={1d,10u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,1u} 
;;    total ref usage 88{40d,48u,0e} in 48{48 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 124 125 126 127 128 129 130 131 132 133 134
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [124])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 2 r2 [125])
        (const_int 3145728 [0x300000])) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (reg/f:SI 3 r3 [124]) [1 fb+0 S4 A32])
        (reg:SI 2 r2 [125])) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [126])
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 2 r2 [127])
        (symbol_ref:SI ("fonts0") [flags 0x2]  <var_decl 0x7fd417ce45a0 fonts0>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (reg/f:SI 3 r3 [126]) [2 font+0 S4 A32])
        (reg/f:SI 2 r2 [127])) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (const_int 268435484 [0x1000001c])) "vid.c":58:3 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 r2 [128])
        (const_int 11383 [0x2c77])) "vid.c":58:42 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:113 _1 ] [113]) [3 *_1+0 S4 A32])
        (reg:SI 2 r2 [128])) "vid.c":58:42 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (const_int 269615104 [0x10120000])) "vid.c":59:3 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 2 r2 [129])
        (const_int 1059012508 [0x3f1f3f9c])) "vid.c":59:42 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:114 _2 ] [114]) [3 *_2+0 S4 A32])
        (reg:SI 2 r2 [129])) "vid.c":59:42 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (const_int 269615108 [0x10120004])) "vid.c":60:3 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 2 r2 [130])
        (const_int 151740895 [0x90b61df])) "vid.c":60:42 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [3 *_3+0 S4 A32])
        (reg:SI 2 r2 [130])) "vid.c":60:42 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (const_int 269615112 [0x10120008])) "vid.c":61:3 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:SI 2 r2 [131])
        (const_int 108992512 [0x67f1800])) "vid.c":61:42 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:116 _4 ] [116]) [3 *_4+0 S4 A32])
        (reg:SI 2 r2 [131])) "vid.c":61:42 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (const_int 269615120 [0x10120010])) "vid.c":65:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 2 r2 [132])
        (const_int 3145728 [0x300000])) "vid.c":65:42 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:117 _5 ] [117]) [3 *_5+0 S4 A32])
        (reg:SI 2 r2 [132])) "vid.c":65:42 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (const_int 269615128 [0x10120018])) "vid.c":66:3 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (reg:SI 2 r2 [133])
        (const_int 2091 [0x82b])) "vid.c":66:42 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:118 _6 ] [118]) [3 *_6+0 S4 A32])
        (reg:SI 2 r2 [133])) "vid.c":66:42 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:SI 3 r3 [134])
        (const_int 0 [0])) "vid.c":89:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 64 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 3 r3 [134])) "vid.c":89:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 64 30 65 2 (set (pc)
        (label_ref 44)) "vid.c":89:3 284 {*arm_jump}
     (nil)
 -> 44)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 65 64 46)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 119 120 121 122 135 136 137 138
(code_label 46 65 33 3 3 (nil) [1 uses])
(note 33 46 34 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 3 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 3 (set (reg/f:SI 2 r2 [orig:119 fb.0_7 ] [119])
        (mem/f/c:SI (reg/f:SI 3 r3 [135]) [1 fb+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 3 (set (reg:SI 3 r3 [orig:120 x.1_8 ] [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 3 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (ashift:SI (reg:SI 3 r3 [orig:120 x.1_8 ] [120])
            (const_int 2 [0x2]))) "vid.c":90:7 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 3 (set (reg/f:SI 3 r3 [orig:122 _10 ] [122])
        (plus:SI (reg/f:SI 2 r2 [orig:119 fb.0_7 ] [119])
            (reg:SI 3 r3 [orig:121 _9 ] [121]))) "vid.c":90:7 7 {*arm_addsi3}
     (nil))
(insn 39 38 40 3 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "vid.c":90:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 3 (set (mem/v:SI (reg/f:SI 3 r3 [orig:122 _10 ] [122]) [3 *_10+0 S4 A32])
        (reg:SI 2 r2 [136])) "vid.c":90:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 3 (set (reg:SI 3 r3 [138])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":89:25 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 3 (set (reg:SI 3 r3 [137])
        (plus:SI (reg:SI 3 r3 [138])
            (const_int 1 [0x1]))) "vid.c":89:25 7 {*arm_addsi3}
     (nil))
(insn 43 42 44 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 3 r3 [137])) "vid.c":89:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 139
(code_label 44 43 45 4 2 (nil) [1 uses])
(note 45 44 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 45 50 4 (set (reg:SI 3 r3 [139])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":89:14 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [139])
            (const_int 307200 [0x4b000]))) "vid.c":89:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "vid.c":89:14 273 {arm_cond_branch}
     (nil)
 -> 46)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 123 140 141 142
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 56 5 (set (reg:SI 2 r2 [141])
        (const_int 127 [0x7f])) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 56 54 59 5 (set (mem/c:QI (reg/f:SI 3 r3 [140]) [0 cursor+0 S1 A8])
        (reg:QI 2 r2 [142])) "vid.c":91:10 263 {*arm_movqi_insn}
     (nil))
(insn 59 56 60 5 (clobber (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
(insn 60 59 63 5 (clobber (reg:SI 3 r3 [orig:123 <retval> ] [123])) "vid.c":92:1 -1
     (nil))
(insn 63 60 58 5 (const_int 0 [0]) "vid.c":92:1 311 {nop}
     (nil))
(insn 58 63 61 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:123 <retval> ] [123])) "vid.c":92:1 253 {*arm_movsi_insn}
     (nil))
(insn 61 58 77 5 (use (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 77 61 0 NOTE_INSN_DELETED)

;; Function clrpix (clrpix, funcdef_no=1, decl_uid=4490, cgraph_uid=2, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -1
   Insn 27: point = 1, n_alt = -1
   Insn 26: point = 2, n_alt = -1
   Insn 23: point = 2, n_alt = 5
   Insn 22: point = 3, n_alt = 1
   Insn 21: point = 4, n_alt = 4
   Insn 20: point = 6, n_alt = 2
   Insn 19: point = 8, n_alt = 4
   Insn 18: point = 9, n_alt = 4
   Insn 17: point = 11, n_alt = 4
   Insn 16: point = 12, n_alt = 5
   Insn 15: point = 13, n_alt = 4
   Insn 14: point = 15, n_alt = 4
   Insn 13: point = 16, n_alt = -2
   Insn 12: point = 18, n_alt = -2
   Insn 11: point = 20, n_alt = 2
   Insn 10: point = 22, n_alt = 4
   Insn 9: point = 24, n_alt = 2
   Insn 8: point = 25, n_alt = -2
   Insn 7: point = 26, n_alt = 4
   Insn 3: point = 27, n_alt = 5
   Insn 2: point = 27, n_alt = 5
 r113: [14..16]
 r114: [5..9]
 r115: [7..8]
 r116: [5..6]
 r117: [2..4]
 r118: [0..1]
 r119: [23..26]
 r120: [21..25] [17..18]
 r121: [19..20]
 r122: [12..13]
 r123: [14..15]
 r124: [10..11]
 r125: [2..3]
Compressing live ranges: from 27 to 20 - 74%
Ranges after the compression:
 r113: [12..13]
 r114: [4..7]
 r115: [6..7]
 r116: [4..5]
 r117: [2..3]
 r118: [0..1]
 r119: [18..19]
 r120: [18..19] [14..15]
 r121: [16..17]
 r122: [10..11]
 r123: [12..13]
 r124: [8..9]
 r125: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 15
changing reg in insn 18
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 23
changing reg in insn 27
changing reg in insn 25
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 10
changing reg in insn 9
changing reg in insn 8
changing reg in insn 13
changing reg in insn 11
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


clrpix

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={5d,5u,1e} r3={12d,11u} r11={1d,8u} r13={1d,2u} r14={1d} r102={1d,1u} 
;;    total ref usage 57{25d,31u,1e} in 23{23 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 113 114 115 116 117 118 119 120 121 122 123 124 125
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 2 r2 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 y+0 S4 A32])) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [120])
        (reg:SI 2 r2 [119])) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 3 r3 [120])
        (ashift:SI (reg:SI 3 r3 [120])
            (const_int 2 [0x2]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 3 r3 [120])
        (plus:SI (reg:SI 3 r3 [120])
            (reg:SI 2 r2 [119]))) "vid.c":96:14 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [119])
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 13 2 (set (reg:SI 3 r3 [121])
        (ashift:SI (reg:SI 3 r3 [120])
            (const_int 7 [0x7]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (nil))
(insn 13 11 14 2 (set (reg:SI 2 r2 [orig:113 _1 ] [113])
        (reg:SI 3 r3 [120])) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [123])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":96:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [122])
        (plus:SI (reg:SI 3 r3 [123])
            (reg:SI 2 r2 [orig:113 _1 ] [113]))) "vid.c":96:7 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])
        (reg:SI 3 r3 [122])) "vid.c":96:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [124])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 2 r2 [orig:114 fb.2_2 ] [114])
        (mem/f/c:SI (reg/f:SI 3 r3 [124]) [1 fb+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 3 r3 [orig:115 pix.3_3 ] [115])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (ashift:SI (reg:SI 3 r3 [orig:115 pix.3_3 ] [115])
            (const_int 2 [0x2]))) "vid.c":97:5 147 {*arm_shiftsi3}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (plus:SI (reg/f:SI 2 r2 [orig:114 fb.2_2 ] [114])
            (reg:SI 3 r3 [orig:116 _4 ] [116]))) "vid.c":97:5 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 2 (set (reg:SI 2 r2 [125])
        (const_int 0 [0])) "vid.c":97:11 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 26 2 (set (mem/v:SI (reg/f:SI 3 r3 [orig:117 _5 ] [117]) [3 *_5+0 S4 A32])
        (reg:SI 2 r2 [125])) "vid.c":97:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 23 27 2 (clobber (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
(insn 27 26 30 2 (clobber (reg:SI 3 r3 [orig:118 <retval> ] [118])) "vid.c":98:1 -1
     (nil))
(insn 30 27 25 2 (const_int 0 [0]) "vid.c":98:1 311 {nop}
     (nil))
(insn 25 30 28 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:118 <retval> ] [118])) "vid.c":98:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 31 2 (use (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 31 28 0 NOTE_INSN_DELETED)

;; Function setpix (setpix, funcdef_no=2, decl_uid=4495, cgraph_uid=3, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 25:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 41:  (0) r  (1) K {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 45:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 53:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 55:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 61:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 67:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 70:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 75:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 79:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 81:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 87:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 95:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 108:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 109:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 111:  (0) r  (1) K {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 112:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6 7
EBB 8 9
EBB 10 11
EBB 12 13
EBB 14 15
EBB 16

********** Pseudo live ranges #1: **********

  BB 16
   Insn 119: point = 0, n_alt = -1
   Insn 116: point = 0, n_alt = -2
   Insn 121: point = 1, n_alt = -1
   Insn 118: point = 1, n_alt = -1
   Insn 117: point = 2, n_alt = -1
  BB 15
   Insn 112: point = 2, n_alt = 5
   Insn 111: point = 3, n_alt = 2
   Insn 110: point = 4, n_alt = 4
   Insn 109: point = 6, n_alt = 2
   Insn 108: point = 8, n_alt = 4
   Insn 107: point = 9, n_alt = 4
   Insn 106: point = 11, n_alt = 4
  BB 14
   Insn 104: point = 12, n_alt = -1
   Insn 103: point = 12, n_alt = 3
   Insn 102: point = 13, n_alt = 4
   Insn 101: point = 15, n_alt = 4
  BB 13
   Insn 98: point = 16, n_alt = 5
   Insn 97: point = 17, n_alt = 4
   Insn 96: point = 18, n_alt = 4
   Insn 95: point = 20, n_alt = 2
   Insn 94: point = 22, n_alt = 4
   Insn 93: point = 23, n_alt = 4
   Insn 92: point = 25, n_alt = 4
  BB 12
   Insn 90: point = 26, n_alt = -1
   Insn 89: point = 26, n_alt = 3
   Insn 88: point = 27, n_alt = 4
   Insn 87: point = 29, n_alt = 4
  BB 11
   Insn 84: point = 30, n_alt = 5
   Insn 83: point = 31, n_alt = 4
   Insn 82: point = 32, n_alt = 4
   Insn 81: point = 34, n_alt = 2
   Insn 80: point = 36, n_alt = 4
   Insn 79: point = 37, n_alt = 4
   Insn 78: point = 39, n_alt = 4
  BB 10
   Insn 76: point = 40, n_alt = -1
   Insn 75: point = 40, n_alt = 3
   Insn 74: point = 41, n_alt = 4
   Insn 73: point = 43, n_alt = 4
  BB 9
   Insn 70: point = 44, n_alt = 5
   Insn 69: point = 45, n_alt = 4
   Insn 68: point = 46, n_alt = 4
   Insn 67: point = 48, n_alt = 2
   Insn 66: point = 50, n_alt = 4
   Insn 65: point = 51, n_alt = 4
   Insn 64: point = 53, n_alt = 4
  BB 8
   Insn 62: point = 54, n_alt = -1
   Insn 61: point = 54, n_alt = 3
   Insn 60: point = 55, n_alt = 4
   Insn 59: point = 57, n_alt = 4
  BB 7
   Insn 56: point = 58, n_alt = 5
   Insn 55: point = 59, n_alt = 1
   Insn 54: point = 60, n_alt = 4
   Insn 53: point = 62, n_alt = 2
   Insn 52: point = 64, n_alt = 4
   Insn 51: point = 65, n_alt = 4
   Insn 50: point = 67, n_alt = 4
  BB 6
   Insn 48: point = 68, n_alt = -1
   Insn 47: point = 68, n_alt = 3
   Insn 46: point = 69, n_alt = 4
   Insn 45: point = 71, n_alt = 4
  BB 5
   Insn 42: point = 72, n_alt = 5
   Insn 41: point = 73, n_alt = 2
   Insn 40: point = 74, n_alt = 4
   Insn 39: point = 76, n_alt = 2
   Insn 38: point = 78, n_alt = 4
   Insn 37: point = 79, n_alt = 4
   Insn 36: point = 81, n_alt = 4
  BB 4
   Insn 34: point = 82, n_alt = -1
   Insn 33: point = 82, n_alt = 3
   Insn 32: point = 83, n_alt = 4
   Insn 31: point = 85, n_alt = 4
  BB 3
   Insn 28: point = 86, n_alt = 5
   Insn 27: point = 87, n_alt = 1
   Insn 26: point = 88, n_alt = 4
   Insn 25: point = 90, n_alt = 2
   Insn 24: point = 92, n_alt = 4
   Insn 23: point = 93, n_alt = 4
   Insn 22: point = 95, n_alt = 4
  BB 2
   Insn 20: point = 96, n_alt = -1
   Insn 19: point = 96, n_alt = 3
   Insn 18: point = 97, n_alt = 4
   Insn 17: point = 99, n_alt = 4
   Insn 16: point = 100, n_alt = 5
   Insn 15: point = 101, n_alt = 4
   Insn 14: point = 103, n_alt = 4
   Insn 13: point = 104, n_alt = -2
   Insn 12: point = 106, n_alt = -2
   Insn 11: point = 108, n_alt = 2
   Insn 10: point = 110, n_alt = 4
   Insn 9: point = 112, n_alt = 2
   Insn 8: point = 113, n_alt = -2
   Insn 7: point = 114, n_alt = 4
   Insn 3: point = 115, n_alt = 5
   Insn 2: point = 115, n_alt = 5
 r113: [102..104]
 r114: [96..97]
 r115: [89..93]
 r116: [91..92]
 r117: [89..90]
 r118: [86..88]
 r119: [82..83]
 r120: [75..79]
 r121: [77..78]
 r122: [75..76]
 r123: [72..74]
 r124: [68..69]
 r125: [61..65]
 r126: [63..64]
 r127: [61..62]
 r128: [58..60]
 r129: [54..55]
 r130: [47..51]
 r131: [49..50]
 r132: [47..48]
 r133: [44..46]
 r134: [40..41]
 r135: [33..37]
 r136: [35..36]
 r137: [33..34]
 r138: [30..32]
 r139: [26..27]
 r140: [19..23]
 r141: [21..22]
 r142: [19..20]
 r143: [16..18]
 r144: [12..13]
 r145: [5..9]
 r146: [7..8]
 r147: [5..6]
 r148: [2..4]
 r149: [0..1]
 r150: [111..114]
 r151: [109..113] [105..106]
 r152: [107..108]
 r153: [100..101]
 r154: [102..103]
 r155: [98..99]
 r156: [94..95]
 r157: [86..87]
 r158: [84..85]
 r159: [80..81]
 r160: [72..73]
 r161: [70..71]
 r162: [66..67]
 r163: [58..59]
 r164: [56..57]
 r165: [52..53]
 r166: [44..45]
 r167: [42..43]
 r168: [38..39]
 r169: [30..31]
 r170: [28..29]
 r171: [24..25]
 r172: [16..17]
 r173: [14..15]
 r174: [10..11]
 r175: [2..3]
Compressing live ranges: from 115 to 96 - 83%
Ranges after the compression:
 r113: [88..89]
 r114: [82..83]
 r115: [76..79]
 r116: [78..79]
 r117: [76..77]
 r118: [74..75]
 r119: [70..71]
 r120: [64..67]
 r121: [66..67]
 r122: [64..65]
 r123: [62..63]
 r124: [58..59]
 r125: [52..55]
 r126: [54..55]
 r127: [52..53]
 r128: [50..51]
 r129: [46..47]
 r130: [40..43]
 r131: [42..43]
 r132: [40..41]
 r133: [38..39]
 r134: [34..35]
 r135: [28..31]
 r136: [30..31]
 r137: [28..29]
 r138: [26..27]
 r139: [22..23]
 r140: [16..19]
 r141: [18..19]
 r142: [16..17]
 r143: [14..15]
 r144: [10..11]
 r145: [4..7]
 r146: [6..7]
 r147: [4..5]
 r148: [2..3]
 r149: [0..1]
 r150: [94..95]
 r151: [94..95] [90..91]
 r152: [92..93]
 r153: [86..87]
 r154: [88..89]
 r155: [84..85]
 r156: [80..81]
 r157: [74..75]
 r158: [72..73]
 r159: [68..69]
 r160: [62..63]
 r161: [60..61]
 r162: [56..57]
 r163: [50..51]
 r164: [48..49]
 r165: [44..45]
 r166: [38..39]
 r167: [36..37]
 r168: [32..33]
 r169: [26..27]
 r170: [24..25]
 r171: [20..21]
 r172: [14..15]
 r173: [12..13]
 r174: [8..9]
 r175: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 32
changing reg in insn 33
changing reg in insn 37
changing reg in insn 40
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 51
changing reg in insn 54
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 56
changing reg in insn 60
changing reg in insn 61
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 70
changing reg in insn 74
changing reg in insn 75
changing reg in insn 79
changing reg in insn 82
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 88
changing reg in insn 89
changing reg in insn 93
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 98
changing reg in insn 102
changing reg in insn 103
changing reg in insn 107
changing reg in insn 110
changing reg in insn 108
changing reg in insn 109
changing reg in insn 109
changing reg in insn 110
changing reg in insn 110
changing reg in insn 112
changing reg in insn 118
changing reg in insn 116
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 10
changing reg in insn 12
changing reg in insn 10
changing reg in insn 9
changing reg in insn 8
changing reg in insn 13
changing reg in insn 11
changing reg in insn 10
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
changing reg in insn 45
changing reg in insn 46
changing reg in insn 50
changing reg in insn 51
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 64
changing reg in insn 65
changing reg in insn 69
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 78
changing reg in insn 79
changing reg in insn 83
changing reg in insn 84
changing reg in insn 87
changing reg in insn 88
changing reg in insn 92
changing reg in insn 93
changing reg in insn 97
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
deleting insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns


setpix

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={17d,17u,1e} r3={50d,49u} r11={1d,28u} r13={1d,16u} r14={1d} r100={7d,7u} r102={1d,1u} 
;;    total ref usage 205{82d,122u,1e} in 93{93 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 150 151 152 153 154 155
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 2 r2 [150])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 y+0 S4 A32])) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [151])
        (reg:SI 2 r2 [150])) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 2 [0x2]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 3 r3 [151])
        (plus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "vid.c":102:14 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 13 2 (set (reg:SI 3 r3 [152])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 7 [0x7]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (nil))
(insn 13 11 14 2 (set (reg:SI 2 r2 [orig:113 _1 ] [113])
        (reg:SI 3 r3 [151])) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [154])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":102:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 3 r3 [153])
        (plus:SI (reg:SI 3 r3 [154])
            (reg:SI 2 r2 [orig:113 _1 ] [113]))) "vid.c":102:7 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])
        (reg:SI 3 r3 [153])) "vid.c":102:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 3 r3 [155])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":103:12 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 3 r3 [orig:114 color.4_2 ] [114])
        (mem/c:SI (reg/f:SI 3 r3 [155]) [3 color+0 S4 A32])) "vid.c":103:12 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:114 color.4_2 ] [114])
            (const_int 6 [0x6]))) "vid.c":103:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "vid.c":103:6 273 {arm_cond_branch}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116 117 118 156 157
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 2 r2 [orig:115 fb.5_3 ] [115])
        (mem/f/c:SI (reg/f:SI 3 r3 [156]) [1 fb+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 3 r3 [orig:116 pix.6_4 ] [116])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (ashift:SI (reg:SI 3 r3 [orig:116 pix.6_4 ] [116])
            (const_int 2 [0x2]))) "vid.c":104:8 147 {*arm_shiftsi3}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg/f:SI 2 r2 [orig:115 fb.5_3 ] [115])
            (reg:SI 3 r3 [orig:117 _5 ] [117]))) "vid.c":104:8 7 {*arm_addsi3}
     (nil))
(insn 27 26 28 3 (set (reg:SI 2 r2 [157])
        (const_int 255 [0xff])) "vid.c":104:14 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/v:SI (reg/f:SI 3 r3 [orig:118 _6 ] [118]) [3 *_6+0 S4 A32])
        (reg:SI 2 r2 [157])) "vid.c":104:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 158
(code_label 29 28 30 4 10 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:SI 3 r3 [158])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":105:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 3 r3 [orig:119 color.7_7 ] [119])
        (mem/c:SI (reg/f:SI 3 r3 [158]) [3 color+0 S4 A32])) "vid.c":105:12 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:119 color.7_7 ] [119])
            (const_int 0 [0]))) "vid.c":105:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "vid.c":105:6 273 {arm_cond_branch}
     (nil)
 -> 43)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 159 160
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg/f:SI 3 r3 [159])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 5 (set (reg/f:SI 2 r2 [orig:120 fb.8_8 ] [120])
        (mem/f/c:SI (reg/f:SI 3 r3 [159]) [1 fb+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 5 (set (reg:SI 3 r3 [orig:121 pix.9_9 ] [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 5 (set (reg:SI 3 r3 [orig:122 _10 ] [122])
        (ashift:SI (reg:SI 3 r3 [orig:121 pix.9_9 ] [121])
            (const_int 2 [0x2]))) "vid.c":106:7 147 {*arm_shiftsi3}
     (nil))
(insn 40 39 41 5 (set (reg/f:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg/f:SI 2 r2 [orig:120 fb.8_8 ] [120])
            (reg:SI 3 r3 [orig:122 _10 ] [122]))) "vid.c":106:7 7 {*arm_addsi3}
     (nil))
(insn 41 40 42 5 (set (reg:SI 2 r2 [160])
        (const_int 16777215 [0xffffff])) "vid.c":106:13 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (mem/v:SI (reg/f:SI 3 r3 [orig:123 _11 ] [123]) [3 *_11+0 S4 A32])
        (reg:SI 2 r2 [160])) "vid.c":106:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 124 161
(code_label 43 42 44 6 11 (nil) [1 uses])
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg/f:SI 3 r3 [161])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":107:12 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (reg:SI 3 r3 [orig:124 color.10_12 ] [124])
        (mem/c:SI (reg/f:SI 3 r3 [161]) [3 color+0 S4 A32])) "vid.c":107:12 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:124 color.10_12 ] [124])
            (const_int 1 [0x1]))) "vid.c":107:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "vid.c":107:6 273 {arm_cond_branch}
     (nil)
 -> 57)
;;  succ:       7 (FALLTHRU)
;;              8
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 125 126 127 128 162 163
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:SI 3 r3 [162])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (reg/f:SI 2 r2 [orig:125 fb.11_13 ] [125])
        (mem/f/c:SI (reg/f:SI 3 r3 [162]) [1 fb+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 7 (set (reg:SI 3 r3 [orig:126 pix.12_14 ] [126])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:SI 3 r3 [orig:127 _15 ] [127])
        (ashift:SI (reg:SI 3 r3 [orig:126 pix.12_14 ] [126])
            (const_int 2 [0x2]))) "vid.c":108:8 147 {*arm_shiftsi3}
     (nil))
(insn 54 53 55 7 (set (reg/f:SI 3 r3 [orig:128 _16 ] [128])
        (plus:SI (reg/f:SI 2 r2 [orig:125 fb.11_13 ] [125])
            (reg:SI 3 r3 [orig:127 _15 ] [127]))) "vid.c":108:8 7 {*arm_addsi3}
     (nil))
(insn 55 54 56 7 (set (reg:SI 2 r2 [163])
        (const_int 65280 [0xff00])) "vid.c":108:14 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 7 (set (mem/v:SI (reg/f:SI 3 r3 [orig:128 _16 ] [128]) [3 *_16+0 S4 A32])
        (reg:SI 2 r2 [163])) "vid.c":108:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       6
;;              7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 129 164
(code_label 57 56 58 8 12 (nil) [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:SI 3 r3 [164])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":109:12 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 8 (set (reg:SI 3 r3 [orig:129 color.13_17 ] [129])
        (mem/c:SI (reg/f:SI 3 r3 [164]) [3 color+0 S4 A32])) "vid.c":109:12 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:129 color.13_17 ] [129])
            (const_int 2 [0x2]))) "vid.c":109:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 62 61 63 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "vid.c":109:6 273 {arm_cond_branch}
     (nil)
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 130 131 132 133 165 166
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 3 r3 [165])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg/f:SI 2 r2 [orig:130 fb.14_18 ] [130])
        (mem/f/c:SI (reg/f:SI 3 r3 [165]) [1 fb+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 9 (set (reg:SI 3 r3 [orig:131 pix.15_19 ] [131])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (reg:SI 3 r3 [orig:132 _20 ] [132])
        (ashift:SI (reg:SI 3 r3 [orig:131 pix.15_19 ] [131])
            (const_int 2 [0x2]))) "vid.c":110:8 147 {*arm_shiftsi3}
     (nil))
(insn 68 67 69 9 (set (reg/f:SI 3 r3 [orig:133 _21 ] [133])
        (plus:SI (reg/f:SI 2 r2 [orig:130 fb.14_18 ] [130])
            (reg:SI 3 r3 [orig:132 _20 ] [132]))) "vid.c":110:8 7 {*arm_addsi3}
     (nil))
(insn 69 68 70 9 (set (reg:SI 2 r2 [166])
        (const_int 16776960 [0xffff00])) "vid.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 9 (set (mem/v:SI (reg/f:SI 3 r3 [orig:133 _21 ] [133]) [3 *_21+0 S4 A32])
        (reg:SI 2 r2 [166])) "vid.c":110:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       8
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 134 167
(code_label 71 70 72 10 13 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg/f:SI 3 r3 [167])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 3 r3 [orig:134 color.16_22 ] [134])
        (mem/c:SI (reg/f:SI 3 r3 [167]) [3 color+0 S4 A32])) "vid.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:134 color.16_22 ] [134])
            (const_int 4 [0x4]))) "vid.c":111:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 76 75 77 10 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "vid.c":111:6 273 {arm_cond_branch}
     (nil)
 -> 85)
;;  succ:       11 (FALLTHRU)
;;              12
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 135 136 137 138 168 169
(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 11 (set (reg/f:SI 3 r3 [168])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 11 (set (reg/f:SI 2 r2 [orig:135 fb.17_23 ] [135])
        (mem/f/c:SI (reg/f:SI 3 r3 [168]) [1 fb+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 11 (set (reg:SI 3 r3 [orig:136 pix.18_24 ] [136])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 82 11 (set (reg:SI 3 r3 [orig:137 _25 ] [137])
        (ashift:SI (reg:SI 3 r3 [orig:136 pix.18_24 ] [136])
            (const_int 2 [0x2]))) "vid.c":112:8 147 {*arm_shiftsi3}
     (nil))
(insn 82 81 83 11 (set (reg/f:SI 3 r3 [orig:138 _26 ] [138])
        (plus:SI (reg/f:SI 2 r2 [orig:135 fb.17_23 ] [135])
            (reg:SI 3 r3 [orig:137 _25 ] [137]))) "vid.c":112:8 7 {*arm_addsi3}
     (nil))
(insn 83 82 84 11 (set (reg:SI 2 r2 [169])
        (const_int 16711935 [0xff00ff])) "vid.c":112:14 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (mem/v:SI (reg/f:SI 3 r3 [orig:138 _26 ] [138]) [3 *_26+0 S4 A32])
        (reg:SI 2 r2 [169])) "vid.c":112:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       12 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       10
;;              11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 139 170
(code_label 85 84 86 12 14 (nil) [1 uses])
(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 12 (set (reg/f:SI 3 r3 [170])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":113:12 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 12 (set (reg:SI 3 r3 [orig:139 color.19_27 ] [139])
        (mem/c:SI (reg/f:SI 3 r3 [170]) [3 color+0 S4 A32])) "vid.c":113:12 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 color.19_27 ] [139])
            (const_int 3 [0x3]))) "vid.c":113:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 90 89 91 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "vid.c":113:6 273 {arm_cond_branch}
     (nil)
 -> 99)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 140 141 142 143 171 172
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg/f:SI 3 r3 [171])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg/f:SI 2 r2 [orig:140 fb.20_28 ] [140])
        (mem/f/c:SI (reg/f:SI 3 r3 [171]) [1 fb+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 13 (set (reg:SI 3 r3 [orig:141 pix.21_29 ] [141])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 13 (set (reg:SI 3 r3 [orig:142 _30 ] [142])
        (ashift:SI (reg:SI 3 r3 [orig:141 pix.21_29 ] [141])
            (const_int 2 [0x2]))) "vid.c":114:8 147 {*arm_shiftsi3}
     (nil))
(insn 96 95 97 13 (set (reg/f:SI 3 r3 [orig:143 _31 ] [143])
        (plus:SI (reg/f:SI 2 r2 [orig:140 fb.20_28 ] [140])
            (reg:SI 3 r3 [orig:142 _30 ] [142]))) "vid.c":114:8 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 13 (set (reg:SI 2 r2 [172])
        (const_int 65535 [0xffff])) "vid.c":114:14 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 13 (set (mem/v:SI (reg/f:SI 3 r3 [orig:143 _31 ] [143]) [3 *_31+0 S4 A32])
        (reg:SI 2 r2 [172])) "vid.c":114:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 144 173
(code_label 99 98 100 14 15 (nil) [1 uses])
(note 100 99 101 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 14 (set (reg/f:SI 3 r3 [173])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 14 (set (reg:SI 3 r3 [orig:144 color.22_32 ] [144])
        (mem/c:SI (reg/f:SI 3 r3 [173]) [3 color+0 S4 A32])) "vid.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:144 color.22_32 ] [144])
            (const_int 5 [0x5]))) "vid.c":115:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "vid.c":115:6 273 {arm_cond_branch}
     (nil)
 -> 113)
;;  succ:       15 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 145 146 147 148 174 175
(note 105 104 106 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 15 (set (reg/f:SI 3 r3 [174])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 15 (set (reg/f:SI 2 r2 [orig:145 fb.23_33 ] [145])
        (mem/f/c:SI (reg/f:SI 3 r3 [174]) [1 fb+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 109 15 (set (reg:SI 3 r3 [orig:146 pix.24_34 ] [146])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 pix+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 15 (set (reg:SI 3 r3 [orig:147 _35 ] [147])
        (ashift:SI (reg:SI 3 r3 [orig:146 pix.24_34 ] [146])
            (const_int 2 [0x2]))) "vid.c":116:8 147 {*arm_shiftsi3}
     (nil))
(insn 110 109 111 15 (set (reg/f:SI 3 r3 [orig:148 _36 ] [148])
        (plus:SI (reg/f:SI 2 r2 [orig:145 fb.23_33 ] [145])
            (reg:SI 3 r3 [orig:147 _35 ] [147]))) "vid.c":116:8 7 {*arm_addsi3}
     (nil))
(insn 111 110 112 15 (set (reg:SI 2 r2 [175])
        (const_int 16777215 [0xffffff])) "vid.c":116:14 253 {*arm_movsi_insn}
     (nil))
(insn 112 111 113 15 (set (mem/v:SI (reg/f:SI 3 r3 [orig:148 _36 ] [148]) [3 *_36+0 S4 A32])
        (reg:SI 2 r2 [175])) "vid.c":116:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 149
(code_label 113 112 114 16 16 (nil) [1 uses])
(note 114 113 117 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 117 114 118 16 (clobber (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
(insn 118 117 121 16 (clobber (reg:SI 3 r3 [orig:149 <retval> ] [149])) "vid.c":117:1 -1
     (nil))
(insn 121 118 116 16 (const_int 0 [0]) "vid.c":117:1 311 {nop}
     (nil))
(insn 116 121 119 16 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:149 <retval> ] [149])) "vid.c":117:1 253 {*arm_movsi_insn}
     (nil))
(insn 119 116 125 16 (use (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 125 119 0 NOTE_INSN_DELETED)

;; Function dchar (dchar, funcdef_no=3, decl_uid=4501, cgraph_uid=4, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=36, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=32, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) m {*arm_zero_extendqisi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 25:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 26:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) r {*arm_shiftsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 51:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 63:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 78: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 80: point = 1, n_alt = -1
   Insn 77: point = 1, n_alt = -1
   Insn 76: point = 2, n_alt = -1
  BB 9
   Insn 72: point = 2, n_alt = -1
   Insn 71: point = 2, n_alt = 3
   Insn 70: point = 3, n_alt = 4
  BB 2
   Insn 81: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 5
   Insn 17: point = 5, n_alt = 1
   Insn 16: point = 6, n_alt = 5
   Insn 15: point = 7, n_alt = 4
   Insn 14: point = 9, n_alt = -2
   Insn 13: point = 11, n_alt = 2
   Insn 12: point = 13, n_alt = 1
   Insn 11: point = 14, n_alt = 4
   Insn 10: point = 16, n_alt = 4
   Insn 4: point = 17, n_alt = 8
   Insn 3: point = 18, n_alt = 1
   Insn 6: point = 20, n_alt = 5
   Insn 5: point = 20, n_alt = 5
   Insn 2: point = 20, n_alt = -2
  BB 8
   Insn 64: point = 21, n_alt = 5
   Insn 63: point = 22, n_alt = 4
   Insn 62: point = 24, n_alt = 4
  BB 7
   Insn 60: point = 25, n_alt = -1
   Insn 59: point = 25, n_alt = 3
   Insn 58: point = 26, n_alt = 4
  BB 3
   Insn 83: point = 27, n_alt = -1
   Insn 28: point = 27, n_alt = 5
   Insn 27: point = 28, n_alt = 1
   Insn 26: point = 29, n_alt = 8
   Insn 25: point = 30, n_alt = 7
   Insn 24: point = 32, n_alt = 4
   Insn 23: point = 34, n_alt = 4
   Insn 22: point = 35, n_alt = 4
  BB 6
   Insn 52: point = 36, n_alt = 5
   Insn 51: point = 37, n_alt = 4
   Insn 50: point = 39, n_alt = 4
  BB 5
   Insn 47: point = 40, n_alt = -1
   Insn 46: point = 40, n_alt = -2
   Insn 45: point = 41, n_alt = -2
   Insn 44: point = 42, n_alt = 4
   Insn 43: point = 44, n_alt = 4
   Insn 42: point = 45, n_alt = 4
   Insn 41: point = 46, n_alt = 4
   Insn 40: point = 48, n_alt = 4
   Insn 39: point = 49, n_alt = 4
  BB 4
   Insn 37: point = 50, n_alt = -1
   Insn 36: point = 50, n_alt = 3
   Insn 35: point = 51, n_alt = 0
   Insn 34: point = 53, n_alt = 3
   Insn 33: point = 55, n_alt = 4
   Insn 32: point = 56, n_alt = 1
 r113: [8..14]
 r114: [12..13]
 r115: [10..11]
 r116: [8..9]
 r117: [33..35]
 r118: [31..32]
 r119: [54..56]
 r120: [52..53]
 r121: [50..51]
 r122: [40..46]
 r123: [41..42]
 r124: [0..1]
 r125: [19..20]
 r126: [17..18]
 r127: [15..16]
 r128: [6..7]
 r129: [4..5]
 r130: [33..34]
 r131: [29..30]
 r132: [27..28]
 r133: [54..55]
 r134: [47..49]
 r135: [47..48]
 r136: [43..45]
 r137: [43..44]
 r138: [36..37]
 r139: [38..39]
 r140: [25..26]
 r141: [21..22]
 r142: [23..24]
 r143: [2..3]
Compressing live ranges: from 57 to 50 - 87%
Ranges after the compression:
 r113: [8..13]
 r114: [12..13]
 r115: [10..11]
 r116: [8..9]
 r117: [32..33]
 r118: [30..31]
 r119: [48..49]
 r120: [46..47]
 r121: [44..45]
 r122: [38..41]
 r123: [38..39]
 r124: [0..1]
 r125: [18..19]
 r126: [16..17]
 r127: [14..15]
 r128: [6..7]
 r129: [4..5]
 r130: [32..33]
 r131: [28..29]
 r132: [26..27]
 r133: [48..49]
 r134: [42..43]
 r135: [42..43]
 r136: [40..41]
 r137: [40..41]
 r138: [34..35]
 r139: [36..37]
 r140: [24..25]
 r141: [20..21]
 r142: [22..23]
 r143: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=36, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=32, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 77
changing reg in insn 75
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 70
changing reg in insn 71
deleting insn with uid = 3.
deleting insn with uid = 14.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 47.


dchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={8d,7u} r3={24d,22u} r11={1d,32u} r12={2d} r13={1d,11u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={4d,3u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 222{140d,82u,0e} in 52{51 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 125 126 127 128 129
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 3 r3 [125])
        (reg:SI 0 r0 [ c ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 6 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -21 [0xffffffffffffffeb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [126])) "vid.c":120:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 3 r3 [127])
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":124:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [orig:113 font.25_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [127]) [2 font+0 S4 A32])) "vid.c":124:19 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -21 [0xffffffffffffffeb])) [0 c+0 S1 A8]))) "vid.c":124:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 15 2 (set (reg:SI 2 r2 [orig:115 _3 ] [115])
        (ashift:SI (reg:SI 2 r2 [orig:114 _2 ] [114])
            (const_int 4 [0x4]))) "vid.c":124:22 147 {*arm_shiftsi3}
     (nil))
(insn 15 13 16 2 (set (reg:SI 3 r3 [128])
        (plus:SI (reg/f:SI 3 r3 [orig:113 font.25_1 ] [113])
            (reg:SI 2 r2 [orig:116 _4 ] [116]))) "vid.c":124:12 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 caddress+0 S4 A32])
        (reg:SI 3 r3 [128])) "vid.c":124:12 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 3 r3 [129])
        (const_int 0 [0])) "vid.c":127:9 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 81 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])
        (reg:SI 3 r3 [129])) "vid.c":127:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 81 18 82 2 (set (pc)
        (label_ref 65)) "vid.c":127:3 284 {*arm_jump}
     (nil)
 -> 65)
;;  succ:       9 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 82 81 67)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 117 118 130 131 132
(code_label 67 82 21 3 24 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 3 r3 [orig:117 r.26_5 ] [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 2 r2 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 caddress+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg:SI 2 r2 [130])
            (reg:SI 3 r3 [orig:117 r.26_5 ] [117]))) "vid.c":128:23 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (reg:QI 3 r3 [131])
        (mem:QI (reg/f:SI 3 r3 [orig:118 _6 ] [118]) [0 *_6+0 S1 A8])) "vid.c":128:10 263 {*arm_movqi_insn}
     (nil))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -17 [0xffffffffffffffef])) [0 byte+0 S1 A8])
        (reg:QI 3 r3 [131])) "vid.c":128:10 263 {*arm_movqi_insn}
     (nil))
(insn 27 26 28 3 (set (reg:SI 3 r3 [132])
        (const_int 0 [0])) "vid.c":130:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 83 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])
        (reg:SI 3 r3 [132])) "vid.c":130:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 83 28 84 3 (set (pc)
        (label_ref 53)) "vid.c":130:5 284 {*arm_jump}
     (nil)
 -> 53)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 84 83 55)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 120 121 133
(code_label 55 84 31 4 23 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 2 r2 [orig:119 _7 ] [119])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -17 [0xffffffffffffffef])) [0 byte+0 S1 A8]))) "vid.c":131:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [133])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":131:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (ashiftrt:SI (reg:SI 2 r2 [orig:119 _7 ] [119])
            (reg:SI 3 r3 [133]))) "vid.c":131:11 147 {*arm_shiftsi3}
     (nil))
(insn 35 34 36 4 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (and:SI (reg:SI 3 r3 [orig:120 _8 ] [120])
            (const_int 1 [0x1]))) "vid.c":131:11 90 {*arm_andsi3_insn}
     (nil))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:121 _9 ] [121])
            (const_int 0 [0]))) "vid.c":131:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":131:10 273 {arm_cond_branch}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 134 135 136 137
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 2 r2 [134])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 3 r3 [135])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 0 r0 [orig:122 _10 ] [122])
        (plus:SI (reg:SI 2 r2 [134])
            (reg:SI 3 r3 [135]))) "vid.c":132:4 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 5 (set (reg:SI 2 r2 [136])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 3 r3 [137])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 2 r2 [136])
            (reg:SI 3 r3 [137]))) "vid.c":132:4 7 {*arm_addsi3}
     (nil))
(insn 45 44 47 5 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 47 45 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setpix") [flags 0x3]  <function_decl 0x7fd417ce1b00 setpix>) [0 setpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":132:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 138 139
(code_label 48 47 49 6 22 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 3 r3 [139])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":130:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 3 r3 [138])
        (plus:SI (reg:SI 3 r3 [139])
            (const_int 1 [0x1]))) "vid.c":130:27 7 {*arm_addsi3}
     (nil))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])
        (reg:SI 3 r3 [138])) "vid.c":130:27 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 140
(code_label 53 52 54 7 21 (nil) [1 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 3 r3 [140])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":130:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [140])
            (const_int 7 [0x7]))) "vid.c":130:20 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":130:20 273 {arm_cond_branch}
     (nil)
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 141 142
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 3 r3 [142])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])) "vid.c":127:20 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 3 r3 [141])
        (plus:SI (reg:SI 3 r3 [142])
            (const_int 1 [0x1]))) "vid.c":127:20 7 {*arm_addsi3}
     (nil))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])
        (reg:SI 3 r3 [141])) "vid.c":127:20 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 143
(code_label 65 64 66 9 20 (nil) [1 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 3 r3 [143])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A32])) "vid.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [143])
            (const_int 15 [0xf]))) "vid.c":127:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":127:14 273 {arm_cond_branch}
     (nil)
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 124
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
(insn 77 76 80 10 (clobber (reg:SI 3 r3 [orig:124 <retval> ] [124])) "vid.c":135:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":135:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:124 <retval> ] [124])) "vid.c":135:1 253 {*arm_movsi_insn}
     (nil))
(insn 78 75 85 10 (use (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 85 78 0 NOTE_INSN_DELETED)

;; Function undchar (undchar, funcdef_no=4, decl_uid=4518, cgraph_uid=5, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=36, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=32, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) m {*arm_zero_extendqisi2}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 25:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 26:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 32:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 34:  (0) r  (1) r  (2) r {*arm_shiftsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 36:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 39:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 51:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 59:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 63:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 64:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9 10

********** Pseudo live ranges #1: **********

  BB 10
   Insn 78: point = 0, n_alt = -1
   Insn 75: point = 0, n_alt = -2
   Insn 80: point = 1, n_alt = -1
   Insn 77: point = 1, n_alt = -1
   Insn 76: point = 2, n_alt = -1
  BB 9
   Insn 72: point = 2, n_alt = -1
   Insn 71: point = 2, n_alt = 3
   Insn 70: point = 3, n_alt = 4
  BB 2
   Insn 81: point = 4, n_alt = -1
   Insn 18: point = 4, n_alt = 5
   Insn 17: point = 5, n_alt = 1
   Insn 16: point = 6, n_alt = 5
   Insn 15: point = 7, n_alt = 4
   Insn 14: point = 9, n_alt = -2
   Insn 13: point = 11, n_alt = 2
   Insn 12: point = 13, n_alt = 1
   Insn 11: point = 14, n_alt = 4
   Insn 10: point = 16, n_alt = 4
   Insn 4: point = 17, n_alt = 8
   Insn 3: point = 18, n_alt = 1
   Insn 6: point = 20, n_alt = 5
   Insn 5: point = 20, n_alt = 5
   Insn 2: point = 20, n_alt = -2
  BB 8
   Insn 64: point = 21, n_alt = 5
   Insn 63: point = 22, n_alt = 4
   Insn 62: point = 24, n_alt = 4
  BB 7
   Insn 60: point = 25, n_alt = -1
   Insn 59: point = 25, n_alt = 3
   Insn 58: point = 26, n_alt = 4
  BB 3
   Insn 83: point = 27, n_alt = -1
   Insn 28: point = 27, n_alt = 5
   Insn 27: point = 28, n_alt = 1
   Insn 26: point = 29, n_alt = 8
   Insn 25: point = 30, n_alt = 7
   Insn 24: point = 32, n_alt = 4
   Insn 23: point = 34, n_alt = 4
   Insn 22: point = 35, n_alt = 4
  BB 6
   Insn 52: point = 36, n_alt = 5
   Insn 51: point = 37, n_alt = 4
   Insn 50: point = 39, n_alt = 4
  BB 5
   Insn 47: point = 40, n_alt = -1
   Insn 46: point = 40, n_alt = -2
   Insn 45: point = 41, n_alt = -2
   Insn 44: point = 42, n_alt = 4
   Insn 43: point = 44, n_alt = 4
   Insn 42: point = 45, n_alt = 4
   Insn 41: point = 46, n_alt = 4
   Insn 40: point = 48, n_alt = 4
   Insn 39: point = 49, n_alt = 4
  BB 4
   Insn 37: point = 50, n_alt = -1
   Insn 36: point = 50, n_alt = 3
   Insn 35: point = 51, n_alt = 0
   Insn 34: point = 53, n_alt = 3
   Insn 33: point = 55, n_alt = 4
   Insn 32: point = 56, n_alt = 1
 r113: [8..14]
 r114: [12..13]
 r115: [10..11]
 r116: [8..9]
 r117: [33..35]
 r118: [31..32]
 r119: [54..56]
 r120: [52..53]
 r121: [50..51]
 r122: [40..46]
 r123: [41..42]
 r124: [0..1]
 r125: [19..20]
 r126: [17..18]
 r127: [15..16]
 r128: [6..7]
 r129: [4..5]
 r130: [33..34]
 r131: [29..30]
 r132: [27..28]
 r133: [54..55]
 r134: [47..49]
 r135: [47..48]
 r136: [43..45]
 r137: [43..44]
 r138: [36..37]
 r139: [38..39]
 r140: [25..26]
 r141: [21..22]
 r142: [23..24]
 r143: [2..3]
Compressing live ranges: from 57 to 50 - 87%
Ranges after the compression:
 r113: [8..13]
 r114: [12..13]
 r115: [10..11]
 r116: [8..9]
 r117: [32..33]
 r118: [30..31]
 r119: [48..49]
 r120: [46..47]
 r121: [44..45]
 r122: [38..41]
 r123: [38..39]
 r124: [0..1]
 r125: [18..19]
 r126: [16..17]
 r127: [14..15]
 r128: [6..7]
 r129: [4..5]
 r130: [32..33]
 r131: [28..29]
 r132: [26..27]
 r133: [48..49]
 r134: [42..43]
 r135: [42..43]
 r136: [40..41]
 r137: [40..41]
 r138: [34..35]
 r139: [36..37]
 r140: [24..25]
 r141: [20..21]
 r142: [22..23]
 r143: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=36, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=32, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 41
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 77
changing reg in insn 75
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 10
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 41
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 62
changing reg in insn 63
changing reg in insn 70
changing reg in insn 71
deleting insn with uid = 3.
deleting insn with uid = 14.
deleting insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 47.


undchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={8d,7u} r3={24d,22u} r11={1d,32u} r12={2d} r13={1d,11u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={4d,3u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 222{140d,82u,0e} in 52{51 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 125 126 127 128 129
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 3 r3 [125])
        (reg:SI 0 r0 [ c ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 6 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -21 [0xffffffffffffffeb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [126])) "vid.c":138:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 3 r3 [127])
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":142:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [orig:113 font.27_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [127]) [2 font+0 S4 A32])) "vid.c":142:19 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -21 [0xffffffffffffffeb])) [0 c+0 S1 A8]))) "vid.c":142:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 15 2 (set (reg:SI 2 r2 [orig:115 _3 ] [115])
        (ashift:SI (reg:SI 2 r2 [orig:114 _2 ] [114])
            (const_int 4 [0x4]))) "vid.c":142:22 147 {*arm_shiftsi3}
     (nil))
(insn 15 13 16 2 (set (reg:SI 3 r3 [128])
        (plus:SI (reg/f:SI 3 r3 [orig:113 font.27_1 ] [113])
            (reg:SI 2 r2 [orig:116 _4 ] [116]))) "vid.c":142:12 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 caddress+0 S4 A32])
        (reg:SI 3 r3 [128])) "vid.c":142:12 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 3 r3 [129])
        (const_int 0 [0])) "vid.c":145:11 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 81 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])
        (reg:SI 3 r3 [129])) "vid.c":145:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 81 18 82 2 (set (pc)
        (label_ref 65)) "vid.c":145:3 284 {*arm_jump}
     (nil)
 -> 65)
;;  succ:       9 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 82 81 67)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       9
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 117 118 130 131 132
(code_label 67 82 21 3 32 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 3 r3 [orig:117 row.28_5 ] [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 2 r2 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 caddress+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg:SI 2 r2 [130])
            (reg:SI 3 r3 [orig:117 row.28_5 ] [117]))) "vid.c":146:23 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (reg:QI 3 r3 [131])
        (mem:QI (reg/f:SI 3 r3 [orig:118 _6 ] [118]) [0 *_6+0 S1 A8])) "vid.c":146:10 263 {*arm_movqi_insn}
     (nil))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -17 [0xffffffffffffffef])) [0 byte+0 S1 A8])
        (reg:QI 3 r3 [131])) "vid.c":146:10 263 {*arm_movqi_insn}
     (nil))
(insn 27 26 28 3 (set (reg:SI 3 r3 [132])
        (const_int 0 [0])) "vid.c":148:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 83 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])
        (reg:SI 3 r3 [132])) "vid.c":148:13 253 {*arm_movsi_insn}
     (nil))
(jump_insn 83 28 84 3 (set (pc)
        (label_ref 53)) "vid.c":148:5 284 {*arm_jump}
     (nil)
 -> 53)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 84 83 55)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119 120 121 133
(code_label 55 84 31 4 31 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 2 r2 [orig:119 _7 ] [119])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -17 [0xffffffffffffffef])) [0 byte+0 S1 A8]))) "vid.c":149:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [133])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (ashiftrt:SI (reg:SI 2 r2 [orig:119 _7 ] [119])
            (reg:SI 3 r3 [133]))) "vid.c":149:11 147 {*arm_shiftsi3}
     (nil))
(insn 35 34 36 4 (set (reg:SI 3 r3 [orig:121 _9 ] [121])
        (and:SI (reg:SI 3 r3 [orig:120 _8 ] [120])
            (const_int 1 [0x1]))) "vid.c":149:11 90 {*arm_andsi3_insn}
     (nil))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:121 _9 ] [121])
            (const_int 0 [0]))) "vid.c":149:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":149:10 273 {arm_cond_branch}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 134 135 136 137
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 2 r2 [134])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -28 [0xffffffffffffffe4])) [3 x+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 3 r3 [135])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 0 r0 [orig:122 _10 ] [122])
        (plus:SI (reg:SI 2 r2 [134])
            (reg:SI 3 r3 [135]))) "vid.c":150:4 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 5 (set (reg:SI 2 r2 [136])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -32 [0xffffffffffffffe0])) [3 y+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 3 r3 [137])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (plus:SI (reg:SI 2 r2 [136])
            (reg:SI 3 r3 [137]))) "vid.c":150:4 7 {*arm_addsi3}
     (nil))
(insn 45 44 47 5 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 47 45 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":150:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 138 139
(code_label 48 47 49 6 30 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 3 r3 [139])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":148:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 3 r3 [138])
        (plus:SI (reg:SI 3 r3 [139])
            (const_int 1 [0x1]))) "vid.c":148:27 7 {*arm_addsi3}
     (nil))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])
        (reg:SI 3 r3 [138])) "vid.c":148:27 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 140
(code_label 53 52 54 7 29 (nil) [1 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 3 r3 [140])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A64])) "vid.c":148:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [140])
            (const_int 7 [0x7]))) "vid.c":148:20 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":148:20 273 {arm_cond_branch}
     (nil)
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 141 142
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 3 r3 [142])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])) "vid.c":145:26 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 3 r3 [141])
        (plus:SI (reg:SI 3 r3 [142])
            (const_int 1 [0x1]))) "vid.c":145:26 7 {*arm_addsi3}
     (nil))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])
        (reg:SI 3 r3 [141])) "vid.c":145:26 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 143
(code_label 65 64 66 9 28 (nil) [1 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 3 r3 [143])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 row+0 S4 A32])) "vid.c":145:18 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [143])
            (const_int 15 [0xf]))) "vid.c":145:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":145:18 273 {arm_cond_branch}
     (nil)
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 124
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
(insn 77 76 80 10 (clobber (reg:SI 3 r3 [orig:124 <retval> ] [124])) "vid.c":153:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":153:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:124 <retval> ] [124])) "vid.c":153:1 253 {*arm_movsi_insn}
     (nil))
(insn 78 75 85 10 (use (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 85 78 0 NOTE_INSN_DELETED)

;; Function dstring (dstring, funcdef_no=5, decl_uid=4535, cgraph_uid=6, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 18:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 21:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 28:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 35: point = 0, n_alt = -1
   Insn 32: point = 0, n_alt = -2
   Insn 37: point = 1, n_alt = -1
   Insn 34: point = 1, n_alt = -1
   Insn 33: point = 2, n_alt = -1
  BB 4
   Insn 29: point = 2, n_alt = -1
   Insn 28: point = 2, n_alt = 3
   Insn 26: point = 3, n_alt = 1
   Insn 25: point = 5, n_alt = 4
  BB 2
   Insn 38: point = 6, n_alt = -1
   Insn 4: point = 6, n_alt = 5
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
  BB 3
   Insn 22: point = 6, n_alt = 5
   Insn 21: point = 7, n_alt = 4
   Insn 20: point = 9, n_alt = 4
   Insn 19: point = 10, n_alt = 5
   Insn 18: point = 11, n_alt = 4
   Insn 17: point = 13, n_alt = 4
   Insn 16: point = 14, n_alt = -1
   Insn 15: point = 14, n_alt = -2
   Insn 14: point = 15, n_alt = 4
   Insn 13: point = 15, n_alt = 4
   Insn 12: point = 15, n_alt = 1
   Insn 11: point = 17, n_alt = 4
 r113: [14..15]
 r114: [2..3]
 r115: [0..1]
 r116: [16..17]
 r117: [10..11]
 r118: [12..13]
 r119: [6..7]
 r120: [8..9]
 r121: [4..5]
Compressing live ranges: from 18 to 18 - 100%
Ranges after the compression:
 r113: [14..15]
 r114: [2..3]
 r115: [0..1]
 r116: [16..17]
 r117: [10..11]
 r118: [12..13]
 r119: [6..7]
 r120: [8..9]
 r121: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 15
changing reg in insn 26
changing reg in insn 28
changing reg in insn 34
changing reg in insn 32
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 19
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.


dstring

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={11d,9u} r11={1d,16u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 161{120d,41u,0e} in 25{24 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(note 5 4 38 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 38 5 39 2 (set (pc)
        (label_ref 23)) "vid.c":157:8 284 {*arm_jump}
     (nil)
 -> 23)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 39 38 27)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118 119 120
(code_label 27 39 10 3 37 (nil) [1 uses])
(note 10 27 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [116]) [0 *s_3+0 S1 A8]))) "vid.c":158:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:113 _1 ] [113])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":158:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 17 16 18 3 (set (reg:SI 3 r3 [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg:SI 3 r3 [117])
        (plus:SI (reg:SI 3 r3 [118])
            (const_int 8 [0x8]))) "vid.c":159:6 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 3 r3 [117])) "vid.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (reg:SI 3 r3 [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":160:6 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 3 r3 [119])
        (plus:SI (reg:SI 3 r3 [120])
            (const_int 1 [0x1]))) "vid.c":160:6 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 3 r3 [119])) "vid.c":160:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 121
(code_label 23 22 24 4 36 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":157:9 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 28 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [121]) [0 *s_3+0 S1 A8]))) "vid.c":157:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 28 26 29 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:114 _2 ] [114])
            (const_int 0 [0]))) "vid.c":157:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "vid.c":157:9 273 {arm_cond_branch}
     (nil)
 -> 27)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 30 34 5 (clobber (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
(insn 34 33 37 5 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":162:1 -1
     (nil))
(insn 37 34 32 5 (const_int 0 [0]) "vid.c":162:1 311 {nop}
     (nil))
(insn 32 37 35 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":162:1 253 {*arm_movsi_insn}
     (nil))
(insn 35 32 40 5 (use (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 40 35 0 NOTE_INSN_DELETED)

;; Function scroll (scroll, funcdef_no=6, decl_uid=4540, cgraph_uid=7, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 5:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 13:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) r {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 40: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = -2
   Insn 42: point = 1, n_alt = -1
   Insn 39: point = 1, n_alt = -1
   Insn 38: point = 2, n_alt = -1
  BB 4
   Insn 34: point = 2, n_alt = -1
   Insn 33: point = 2, n_alt = 2
   Insn 32: point = 3, n_alt = 4
   Insn 31: point = 4, n_alt = 4
  BB 2
   Insn 43: point = 5, n_alt = -1
   Insn 6: point = 5, n_alt = 5
   Insn 5: point = 6, n_alt = 1
  BB 3
   Insn 25: point = 7, n_alt = 5
   Insn 24: point = 8, n_alt = 4
   Insn 23: point = 10, n_alt = 4
   Insn 22: point = 11, n_alt = 5
   Insn 21: point = 12, n_alt = 4
   Insn 20: point = 14, n_alt = 4
   Insn 19: point = 16, n_alt = 2
   Insn 18: point = 18, n_alt = 4
   Insn 17: point = 19, n_alt = 4
   Insn 16: point = 21, n_alt = 4
   Insn 15: point = 22, n_alt = 4
   Insn 14: point = 24, n_alt = 2
   Insn 13: point = 26, n_alt = 4
   Insn 12: point = 28, n_alt = 4
   Insn 11: point = 29, n_alt = 4
   Insn 10: point = 31, n_alt = 4
 r113: [23..29]
 r114: [27..28]
 r115: [25..26]
 r116: [23..24]
 r117: [13..22]
 r118: [15..19]
 r119: [17..18]
 r120: [15..16]
 r121: [11..14]
 r122: [11..12]
 r123: [0..1]
 r124: [5..6]
 r125: [30..31]
 r126: [20..21]
 r127: [7..8]
 r128: [9..10]
 r129: [2..4]
 r130: [2..3]
Compressing live ranges: from 32 to 28 - 87%
Ranges after the compression:
 r113: [20..25]
 r114: [24..25]
 r115: [22..23]
 r116: [20..21]
 r117: [12..19]
 r118: [14..17]
 r119: [16..17]
 r120: [14..15]
 r121: [10..13]
 r122: [10..11]
 r123: [0..1]
 r124: [4..5]
 r125: [26..27]
 r126: [18..19]
 r127: [6..7]
 r128: [8..9]
 r129: [2..3]
 r130: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 21
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
changing reg in insn 39
changing reg in insn 37
changing reg in insn 5
changing reg in insn 6
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 23
changing reg in insn 24
changing reg in insn 31
changing reg in insn 33
changing reg in insn 32
changing reg in insn 33
starting the processing of deferred insns
ending the processing of deferred insns


scroll

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,2u} r1={2d,1u} r2={5d,4u} r3={14d,13u} r11={1d,11u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,1u} 
;;    total ref usage 67{29d,38u,0e} in 28{28 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 124
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 3 r3 [124])
        (const_int 0 [0])) "vid.c":167:9 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 43 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (reg:SI 3 r3 [124])) "vid.c":167:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 43 6 44 2 (set (pc)
        (label_ref 26)) "vid.c":167:3 284 {*arm_jump}
     (nil)
 -> 26)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 28)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 116 117 118 119 120 121 122 125 126 127 128
(code_label 28 44 9 3 40 (nil) [1 uses])
(note 9 28 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 3 r3 [125])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 2 r2 [orig:113 fb.29_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [125]) [1 fb+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 3 r3 [orig:114 i.30_2 ] [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (plus:SI (reg:SI 3 r3 [orig:114 i.30_2 ] [114])
            (const_int 10240 [0x2800]))) "vid.c":168:15 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (ashift:SI (reg:SI 3 r3 [orig:115 _3 ] [115])
            (const_int 2 [0x2]))) "vid.c":168:15 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 2 r2 [orig:117 _5 ] [117])
        (plus:SI (reg/f:SI 2 r2 [orig:113 fb.29_1 ] [113])
            (reg:SI 3 r3 [orig:116 _4 ] [116]))) "vid.c":168:15 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 3 r3 [126])
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 1 r1 [orig:118 fb.31_6 ] [118])
        (mem/f/c:SI (reg/f:SI 3 r3 [126]) [1 fb+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg:SI 3 r3 [orig:119 i.32_7 ] [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (ashift:SI (reg:SI 3 r3 [orig:119 i.32_7 ] [119])
            (const_int 2 [0x2]))) "vid.c":168:7 147 {*arm_shiftsi3}
     (nil))
(insn 20 19 21 3 (set (reg/f:SI 3 r3 [orig:121 _9 ] [121])
        (plus:SI (reg/f:SI 1 r1 [orig:118 fb.31_6 ] [118])
            (reg:SI 3 r3 [orig:120 _8 ] [120]))) "vid.c":168:7 7 {*arm_addsi3}
     (nil))
(insn 21 20 22 3 (set (reg:SI 2 r2 [orig:122 _10 ] [122])
        (mem/v:SI (reg/f:SI 2 r2 [orig:117 _5 ] [117]) [3 *_5+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (mem/v:SI (reg/f:SI 3 r3 [orig:121 _9 ] [121]) [3 *_9+0 S4 A32])
        (reg:SI 2 r2 [orig:122 _10 ] [122])) "vid.c":168:11 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 3 r3 [128])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "vid.c":167:32 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 3 r3 [127])
        (plus:SI (reg:SI 3 r3 [128])
            (const_int 1 [0x1]))) "vid.c":167:32 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (reg:SI 3 r3 [127])) "vid.c":167:32 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 129 130
(code_label 26 25 27 4 39 (nil) [1 uses])
(note 27 26 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 27 32 4 (set (reg:SI 3 r3 [129])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 2 r2 [130])
        (const_int 296960 [0x48800])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [129])
            (reg:SI 2 r2 [130]))) "vid.c":167:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":167:14 273 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 123
(note 35 34 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 5 (clobber (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
(insn 39 38 42 5 (clobber (reg:SI 3 r3 [orig:123 <retval> ] [123])) "vid.c":170:1 -1
     (nil))
(insn 42 39 37 5 (const_int 0 [0]) "vid.c":170:1 311 {nop}
     (nil))
(insn 37 42 40 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:123 <retval> ] [123])) "vid.c":170:1 253 {*arm_movsi_insn}
     (nil))
(insn 40 37 46 5 (use (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 46 40 0 NOTE_INSN_DELETED)

;; Function kpchar (kpchar, funcdef_no=7, decl_uid=4550, cgraph_uid=8, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 25: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -1
   Insn 24: point = 1, n_alt = -1
   Insn 23: point = 2, n_alt = -1
   Insn 20: point = 2, n_alt = -1
   Insn 19: point = 2, n_alt = -2
   Insn 18: point = 3, n_alt = 4
   Insn 17: point = 3, n_alt = 4
   Insn 16: point = 3, n_alt = 1
   Insn 15: point = 4, n_alt = 5
   Insn 14: point = 5, n_alt = 2
   Insn 13: point = 7, n_alt = 4
   Insn 12: point = 8, n_alt = 5
   Insn 11: point = 9, n_alt = 2
   Insn 10: point = 11, n_alt = 4
   Insn 4: point = 12, n_alt = 8
   Insn 3: point = 13, n_alt = 1
   Insn 6: point = 15, n_alt = 5
   Insn 5: point = 15, n_alt = 5
   Insn 2: point = 15, n_alt = -2
 r113: [0..1]
 r114: [14..15]
 r115: [12..13]
 r116: [8..9]
 r117: [10..11]
 r118: [4..5]
 r119: [6..7]
 r120: [2..3]
Compressing live ranges: from 16 to 16 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [14..15]
 r115: [12..13]
 r116: [8..9]
 r117: [10..11]
 r118: [4..5]
 r119: [6..7]
 r120: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 22
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.


kpchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={9d,7u} r11={1d,12u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 148{117d,31u,0e} in 20{19 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 3 r3 [114])
        (reg:SI 0 r0 [ c ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 6 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [115])) "vid.c":173:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 3 r3 [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [3 co+0 S4 A32])) "vid.c":175:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [116])
        (ashift:SI (reg:SI 3 r3 [117])
            (const_int 3 [0x3]))) "vid.c":175:6 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])
        (reg:SI 3 r3 [116])) "vid.c":175:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 ro+0 S4 A32])) "vid.c":176:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [118])
        (ashift:SI (reg:SI 3 r3 [119])
            (const_int 4 [0x4]))) "vid.c":176:6 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])
        (reg:SI 3 r3 [118])) "vid.c":176:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "vid.c":178:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [120])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":178:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":180:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":180:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":180:1 253 {*arm_movsi_insn}
     (nil))
(insn 25 22 28 2 (use (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 28 25 0 NOTE_INSN_DELETED)

;; Function unkpchar (unkpchar, funcdef_no=8, decl_uid=4557, cgraph_uid=9, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 5:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 16:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 25: point = 0, n_alt = -1
   Insn 22: point = 0, n_alt = -2
   Insn 27: point = 1, n_alt = -1
   Insn 24: point = 1, n_alt = -1
   Insn 23: point = 2, n_alt = -1
   Insn 20: point = 2, n_alt = -1
   Insn 19: point = 2, n_alt = -2
   Insn 18: point = 3, n_alt = 4
   Insn 17: point = 3, n_alt = 4
   Insn 16: point = 3, n_alt = 1
   Insn 15: point = 4, n_alt = 5
   Insn 14: point = 5, n_alt = 2
   Insn 13: point = 7, n_alt = 4
   Insn 12: point = 8, n_alt = 5
   Insn 11: point = 9, n_alt = 2
   Insn 10: point = 11, n_alt = 4
   Insn 4: point = 12, n_alt = 8
   Insn 3: point = 13, n_alt = 1
   Insn 6: point = 15, n_alt = 5
   Insn 5: point = 15, n_alt = 5
   Insn 2: point = 15, n_alt = -2
 r113: [0..1]
 r114: [14..15]
 r115: [12..13]
 r116: [8..9]
 r117: [10..11]
 r118: [4..5]
 r119: [6..7]
 r120: [2..3]
Compressing live ranges: from 16 to 16 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [14..15]
 r115: [12..13]
 r116: [8..9]
 r117: [10..11]
 r118: [4..5]
 r119: [6..7]
 r120: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=28, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=24, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 24
changing reg in insn 22
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 16
changing reg in insn 19
deleting insn with uid = 3.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.


unkpchar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,2u} r3={9d,7u} r11={1d,12u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 148{117d,31u,0e} in 20{19 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 3 r3 [114])
        (reg:SI 0 r0 [ c ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 6 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [115])) "vid.c":183:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 3 r3 [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -24 [0xffffffffffffffe8])) [3 co+0 S4 A32])) "vid.c":185:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [116])
        (ashift:SI (reg:SI 3 r3 [117])
            (const_int 3 [0x3]))) "vid.c":185:6 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])
        (reg:SI 3 r3 [116])) "vid.c":185:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 ro+0 S4 A32])) "vid.c":186:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 3 r3 [118])
        (ashift:SI (reg:SI 3 r3 [119])
            (const_int 4 [0x4]))) "vid.c":186:6 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])
        (reg:SI 3 r3 [118])) "vid.c":186:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "vid.c":188:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [120])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("undchar") [flags 0x3]  <function_decl 0x7fd417ce1f00 undchar>) [0 undchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":188:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":189:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":189:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":189:1 253 {*arm_movsi_insn}
     (nil))
(insn 25 22 28 2 (use (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 28 25 0 NOTE_INSN_DELETED)

;; Function erasechar (erasechar, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 33:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 45:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 52:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 53:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4
EBB 5 6
EBB 7 8

********** Pseudo live ranges #1: **********

  BB 8
   Insn 60: point = 0, n_alt = -1
   Insn 57: point = 0, n_alt = -2
   Insn 62: point = 1, n_alt = -1
   Insn 59: point = 1, n_alt = -1
   Insn 58: point = 2, n_alt = -1
  BB 7
   Insn 54: point = 2, n_alt = -1
   Insn 53: point = 2, n_alt = 3
   Insn 52: point = 3, n_alt = 4
  BB 2
   Insn 63: point = 4, n_alt = -1
   Insn 14: point = 4, n_alt = 5
   Insn 13: point = 5, n_alt = 1
   Insn 12: point = 6, n_alt = 5
   Insn 11: point = 7, n_alt = 2
   Insn 10: point = 9, n_alt = 4
   Insn 9: point = 11, n_alt = 4
   Insn 8: point = 12, n_alt = 5
   Insn 7: point = 13, n_alt = 2
   Insn 6: point = 15, n_alt = 4
   Insn 5: point = 17, n_alt = 4
  BB 6
   Insn 46: point = 18, n_alt = 5
   Insn 45: point = 19, n_alt = 4
   Insn 44: point = 21, n_alt = 4
  BB 5
   Insn 42: point = 22, n_alt = -1
   Insn 41: point = 22, n_alt = 3
   Insn 40: point = 23, n_alt = 4
  BB 3
   Insn 65: point = 24, n_alt = -1
   Insn 19: point = 24, n_alt = 5
   Insn 18: point = 25, n_alt = 1
  BB 4
   Insn 34: point = 26, n_alt = 5
   Insn 33: point = 27, n_alt = 4
   Insn 32: point = 29, n_alt = 4
   Insn 31: point = 30, n_alt = -1
   Insn 30: point = 30, n_alt = -2
   Insn 29: point = 31, n_alt = -2
   Insn 28: point = 32, n_alt = 4
   Insn 27: point = 34, n_alt = 4
   Insn 26: point = 35, n_alt = 4
   Insn 25: point = 36, n_alt = 4
   Insn 24: point = 38, n_alt = 4
   Insn 23: point = 39, n_alt = 4
 r113: [14..15]
 r114: [8..9]
 r115: [30..36]
 r116: [31..32]
 r117: [0..1]
 r118: [16..17]
 r119: [12..13]
 r120: [10..11]
 r121: [6..7]
 r122: [4..5]
 r123: [24..25]
 r124: [37..39]
 r125: [37..38]
 r126: [33..35]
 r127: [33..34]
 r128: [26..27]
 r129: [28..29]
 r130: [22..23]
 r131: [18..19]
 r132: [20..21]
 r133: [2..3]
Compressing live ranges: from 40 to 36 - 90%
Ranges after the compression:
 r113: [14..15]
 r114: [8..9]
 r115: [30..33]
 r116: [30..31]
 r117: [0..1]
 r118: [16..17]
 r119: [12..13]
 r120: [10..11]
 r121: [6..7]
 r122: [4..5]
 r123: [24..25]
 r124: [34..35]
 r125: [34..35]
 r126: [32..33]
 r127: [32..33]
 r128: [26..27]
 r129: [28..29]
 r130: [22..23]
 r131: [18..19]
 r132: [20..21]
 r133: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 25
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 59
changing reg in insn 57
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 46
changing reg in insn 44
changing reg in insn 45
changing reg in insn 52
changing reg in insn 53
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 31.


erasechar

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,3u} r1={3d,1u} r2={4d,2u} r3={20d,18u} r11={1d,22u} r12={2d} r13={1d,9u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={3d,2u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 189{131d,58u,0e} in 39{38 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 118 119 120 121 122
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [118])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":197:10 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 3 r3 [orig:113 col.33_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [118]) [3 col+0 S4 A32])) "vid.c":197:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [119])
        (ashift:SI (reg:SI 3 r3 [orig:113 col.33_1 ] [113])
            (const_int 3 [0x3]))) "vid.c":197:5 147 {*arm_shiftsi3}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])
        (reg:SI 3 r3 [119])) "vid.c":197:5 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [120])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":198:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 3 r3 [orig:114 row.34_2 ] [114])
        (mem/c:SI (reg/f:SI 3 r3 [120]) [3 row+0 S4 A32])) "vid.c":198:10 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [121])
        (ashift:SI (reg:SI 3 r3 [orig:114 row.34_2 ] [114])
            (const_int 4 [0x4]))) "vid.c":198:5 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])
        (reg:SI 3 r3 [121])) "vid.c":198:5 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 3 r3 [122])
        (const_int 0 [0])) "vid.c":202:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 63 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 r+0 S4 A64])
        (reg:SI 3 r3 [122])) "vid.c":202:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 63 14 64 2 (set (pc)
        (label_ref 47)) "vid.c":202:3 284 {*arm_jump}
     (nil)
 -> 47)
;;  succ:       7 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 64 63 49)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       7
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 123
(code_label 49 64 17 3 49 (nil) [1 uses])
(note 17 49 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 3 r3 [123])
        (const_int 0 [0])) "vid.c":203:14 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 65 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 bit+0 S4 A32])
        (reg:SI 3 r3 [123])) "vid.c":203:14 253 {*arm_movsi_insn}
     (nil))
(jump_insn 65 19 66 3 (set (pc)
        (label_ref 35)) "vid.c":203:6 284 {*arm_jump}
     (nil)
 -> 35)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 66 65 37)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 124 125 126 127 128 129
(code_label 37 66 22 4 48 (nil) [1 uses])
(note 22 37 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 2 r2 [124])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 3 r3 [125])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 bit+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 0 r0 [orig:115 _3 ] [115])
        (plus:SI (reg:SI 2 r2 [124])
            (reg:SI 3 r3 [125]))) "vid.c":204:9 7 {*arm_addsi3}
     (nil))
(insn 26 25 27 4 (set (reg:SI 2 r2 [126])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 y+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (reg:SI 3 r3 [127])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 r+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 4 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (plus:SI (reg:SI 2 r2 [126])
            (reg:SI 3 r3 [127]))) "vid.c":204:9 7 {*arm_addsi3}
     (nil))
(insn 29 28 31 4 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 31 29 32 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":204:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 32 31 33 4 (set (reg:SI 3 r3 [129])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 bit+0 S4 A32])) "vid.c":203:28 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [128])
        (plus:SI (reg:SI 3 r3 [129])
            (const_int 1 [0x1]))) "vid.c":203:28 7 {*arm_addsi3}
     (nil))
(insn 34 33 35 4 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 bit+0 S4 A32])
        (reg:SI 3 r3 [128])) "vid.c":203:28 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 130
(code_label 35 34 36 5 47 (nil) [1 uses])
(note 36 35 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 36 41 5 (set (reg:SI 3 r3 [130])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 bit+0 S4 A32])) "vid.c":203:21 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [130])
            (const_int 7 [0x7]))) "vid.c":203:21 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "vid.c":203:21 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       4
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 131 132
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (reg:SI 3 r3 [132])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 r+0 S4 A64])) "vid.c":202:20 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 6 (set (reg:SI 3 r3 [131])
        (plus:SI (reg:SI 3 r3 [132])
            (const_int 1 [0x1]))) "vid.c":202:20 7 {*arm_addsi3}
     (nil))
(insn 46 45 47 6 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 r+0 S4 A64])
        (reg:SI 3 r3 [131])) "vid.c":202:20 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 133
(code_label 47 46 48 7 46 (nil) [1 uses])
(note 48 47 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 48 53 7 (set (reg:SI 3 r3 [133])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 r+0 S4 A64])) "vid.c":202:14 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [133])
            (const_int 15 [0xf]))) "vid.c":202:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "vid.c":202:14 273 {arm_cond_branch}
     (nil)
 -> 49)
;;  succ:       3
;;              8 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(note 55 54 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 55 59 8 (clobber (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
(insn 59 58 62 8 (clobber (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":207:1 -1
     (nil))
(insn 62 59 57 8 (const_int 0 [0]) "vid.c":207:1 311 {nop}
     (nil))
(insn 57 62 60 8 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":207:1 253 {*arm_movsi_insn}
     (nil))
(insn 60 57 67 8 (use (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 67 60 0 NOTE_INSN_DELETED)

;; Function clrcursor (clrcursor, funcdef_no=10, decl_uid=4577, cgraph_uid=11, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=4, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0, n_alt = -1
   Insn 14: point = 0, n_alt = -2
   Insn 19: point = 1, n_alt = -1
   Insn 16: point = 1, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = 1
   Insn 10: point = 2, n_alt = -2
   Insn 9: point = 3, n_alt = -2
   Insn 8: point = 4, n_alt = 4
   Insn 7: point = 6, n_alt = 4
   Insn 6: point = 7, n_alt = 4
   Insn 5: point = 9, n_alt = 4
 r113: [2..7]
 r114: [3..4]
 r115: [0..1]
 r116: [8..9]
 r117: [5..6]
Compressing live ranges: from 10 to 8 - 80%
Ranges after the compression:
 r113: [2..5]
 r114: [2..3]
 r115: [0..1]
 r116: [6..7]
 r117: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=4, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=0, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 10
changing reg in insn 8
changing reg in insn 9
changing reg in insn 16
changing reg in insn 14
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


clrcursor

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,3u} r1={3d,1u} r2={4d,2u} r3={5d,3u} r11={1d,2u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 129{114d,15u,0e} in 12{11 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [116])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 3 r3 [orig:113 row.35_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [116]) [3 row+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 2 r2 [117])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 10 2 (set (reg:SI 2 r2 [orig:114 col.36_2 ] [114])
        (mem/c:SI (reg/f:SI 2 r2 [117]) [3 col+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 10 8 11 2 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:113 row.35_1 ] [113])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (const_int 127 [0x7f])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x3]  <function_decl 0x7fd417cfe700 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":211:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":212:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "vid.c":212:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":212:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 20 2 (use (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 20 17 0 NOTE_INSN_DELETED)

;; Function putcursor (putcursor, funcdef_no=11, decl_uid=4580, cgraph_uid=12, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) m {*arm_zero_extendqisi2}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 21: point = 0, n_alt = -1
   Insn 18: point = 0, n_alt = -2
   Insn 23: point = 1, n_alt = -1
   Insn 20: point = 1, n_alt = -1
   Insn 19: point = 2, n_alt = -1
   Insn 16: point = 2, n_alt = -1
   Insn 15: point = 2, n_alt = -2
   Insn 14: point = 3, n_alt = -2
   Insn 13: point = 4, n_alt = -2
   Insn 12: point = 5, n_alt = 1
   Insn 11: point = 6, n_alt = 4
   Insn 10: point = 8, n_alt = 4
   Insn 9: point = 9, n_alt = 4
   Insn 8: point = 11, n_alt = 4
   Insn 4: point = 12, n_alt = 8
   Insn 3: point = 13, n_alt = 1
   Insn 2: point = 15, n_alt = -2
 r113: [3..9]
 r114: [4..6]
 r115: [0..1]
 r116: [14..15]
 r117: [12..13]
 r118: [10..11]
 r119: [7..8]
 r120: [2..5]
Compressing live ranges: from 16 to 12 - 75%
Ranges after the compression:
 r113: [2..5]
 r114: [2..3]
 r115: [0..1]
 r116: [10..11]
 r117: [8..9]
 r118: [6..7]
 r119: [4..5]
 r120: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 14
changing reg in insn 11
changing reg in insn 13
changing reg in insn 20
changing reg in insn 18
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
deleting insn with uid = 3.
deleting insn with uid = 13.
deleting insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.


putcursor

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;;  ref usage 	r0={5d,4u} r1={3d,1u} r2={3d,1u} r3={7d,5u} r11={1d,4u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 134{115d,19u,0e} in 14{13 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 4 2 (set (reg:SI 3 r3 [116])
        (reg:SI 0 r0 [ c ])) "vid.c":215:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [117])) "vid.c":215:1 263 {*arm_movqi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 3 r3 [118])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 1 r1 [orig:113 row.37_1 ] [113])
        (mem/c:SI (reg/f:SI 3 r3 [118]) [3 row+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [119])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 2 r2 [orig:114 col.38_2 ] [114])
        (mem/c:SI (reg/f:SI 3 r3 [119]) [3 col+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":216:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 15 12 16 2 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [120])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 19 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":216:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 19 16 20 2 (clobber (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
(insn 20 19 23 2 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":217:1 -1
     (nil))
(insn 23 20 18 2 (const_int 0 [0]) "vid.c":217:1 311 {nop}
     (nil))
(insn 18 23 21 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":217:1 253 {*arm_movsi_insn}
     (nil))
(insn 21 18 24 2 (use (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 24 21 0 NOTE_INSN_DELETED)

;; Function kputc (kputc, funcdef_no=12, decl_uid=4583, cgraph_uid=13, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 3:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 4:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 30:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 32:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 46:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 47:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 54:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 62:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) rk  (1) mi {*arm_movsi_insn}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 67:  (0) r  (1) rk  (2) L {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 71:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 72:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 81:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 85:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 92:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 96:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 99:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 103:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 105:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 107:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 108:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 109:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 111:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 114:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 117:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 118:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 123:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 124:  (0) r  (1) m {*arm_zero_extendqisi2}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 5 6
EBB 7
EBB 8 9 10
EBB 11 12 13
EBB 14
EBB 16
EBB 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 133: point = 0, n_alt = -1
   Insn 130: point = 0, n_alt = -2
   Insn 132: point = 1, n_alt = -1
   Insn 131: point = 2, n_alt = -1
  BB 14
   Insn 141: point = 2, n_alt = -1
   Insn 126: point = 2, n_alt = -1
   Insn 125: point = 2, n_alt = -2
   Insn 124: point = 3, n_alt = 1
   Insn 123: point = 5, n_alt = 4
  BB 13
   Insn 120: point = 6, n_alt = -1
   Insn 119: point = 6, n_alt = 5
   Insn 118: point = 7, n_alt = 1
   Insn 117: point = 8, n_alt = 4
  BB 12
   Insn 115: point = 9, n_alt = -1
   Insn 114: point = 9, n_alt = 3
   Insn 111: point = 10, n_alt = 4
   Insn 110: point = 12, n_alt = 4
   Insn 109: point = 13, n_alt = 5
   Insn 108: point = 14, n_alt = 4
   Insn 107: point = 15, n_alt = 4
   Insn 106: point = 17, n_alt = 4
   Insn 105: point = 19, n_alt = 4
   Insn 104: point = 20, n_alt = 5
   Insn 103: point = 21, n_alt = 1
   Insn 102: point = 22, n_alt = 4
  BB 11
   Insn 100: point = 23, n_alt = -1
   Insn 99: point = 23, n_alt = 3
   Insn 96: point = 24, n_alt = 4
   Insn 95: point = 26, n_alt = 4
   Insn 94: point = 27, n_alt = 5
   Insn 93: point = 28, n_alt = 4
   Insn 92: point = 29, n_alt = 4
   Insn 91: point = 31, n_alt = 4
   Insn 90: point = 33, n_alt = 4
   Insn 89: point = 34, n_alt = -1
   Insn 88: point = 34, n_alt = -2
   Insn 87: point = 35, n_alt = -2
   Insn 86: point = 36, n_alt = -2
   Insn 85: point = 37, n_alt = 1
   Insn 84: point = 38, n_alt = 4
   Insn 83: point = 40, n_alt = 4
   Insn 82: point = 41, n_alt = 4
   Insn 81: point = 43, n_alt = 4
  BB 7
   Insn 137: point = 44, n_alt = -1
   Insn 49: point = 44, n_alt = -1
   Insn 48: point = 44, n_alt = -2
   Insn 47: point = 45, n_alt = 1
   Insn 46: point = 47, n_alt = 4
  BB 6
   Insn 43: point = 48, n_alt = -1
   Insn 42: point = 48, n_alt = 5
   Insn 41: point = 49, n_alt = 1
   Insn 40: point = 50, n_alt = 4
  BB 5
   Insn 38: point = 51, n_alt = -1
   Insn 37: point = 51, n_alt = 3
   Insn 34: point = 52, n_alt = 4
   Insn 33: point = 54, n_alt = 4
   Insn 32: point = 55, n_alt = 5
   Insn 31: point = 56, n_alt = 4
   Insn 30: point = 57, n_alt = 4
   Insn 29: point = 59, n_alt = 4
   Insn 28: point = 61, n_alt = 4
  BB 3
   Insn 135: point = 62, n_alt = -1
   Insn 19: point = 62, n_alt = -1
   Insn 18: point = 62, n_alt = -2
   Insn 17: point = 63, n_alt = 1
   Insn 16: point = 65, n_alt = 4
   Insn 15: point = 66, n_alt = 5
   Insn 14: point = 67, n_alt = 1
   Insn 13: point = 68, n_alt = 4
  BB 16
   Insn 145: point = 69, n_alt = -1
  BB 10
   Insn 139: point = 69, n_alt = -1
   Insn 74: point = 69, n_alt = -1
   Insn 73: point = 69, n_alt = -2
   Insn 72: point = 70, n_alt = 1
   Insn 71: point = 72, n_alt = 4
   Insn 70: point = 73, n_alt = -1
   Insn 69: point = 73, n_alt = 5
   Insn 68: point = 74, n_alt = 4
   Insn 67: point = 75, n_alt = 10
   Insn 66: point = 77, n_alt = 4
   Insn 65: point = 79, n_alt = 4
  BB 9
   Insn 63: point = 80, n_alt = -1
   Insn 62: point = 80, n_alt = 3
   Insn 59: point = 81, n_alt = 4
   Insn 58: point = 83, n_alt = 4
  BB 8
   Insn 56: point = 84, n_alt = -1
   Insn 55: point = 84, n_alt = 3
   Insn 54: point = 85, n_alt = 1
  BB 4
   Insn 26: point = 86, n_alt = -1
   Insn 25: point = 86, n_alt = 3
   Insn 24: point = 87, n_alt = 1
  BB 2
   Insn 11: point = 88, n_alt = -1
   Insn 10: point = 88, n_alt = 3
   Insn 9: point = 89, n_alt = 1
   Insn 8: point = 90, n_alt = -1
   Insn 4: point = 90, n_alt = 8
   Insn 3: point = 91, n_alt = 1
   Insn 2: point = 93, n_alt = -2
 r113: [62..63]
 r114: [58..59]
 r115: [55..57]
 r116: [51..52]
 r117: [44..45]
 r118: [80..81]
 r119: [76..77]
 r120: [73..75]
 r121: [69..70]
 r122: [35..41]
 r123: [36..38]
 r124: [30..31]
 r125: [27..29]
 r126: [23..24]
 r127: [16..17]
 r128: [13..15]
 r129: [9..10]
 r130: [2..3]
 r131: [0..1]
 r132: [92..93]
 r133: [90..91]
 r134: [88..89]
 r135: [66..68]
 r136: [66..67]
 r137: [64..65]
 r138: [86..87]
 r139: [60..61]
 r140: [55..56]
 r141: [53..54]
 r142: [48..50]
 r143: [48..49]
 r144: [46..47]
 r145: [84..85]
 r146: [82..83]
 r147: [78..79]
 r148: [73..74]
 r149: [71..72]
 r150: [42..43]
 r151: [39..40]
 r152: [34..37]
 r153: [32..33]
 r154: [27..28]
 r155: [25..26]
 r156: [20..22]
 r157: [20..21]
 r158: [18..19]
 r159: [13..14]
 r160: [11..12]
 r161: [6..8]
 r162: [6..7]
 r163: [4..5]
Compressing live ranges: from 94 to 82 - 87%
Ranges after the compression:
 r113: [52..53]
 r114: [48..49]
 r115: [46..47]
 r116: [42..43]
 r117: [36..37]
 r118: [68..69]
 r119: [64..65]
 r120: [62..63]
 r121: [58..59]
 r122: [30..33]
 r123: [30..31]
 r124: [26..27]
 r125: [24..25]
 r126: [20..21]
 r127: [14..15]
 r128: [12..13]
 r129: [8..9]
 r130: [2..3]
 r131: [0..1]
 r132: [80..81]
 r133: [78..79]
 r134: [76..77]
 r135: [56..57]
 r136: [56..57]
 r137: [54..55]
 r138: [74..75]
 r139: [50..51]
 r140: [46..47]
 r141: [44..45]
 r142: [40..41]
 r143: [40..41]
 r144: [38..39]
 r145: [72..73]
 r146: [70..71]
 r147: [66..67]
 r148: [62..63]
 r149: [60..61]
 r150: [34..35]
 r151: [32..33]
 r152: [30..31]
 r153: [28..29]
 r154: [24..25]
 r155: [22..23]
 r156: [18..19]
 r157: [18..19]
 r158: [16..17]
 r159: [12..13]
 r160: [10..11]
 r161: [6..7]
 r162: [6..7]
 r163: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 17
changing reg in insn 18
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 37
changing reg in insn 47
changing reg in insn 48
changing reg in insn 59
changing reg in insn 62
changing reg in insn 66
changing reg in insn 67
changing reg in insn 67
changing reg in insn 69
changing reg in insn 72
changing reg in insn 73
changing reg in insn 82
changing reg in insn 87
changing reg in insn 84
changing reg in insn 86
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 94
changing reg in insn 96
changing reg in insn 99
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 109
changing reg in insn 111
changing reg in insn 114
changing reg in insn 124
changing reg in insn 125
changing reg in insn 132
changing reg in insn 130
changing reg in insn 2
changing reg in insn 3
changing reg in insn 4
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 42
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 54
changing reg in insn 55
changing reg in insn 58
changing reg in insn 59
changing reg in insn 65
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 88
changing reg in insn 90
changing reg in insn 91
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 102
changing reg in insn 104
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
changing reg in insn 106
changing reg in insn 108
changing reg in insn 109
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 119
changing reg in insn 118
changing reg in insn 119
changing reg in insn 123
changing reg in insn 124
deleting insn with uid = 3.
deleting insn with uid = 86.
deleting insn with uid = 87.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 120.
verify found no changes in insn with uid = 126.


kputc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,8u} r1={11d,1u} r2={19d,9u} r3={50d,40u} r11={1d,21u} r12={18d} r13={1d,25u} r14={10d} r15={9d} r16={9d} r17={9d} r18={9d} r19={9d} r20={9d} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={9d} r38={9d} r39={9d} r40={9d} r41={9d} r42={9d} r43={9d} r44={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} r53={9d} r54={9d} r55={9d} r56={9d} r57={9d} r58={9d} r59={9d} r60={9d} r61={9d} r62={9d} r63={9d} r64={9d} r65={9d} r66={9d} r67={9d} r68={9d} r69={9d} r70={9d} r71={9d} r72={9d} r73={9d} r74={9d} r75={9d} r76={9d} r77={9d} r78={9d} r79={9d} r80={9d} r81={9d} r82={9d} r83={9d} r84={9d} r85={9d} r86={9d} r87={9d} r88={9d} r89={9d} r90={9d} r91={9d} r92={9d} r93={9d} r94={9d} r95={9d} r96={9d} r97={9d} r98={9d} r99={9d} r100={16d,7u} r101={9d} r102={1d,1u} r104={9d} r105={9d} r106={9d} 
;;    total ref usage 1057{945d,112u,0e} in 95{86 regular + 9 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 132 133 134
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 4 2 (set (reg:SI 3 r3 [132])
        (reg:SI 0 r0 [ c ])) "vid.c":220:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 2 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [133])) "vid.c":220:1 263 {*arm_movqi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 9 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrcursor") [flags 0x3]  <function_decl 0x7fd417cfeb00 clrcursor>) [0 clrcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":221:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 3 r3 [134])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":222:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [134])
            (const_int 13 [0xd]))) "vid.c":222:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "vid.c":222:6 273 {arm_cond_branch}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 135 136 137
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (mem/c:SI (reg/f:SI 3 r3 [135]) [3 col+0 S4 A32])
        (reg:SI 2 r2 [136])) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":225:5 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [orig:113 cursor.39_1 ] [113])
        (zero_extend:SI (mem/c:QI (reg/f:SI 3 r3 [137]) [0 cursor+0 S1 A8]))) "vid.c":225:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:113 cursor.39_1 ] [113])) "vid.c":225:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 135 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":225:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 135 19 136 3 (set (pc)
        (label_ref 127)) "vid.c":226:5 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 136 135 22)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 138
(code_label 22 136 23 4 59 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 3 r3 [138])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":228:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [138])
            (const_int 10 [0xa]))) "vid.c":228:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "vid.c":228:6 273 {arm_cond_branch}
     (nil)
 -> 52)
;;  succ:       5 (FALLTHRU)
;;              8
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 115 116 139 140 141
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 3 r3 [139])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 3 r3 [orig:114 row.40_2 ] [114])
        (mem/c:SI (reg/f:SI 3 r3 [139]) [3 row+0 S4 A32])) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 5 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (plus:SI (reg:SI 3 r3 [orig:114 row.40_2 ] [114])
            (const_int 1 [0x1]))) "vid.c":229:8 7 {*arm_addsi3}
     (nil))
(insn 31 30 32 5 (set (reg/f:SI 2 r2 [140])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 5 (set (mem/c:SI (reg/f:SI 2 r2 [140]) [3 row+0 S4 A32])
        (reg:SI 3 r3 [orig:115 _3 ] [115])) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 5 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":230:12 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 37 5 (set (reg:SI 3 r3 [orig:116 row.41_4 ] [116])
        (mem/c:SI (reg/f:SI 3 r3 [141]) [3 row+0 S4 A32])) "vid.c":230:12 253 {*arm_movsi_insn}
     (nil))
(insn 37 34 38 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 row.41_4 ] [116])
            (const_int 24 [0x18]))) "vid.c":230:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "vid.c":230:8 273 {arm_cond_branch}
     (nil)
 -> 44)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 142 143
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (reg:SI 2 r2 [143])
        (const_int 24 [0x18])) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 6 (set (mem/c:SI (reg/f:SI 3 r3 [142]) [3 row+0 S4 A32])
        (reg:SI 2 r2 [143])) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 44 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":232:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 144
(code_label 44 43 45 7 62 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":235:5 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 7 (set (reg:SI 3 r3 [orig:117 cursor.42_5 ] [117])
        (zero_extend:SI (mem/c:QI (reg/f:SI 3 r3 [144]) [0 cursor+0 S1 A8]))) "vid.c":235:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 48 47 49 7 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:117 cursor.42_5 ] [117])) "vid.c":235:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 49 48 137 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":235:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 137 49 138 7 (set (pc)
        (label_ref 127)) "vid.c":236:5 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 138 137 52)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 145
(code_label 52 138 53 8 61 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:SI 3 r3 [145])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":238:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 55 54 56 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [145])
            (const_int 8 [0x8]))) "vid.c":238:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 56 55 57 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "vid.c":238:6 273 {arm_cond_branch}
     (nil)
 -> 79)
;;  succ:       9 (FALLTHRU)
;;              11
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 146
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 62 9 (set (reg:SI 3 r3 [orig:118 col.43_6 ] [118])
        (mem/c:SI (reg/f:SI 3 r3 [146]) [3 col+0 S4 A32])) "vid.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 62 59 63 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:118 col.43_6 ] [118])
            (const_int 0 [0]))) "vid.c":239:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 144)
            (pc))) "vid.c":239:8 273 {arm_cond_branch}
     (nil)
 -> 144)
;;  succ:       10 (FALLTHRU)
;;              16
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 119 120 121 147 148 149
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 10 (set (reg:SI 3 r3 [orig:119 col.44_7 ] [119])
        (mem/c:SI (reg/f:SI 3 r3 [147]) [3 col+0 S4 A32])) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 10 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (plus:SI (reg:SI 3 r3 [orig:119 col.44_7 ] [119])
            (const_int -1 [0xffffffffffffffff]))) "vid.c":240:10 7 {*arm_addsi3}
     (nil))
(insn 68 67 69 10 (set (reg/f:SI 2 r2 [148])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (mem/c:SI (reg/f:SI 2 r2 [148]) [3 col+0 S4 A32])
        (reg:SI 3 r3 [orig:120 _8 ] [120])) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(call_insn 70 69 71 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("erasechar") [flags 0x3]  <function_decl 0x7fd417cfe900 erasechar>) [0 erasechar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":241:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 71 70 72 10 (set (reg/f:SI 3 r3 [149])
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":242:7 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 10 (set (reg:SI 3 r3 [orig:121 cursor.45_9 ] [121])
        (zero_extend:SI (mem/c:QI (reg/f:SI 3 r3 [149]) [0 cursor+0 S1 A8]))) "vid.c":242:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 73 72 74 10 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:121 cursor.45_9 ] [121])) "vid.c":242:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 74 73 139 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":242:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 139 74 140 10 (set (pc)
        (label_ref:SI 144)) "vid.c":244:5 284 {*arm_jump}
     (nil)
 -> 144)
;;  succ:       16 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 140 139 79)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 123 124 125 126 150 151 152 153 154 155
(code_label 79 140 80 11 63 (nil) [1 uses])
(note 80 79 81 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 11 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 82 81 83 11 (set (reg:SI 1 r1 [orig:122 row.46_10 ] [122])
        (mem/c:SI (reg/f:SI 3 r3 [150]) [3 row+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 11 (set (reg/f:SI 3 r3 [151])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 2 r2 [orig:123 col.47_11 ] [123])
        (mem/c:SI (reg/f:SI 3 r3 [151]) [3 col+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 88 11 (set (reg:SI 3 r3 [152])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":247:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 88 85 89 11 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [152])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 89 88 90 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":247:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 90 89 91 11 (set (reg/f:SI 3 r3 [153])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 11 (set (reg:SI 3 r3 [orig:124 col.48_12 ] [124])
        (mem/c:SI (reg/f:SI 3 r3 [153]) [3 col+0 S4 A32])) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 11 (set (reg:SI 3 r3 [orig:125 _13 ] [125])
        (plus:SI (reg:SI 3 r3 [orig:124 col.48_12 ] [124])
            (const_int 1 [0x1]))) "vid.c":248:6 7 {*arm_addsi3}
     (nil))
(insn 93 92 94 11 (set (reg/f:SI 2 r2 [154])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 11 (set (mem/c:SI (reg/f:SI 2 r2 [154]) [3 col+0 S4 A32])
        (reg:SI 3 r3 [orig:125 _13 ] [125])) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 11 (set (reg/f:SI 3 r3 [155])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":249:10 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 99 11 (set (reg:SI 3 r3 [orig:126 col.49_14 ] [126])
        (mem/c:SI (reg/f:SI 3 r3 [155]) [3 col+0 S4 A32])) "vid.c":249:10 253 {*arm_movsi_insn}
     (nil))
(insn 99 96 100 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:126 col.49_14 ] [126])
            (const_int 79 [0x4f]))) "vid.c":249:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 100 99 101 11 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":249:6 273 {arm_cond_branch}
     (nil)
 -> 121)
;;  succ:       12 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (RTL, MODIFIED)
;;  pred:       11 (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 128 129 156 157 158 159 160
(note 101 100 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 12 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 12 (set (reg:SI 2 r2 [157])
        (const_int 0 [0])) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 12 (set (mem/c:SI (reg/f:SI 3 r3 [156]) [3 col+0 S4 A32])
        (reg:SI 2 r2 [157])) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 105 104 106 12 (set (reg/f:SI 3 r3 [158])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 12 (set (reg:SI 3 r3 [orig:127 row.50_15 ] [127])
        (mem/c:SI (reg/f:SI 3 r3 [158]) [3 row+0 S4 A32])) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 12 (set (reg:SI 3 r3 [orig:128 _16 ] [128])
        (plus:SI (reg:SI 3 r3 [orig:127 row.50_15 ] [127])
            (const_int 1 [0x1]))) "vid.c":251:8 7 {*arm_addsi3}
     (nil))
(insn 108 107 109 12 (set (reg/f:SI 2 r2 [159])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 12 (set (mem/c:SI (reg/f:SI 2 r2 [159]) [3 row+0 S4 A32])
        (reg:SI 3 r3 [orig:128 _16 ] [128])) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 12 (set (reg/f:SI 3 r3 [160])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":252:13 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 114 12 (set (reg:SI 3 r3 [orig:129 row.51_17 ] [129])
        (mem/c:SI (reg/f:SI 3 r3 [160]) [3 row+0 S4 A32])) "vid.c":252:13 253 {*arm_movsi_insn}
     (nil))
(insn 114 111 115 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:129 row.51_17 ] [129])
            (const_int 24 [0x18]))) "vid.c":252:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 115 114 116 12 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":252:8 273 {arm_cond_branch}
     (nil)
 -> 121)
;;  succ:       13 (FALLTHRU)
;;              14
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 161 162
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg/f:SI 3 r3 [161])
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 13 (set (reg:SI 2 r2 [162])
        (const_int 24 [0x18])) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 119 118 120 13 (set (mem/c:SI (reg/f:SI 3 r3 [161]) [3 row+0 S4 A32])
        (reg:SI 2 r2 [162])) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(call_insn 120 119 121 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":254:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       14 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 16, flags: (RTL, MODIFIED)
;;  pred:       11
;;              12
;;              13 (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 130 163
(code_label 121 120 122 14 65 (nil) [2 uses])
(note 122 121 123 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 14 (set (reg/f:SI 3 r3 [163])
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":257:3 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 14 (set (reg:SI 3 r3 [orig:130 cursor.52_18 ] [130])
        (zero_extend:SI (mem/c:QI (reg/f:SI 3 r3 [163]) [0 cursor+0 S1 A8]))) "vid.c":257:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 125 124 126 14 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:130 cursor.52_18 ] [130])) "vid.c":257:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 126 125 141 14 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":257:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 141 126 142 14 (set (pc)
        (label_ref 127)) 284 {*arm_jump}
     (nil)
 -> 127)
;;  succ:       15
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 142 141 144)
;; basic block 16, loop depth 0, maybe hot
;;  prev block 14, next block 15, flags: (RTL, MODIFIED)
;;  pred:       9
;;              10 [always] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 144 142 143 16 66 (nil) [2 uses])
(note 143 144 145 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 145 143 127 16 (const_int 0 [0]) "vid.c":244:5 311 {nop}
     (nil))
;;  succ:       15 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 16, next block 1, flags: (RTL, MODIFIED)
;;  pred:       16 [always]  (FALLTHRU)
;;              3 [always] 
;;              7 [always] 
;;              14
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 131
(code_label 127 145 128 15 60 (nil) [3 uses])
(note 128 127 131 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 131 128 132 15 (clobber (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
(insn 132 131 130 15 (clobber (reg:SI 3 r3 [orig:131 <retval> ] [131])) "vid.c":259:1 -1
     (nil))
(insn 130 132 133 15 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:131 <retval> ] [131])) "vid.c":259:1 253 {*arm_movsi_insn}
     (nil))
(insn 133 130 146 15 (use (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 146 133 0 NOTE_INSN_DELETED)

;; Function kprints (kprints, funcdef_no=13, decl_uid=4586, cgraph_uid=14, symbol_order=19)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 14:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -1
   Insn 27: point = 1, n_alt = -1
   Insn 26: point = 2, n_alt = -1
  BB 4
   Insn 22: point = 2, n_alt = -1
   Insn 21: point = 2, n_alt = 3
   Insn 19: point = 3, n_alt = 1
   Insn 18: point = 5, n_alt = 4
  BB 2
   Insn 31: point = 6, n_alt = -1
   Insn 2: point = 6, n_alt = 5
  BB 3
   Insn 15: point = 6, n_alt = 5
   Insn 14: point = 7, n_alt = 4
   Insn 13: point = 9, n_alt = 4
   Insn 12: point = 10, n_alt = -1
   Insn 11: point = 10, n_alt = -2
   Insn 10: point = 11, n_alt = 1
   Insn 9: point = 13, n_alt = 4
 r113: [10..11]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [6..7]
 r118: [8..9]
 r119: [4..5]
Compressing live ranges: from 14 to 14 - 100%
Ranges after the compression:
 r113: [10..11]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [6..7]
 r118: [8..9]
 r119: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 21
changing reg in insn 27
changing reg in insn 25
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


kprints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={9d,7u} r11={1d,10u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 145{116d,29u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":262:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 31 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 31 3 32 2 (set (pc)
        (label_ref 16)) "vid.c":263:8 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 32 31 20)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118
(code_label 20 32 8 3 71 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":264:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [116]) [0 *s_3+0 S1 A8]))) "vid.c":264:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:113 _1 ] [113])) "vid.c":264:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":264:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":265:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [117])
        (plus:SI (reg:SI 3 r3 [118])
            (const_int 1 [0x1]))) "vid.c":265:6 7 {*arm_addsi3}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 3 r3 [117])) "vid.c":265:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 119
(code_label 16 15 17 4 70 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":263:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [119]) [0 *s_3+0 S1 A8]))) "vid.c":263:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:114 _2 ] [114])
            (const_int 0 [0]))) "vid.c":263:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":263:9 273 {arm_cond_branch}
     (nil)
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
(insn 27 26 30 5 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":267:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":267:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":267:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 33 5 (use (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 33 28 0 NOTE_INSN_DELETED)

;; Function prints (prints, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=20)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 14:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -1
   Insn 27: point = 1, n_alt = -1
   Insn 26: point = 2, n_alt = -1
  BB 4
   Insn 22: point = 2, n_alt = -1
   Insn 21: point = 2, n_alt = 3
   Insn 19: point = 3, n_alt = 1
   Insn 18: point = 5, n_alt = 4
  BB 2
   Insn 31: point = 6, n_alt = -1
   Insn 2: point = 6, n_alt = 5
  BB 3
   Insn 15: point = 6, n_alt = 5
   Insn 14: point = 7, n_alt = 4
   Insn 13: point = 9, n_alt = 4
   Insn 12: point = 10, n_alt = -1
   Insn 11: point = 10, n_alt = -2
   Insn 10: point = 11, n_alt = 1
   Insn 9: point = 13, n_alt = 4
 r113: [10..11]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [6..7]
 r118: [8..9]
 r119: [4..5]
Compressing live ranges: from 14 to 14 - 100%
Ranges after the compression:
 r113: [10..11]
 r114: [2..3]
 r115: [0..1]
 r116: [12..13]
 r117: [6..7]
 r118: [8..9]
 r119: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 19
changing reg in insn 21
changing reg in insn 27
changing reg in insn 25
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.


prints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={2d} r2={2d} r3={9d,7u} r11={1d,10u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 145{116d,29u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":269:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 31 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 31 3 32 2 (set (pc)
        (label_ref 16)) "vid.c":270:8 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 32 31 20)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 116 117 118
(code_label 20 32 8 3 74 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 3 r3 [116])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":271:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [116]) [0 *s_3+0 S1 A8]))) "vid.c":271:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:113 _1 ] [113])) "vid.c":271:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":271:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":272:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [117])
        (plus:SI (reg:SI 3 r3 [118])
            (const_int 1 [0x1]))) "vid.c":272:6 7 {*arm_addsi3}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])
        (reg:SI 3 r3 [117])) "vid.c":272:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114 119
(code_label 16 15 17 4 73 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 3 r3 [119])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 s+0 S4 A32])) "vid.c":270:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [119]) [0 *s_3+0 S1 A8]))) "vid.c":270:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:114 _2 ] [114])
            (const_int 0 [0]))) "vid.c":270:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":270:9 273 {arm_cond_branch}
     (nil)
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
(insn 27 26 30 5 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":274:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":274:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "vid.c":274:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 33 5 (use (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 33 28 0 NOTE_INSN_DELETED)

;; Function krpx (krpx, funcdef_no=15, decl_uid=4598, cgraph_uid=16, symbol_order=21)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 17:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 19:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) m {*arm_zero_extendqisi2}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 34: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 33: point = 1, n_alt = -1
   Insn 32: point = 2, n_alt = -1
  BB 3
   Insn 36: point = 2, n_alt = -1
   Insn 27: point = 2, n_alt = -1
   Insn 26: point = 2, n_alt = -2
   Insn 25: point = 3, n_alt = 1
   Insn 24: point = 4, n_alt = -1
   Insn 23: point = 4, n_alt = -2
   Insn 22: point = 5, n_alt = 2
   Insn 21: point = 7, n_alt = 4
   Insn 20: point = 8, n_alt = 8
   Insn 19: point = 9, n_alt = 7
   Insn 18: point = 11, n_alt = 4
   Insn 17: point = 13, n_alt = 0
   Insn 16: point = 15, n_alt = 4
   Insn 15: point = 16, n_alt = 4
   Insn 14: point = 18, n_alt = 4
  BB 5
   Insn 40: point = 19, n_alt = -1
  BB 2
   Insn 8: point = 19, n_alt = -1
   Insn 7: point = 19, n_alt = 3
   Insn 6: point = 20, n_alt = 4
   Insn 2: point = 21, n_alt = 5
 r113: [12..16]
 r114: [12..13]
 r115: [10..11]
 r116: [4..5]
 r117: [0..1]
 r118: [19..20]
 r119: [17..18]
 r120: [14..15]
 r121: [8..9]
 r122: [6..7]
 r123: [2..3]
Compressing live ranges: from 21 to 20 - 95%
Ranges after the compression:
 r113: [12..15]
 r114: [12..13]
 r115: [10..11]
 r116: [4..5]
 r117: [0..1]
 r118: [18..19]
 r119: [16..17]
 r120: [14..15]
 r121: [8..9]
 r122: [6..7]
 r123: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 33
changing reg in insn 31
changing reg in insn 6
changing reg in insn 7
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 27.


krpx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={3d} r2={4d,1u} r3={13d,10u,1e} r11={1d,11u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 255{218d,36u,1e} in 24{22 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":277:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 3 r3 [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":279:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [118])
            (const_int 0 [0]))) "vid.c":279:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 39)
            (pc))) "vid.c":279:6 273 {arm_cond_branch}
     (nil)
 -> 39)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 119 120 121 122 123
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 3 r3 [119])
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":281:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 2 r2 [orig:113 tab.53_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [119]) [5 tab+0 S4 A32])) "vid.c":281:10 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 3 r3 [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":281:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (and:SI (reg:SI 3 r3 [120])
            (const_int 15 [0xf]))) "vid.c":281:13 90 {*arm_andsi3_insn}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (plus:SI (reg/f:SI 2 r2 [orig:113 tab.53_1 ] [113])
            (reg:SI 3 r3 [orig:114 _2 ] [114]))) "vid.c":281:10 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 3 (set (reg:QI 3 r3 [121])
        (mem:QI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [0 *_3+0 S1 A8])) "vid.c":281:5 263 {*arm_movqi_insn}
     (nil))
(insn 20 19 21 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [121])) "vid.c":281:5 263 {*arm_movqi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 3 r3 [122])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":282:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (lshiftrt:SI (reg:SI 3 r3 [122])
            (const_int 4 [0x4]))) "vid.c":282:3 147 {*arm_shiftsi3}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 3 r3 [122])
            (const_int 16 [0x10]))
        (nil)))
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "vid.c":282:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":282:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 3 r3 [123])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":283:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [123])) "vid.c":283:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":283:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 36 27 37 3 (set (pc)
        (label_ref 28)) 284 {*arm_jump}
     (nil)
 -> 28)
;;  succ:       4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 37 36 39)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 39 37 38 5 78 (nil) [1 uses])
(note 38 39 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 28 5 (const_int 0 [0]) "vid.c":280:6 311 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;;              3
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(code_label 28 40 29 4 77 (nil) [1 uses])
(note 29 28 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 29 33 4 (clobber (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
(insn 33 32 31 4 (clobber (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":284:1 -1
     (nil))
(insn 31 33 34 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":284:1 253 {*arm_movsi_insn}
     (nil))
(insn 34 31 41 4 (use (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 41 34 0 NOTE_INSN_DELETED)

;; Function kprintx (kprintx, funcdef_no=16, decl_uid=4602, cgraph_uid=17, symbol_order=22)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) I {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 32: point = 1, n_alt = -1
   Insn 29: point = 1, n_alt = -1
   Insn 28: point = 2, n_alt = -1
   Insn 25: point = 2, n_alt = -1
   Insn 24: point = 2, n_alt = 1
  BB 3
   Insn 33: point = 2, n_alt = -1
   Insn 15: point = 2, n_alt = -1
   Insn 14: point = 2, n_alt = 1
  BB 4
   Insn 21: point = 2, n_alt = -1
   Insn 20: point = 2, n_alt = 4
  BB 2
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = 3
   Insn 10: point = 3, n_alt = 4
   Insn 9: point = 4, n_alt = -1
   Insn 8: point = 4, n_alt = 1
   Insn 7: point = 4, n_alt = -1
   Insn 6: point = 4, n_alt = 1
   Insn 2: point = 4, n_alt = 5
 r113: [0..1]
 r114: [2..3]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 27
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 25.


kprintx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={13d,8u} r1={6d} r2={6d} r3={8d,2u} r11={1d,8u} r12={10d} r13={1d,10u} r14={6d} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={6d,1u} r101={5d} r102={1d,1u} r104={5d} r105={5d} r106={5d} 
;;    total ref usage 533{503d,30u,0e} in 20{15 regular + 5 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":287:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":288:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (const_int 120 [0x78])) "vid.c":288:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":289:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 0 [0]))) "vid.c":289:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "vid.c":289:6 273 {arm_cond_branch}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":290:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 33 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":290:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 33 15 34 3 (set (pc)
        (label_ref 22)) 284 {*arm_jump}
     (nil)
 -> 22)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 34 33 18)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 18 34 19 4 82 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":292:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":292:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 22 21 23 5 83 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":293:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 25 24 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":293:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 28 25 29 5 (clobber (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
(insn 29 28 32 5 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":294:1 -1
     (nil))
(insn 32 29 27 5 (const_int 0 [0]) "vid.c":294:1 311 {nop}
     (nil))
(insn 27 32 30 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":294:1 253 {*arm_movsi_insn}
     (nil))
(insn 30 27 35 5 (use (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 35 30 0 NOTE_INSN_DELETED)

;; Function krpu (krpu, funcdef_no=17, decl_uid=4605, cgraph_uid=18, symbol_order=23)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 18
	 Choosing alt 1 in insn 18:  (0) &r  (1) 0  (2) r  (3) &r {*umull_high}
      Creating newreg=133 from oldreg=121, assigning class GENERAL_REGS to r133
   18: {r133:SI=trunc(zero_extend(r133:SI)*zero_extend(r120:SI) 0>>0x20);clobber r130:SI;}
      REG_DEAD r122:SI
      REG_UNUSED r130:SI
    Inserting insn reload before:
   54: r133:SI=r122:SI
    Inserting insn reload after:
   55: r121:SI=r133:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 19:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 23:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 25:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            alt=1,overall=6,losers=1 -- refuse
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) &r  (1) 0  (2) r  (3) &r {*umull_high}
      Creating newreg=134 from oldreg=127, assigning class GENERAL_REGS to r134
   31: {r134:SI=trunc(zero_extend(r134:SI)*zero_extend(r128:SI) 0>>0x20);clobber r131:SI;}
      REG_DEAD r128:SI
      REG_DEAD r126:SI
      REG_UNUSED r131:SI
    Inserting insn reload before:
   56: r134:SI=r126:SI
    Inserting insn reload after:
   57: r127:SI=r134:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) m {*arm_zero_extendqisi2}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 5
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 44: point = 0, n_alt = -1
   Insn 41: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = -1
   Insn 42: point = 2, n_alt = -1
  BB 3
   Insn 46: point = 2, n_alt = -1
   Insn 37: point = 2, n_alt = -1
   Insn 36: point = 2, n_alt = -2
   Insn 35: point = 3, n_alt = 1
   Insn 34: point = 4, n_alt = -1
   Insn 33: point = 4, n_alt = -2
   Insn 32: point = 5, n_alt = 2
   Insn 57: point = 7, n_alt = -2
	Hard reg 3 is preferable by r134 with profit 1000
   Insn 31: point = 9, n_alt = 1
   Insn 56: point = 11, n_alt = -2
	Hard reg 3 is preferable by r134 with profit 2000
   Insn 30: point = 13, n_alt = 4
   Insn 29: point = 14, n_alt = 4
   Insn 28: point = 15, n_alt = 8
   Insn 27: point = 16, n_alt = 7
   Insn 26: point = 18, n_alt = 4
   Insn 25: point = 20, n_alt = 6
   Insn 24: point = 22, n_alt = -2
   Insn 23: point = 24, n_alt = 2
   Insn 22: point = 26, n_alt = 4
   Insn 21: point = 28, n_alt = 2
   Insn 20: point = 29, n_alt = -2
   Insn 19: point = 30, n_alt = 2
   Insn 55: point = 32, n_alt = -2
	Hard reg 3 is preferable by r133 with profit 1000
   Insn 18: point = 34, n_alt = 1
   Insn 54: point = 36, n_alt = -2
	Hard reg 3 is preferable by r133 with profit 2000
   Insn 17: point = 38, n_alt = 4
   Insn 16: point = 39, n_alt = 4
   Insn 15: point = 40, n_alt = 4
   Insn 14: point = 42, n_alt = 4
  BB 5
   Insn 50: point = 43, n_alt = -1
  BB 2
   Insn 8: point = 43, n_alt = -1
   Insn 7: point = 43, n_alt = 3
   Insn 6: point = 44, n_alt = 4
   Insn 2: point = 45, n_alt = 5
 r113: [19..40]
 r114: [27..30] [19..20]
 r115: [17..18]
 r116: [4..5]
 r117: [0..1]
 r118: [43..44]
 r119: [41..42]
 r120: [21..39]
 r121: [31..32]
 r122: [37..38]
 r123: [25..29] [21..22]
 r124: [23..24]
 r125: [15..16]
 r126: [12..14]
 r127: [6..7]
 r128: [10..13]
 r129: [2..3]
 r130: [34..35]
 r131: [9..10]
 r133: [33..36]
 r134: [8..11]
Compressing live ranges: from 45 to 35 - 77%
Ranges after the compression:
 r113: [17..30]
 r114: [23..24] [17..18]
 r115: [15..16]
 r116: [4..5]
 r117: [0..1]
 r118: [33..34]
 r119: [31..32]
 r120: [19..30]
 r121: [25..26]
 r122: [29..30]
 r123: [23..24] [19..20]
 r124: [21..22]
 r125: [13..14]
 r126: [11..12]
 r127: [6..7]
 r128: [9..12]
 r129: [2..3]
 r130: [27..28]
 r131: [8..9]
 r133: [27..28]
 r134: [8..10]

********** Assignment #1: **********

	 Assigning to 133 (cl=GENERAL_REGS, orig=121, freq=3000, tfirst=133, tfreq=3000)...
	   Assign 3 to reload r133 (freq=3000)
	 Assigning to 134 (cl=GENERAL_REGS, orig=127, freq=3000, tfirst=134, tfreq=3000)...
	   Assign 3 to reload r134 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 26
changing reg in insn 25
changing reg in insn 19
changing reg in insn 26
changing reg in insn 22
changing reg in insn 20
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 32
changing reg in insn 33
changing reg in insn 43
changing reg in insn 41
changing reg in insn 6
changing reg in insn 7
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 25
changing reg in insn 19
changing reg in insn 19
changing reg in insn 17
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 25
changing reg in insn 23
changing reg in insn 22
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 18
changing reg in insn 31
deleting insn with uid = 54.
deleting insn with uid = 55.
deleting insn with uid = 24.
deleting insn with uid = 56.
deleting insn with uid = 57.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 37.


krpu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={8d,6u} r1={5d,2u,1e} r2={7d,4u,1e} r3={18d,15u} r11={1d,11u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 278{229d,47u,2e} in 33{31 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":297:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 3 r3 [118])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":299:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [118])
            (const_int 0 [0]))) "vid.c":299:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 13 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 49)
            (pc))) "vid.c":299:6 273 {arm_cond_branch}
     (nil)
 -> 49)
;;  succ:       5
;;              3 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 119 120 121 122 123 124 125 126 127 128 129 130 131
(note 13 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 3 r3 [119])
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":301:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 0 r0 [orig:113 tab.54_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [119]) [5 tab+0 S4 A32])) "vid.c":301:10 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 1 r1 [120])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [122])
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:SI 3 r3 [121])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 3 r3 [121]))
                            (zero_extend:DI (reg:SI 1 r1 [120])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 2 r2 [130]))
        ]) "vid.c":301:13 72 {*umull_high}
     (nil))
(insn 19 18 20 3 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (lshiftrt:SI (reg:SI 3 r3 [121])
            (const_int 3 [0x3]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 1 r1 [120])
            (const_int 10 [0xa]))
        (nil)))
(insn 20 19 21 3 (set (reg:SI 3 r3 [123])
        (reg:SI 2 r2 [orig:114 _2 ] [114])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 3 r3 [123])
        (ashift:SI (reg:SI 3 r3 [123])
            (const_int 2 [0x2]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (nil))
(insn 22 21 23 3 (set (reg:SI 3 r3 [123])
        (plus:SI (reg:SI 3 r3 [123])
            (reg:SI 2 r2 [orig:114 _2 ] [114]))) "vid.c":301:13 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [orig:114 _2 ] [114])
            (const_int 5 [0x5]))
        (nil)))
(insn 23 22 25 3 (set (reg:SI 3 r3 [124])
        (ashift:SI (reg:SI 3 r3 [123])
            (const_int 1 [0x1]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (nil))
(insn 25 23 26 3 (set (reg:SI 2 r2 [orig:114 _2 ] [114])
        (minus:SI (reg:SI 1 r1 [120])
            (reg:SI 3 r3 [123]))) "vid.c":301:13 45 {*arm_subsi3_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (plus:SI (reg/f:SI 0 r0 [orig:113 tab.54_1 ] [113])
            (reg:SI 2 r2 [orig:114 _2 ] [114]))) "vid.c":301:10 7 {*arm_addsi3}
     (nil))
(insn 27 26 28 3 (set (reg:QI 3 r3 [125])
        (mem:QI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [0 *_3+0 S1 A8])) "vid.c":301:5 263 {*arm_movqi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [125])) "vid.c":301:5 263 {*arm_movqi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:SI 3 r3 [126])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [3 x+0 S4 A32])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 2 r2 [128])
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 3 r3 [127])
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 3 r3 [127]))
                            (zero_extend:DI (reg:SI 2 r2 [128])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [131]))
        ]) "vid.c":302:3 72 {*umull_high}
     (nil))
(insn 32 31 33 3 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (lshiftrt:SI (reg:SI 3 r3 [127])
            (const_int 3 [0x3]))) "vid.c":302:3 147 {*arm_shiftsi3}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":302:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 35 34 36 3 (set (reg:SI 3 r3 [129])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":303:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [129])) "vid.c":303:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 37 36 46 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":303:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 46 37 47 3 (set (pc)
        (label_ref 38)) 284 {*arm_jump}
     (nil)
 -> 38)
;;  succ:       4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 47 46 49)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 3, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(code_label 49 47 48 5 87 (nil) [1 uses])
(note 48 49 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 48 38 5 (const_int 0 [0]) "vid.c":300:6 311 {nop}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;;              3
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117
(code_label 38 50 39 4 86 (nil) [1 uses])
(note 39 38 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 39 43 4 (clobber (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
(insn 43 42 41 4 (clobber (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":304:1 -1
     (nil))
(insn 41 43 44 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:117 <retval> ] [117])) "vid.c":304:1 253 {*arm_movsi_insn}
     (nil))
(insn 44 41 53 4 (use (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 53 44 0 NOTE_INSN_DELETED)

;; Function kprintu (kprintu, funcdef_no=18, decl_uid=4609, cgraph_uid=19, symbol_order=24)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 10:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) I {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 26: point = 0, n_alt = -1
   Insn 23: point = 0, n_alt = -2
   Insn 28: point = 1, n_alt = -1
   Insn 25: point = 1, n_alt = -1
   Insn 24: point = 2, n_alt = -1
   Insn 21: point = 2, n_alt = -1
   Insn 20: point = 2, n_alt = 1
  BB 3
   Insn 29: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = -1
   Insn 10: point = 2, n_alt = 1
  BB 4
   Insn 17: point = 2, n_alt = -1
   Insn 16: point = 2, n_alt = 4
  BB 2
   Insn 8: point = 2, n_alt = -1
   Insn 7: point = 2, n_alt = 3
   Insn 6: point = 3, n_alt = 4
   Insn 2: point = 4, n_alt = 5
 r113: [0..1]
 r114: [2..3]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 25
changing reg in insn 23
changing reg in insn 6
changing reg in insn 7
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 21.


kprintu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={4d} r2={4d} r3={6d,2u} r11={1d,8u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,1u} r104={3d} r105={3d} r106={3d} 
;;    total ref usage 333{307d,26u,0e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":307:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":308:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 0 [0]))) "vid.c":308:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "vid.c":308:6 273 {arm_cond_branch}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":309:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 11 10 29 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":309:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 29 11 30 3 (set (pc)
        (label_ref 18)) 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 30 29 14)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 14 30 15 4 91 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":312:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":312:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 18 17 19 5 92 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":313:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 24 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":313:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 24 21 25 5 (clobber (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
(insn 25 24 28 5 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":314:1 -1
     (nil))
(insn 28 25 23 5 (const_int 0 [0]) "vid.c":314:1 311 {nop}
     (nil))
(insn 23 28 26 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "vid.c":314:1 253 {*arm_movsi_insn}
     (nil))
(insn 26 23 31 5 (use (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 31 26 0 NOTE_INSN_DELETED)

;; Function kprinti (kprinti, funcdef_no=19, decl_uid=4612, cgraph_uid=20, symbol_order=25)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) r {*arm_negsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -1
   Insn 27: point = 1, n_alt = -1
   Insn 26: point = 2, n_alt = -1
   Insn 23: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = -2
   Insn 21: point = 3, n_alt = 4
  BB 3
   Insn 18: point = 4, n_alt = 5
   Insn 17: point = 5, n_alt = 1
   Insn 16: point = 7, n_alt = 4
   Insn 15: point = 8, n_alt = -1
   Insn 14: point = 8, n_alt = 1
   Insn 13: point = 8, n_alt = -1
   Insn 12: point = 8, n_alt = 1
  BB 2
   Insn 10: point = 8, n_alt = -1
   Insn 9: point = 8, n_alt = 3
   Insn 8: point = 9, n_alt = 4
   Insn 2: point = 10, n_alt = 5
 r113: [2..3]
 r114: [0..1]
 r115: [8..9]
 r116: [4..5]
 r117: [6..7]
Compressing live ranges: from 10 to 10 - 100%
Ranges after the compression:
 r113: [2..3]
 r114: [0..1]
 r115: [8..9]
 r116: [4..5]
 r117: [6..7]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 25
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.


kprinti

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={4d} r2={4d} r3={9d,5u} r11={1d,9u} r12={6d} r13={1d,7u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,1u} r104={3d} r105={3d} r106={3d} 
;;    total ref usage 339{310d,29u,0e} in 19{16 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":317:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (set (reg:SI 3 r3 [115])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":318:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [115])
            (const_int 0 [0]))) "vid.c":318:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "vid.c":318:6 273 {arm_cond_branch}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 116 117
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":319:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 13 12 14 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":319:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 45 [0x2d])) "vid.c":320:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":320:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 16 15 17 3 (set (reg:SI 3 r3 [117])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":321:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [116])
        (neg:SI (reg:SI 3 r3 [117]))) "vid.c":321:7 164 {*arm_negsi2}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 3 r3 [116])) "vid.c":321:7 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114
(code_label 19 18 20 4 94 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 3 r3 [orig:113 x.55_1 ] [113])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":323:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:113 x.55_1 ] [113])) "vid.c":323:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 26 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":323:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 26 23 27 4 (clobber (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
(insn 27 26 30 4 (clobber (reg:SI 3 r3 [orig:114 <retval> ] [114])) "vid.c":324:1 -1
     (nil))
(insn 30 27 25 4 (const_int 0 [0]) "vid.c":324:1 311 {nop}
     (nil))
(insn 25 30 28 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:114 <retval> ] [114])) "vid.c":324:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 31 4 (use (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 31 28 0 NOTE_INSN_DELETED)

;; Function kprintf (kprintf, funcdef_no=20, decl_uid=4615, cgraph_uid=21, symbol_order=26)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 7:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 31:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 32:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 37:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 38:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (0) r  (1) m {*arm_zero_extendqisi2}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 43:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) r  (1) rI {*arm_casesi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 50:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 52:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 59:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 93:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 94:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 96:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 97:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 100:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 101:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 103:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 16
EBB 13
EBB 14 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 110: point = 0, n_alt = -1
   Insn 107: point = 0, n_alt = -2
   Insn 112: point = 1, n_alt = -1
   Insn 109: point = 1, n_alt = -1
   Insn 108: point = 2, n_alt = -1
  BB 14
   Insn 104: point = 2, n_alt = -1
   Insn 103: point = 2, n_alt = 3
   Insn 101: point = 3, n_alt = 1
   Insn 100: point = 5, n_alt = 4
  BB 6
   Insn 115: point = 6, n_alt = -1
   Insn 32: point = 6, n_alt = 5
   Insn 31: point = 7, n_alt = 4
   Insn 30: point = 9, n_alt = 4
  BB 5
   Insn 27: point = 10, n_alt = -1
   Insn 26: point = 10, n_alt = 1
  BB 4
   Insn 24: point = 10, n_alt = -1
   Insn 23: point = 10, n_alt = 3
   Insn 22: point = 11, n_alt = 1
   Insn 21: point = 13, n_alt = 4
   Insn 20: point = 14, n_alt = -1
   Insn 19: point = 14, n_alt = -2
   Insn 18: point = 15, n_alt = 1
   Insn 17: point = 17, n_alt = 4
  BB 2
   Insn 113: point = 18, n_alt = -1
   Insn 8: point = 18, n_alt = 5
   Insn 7: point = 19, n_alt = 4
   Insn 6: point = 20, n_alt = 5
   Insn 5: point = 21, n_alt = 4
  BB 13
   Insn 97: point = 22, n_alt = 5
   Insn 96: point = 23, n_alt = 4
   Insn 95: point = 25, n_alt = 4
   Insn 94: point = 26, n_alt = 5
   Insn 93: point = 27, n_alt = 4
   Insn 92: point = 29, n_alt = 4
  BB 11
   Insn 123: point = 30, n_alt = -1
   Insn 80: point = 30, n_alt = -1
   Insn 79: point = 30, n_alt = -2
   Insn 78: point = 31, n_alt = -2
   Insn 77: point = 33, n_alt = 4
   Insn 76: point = 35, n_alt = 4
  BB 10
   Insn 121: point = 36, n_alt = -1
   Insn 71: point = 36, n_alt = -1
   Insn 70: point = 36, n_alt = -2
   Insn 69: point = 37, n_alt = 4
   Insn 68: point = 39, n_alt = 4
  BB 9
   Insn 119: point = 40, n_alt = -1
   Insn 63: point = 40, n_alt = -1
   Insn 62: point = 40, n_alt = -2
   Insn 61: point = 41, n_alt = -2
   Insn 60: point = 43, n_alt = 4
   Insn 59: point = 45, n_alt = 4
  BB 8
   Insn 117: point = 46, n_alt = -1
   Insn 54: point = 46, n_alt = -1
   Insn 53: point = 46, n_alt = -2
   Insn 52: point = 47, n_alt = 0
   Insn 51: point = 49, n_alt = 4
   Insn 50: point = 51, n_alt = 4
  BB 16
   Insn 126: point = 52, n_alt = -1
  BB 12
   Insn 89: point = 52, n_alt = -1
   Insn 88: point = 52, n_alt = -2
   Insn 87: point = 53, n_alt = -2
   Insn 86: point = 55, n_alt = 4
   Insn 85: point = 57, n_alt = 4
  BB 7
   Insn 44: point = 58, n_alt = 0
   Insn 43: point = 59, n_alt = 10
   Insn 42: point = 61, n_alt = -2
   Insn 41: point = 63, n_alt = 1
   Insn 40: point = 65, n_alt = 4
   Insn 39: point = 66, n_alt = 5
   Insn 38: point = 67, n_alt = 4
   Insn 37: point = 69, n_alt = 4
  BB 3
   Insn 15: point = 70, n_alt = -1
   Insn 14: point = 70, n_alt = 3
   Insn 13: point = 71, n_alt = 1
   Insn 12: point = 73, n_alt = 4
 r113: [70..71]
 r114: [14..15]
 r115: [10..11]
 r116: [62..63]
 r117: [60..61]
 r118: [48..49]
 r119: [46..47]
 r120: [42..43]
 r121: [40..41]
 r122: [36..37]
 r123: [32..33]
 r124: [30..31]
 r125: [54..55]
 r126: [52..53]
 r127: [2..3]
 r128: [0..1]
 r129: [20..21]
 r130: [18..19]
 r131: [72..73]
 r132: [16..17]
 r133: [12..13]
 r134: [6..7]
 r135: [8..9]
 r136: [66..67]
 r137: [68..69]
 r138: [64..65]
 r139: [58..59]
 r140: [50..51]
 r141: [44..45]
 r142: [38..39]
 r143: [34..35]
 r144: [56..57]
 r145: [26..27]
 r146: [28..29]
 r147: [22..23]
 r148: [24..25]
 r149: [4..5]
Compressing live ranges: from 74 to 74 - 100%
Ranges after the compression:
 r113: [70..71]
 r114: [14..15]
 r115: [10..11]
 r116: [62..63]
 r117: [60..61]
 r118: [48..49]
 r119: [46..47]
 r120: [42..43]
 r121: [40..41]
 r122: [36..37]
 r123: [32..33]
 r124: [30..31]
 r125: [54..55]
 r126: [52..53]
 r127: [2..3]
 r128: [0..1]
 r129: [20..21]
 r130: [18..19]
 r131: [72..73]
 r132: [16..17]
 r133: [12..13]
 r134: [6..7]
 r135: [8..9]
 r136: [66..67]
 r137: [68..69]
 r138: [64..65]
 r139: [58..59]
 r140: [50..51]
 r141: [44..45]
 r142: [38..39]
 r143: [34..35]
 r144: [56..57]
 r145: [26..27]
 r146: [28..29]
 r147: [22..23]
 r148: [24..25]
 r149: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 51
changing reg in insn 52
changing reg in insn 52
changing reg in insn 53
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 69
changing reg in insn 70
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 79
changing reg in insn 86
changing reg in insn 87
changing reg in insn 87
changing reg in insn 88
changing reg in insn 101
changing reg in insn 103
changing reg in insn 109
changing reg in insn 107
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 31
changing reg in insn 32
changing reg in insn 30
changing reg in insn 31
changing reg in insn 38
changing reg in insn 39
changing reg in insn 37
changing reg in insn 38
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 50
changing reg in insn 51
changing reg in insn 59
changing reg in insn 60
changing reg in insn 68
changing reg in insn 69
changing reg in insn 76
changing reg in insn 77
changing reg in insn 85
changing reg in insn 86
changing reg in insn 93
changing reg in insn 94
changing reg in insn 92
changing reg in insn 93
changing reg in insn 96
changing reg in insn 97
changing reg in insn 95
changing reg in insn 96
changing reg in insn 100
changing reg in insn 101
deleting insn with uid = 42.
deleting insn with uid = 61.
deleting insn with uid = 78.
deleting insn with uid = 87.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 63.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 89.


kprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,9u} r1={8d} r2={8d} r3={41d,34u} r11={1d,38u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,1u} r104={7d} r105={7d} r106={7d} 
;;    total ref usage 841{733d,108u,0e} in 71{64 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 129 130
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int 4 [0x4])) [5 fmt+0 S4 A64])) "vid.c":330:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])
        (reg/f:SI 3 r3 [129])) "vid.c":330:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [130])
        (plus:SI (reg/f:SI 11 fp)
            (const_int 8 [0x8]))) "vid.c":331:6 7 {*arm_addsi3}
     (nil))
(insn 8 7 113 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])
        (reg:SI 3 r3 [130])) "vid.c":331:6 253 {*arm_movsi_insn}
     (nil))
(jump_insn 113 8 114 2 (set (pc)
        (label_ref 98)) "vid.c":333:8 284 {*arm_jump}
     (nil)
 -> 98)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 114 113 102)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 131
(code_label 102 114 11 3 106 (nil) [1 uses])
(note 11 102 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 3 r3 [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":334:9 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [131]) [0 *cp_17+0 S1 A8]))) "vid.c":334:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 14 13 15 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 37 [0x25]))) "vid.c":334:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "vid.c":334:8 273 {arm_cond_branch}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 132 133
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 3 r3 [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":335:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [132]) [0 *cp_17+0 S1 A8]))) "vid.c":335:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "vid.c":335:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 21 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":335:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 21 20 22 4 (set (reg/f:SI 3 r3 [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":336:11 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [133]) [0 *cp_17+0 S1 A8]))) "vid.c":336:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:115 _3 ] [115])
            (const_int 10 [0xa]))) "vid.c":336:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":336:10 273 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 r0)
        (const_int 13 [0xd])) "vid.c":337:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":337:2 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 134 135
(code_label 28 27 29 6 98 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:SI 3 r3 [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":338:9 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 6 (set (reg:SI 3 r3 [134])
        (plus:SI (reg:SI 3 r3 [135])
            (const_int 1 [0x1]))) "vid.c":338:9 7 {*arm_addsi3}
     (nil))
(insn 32 31 115 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])
        (reg:SI 3 r3 [134])) "vid.c":338:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 115 32 116 6 (set (pc)
        (label_ref 98)) "vid.c":339:7 284 {*arm_jump}
     (nil)
 -> 98)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 116 115 35)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 136 137 138 139
(code_label 35 116 36 7 97 (nil) [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:SI 3 r3 [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":341:7 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 7 (set (reg:SI 3 r3 [136])
        (plus:SI (reg:SI 3 r3 [137])
            (const_int 1 [0x1]))) "vid.c":341:7 7 {*arm_addsi3}
     (nil))
(insn 39 38 40 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])
        (reg:SI 3 r3 [136])) "vid.c":341:7 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 7 (set (reg/f:SI 3 r3 [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":342:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 43 7 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [138]) [0 *cp_24+0 S1 A8]))) "vid.c":342:12 175 {*arm_zero_extendqisi2}
     (nil))
(insn 43 41 44 7 (set (reg:SI 3 r3 [139])
        (plus:SI (reg:SI 3 r3 [orig:117 _5 ] [117])
            (const_int -99 [0xffffffffffffff9d]))) "vid.c":342:5 7 {*arm_addsi3}
     (nil))
(jump_insn 44 43 45 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 3 r3 [139])
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 3 r3 [139])
                                (const_int 4 [0x4]))
                            (label_ref:SI 45)) [0  S4 A32])
                    (label_ref:SI 90)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 45))
        ]) "vid.c":342:5 308 {*arm_casesi_internal}
     (insn_list:REG_LABEL_TARGET 90 (nil))
 -> 45)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 45 44 46 101 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 46 45 47 (addr_vec:SI [
            (label_ref:SI 48)
            (label_ref:SI 66)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 57)
            (label_ref:SI 90)
            (label_ref:SI 74)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 83)
        ]))
(barrier 47 46 48)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 140
(code_label 48 47 49 8 105 (nil) [1 uses])
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg/f:SI 3 r3 [140])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":343:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 8 (set (reg:SI 3 r3 [orig:118 _6 ] [118])
        (mem:SI (reg/f:SI 3 r3 [140]) [3 *ip_16+0 S4 A32])) "vid.c":343:27 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 8 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (and:SI (reg:SI 3 r3 [orig:118 _6 ] [118])
            (const_int 255 [0xff]))) "vid.c":343:15 90 {*arm_andsi3_insn}
     (nil))
(insn 53 52 54 8 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "vid.c":343:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 54 53 117 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":343:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 117 54 118 8 (set (pc)
        (label_ref 90)) "vid.c":343:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 118 117 57)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 141
(code_label 57 118 58 9 103 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:SI 3 r3 [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":344:31 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 62 9 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (mem:SI (reg/f:SI 3 r3 [141]) [3 *ip_16+0 S4 A32])) "vid.c":344:31 253 {*arm_movsi_insn}
     (nil))
(insn 62 60 63 9 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:121 _9 ] [121])) "vid.c":344:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 63 62 119 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprints") [flags 0x3]  <function_decl 0x7fd417d04100 kprints>) [0 kprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":344:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 119 63 120 9 (set (pc)
        (label_ref 90)) "vid.c":344:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 120 119 66)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 142
(code_label 66 120 67 10 104 (nil) [1 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg/f:SI 3 r3 [142])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (reg:SI 3 r3 [orig:122 _10 ] [122])
        (mem:SI (reg/f:SI 3 r3 [142]) [3 *ip_16+0 S4 A32])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 10 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:122 _10 ] [122])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 71 70 121 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprinti") [flags 0x3]  <function_decl 0x7fd417d04d00 kprinti>) [0 kprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":345:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 121 71 122 10 (set (pc)
        (label_ref 90)) "vid.c":345:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 122 121 74)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 124 143
(code_label 74 122 75 11 102 (nil) [1 uses])
(note 75 74 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 11 (set (reg/f:SI 3 r3 [143])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":346:23 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 79 11 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (mem:SI (reg/f:SI 3 r3 [143]) [3 *ip_16+0 S4 A32])) "vid.c":346:23 253 {*arm_movsi_insn}
     (nil))
(insn 79 77 80 11 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:124 _12 ] [124])) "vid.c":346:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 80 79 123 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":346:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 123 80 124 11 (set (pc)
        (label_ref 90)) "vid.c":346:38 284 {*arm_jump}
     (nil)
 -> 90)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 124 123 83)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 125 126 144
(code_label 83 124 84 12 100 (nil) [1 uses])
(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 12 (set (reg/f:SI 3 r3 [144])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":347:23 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 88 12 (set (reg:SI 3 r3 [orig:125 _13 ] [125])
        (mem:SI (reg/f:SI 3 r3 [144]) [3 *ip_16+0 S4 A32])) "vid.c":347:23 253 {*arm_movsi_insn}
     (nil))
(insn 88 86 89 12 (set (reg:SI 0 r0)
        (reg:SI 3 r3 [orig:126 _14 ] [126])) "vid.c":347:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 89 88 125 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintx") [flags 0x3]  <function_decl 0x7fd417d04700 kprintx>) [0 kprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":347:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 125 89 126 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 126 125 90 16 (const_int 0 [0]) "vid.c":347:38 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL, MODIFIED)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 145 146 147 148
(code_label 90 126 91 13 99 (nil) [22 uses])
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg:SI 3 r3 [146])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":349:7 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [146])
            (const_int 1 [0x1]))) "vid.c":349:7 7 {*arm_addsi3}
     (nil))
(insn 94 93 95 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])
        (reg:SI 3 r3 [145])) "vid.c":349:7 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 13 (set (reg:SI 3 r3 [148])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])) "vid.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 97 13 (set (reg:SI 3 r3 [147])
        (plus:SI (reg:SI 3 r3 [148])
            (const_int 4 [0x4]))) "vid.c":349:13 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [1 ip+0 S4 A64])
        (reg:SI 3 r3 [147])) "vid.c":349:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 127 149
(code_label 98 97 99 14 96 (nil) [2 uses])
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg/f:SI 3 r3 [149])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [5 cp+0 S4 A32])) "vid.c":333:9 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 103 14 (set (reg:SI 3 r3 [orig:127 _15 ] [127])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [149]) [0 *cp_17+0 S1 A8]))) "vid.c":333:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 103 101 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:127 _15 ] [127])
            (const_int 0 [0]))) "vid.c":333:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "vid.c":333:9 273 {arm_cond_branch}
     (nil)
 -> 102)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 128
(note 105 104 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 108 105 109 15 (clobber (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
(insn 109 108 112 15 (clobber (reg:SI 3 r3 [orig:128 <retval> ] [128])) "vid.c":351:1 -1
     (nil))
(insn 112 109 107 15 (const_int 0 [0]) "vid.c":351:1 311 {nop}
     (nil))
(insn 107 112 110 15 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:128 <retval> ] [128])) "vid.c":351:1 253 {*arm_movsi_insn}
     (nil))
(insn 110 107 127 15 (use (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 127 110 0 NOTE_INSN_DELETED)

;; Function stestring (stestring, funcdef_no=21, decl_uid=4629, cgraph_uid=22, symbol_order=27)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 10:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 11:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 13:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 20:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 22:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 29:  (0) m  (1) r {*arm_movqi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 34: point = 0, n_alt = -1
   Insn 31: point = 0, n_alt = -2
   Insn 36: point = 1, n_alt = -1
   Insn 33: point = 1, n_alt = -1
   Insn 32: point = 2, n_alt = -1
   Insn 29: point = 2, n_alt = 8
   Insn 28: point = 3, n_alt = 1
   Insn 27: point = 5, n_alt = 1
   Insn 26: point = 6, n_alt = 4
  BB 4
   Insn 24: point = 7, n_alt = -1
   Insn 23: point = 7, n_alt = 3
   Insn 22: point = 8, n_alt = 1
   Insn 20: point = 9, n_alt = 8
   Insn 19: point = 10, n_alt = 1
   Insn 18: point = 12, n_alt = -2
   Insn 17: point = 13, n_alt = -1
  BB 2
   Insn 37: point = 13, n_alt = -1
   Insn 2: point = 13, n_alt = 5
  BB 3
   Insn 14: point = 13, n_alt = 5
   Insn 13: point = 14, n_alt = 4
   Insn 12: point = 16, n_alt = 4
   Insn 11: point = 17, n_alt = 8
   Insn 10: point = 18, n_alt = 7
   Insn 9: point = 19, n_alt = 4
 r113: [11..12]
 r114: [0..1]
 r115: [17..19]
 r116: [17..18]
 r117: [13..14]
 r118: [15..16]
 r119: [9..10]
 r120: [7..8]
 r121: [2..6]
 r122: [4..5]
 r123: [2..3]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r113: [10..11]
 r114: [0..1]
 r115: [16..17]
 r116: [16..17]
 r117: [12..13]
 r118: [14..15]
 r119: [8..9]
 r120: [6..7]
 r121: [2..5]
 r122: [4..5]
 r123: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 18
changing reg in insn 33
changing reg in insn 31
changing reg in insn 9
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 12
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 29
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
deleting insn with uid = 19.
deleting insn with uid = 28.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.


stestring

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={4d,4u} r1={2d} r2={4d,2u} r3={9d,7u} r11={1d,13u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 151{117d,34u,0e} in 22{21 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":354:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 37 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 37 3 38 2 (set (pc)
        (label_ref 15)) "vid.c":356:8 284 {*arm_jump}
     (nil)
 -> 15)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 38 37 21)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 115 116 117 118
(code_label 21 38 8 3 109 (nil) [1 uses])
(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 3 r3 [115])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 s+0 S4 A32])) "vid.c":357:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:QI 2 r2 [116])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "vid.c":357:8 263 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 3 (set (mem:QI (reg/f:SI 3 r3 [115]) [0 *s_2+0 S1 A8])
        (reg:QI 2 r2 [116])) "vid.c":357:8 263 {*arm_movqi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 s+0 S4 A32])) "vid.c":358:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [117])
        (plus:SI (reg:SI 3 r3 [118])
            (const_int 1 [0x1]))) "vid.c":358:6 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 s+0 S4 A32])
        (reg:SI 3 r3 [117])) "vid.c":358:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 119 120
(code_label 15 14 16 4 108 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x41]  <function_decl 0x7fd417d0a300 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":356:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 18 17 20 4 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (reg:SI 0 r0)) "vid.c":356:12 253 {*arm_movsi_insn}
     (nil))
(insn 20 18 22 4 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [119])) "vid.c":356:11 263 {*arm_movqi_insn}
     (nil))
(insn 22 20 23 4 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "vid.c":356:21 175 {*arm_zero_extendqisi2}
     (nil))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [120])
            (const_int 13 [0xd]))) "vid.c":356:21 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "vid.c":356:21 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 114 121 122 123
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [5 s+0 S4 A32])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 29 5 (set (reg:SI 2 r2 [122])
        (const_int 0 [0])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 29 27 32 5 (set (mem:QI (reg/f:SI 3 r3 [121]) [0 *s_2+0 S1 A8])
        (reg:QI 2 r2 [123])) "vid.c":360:6 263 {*arm_movqi_insn}
     (nil))
(insn 32 29 33 5 (clobber (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
(insn 33 32 36 5 (clobber (reg:SI 3 r3 [orig:114 <retval> ] [114])) "vid.c":361:1 -1
     (nil))
(insn 36 33 31 5 (const_int 0 [0]) "vid.c":361:1 311 {nop}
     (nil))
(insn 31 36 34 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:114 <retval> ] [114])) "vid.c":361:1 253 {*arm_movsi_insn}
     (nil))
(insn 34 31 39 5 (use (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 39 34 0 NOTE_INSN_DELETED)
