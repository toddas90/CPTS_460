
;; Function uart_init (uart_init, funcdef_no=0, decl_uid=4478, cgraph_uid=1, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 15:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 18:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 22:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 26:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 31:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 35:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 39:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 41:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 46:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 48:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 49:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 52:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 58:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 61:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 62:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 63:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 65:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 66:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 69:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 71:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 72:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 78:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 79:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5
EBB 6 7

********** Pseudo live ranges #1: **********

  BB 7
   Insn 86: point = 0, n_alt = -1
   Insn 83: point = 0, n_alt = -2
   Insn 88: point = 1, n_alt = -1
   Insn 85: point = 1, n_alt = -1
   Insn 84: point = 2, n_alt = -1
  BB 6
   Insn 80: point = 2, n_alt = -1
   Insn 79: point = 2, n_alt = 3
   Insn 78: point = 3, n_alt = 4
  BB 2
   Insn 89: point = 4, n_alt = -1
   Insn 8: point = 4, n_alt = 5
   Insn 7: point = 5, n_alt = 1
   Insn 6: point = 6, n_alt = -1
   Insn 5: point = 6, n_alt = 4
  BB 5
   Insn 72: point = 6, n_alt = 5
   Insn 71: point = 7, n_alt = 4
   Insn 70: point = 9, n_alt = 4
   Insn 69: point = 10, n_alt = 5
   Insn 68: point = 11, n_alt = 4
   Insn 67: point = 12, n_alt = 5
   Insn 66: point = 13, n_alt = 4
   Insn 65: point = 14, n_alt = 5
   Insn 64: point = 15, n_alt = 4
   Insn 63: point = 16, n_alt = 1
   Insn 62: point = 17, n_alt = 5
   Insn 61: point = 18, n_alt = 1
   Insn 60: point = 19, n_alt = 4
   Insn 59: point = 20, n_alt = 5
   Insn 58: point = 21, n_alt = 1
   Insn 57: point = 22, n_alt = 4
   Insn 56: point = 23, n_alt = 5
   Insn 55: point = 24, n_alt = 4
   Insn 54: point = 25, n_alt = 5
   Insn 53: point = 26, n_alt = 4
   Insn 52: point = 27, n_alt = 5
   Insn 51: point = 28, n_alt = 4
   Insn 50: point = 29, n_alt = 1
   Insn 49: point = 30, n_alt = 5
   Insn 48: point = 31, n_alt = 1
   Insn 47: point = 32, n_alt = 4
   Insn 46: point = 33, n_alt = 5
   Insn 45: point = 34, n_alt = 1
   Insn 44: point = 35, n_alt = 4
   Insn 43: point = 36, n_alt = 5
   Insn 42: point = 37, n_alt = 4
   Insn 41: point = 38, n_alt = 5
   Insn 40: point = 39, n_alt = 4
   Insn 39: point = 40, n_alt = 1
  BB 4
   Insn 36: point = 41, n_alt = 5
   Insn 35: point = 42, n_alt = 4
   Insn 34: point = 43, n_alt = 4
  BB 3
   Insn 32: point = 44, n_alt = -1
   Insn 31: point = 44, n_alt = 3
   Insn 30: point = 45, n_alt = 4
   Insn 29: point = 46, n_alt = 5
   Insn 28: point = 47, n_alt = 4
   Insn 27: point = 48, n_alt = -2
   Insn 26: point = 50, n_alt = 2
   Insn 25: point = 52, n_alt = 4
   Insn 24: point = 54, n_alt = 4
   Insn 23: point = 55, n_alt = 4
   Insn 22: point = 56, n_alt = 5
   Insn 21: point = 57, n_alt = 4
   Insn 20: point = 59, n_alt = 4
   Insn 19: point = 60, n_alt = -2
   Insn 18: point = 62, n_alt = 2
   Insn 17: point = 64, n_alt = 4
   Insn 16: point = 66, n_alt = 2
   Insn 15: point = 67, n_alt = 6
   Insn 14: point = 68, n_alt = 2
   Insn 13: point = 69, n_alt = -2
   Insn 12: point = 70, n_alt = 4
 r113: [51..54]
 r114: [49..50]
 r115: [46..48]
 r116: [36..40]
 r117: [23..29]
 r118: [10..16]
 r119: [0..1]
 r120: [4..5]
 r121: [65..70]
 r122: [63..69] [58..60]
 r123: [61..62]
 r124: [56..57]
 r125: [58..59]
 r126: [53..55]
 r127: [46..47]
 r128: [44..45]
 r129: [41..43]
 r130: [41..42]
 r131: [38..39]
 r132: [36..37]
 r133: [33..35]
 r134: [33..34]
 r135: [30..32]
 r136: [30..31]
 r137: [27..28]
 r138: [25..26]
 r139: [23..24]
 r140: [20..22]
 r141: [20..21]
 r142: [17..19]
 r143: [17..18]
 r144: [14..15]
 r145: [12..13]
 r146: [10..11]
 r147: [6..7]
 r148: [8..9]
 r149: [2..3]
Compressing live ranges: from 71 to 52 - 73%
Ranges after the compression:
 r113: [42..43]
 r114: [40..41]
 r115: [38..39]
 r116: [30..33]
 r117: [20..25]
 r118: [10..15]
 r119: [0..1]
 r120: [4..5]
 r121: [50..51]
 r122: [50..51] [46..47]
 r123: [48..49]
 r124: [44..45]
 r125: [46..47]
 r126: [42..43]
 r127: [38..39]
 r128: [36..37]
 r129: [34..35]
 r130: [34..35]
 r131: [32..33]
 r132: [30..31]
 r133: [28..29]
 r134: [28..29]
 r135: [26..27]
 r136: [26..27]
 r137: [24..25]
 r138: [22..23]
 r139: [20..21]
 r140: [18..19]
 r141: [18..19]
 r142: [16..17]
 r143: [16..17]
 r144: [14..15]
 r145: [12..13]
 r146: [10..11]
 r147: [6..7]
 r148: [8..9]
 r149: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 25
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 29
changing reg in insn 39
changing reg in insn 43
changing reg in insn 41
changing reg in insn 50
changing reg in insn 56
changing reg in insn 54
changing reg in insn 52
changing reg in insn 63
changing reg in insn 69
changing reg in insn 67
changing reg in insn 65
changing reg in insn 85
changing reg in insn 83
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 17
changing reg in insn 15
changing reg in insn 13
changing reg in insn 17
changing reg in insn 15
changing reg in insn 19
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 14
changing reg in insn 13
changing reg in insn 21
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 25
changing reg in insn 25
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 48
changing reg in insn 49
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 62
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 70
changing reg in insn 71
changing reg in insn 78
changing reg in insn 79
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.


uart_init

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,3u} r1={2d} r2={19d,19u,3e} r3={27d,30u} r11={1d,29u} r12={2d} r13={1d,8u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={3d,2u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 247{152d,92u,3e} in 70{69 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7f19cf0af2d0 *.LC0>)) "uart.c":82:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 6 5 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":82:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 7 6 8 2 (set (reg:SI 3 r3 [120])
        (const_int 0 [0])) "uart.c":83:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 89 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [120])) "uart.c":83:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 89 8 90 2 (set (pc)
        (label_ref 73)) "uart.c":83:3 284 {*arm_jump}
     (nil)
 -> 73)
;;  succ:       6 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 90 89 75)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       6
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 114 115 121 122 123 124 125 126 127 128
(code_label 75 90 11 3 4 (nil) [1 uses])
(note 11 75 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 2 r2 [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [122])
        (reg:SI 2 r2 [121])) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [122])
        (ashift:SI (reg:SI 3 r3 [122])
            (const_int 4 [0x4]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 3 (set (reg:SI 3 r3 [122])
        (minus:SI (reg:SI 3 r3 [122])
            (reg:SI 2 r2 [121]))) "uart.c":84:8 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [121])
            (const_int 15 [0xf]))
        (nil)))
(insn 16 15 17 3 (set (reg:SI 3 r3 [122])
        (ashift:SI (reg:SI 3 r3 [122])
            (const_int 2 [0x2]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [122])
        (plus:SI (reg:SI 3 r3 [122])
            (reg:SI 2 r2 [121]))) "uart.c":84:8 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [121])
            (const_int 61 [0x3d]))
        (nil)))
(insn 18 17 20 3 (set (reg:SI 3 r3 [123])
        (ashift:SI (reg:SI 3 r3 [122])
            (const_int 2 [0x2]))) "uart.c":84:8 147 {*arm_shiftsi3}
     (nil))
(insn 20 18 21 3 (set (reg:SI 2 r2 [125])
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 3 r3 [124])
        (plus:SI (reg:SI 3 r3 [122])
            (reg:SI 2 r2 [125]))) "uart.c":84:8 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 3 r3 [124])) "uart.c":84:8 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 2 r2 [126])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":85:36 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (const_int 66033 [0x101f1])) "uart.c":85:36 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (plus:SI (reg:SI 2 r2 [126])
            (reg:SI 3 r3 [orig:113 _1 ] [113]))) "uart.c":85:36 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [126])
            (const_int 66033 [0x101f1]))
        (nil)))
(insn 26 25 27 3 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (ashift:SI (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 12 [0xc]))) "uart.c":85:36 147 {*arm_shiftsi3}
     (nil))
(insn 27 26 28 3 (set (reg/f:SI 2 r2 [orig:115 _3 ] [115])
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "uart.c":85:16 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg/f:SI 3 r3 [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":85:14 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (mem/v/f:SI (reg/f:SI 3 r3 [127]) [2 up_15->base+0 S4 A32])
        (reg/f:SI 2 r2 [orig:115 _3 ] [115])) "uart.c":85:14 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 3 r3 [128])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":86:8 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [128])
            (const_int 3 [0x3]))) "uart.c":86:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "uart.c":86:8 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       4 (FALLTHRU)
;;              5
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 129 130
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:SI 3 r3 [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 4 (set (reg:SI 2 r2 [130])
        (const_int 268472320 [0x10009000])) "uart.c":87:17 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 4 (set (mem/v/f:SI (reg/f:SI 3 r3 [129]) [2 up_15->base+0 S4 A32])
        (reg:SI 2 r2 [130])) "uart.c":87:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       3
;;              4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 116 117 118 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148
(code_label 37 36 38 5 3 (nil) [1 uses])
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (const_int 0 [0])) "uart.c":89:29 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg/f:SI 2 r2 [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":89:29 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [131])
                (const_int 72 [0x48])) [3 up_15->intail+0 S4 A32])
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "uart.c":89:29 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (reg/f:SI 2 r2 [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":89:16 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [132])
                (const_int 68 [0x44])) [3 up_15->inhead+0 S4 A32])
        (reg:SI 3 r3 [orig:116 _4 ] [116])) "uart.c":89:16 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg/f:SI 3 r3 [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":90:22 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 5 (set (reg:SI 2 r2 [134])
        (const_int 0 [0])) "uart.c":90:22 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 5 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [133])
                (const_int 76 [0x4c])) [3 up_15->inchar.value+0 S4 A32])
        (reg:SI 2 r2 [134])) "uart.c":90:22 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 5 (set (reg/f:SI 3 r3 [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":90:44 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 2 r2 [136])
        (const_int 0 [0])) "uart.c":90:44 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (mem/v/f:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 80 [0x50])) [5 up_15->inchar.queue+0 S4 A32])
        (reg:SI 2 r2 [136])) "uart.c":90:44 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 5 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (const_int 0 [0])) "uart.c":92:43 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 5 (set (reg/f:SI 2 r2 [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":92:43 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [137])
                (const_int 164 [0xa4])) [3 up_15->tx_on+0 S4 A32])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "uart.c":92:43 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 5 (set (reg/f:SI 2 r2 [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":92:31 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [138])
                (const_int 152 [0x98])) [3 up_15->outtail+0 S4 A32])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "uart.c":92:31 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 5 (set (reg/f:SI 2 r2 [139])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":92:17 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [139])
                (const_int 148 [0x94])) [3 up_15->outhead+0 S4 A32])
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "uart.c":92:17 253 {*arm_movsi_insn}
     (nil))
(insn 57 56 58 5 (set (reg/f:SI 3 r3 [140])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":93:24 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 5 (set (reg:SI 2 r2 [141])
        (const_int 64 [0x40])) "uart.c":93:24 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 5 (set (mem/v:SI (plus:SI (reg/f:SI 3 r3 [140])
                (const_int 156 [0x9c])) [3 up_15->outspace.value+0 S4 A32])
        (reg:SI 2 r2 [141])) "uart.c":93:24 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 5 (set (reg/f:SI 3 r3 [142])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":93:53 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 5 (set (reg:SI 2 r2 [143])
        (const_int 0 [0])) "uart.c":93:53 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 5 (set (mem/v/f:SI (plus:SI (reg/f:SI 3 r3 [142])
                (const_int 160 [0xa0])) [5 up_15->outspace.queue+0 S4 A32])
        (reg:SI 2 r2 [143])) "uart.c":93:53 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 3 r3 [orig:118 _7 ] [118])
        (const_int 0 [0])) "uart.c":95:42 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 5 (set (reg/f:SI 2 r2 [144])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":95:42 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [144])
                (const_int 240 [0xf0])) [3 up_15->e_count+0 S4 A32])
        (reg:SI 3 r3 [orig:118 _7 ] [118])) "uart.c":95:42 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 5 (set (reg/f:SI 2 r2 [145])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":95:28 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [145])
                (const_int 236 [0xec])) [3 up_15->etail+0 S4 A32])
        (reg:SI 3 r3 [orig:118 _7 ] [118])) "uart.c":95:28 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 5 (set (reg/f:SI 2 r2 [146])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":95:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 5 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [146])
                (const_int 232 [0xe8])) [3 up_15->ehead+0 S4 A32])
        (reg:SI 3 r3 [orig:118 _7 ] [118])) "uart.c":95:15 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 5 (set (reg:SI 3 r3 [148])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":83:19 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 5 (set (reg:SI 3 r3 [147])
        (plus:SI (reg:SI 3 r3 [148])
            (const_int 1 [0x1]))) "uart.c":83:19 7 {*arm_addsi3}
     (nil))
(insn 72 71 73 5 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [147])) "uart.c":83:19 253 {*arm_movsi_insn}
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 149
(code_label 73 72 74 6 2 (nil) [1 uses])
(note 74 73 78 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 78 74 79 6 (set (reg:SI 3 r3 [149])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":83:14 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [149])
            (const_int 3 [0x3]))) "uart.c":83:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 80 79 81 6 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "uart.c":83:14 273 {arm_cond_branch}
     (nil)
 -> 75)
;;  succ:       3
;;              7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 119
(note 81 80 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 84 81 85 7 (clobber (reg/i:SI 0 r0)) "uart.c":97:1 -1
     (nil))
(insn 85 84 88 7 (clobber (reg:SI 3 r3 [orig:119 <retval> ] [119])) "uart.c":97:1 -1
     (nil))
(insn 88 85 83 7 (const_int 0 [0]) "uart.c":97:1 311 {nop}
     (nil))
(insn 83 88 86 7 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:119 <retval> ] [119])) "uart.c":97:1 253 {*arm_movsi_insn}
     (nil))
(insn 86 83 93 7 (use (reg/i:SI 0 r0)) "uart.c":97:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 93 86 0 NOTE_INSN_DELETED)

;; Function uart0_handler (uart0_handler, funcdef_no=1, decl_uid=4487, cgraph_uid=2, symbol_order=3)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 18:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 38:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 42:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 55:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 59:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 61:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 77:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 81:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 92:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 96:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 99:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 103:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 118:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 123:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 126:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 127:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 129:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) 0  (2) r {*if_neg_move}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 137:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 138:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 139:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 142:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 144:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 5 6
EBB 7
EBB 8 9
EBB 10 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 151: point = 0, n_alt = -1
  BB 10
   Insn 144: point = 0, n_alt = 5
   Insn 143: point = 1, n_alt = 1
   Insn 142: point = 2, n_alt = 4
   Insn 141: point = 3, n_alt = -1
   Insn 140: point = 3, n_alt = -2
   Insn 139: point = 4, n_alt = 4
   Insn 138: point = 6, n_alt = 4
   Insn 137: point = 7, n_alt = 5
   Insn 136: point = 8, n_alt = 4
   Insn 135: point = 9, n_alt = 1
   Insn 134: point = 11, n_alt = 0
   Insn 133: point = 13, n_alt = 0
   Insn 132: point = 15, n_alt = 2
   Insn 131: point = 16, n_alt = 4
   Insn 130: point = 18, n_alt = 4
   Insn 129: point = 19, n_alt = 8
   Insn 128: point = 20, n_alt = 7
   Insn 127: point = 21, n_alt = 4
   Insn 126: point = 23, n_alt = 4
   Insn 125: point = 24, n_alt = 5
   Insn 124: point = 25, n_alt = 4
   Insn 123: point = 26, n_alt = 4
   Insn 122: point = 27, n_alt = 4
   Insn 121: point = 29, n_alt = 4
  BB 9
   Insn 118: point = 30, n_alt = 8
   Insn 117: point = 31, n_alt = 1
   Insn 116: point = 33, n_alt = 1
   Insn 115: point = 34, n_alt = -1
   Insn 114: point = 34, n_alt = 4
  BB 8
   Insn 112: point = 34, n_alt = -1
   Insn 111: point = 34, n_alt = 3
   Insn 110: point = 35, n_alt = 4
  BB 3
   Insn 148: point = 36, n_alt = -1
   Insn 26: point = 36, n_alt = 5
   Insn 25: point = 37, n_alt = 1
   Insn 24: point = 38, n_alt = -1
   Insn 23: point = 38, n_alt = 4
  BB 7
   Insn 104: point = 38, n_alt = 5
   Insn 103: point = 39, n_alt = 4
   Insn 102: point = 41, n_alt = 4
  BB 6
   Insn 99: point = 42, n_alt = 5
   Insn 98: point = 43, n_alt = 0
   Insn 97: point = 45, n_alt = 4
   Insn 96: point = 47, n_alt = 4
   Insn 95: point = 49, n_alt = 4
   Insn 94: point = 51, n_alt = -2
   Insn 93: point = 53, n_alt = 2
   Insn 92: point = 55, n_alt = 6
   Insn 91: point = 57, n_alt = 2
   Insn 90: point = 58, n_alt = 4
   Insn 89: point = 59, n_alt = 2
   Insn 88: point = 60, n_alt = 4
   Insn 87: point = 61, n_alt = 2
   Insn 86: point = 62, n_alt = -2
   Insn 85: point = 63, n_alt = 4
   Insn 84: point = 64, n_alt = 4
   Insn 83: point = 65, n_alt = 4
   Insn 82: point = 67, n_alt = 4
   Insn 81: point = 69, n_alt = 4
   Insn 80: point = 71, n_alt = 4
   Insn 79: point = 73, n_alt = -2
   Insn 78: point = 75, n_alt = 2
   Insn 77: point = 77, n_alt = 6
   Insn 76: point = 79, n_alt = 2
   Insn 75: point = 80, n_alt = 4
   Insn 74: point = 81, n_alt = 2
   Insn 73: point = 82, n_alt = 4
   Insn 72: point = 83, n_alt = 2
   Insn 71: point = 84, n_alt = -2
   Insn 70: point = 85, n_alt = 4
   Insn 69: point = 86, n_alt = 4
  BB 5
   Insn 67: point = 87, n_alt = -1
   Insn 66: point = 87, n_alt = 3
   Insn 65: point = 88, n_alt = -2
   Insn 64: point = 89, n_alt = -1
   Insn 63: point = 89, n_alt = -2
   Insn 62: point = 90, n_alt = 4
   Insn 61: point = 90, n_alt = 4
   Insn 60: point = 92, n_alt = 4
   Insn 59: point = 94, n_alt = 4
   Insn 58: point = 96, n_alt = 4
   Insn 57: point = 98, n_alt = -2
   Insn 56: point = 100, n_alt = 2
   Insn 55: point = 102, n_alt = 6
   Insn 54: point = 104, n_alt = 2
   Insn 53: point = 105, n_alt = 4
   Insn 52: point = 106, n_alt = 2
   Insn 51: point = 107, n_alt = 4
   Insn 50: point = 108, n_alt = 2
   Insn 49: point = 109, n_alt = -2
   Insn 48: point = 110, n_alt = 4
   Insn 47: point = 111, n_alt = 4
  BB 4
   Insn 45: point = 112, n_alt = -1
   Insn 44: point = 112, n_alt = 3
   Insn 43: point = 113, n_alt = 4
   Insn 42: point = 115, n_alt = 4
   Insn 41: point = 117, n_alt = 4
   Insn 40: point = 119, n_alt = -2
   Insn 39: point = 121, n_alt = 2
   Insn 38: point = 123, n_alt = 6
   Insn 37: point = 125, n_alt = 2
   Insn 36: point = 126, n_alt = 4
   Insn 35: point = 127, n_alt = 2
   Insn 34: point = 128, n_alt = 4
   Insn 33: point = 129, n_alt = 2
   Insn 32: point = 130, n_alt = -2
   Insn 31: point = 131, n_alt = 4
   Insn 30: point = 132, n_alt = 4
  BB 2
   Insn 21: point = 133, n_alt = -1
   Insn 20: point = 133, n_alt = 3
   Insn 19: point = 134, n_alt = 1
   Insn 18: point = 135, n_alt = 8
   Insn 17: point = 136, n_alt = 7
   Insn 16: point = 138, n_alt = 4
   Insn 15: point = 140, n_alt = 4
   Insn 12: point = 141, n_alt = 4
   Insn 11: point = 143, n_alt = 4
   Insn 147: point = 144, n_alt = -1
   Insn 9: point = 144, n_alt = 5
   Insn 8: point = 145, n_alt = 4
   Insn 7: point = 146, n_alt = 5
   Insn 6: point = 147, n_alt = 1
   Insn 5: point = 148, n_alt = 4
 r113: [141..141]
 r115: [137..138]
 r116: [112..113]
 r117: [91..92]
 r118: [89..90]
 r119: [87..88]
 r120: [66..67]
 r121: [44..65]
 r122: [42..45]
 r123: [42..43]
 r124: [22..27]
 r125: [24..26]
 r126: [14..16]
 r127: [7..13]
 r128: [3..4]
 r129: [146..148]
 r130: [146..147]
 r131: [144..145]
 r132: [142..143]
 r133: [139..140]
 r134: [135..136]
 r135: [133..134]
 r136: [36..37]
 r137: [118..132]
 r138: [124..131]
 r139: [122..130] [118..119]
 r140: [120..121]
 r141: [116..117]
 r142: [114..115]
 r143: [97..111]
 r144: [103..110]
 r145: [101..109] [97..98]
 r146: [99..100]
 r147: [95..96]
 r148: [93..94]
 r149: [72..86]
 r150: [78..85]
 r151: [76..84] [72..73]
 r152: [74..75]
 r153: [70..71]
 r154: [68..69]
 r155: [50..64]
 r156: [56..63]
 r157: [54..62] [50..51]
 r158: [52..53]
 r159: [48..49]
 r160: [46..47]
 r161: [38..39]
 r162: [40..41]
 r163: [34..35]
 r164: [32..33]
 r165: [30..31]
 r166: [28..29]
 r167: [24..25]
 r168: [22..23]
 r169: [19..21]
 r170: [19..20]
 r171: [17..18]
 r172: [12..15]
 r173: [10..11]
 r174: [7..8]
 r175: [5..6]
 r176: [0..2]
 r177: [0..1]
Compressing live ranges: from 149 to 105 - 70%
Ranges after the compression:
 r113: [98..98]
 r115: [94..95]
 r116: [78..79]
 r117: [66..67]
 r118: [64..65]
 r119: [62..63]
 r120: [50..51]
 r121: [38..49]
 r122: [36..39]
 r123: [36..37]
 r124: [18..21]
 r125: [20..21]
 r126: [12..13]
 r127: [6..11]
 r128: [2..3]
 r129: [103..104]
 r130: [103..104]
 r131: [101..102]
 r132: [99..100]
 r133: [96..97]
 r134: [92..93]
 r135: [90..91]
 r136: [30..31]
 r137: [84..89]
 r138: [88..89]
 r139: [88..89] [84..85]
 r140: [86..87]
 r141: [82..83]
 r142: [80..81]
 r143: [72..77]
 r144: [76..77]
 r145: [76..77] [72..73]
 r146: [74..75]
 r147: [70..71]
 r148: [68..69]
 r149: [56..61]
 r150: [60..61]
 r151: [60..61] [56..57]
 r152: [58..59]
 r153: [54..55]
 r154: [52..53]
 r155: [44..49]
 r156: [48..49]
 r157: [48..49] [44..45]
 r158: [46..47]
 r159: [42..43]
 r160: [40..41]
 r161: [32..33]
 r162: [34..35]
 r163: [28..29]
 r164: [26..27]
 r165: [24..25]
 r166: [22..23]
 r167: [20..21]
 r168: [18..19]
 r169: [16..17]
 r170: [16..17]
 r171: [14..15]
 r172: [10..13]
 r173: [8..9]
 r174: [6..7]
 r175: [4..5]
 r176: [0..1]
 r177: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 43
changing reg in insn 44
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 98
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 99
changing reg in insn 122
changing reg in insn 127
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 131
changing reg in insn 133
changing reg in insn 132
changing reg in insn 132
changing reg in insn 135
changing reg in insn 133
changing reg in insn 137
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 41
changing reg in insn 31
changing reg in insn 38
changing reg in insn 36
changing reg in insn 34
changing reg in insn 32
changing reg in insn 38
changing reg in insn 36
changing reg in insn 34
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 41
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 58
changing reg in insn 48
changing reg in insn 55
changing reg in insn 53
changing reg in insn 51
changing reg in insn 49
changing reg in insn 55
changing reg in insn 53
changing reg in insn 51
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 49
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 69
changing reg in insn 80
changing reg in insn 70
changing reg in insn 77
changing reg in insn 75
changing reg in insn 73
changing reg in insn 71
changing reg in insn 77
changing reg in insn 75
changing reg in insn 73
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 95
changing reg in insn 85
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 86
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 94
changing reg in insn 92
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 95
changing reg in insn 93
changing reg in insn 92
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 110
changing reg in insn 111
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
deleting insn with uid = 40.
deleting insn with uid = 57.
deleting insn with uid = 79.
deleting insn with uid = 94.
deleting insn with uid = 117.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 141.


uart0_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={10d,6u} r1={11d,6u} r2={18d,25u,12e} r3={74d,71u} r11={1d,32u} r12={8d} r13={1d,15u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={9d,5u} r101={4d} r102={1d,1u} r104={4d} r105={4d} r106={4d} 
;;    total ref usage 667{494d,161u,12e} in 119{115 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 115 129 130 131 132 133 134 135
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [129])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":107:9 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 2 r2 [130])
        (const_int 1 [0x1])) "uart.c":107:9 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (reg/f:SI 3 r3 [129]) [3 color+0 S4 A32])
        (reg:SI 2 r2 [130])) "uart.c":107:9 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [131])
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":109:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 147 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg/f:SI 3 r3 [131])) "uart.c":109:6 253 {*arm_movsi_insn}
     (nil))
(insn 147 9 11 2 (const_int 0 [0]) "uart.c":110:8 311 {nop}
     (nil))
(insn 11 147 12 2 (set (reg/f:SI 3 r3 [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (mem/v/f:SI (reg/f:SI 3 r3 [132]) [2 up_25->base+0 S4 A32])) "uart.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 16 2 (set (reg/f:SI 3 r3 [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":112:11 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (mem/v/f:SI (reg/f:SI 3 r3 [133]) [2 up_25->base+0 S4 A32])) "uart.c":112:11 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:QI 3 r3 [134])
        (mem:QI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [0 *_3+0 S1 A8])) "uart.c":112:5 263 {*arm_movqi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [134])) "uart.c":112:5 263 {*arm_movqi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 3 r3 [135])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "uart.c":115:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [135])
            (const_int 3 [0x3]))) "uart.c":115:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "uart.c":115:6 273 {arm_cond_branch}
     (nil)
 -> 119)
;;  succ:       3 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 136
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f19cf0af360 *.LC1>)) "uart.c":116:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":116:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 3 r3 [136])
        (const_int 1 [0x1])) "uart.c":117:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 148 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [136])) "uart.c":117:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 148 26 149 3 (set (pc)
        (label_ref 105)) "uart.c":117:5 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       8 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 149 148 107)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 137 138 139 140 141 142
(code_label 107 149 29 4 11 (nil) [1 uses])
(note 29 107 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:SI 1 r1 [137])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 4 (set (reg:SI 2 r2 [138])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 3 r3 [139])
        (reg:SI 2 r2 [138])) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 6 [0x6]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 34 33 35 4 (set (reg:SI 3 r3 [139])
        (plus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 65 [0x41]))
        (nil)))
(insn 35 34 36 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 1 [0x1]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 36 35 37 4 (set (reg:SI 3 r3 [139])
        (plus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":118:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 131 [0x83]))
        (nil)))
(insn 37 36 38 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 3 [0x3]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 4 (set (reg:SI 3 r3 [139])
        (minus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":118:18 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 1047 [0x417]))
        (nil)))
(insn 39 38 41 4 (set (reg:SI 3 r3 [140])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 2 [0x2]))) "uart.c":118:18 147 {*arm_shiftsi3}
     (nil))
(insn 41 39 42 4 (set (reg:SI 3 r3 [141])
        (plus:SI (reg/f:SI 1 r1 [137])
            (reg:SI 3 r3 [139]))) "uart.c":118:18 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 4 (set (reg/f:SI 3 r3 [142])
        (plus:SI (reg:SI 3 r3 [141])
            (const_int 28 [0x1c]))) "uart.c":118:18 7 {*arm_addsi3}
     (nil))
(insn 43 42 44 4 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (mem:SI (reg/f:SI 3 r3 [142]) [3 proc[i_19].status+0 S4 A32])) "uart.c":118:18 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 0 [0]))) "uart.c":118:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":118:10 273 {arm_cond_branch}
     (nil)
 -> 100)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 118 119 143 144 145 146 147 148
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:SI 1 r1 [143])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 2 r2 [144])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (reg:SI 3 r3 [145])
        (reg:SI 2 r2 [144])) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 6 [0x6]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 51 50 52 5 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 65 [0x41]))
        (nil)))
(insn 52 51 53 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 1 [0x1]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 53 52 54 5 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":118:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 131 [0x83]))
        (nil)))
(insn 54 53 55 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 3 [0x3]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 55 54 56 5 (set (reg:SI 3 r3 [145])
        (minus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":118:51 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 1047 [0x417]))
        (nil)))
(insn 56 55 58 5 (set (reg:SI 3 r3 [146])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 2 [0x2]))) "uart.c":118:51 147 {*arm_shiftsi3}
     (nil))
(insn 58 56 59 5 (set (reg:SI 3 r3 [147])
        (plus:SI (reg/f:SI 1 r1 [143])
            (reg:SI 3 r3 [145]))) "uart.c":118:51 7 {*arm_addsi3}
     (nil))
(insn 59 58 60 5 (set (reg/f:SI 3 r3 [148])
        (plus:SI (reg:SI 3 r3 [147])
            (const_int 84 [0x54]))) "uart.c":118:51 7 {*arm_addsi3}
     (nil))
(insn 60 59 61 5 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (mem/f:SI (reg/f:SI 3 r3 [148]) [10 proc[i_19].res+0 S4 A32])) "uart.c":118:51 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 5 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg/f:SI 3 r3 [orig:117 _5 ] [117])
            (const_int 60 [0x3c]))) "uart.c":118:55 7 {*arm_addsi3}
     (nil))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7f19cf0af480 *.LC2>)) "uart.c":118:37 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:118 _6 ] [118])) "uart.c":118:37 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7f19cf2e7700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":118:37 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (reg:SI 0 r0)) "uart.c":118:37 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:119 _7 ] [119])
            (const_int 0 [0]))) "uart.c":118:34 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":118:34 273 {arm_cond_branch}
     (nil)
 -> 100)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 149 150 151 152 153 154 155 156 157 158 159 160
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 1 r1 [149])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 6 (set (reg:SI 2 r2 [150])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 6 (set (reg:SI 3 r3 [151])
        (reg:SI 2 r2 [150])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 6 [0x6]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 73 72 74 6 (set (reg:SI 3 r3 [151])
        (plus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 65 [0x41]))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 1 [0x1]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 75 74 76 6 (set (reg:SI 3 r3 [151])
        (plus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 131 [0x83]))
        (nil)))
(insn 76 75 77 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 3 [0x3]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 77 76 78 6 (set (reg:SI 3 r3 [151])
        (minus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":119:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 1047 [0x417]))
        (nil)))
(insn 78 77 80 6 (set (reg:SI 3 r3 [152])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 2 [0x2]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 80 78 81 6 (set (reg:SI 3 r3 [153])
        (plus:SI (reg/f:SI 1 r1 [149])
            (reg:SI 3 r3 [151]))) "uart.c":119:9 7 {*arm_addsi3}
     (nil))
(insn 81 80 82 6 (set (reg/f:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [153])
            (const_int 84 [0x54]))) "uart.c":119:9 7 {*arm_addsi3}
     (nil))
(insn 82 81 83 6 (set (reg/f:SI 3 r3 [orig:120 _8 ] [120])
        (mem/f:SI (reg/f:SI 3 r3 [154]) [10 proc[i_19].res+0 S4 A32])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 6 (set (reg:SI 1 r1 [orig:121 _9 ] [121])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:120 _8 ] [120])
                (const_int 92 [0x5c])) [3 _8->signal+0 S4 A32])) "uart.c":119:22 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 6 (set (reg/f:SI 0 r0 [155])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 6 (set (reg:SI 2 r2 [156])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 6 (set (reg:SI 3 r3 [157])
        (reg:SI 2 r2 [156])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 6 [0x6]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 88 87 89 6 (set (reg:SI 3 r3 [157])
        (plus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 65 [0x41]))
        (nil)))
(insn 89 88 90 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 1 [0x1]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 90 89 91 6 (set (reg:SI 3 r3 [157])
        (plus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":119:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 131 [0x83]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 3 [0x3]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 92 91 93 6 (set (reg:SI 3 r3 [157])
        (minus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":119:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 1047 [0x417]))
        (nil)))
(insn 93 92 95 6 (set (reg:SI 3 r3 [158])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 2 [0x2]))) "uart.c":119:9 147 {*arm_shiftsi3}
     (nil))
(insn 95 93 96 6 (set (reg:SI 3 r3 [159])
        (plus:SI (reg/f:SI 0 r0 [155])
            (reg:SI 3 r3 [157]))) "uart.c":119:9 7 {*arm_addsi3}
     (nil))
(insn 96 95 97 6 (set (reg/f:SI 3 r3 [160])
        (plus:SI (reg:SI 3 r3 [159])
            (const_int 84 [0x54]))) "uart.c":119:9 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 6 (set (reg/f:SI 3 r3 [orig:122 _10 ] [122])
        (mem/f:SI (reg/f:SI 3 r3 [160]) [10 proc[i_19].res+0 S4 A32])) "uart.c":119:9 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 6 (set (reg:SI 2 r2 [orig:123 _11 ] [123])
        (ior:SI (reg:SI 1 r1 [orig:121 _9 ] [121])
            (const_int 4 [0x4]))) "uart.c":119:22 106 {*iorsi3_insn}
     (nil))
(insn 99 98 100 6 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:122 _10 ] [122])
                (const_int 92 [0x5c])) [3 _10->signal+0 S4 A32])
        (reg:SI 2 r2 [orig:123 _11 ] [123])) "uart.c":119:22 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 161 162
(code_label 100 99 101 7 10 (nil) [2 uses])
(note 101 100 102 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 7 (set (reg:SI 3 r3 [162])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":117:25 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 7 (set (reg:SI 3 r3 [161])
        (plus:SI (reg:SI 3 r3 [162])
            (const_int 1 [0x1]))) "uart.c":117:25 7 {*arm_addsi3}
     (nil))
(insn 104 103 105 7 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [161])) "uart.c":117:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 163
(code_label 105 104 106 8 9 (nil) [1 uses])
(note 106 105 110 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 110 106 111 8 (set (reg:SI 3 r3 [163])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":117:16 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [163])
            (const_int 63 [0x3f]))) "uart.c":117:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 112 111 113 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "uart.c":117:16 273 {arm_cond_branch}
     (nil)
 -> 107)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 164 165
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f19cf0af510 *.LC3>)) "uart.c":122:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 115 114 116 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":122:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 116 115 118 9 (set (reg:SI 3 r3 [164])
        (const_int 13 [0xd])) "uart.c":123:7 253 {*arm_movsi_insn}
     (nil))
(insn 118 116 119 9 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [165])) "uart.c":123:7 263 {*arm_movqi_insn}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       2
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 126 127 128 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 119 118 120 10 8 (nil) [1 uses])
(note 120 119 121 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 10 (set (reg/f:SI 3 r3 [166])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":126:15 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 10 (set (reg:SI 3 r3 [orig:124 _12 ] [124])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [166])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":126:15 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 10 (set (reg:SI 1 r1 [orig:125 _14 ] [125])
        (plus:SI (reg:SI 3 r3 [orig:124 _12 ] [124])
            (const_int 1 [0x1]))) "uart.c":126:23 7 {*arm_addsi3}
     (nil))
(insn 124 123 125 10 (set (reg/f:SI 2 r2 [167])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":126:23 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 10 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [167])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 1 r1 [orig:125 _14 ] [125])) "uart.c":126:23 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 127 10 (set (reg/f:SI 2 r2 [168])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":126:27 253 {*arm_movsi_insn}
     (nil))
(insn 127 126 128 10 (set (reg/f:SI 3 r3 [169])
        (plus:SI (reg/f:SI 2 r2 [168])
            (reg:SI 3 r3 [orig:124 _12 ] [124]))) "uart.c":126:27 7 {*arm_addsi3}
     (nil))
(insn 128 127 129 10 (set (reg:QI 2 r2 [170])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])) "uart.c":126:27 263 {*arm_movqi_insn}
     (nil))
(insn 129 128 130 10 (set (mem/v:QI (plus:SI (reg/f:SI 3 r3 [169])
                (const_int 4 [0x4])) [0 up_25->inbuf[_13]+0 S1 A8])
        (reg:QI 2 r2 [170])) "uart.c":126:27 263 {*arm_movqi_insn}
     (nil))
(insn 130 129 131 10 (set (reg/f:SI 3 r3 [171])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 10 (set (reg:SI 3 r3 [orig:126 _15 ] [126])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [171])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 132 131 133 10 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [orig:126 _15 ] [126]))
                    (const_int 0 [0])))
            (set (reg:SI 2 r2 [172])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [orig:126 _15 ] [126])))
        ]) "uart.c":127:14 46 {subsi3_compare0}
     (nil))
(insn 133 132 134 10 (set (reg:SI 3 r3 [orig:127 _16 ] [127])
        (and:SI (reg:SI 3 r3 [orig:126 _15 ] [126])
            (const_int 63 [0x3f]))) "uart.c":127:14 90 {*arm_andsi3_insn}
     (nil))
(insn 134 133 135 10 (set (reg:SI 2 r2 [173])
        (and:SI (reg:SI 2 r2 [172])
            (const_int 63 [0x3f]))) "uart.c":127:14 90 {*arm_andsi3_insn}
     (nil))
(insn 135 134 136 10 (set (reg:SI 3 r3 [orig:127 _16 ] [127])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 2 r2 [173]))
            (reg:SI 3 r3 [orig:127 _16 ] [127]))) "uart.c":127:14 371 {*if_neg_move}
     (nil))
(insn 136 135 137 10 (set (reg/f:SI 2 r2 [174])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 10 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [174])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 3 r3 [orig:127 _16 ] [127])) "uart.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 138 137 139 10 (set (reg:SI 3 r3 [175])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":128:3 253 {*arm_movsi_insn}
     (nil))
(insn 139 138 140 10 (set (reg/f:SI 3 r3 [orig:128 _17 ] [128])
        (plus:SI (reg:SI 3 r3 [175])
            (const_int 76 [0x4c]))) "uart.c":128:3 7 {*arm_addsi3}
     (nil))
(insn 140 139 141 10 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:128 _17 ] [128])) "uart.c":128:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 141 140 142 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f19cf067d00 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":128:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 142 141 143 10 (set (reg/f:SI 3 r3 [176])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 10 (set (reg:SI 2 r2 [177])
        (const_int 6 [0x6])) "uart.c":129:8 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 150 10 (set (mem/c:SI (reg/f:SI 3 r3 [176]) [3 color+0 S4 A32])
        (reg:SI 2 r2 [177])) "uart.c":129:8 253 {*arm_movsi_insn}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 150 144 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 11 (const_int 0 [0]) "uart.c":130:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 152 151 0 NOTE_INSN_DELETED)

;; Function uart1_handler (uart1_handler, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=4)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 18:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 37:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 38:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 39:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 42:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 44:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 47:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 48:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 50:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 51:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 52:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 54:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 55:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 56:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 59:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 60:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 61:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 62:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 66:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 69:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 70:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 72:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 74:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 76:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 77:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 78:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 80:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 81:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 87:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 88:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 89:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 90:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 91:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 92:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 93:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 96:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 97:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 98:  (0) =r  (1) %r  (2) I {*iorsi3_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 99:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 103:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 114:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 116:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 117:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 118:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 121:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 122:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 123:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 124:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 125:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 126:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 127:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 128:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 129:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 130:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 131:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 132:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 133:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 134:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 135:  (0) r  (1) 0  (2) r {*if_neg_move}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 136:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 137:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 138:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 139:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 142:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 143:  (0) r  (1) I {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 144:  (0) m  (1) rk {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4 5 6
EBB 7
EBB 8 9
EBB 10 11

********** Pseudo live ranges #1: **********

  BB 11
   Insn 151: point = 0, n_alt = -1
  BB 10
   Insn 144: point = 0, n_alt = 5
   Insn 143: point = 1, n_alt = 1
   Insn 142: point = 2, n_alt = 4
   Insn 141: point = 3, n_alt = -1
   Insn 140: point = 3, n_alt = -2
   Insn 139: point = 4, n_alt = 4
   Insn 138: point = 6, n_alt = 4
   Insn 137: point = 7, n_alt = 5
   Insn 136: point = 8, n_alt = 4
   Insn 135: point = 9, n_alt = 1
   Insn 134: point = 11, n_alt = 0
   Insn 133: point = 13, n_alt = 0
   Insn 132: point = 15, n_alt = 2
   Insn 131: point = 16, n_alt = 4
   Insn 130: point = 18, n_alt = 4
   Insn 129: point = 19, n_alt = 8
   Insn 128: point = 20, n_alt = 7
   Insn 127: point = 21, n_alt = 4
   Insn 126: point = 23, n_alt = 4
   Insn 125: point = 24, n_alt = 5
   Insn 124: point = 25, n_alt = 4
   Insn 123: point = 26, n_alt = 4
   Insn 122: point = 27, n_alt = 4
   Insn 121: point = 29, n_alt = 4
  BB 9
   Insn 118: point = 30, n_alt = 8
   Insn 117: point = 31, n_alt = 1
   Insn 116: point = 33, n_alt = 1
   Insn 115: point = 34, n_alt = -1
   Insn 114: point = 34, n_alt = 4
  BB 8
   Insn 112: point = 34, n_alt = -1
   Insn 111: point = 34, n_alt = 3
   Insn 110: point = 35, n_alt = 4
  BB 3
   Insn 148: point = 36, n_alt = -1
   Insn 26: point = 36, n_alt = 5
   Insn 25: point = 37, n_alt = 1
   Insn 24: point = 38, n_alt = -1
   Insn 23: point = 38, n_alt = 4
  BB 7
   Insn 104: point = 38, n_alt = 5
   Insn 103: point = 39, n_alt = 4
   Insn 102: point = 41, n_alt = 4
  BB 6
   Insn 99: point = 42, n_alt = 5
   Insn 98: point = 43, n_alt = 0
   Insn 97: point = 45, n_alt = 4
   Insn 96: point = 47, n_alt = 4
   Insn 95: point = 49, n_alt = 4
   Insn 94: point = 51, n_alt = -2
   Insn 93: point = 53, n_alt = 2
   Insn 92: point = 55, n_alt = 6
   Insn 91: point = 57, n_alt = 2
   Insn 90: point = 58, n_alt = 4
   Insn 89: point = 59, n_alt = 2
   Insn 88: point = 60, n_alt = 4
   Insn 87: point = 61, n_alt = 2
   Insn 86: point = 62, n_alt = -2
   Insn 85: point = 63, n_alt = 4
   Insn 84: point = 64, n_alt = 4
   Insn 83: point = 65, n_alt = 4
   Insn 82: point = 67, n_alt = 4
   Insn 81: point = 69, n_alt = 4
   Insn 80: point = 71, n_alt = 4
   Insn 79: point = 73, n_alt = -2
   Insn 78: point = 75, n_alt = 2
   Insn 77: point = 77, n_alt = 6
   Insn 76: point = 79, n_alt = 2
   Insn 75: point = 80, n_alt = 4
   Insn 74: point = 81, n_alt = 2
   Insn 73: point = 82, n_alt = 4
   Insn 72: point = 83, n_alt = 2
   Insn 71: point = 84, n_alt = -2
   Insn 70: point = 85, n_alt = 4
   Insn 69: point = 86, n_alt = 4
  BB 5
   Insn 67: point = 87, n_alt = -1
   Insn 66: point = 87, n_alt = 3
   Insn 65: point = 88, n_alt = -2
   Insn 64: point = 89, n_alt = -1
   Insn 63: point = 89, n_alt = -2
   Insn 62: point = 90, n_alt = 4
   Insn 61: point = 90, n_alt = 4
   Insn 60: point = 92, n_alt = 4
   Insn 59: point = 94, n_alt = 4
   Insn 58: point = 96, n_alt = 4
   Insn 57: point = 98, n_alt = -2
   Insn 56: point = 100, n_alt = 2
   Insn 55: point = 102, n_alt = 6
   Insn 54: point = 104, n_alt = 2
   Insn 53: point = 105, n_alt = 4
   Insn 52: point = 106, n_alt = 2
   Insn 51: point = 107, n_alt = 4
   Insn 50: point = 108, n_alt = 2
   Insn 49: point = 109, n_alt = -2
   Insn 48: point = 110, n_alt = 4
   Insn 47: point = 111, n_alt = 4
  BB 4
   Insn 45: point = 112, n_alt = -1
   Insn 44: point = 112, n_alt = 3
   Insn 43: point = 113, n_alt = 4
   Insn 42: point = 115, n_alt = 4
   Insn 41: point = 117, n_alt = 4
   Insn 40: point = 119, n_alt = -2
   Insn 39: point = 121, n_alt = 2
   Insn 38: point = 123, n_alt = 6
   Insn 37: point = 125, n_alt = 2
   Insn 36: point = 126, n_alt = 4
   Insn 35: point = 127, n_alt = 2
   Insn 34: point = 128, n_alt = 4
   Insn 33: point = 129, n_alt = 2
   Insn 32: point = 130, n_alt = -2
   Insn 31: point = 131, n_alt = 4
   Insn 30: point = 132, n_alt = 4
  BB 2
   Insn 21: point = 133, n_alt = -1
   Insn 20: point = 133, n_alt = 3
   Insn 19: point = 134, n_alt = 1
   Insn 18: point = 135, n_alt = 8
   Insn 17: point = 136, n_alt = 7
   Insn 16: point = 138, n_alt = 4
   Insn 15: point = 140, n_alt = 4
   Insn 12: point = 141, n_alt = 4
   Insn 11: point = 143, n_alt = 4
   Insn 147: point = 144, n_alt = -1
   Insn 9: point = 144, n_alt = 5
   Insn 8: point = 145, n_alt = 4
   Insn 7: point = 146, n_alt = 5
   Insn 6: point = 147, n_alt = 1
   Insn 5: point = 148, n_alt = 4
 r113: [141..141]
 r115: [137..138]
 r116: [112..113]
 r117: [91..92]
 r118: [89..90]
 r119: [87..88]
 r120: [66..67]
 r121: [44..65]
 r122: [42..45]
 r123: [42..43]
 r124: [22..27]
 r125: [24..26]
 r126: [14..16]
 r127: [7..13]
 r128: [3..4]
 r129: [146..148]
 r130: [146..147]
 r131: [144..145]
 r132: [142..143]
 r133: [139..140]
 r134: [135..136]
 r135: [133..134]
 r136: [36..37]
 r137: [118..132]
 r138: [124..131]
 r139: [122..130] [118..119]
 r140: [120..121]
 r141: [116..117]
 r142: [114..115]
 r143: [97..111]
 r144: [103..110]
 r145: [101..109] [97..98]
 r146: [99..100]
 r147: [95..96]
 r148: [93..94]
 r149: [72..86]
 r150: [78..85]
 r151: [76..84] [72..73]
 r152: [74..75]
 r153: [70..71]
 r154: [68..69]
 r155: [50..64]
 r156: [56..63]
 r157: [54..62] [50..51]
 r158: [52..53]
 r159: [48..49]
 r160: [46..47]
 r161: [38..39]
 r162: [40..41]
 r163: [34..35]
 r164: [32..33]
 r165: [30..31]
 r166: [28..29]
 r167: [24..25]
 r168: [22..23]
 r169: [19..21]
 r170: [19..20]
 r171: [17..18]
 r172: [12..15]
 r173: [10..11]
 r174: [7..8]
 r175: [5..6]
 r176: [0..2]
 r177: [0..1]
Compressing live ranges: from 149 to 105 - 70%
Ranges after the compression:
 r113: [98..98]
 r115: [94..95]
 r116: [78..79]
 r117: [66..67]
 r118: [64..65]
 r119: [62..63]
 r120: [50..51]
 r121: [38..49]
 r122: [36..39]
 r123: [36..37]
 r124: [18..21]
 r125: [20..21]
 r126: [12..13]
 r127: [6..11]
 r128: [2..3]
 r129: [103..104]
 r130: [103..104]
 r131: [101..102]
 r132: [99..100]
 r133: [96..97]
 r134: [92..93]
 r135: [90..91]
 r136: [30..31]
 r137: [84..89]
 r138: [88..89]
 r139: [88..89] [84..85]
 r140: [86..87]
 r141: [82..83]
 r142: [80..81]
 r143: [72..77]
 r144: [76..77]
 r145: [76..77] [72..73]
 r146: [74..75]
 r147: [70..71]
 r148: [68..69]
 r149: [56..61]
 r150: [60..61]
 r151: [60..61] [56..57]
 r152: [58..59]
 r153: [54..55]
 r154: [52..53]
 r155: [44..49]
 r156: [48..49]
 r157: [48..49] [44..45]
 r158: [46..47]
 r159: [42..43]
 r160: [40..41]
 r161: [32..33]
 r162: [34..35]
 r163: [28..29]
 r164: [26..27]
 r165: [24..25]
 r166: [22..23]
 r167: [20..21]
 r168: [18..19]
 r169: [16..17]
 r170: [16..17]
 r171: [14..15]
 r172: [10..13]
 r173: [8..9]
 r174: [6..7]
 r175: [4..5]
 r176: [0..1]
 r177: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 43
changing reg in insn 44
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 66
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 98
changing reg in insn 97
changing reg in insn 99
changing reg in insn 98
changing reg in insn 99
changing reg in insn 122
changing reg in insn 127
changing reg in insn 123
changing reg in insn 123
changing reg in insn 125
changing reg in insn 131
changing reg in insn 133
changing reg in insn 132
changing reg in insn 132
changing reg in insn 135
changing reg in insn 133
changing reg in insn 137
changing reg in insn 135
changing reg in insn 139
changing reg in insn 140
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 41
changing reg in insn 31
changing reg in insn 38
changing reg in insn 36
changing reg in insn 34
changing reg in insn 32
changing reg in insn 38
changing reg in insn 36
changing reg in insn 34
changing reg in insn 40
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 32
changing reg in insn 41
changing reg in insn 39
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 33
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 58
changing reg in insn 48
changing reg in insn 55
changing reg in insn 53
changing reg in insn 51
changing reg in insn 49
changing reg in insn 55
changing reg in insn 53
changing reg in insn 51
changing reg in insn 57
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 49
changing reg in insn 58
changing reg in insn 56
changing reg in insn 55
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 50
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 69
changing reg in insn 80
changing reg in insn 70
changing reg in insn 77
changing reg in insn 75
changing reg in insn 73
changing reg in insn 71
changing reg in insn 77
changing reg in insn 75
changing reg in insn 73
changing reg in insn 79
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 71
changing reg in insn 80
changing reg in insn 78
changing reg in insn 77
changing reg in insn 76
changing reg in insn 75
changing reg in insn 74
changing reg in insn 73
changing reg in insn 72
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 84
changing reg in insn 95
changing reg in insn 85
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 86
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 94
changing reg in insn 92
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 86
changing reg in insn 95
changing reg in insn 93
changing reg in insn 92
changing reg in insn 91
changing reg in insn 90
changing reg in insn 89
changing reg in insn 88
changing reg in insn 87
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 103
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 110
changing reg in insn 111
changing reg in insn 116
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 127
changing reg in insn 129
changing reg in insn 128
changing reg in insn 129
changing reg in insn 130
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 139
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
deleting insn with uid = 40.
deleting insn with uid = 57.
deleting insn with uid = 79.
deleting insn with uid = 94.
deleting insn with uid = 117.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 141.


uart1_handler

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={10d,6u} r1={11d,6u} r2={18d,25u,12e} r3={74d,71u} r11={1d,32u} r12={8d} r13={1d,15u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={9d,5u} r101={4d} r102={1d,1u} r104={4d} r105={4d} r106={4d} 
;;    total ref usage 667{494d,161u,12e} in 119{115 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 115 129 130 131 132 133 134 135
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [129])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":137:8 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 2 r2 [130])
        (const_int 5 [0x5])) "uart.c":137:8 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/c:SI (reg/f:SI 3 r3 [129]) [3 color+0 S4 A32])
        (reg:SI 2 r2 [130])) "uart.c":137:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 3 r3 [131])
        (const:SI (plus:SI (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)
                (const_int 244 [0xf4])))) "uart.c":139:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 147 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg/f:SI 3 r3 [131])) "uart.c":139:6 253 {*arm_movsi_insn}
     (nil))
(insn 147 9 11 2 (const_int 0 [0]) "uart.c":140:8 311 {nop}
     (nil))
(insn 11 147 12 2 (set (reg/f:SI 3 r3 [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":140:14 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 15 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (mem/v/f:SI (reg/f:SI 3 r3 [132]) [2 up_25->base+0 S4 A32])) "uart.c":140:14 253 {*arm_movsi_insn}
     (nil))
(insn 15 12 16 2 (set (reg/f:SI 3 r3 [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":142:11 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [orig:115 _3 ] [115])
        (mem/v/f:SI (reg/f:SI 3 r3 [133]) [2 up_25->base+0 S4 A32])) "uart.c":142:11 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:QI 3 r3 [134])
        (mem:QI (reg/f:SI 3 r3 [orig:115 _3 ] [115]) [0 *_3+0 S1 A8])) "uart.c":142:5 263 {*arm_movqi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [134])) "uart.c":142:5 263 {*arm_movqi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 3 r3 [135])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8]))) "uart.c":145:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [135])
            (const_int 3 [0x3]))) "uart.c":145:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 21 20 22 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 119)
            (pc))) "uart.c":145:6 273 {arm_cond_branch}
     (nil)
 -> 119)
;;  succ:       3 (FALLTHRU)
;;              10
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 136
(note 22 21 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7f19cf0af360 *.LC1>)) "uart.c":146:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":146:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 3 r3 [136])
        (const_int 1 [0x1])) "uart.c":147:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 148 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [136])) "uart.c":147:11 253 {*arm_movsi_insn}
     (nil))
(jump_insn 148 26 149 3 (set (pc)
        (label_ref 105)) "uart.c":147:5 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       8 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 149 148 107)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       8
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 137 138 139 140 141 142
(code_label 107 149 29 4 18 (nil) [1 uses])
(note 29 107 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg/f:SI 1 r1 [137])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 4 (set (reg:SI 2 r2 [138])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 3 r3 [139])
        (reg:SI 2 r2 [138])) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 6 [0x6]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 34 33 35 4 (set (reg:SI 3 r3 [139])
        (plus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 65 [0x41]))
        (nil)))
(insn 35 34 36 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 1 [0x1]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 36 35 37 4 (set (reg:SI 3 r3 [139])
        (plus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":148:18 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 131 [0x83]))
        (nil)))
(insn 37 36 38 4 (set (reg:SI 3 r3 [139])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 3 [0x3]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 4 (set (reg:SI 3 r3 [139])
        (minus:SI (reg:SI 3 r3 [139])
            (reg:SI 2 r2 [138]))) "uart.c":148:18 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [138])
            (const_int 1047 [0x417]))
        (nil)))
(insn 39 38 41 4 (set (reg:SI 3 r3 [140])
        (ashift:SI (reg:SI 3 r3 [139])
            (const_int 2 [0x2]))) "uart.c":148:18 147 {*arm_shiftsi3}
     (nil))
(insn 41 39 42 4 (set (reg:SI 3 r3 [141])
        (plus:SI (reg/f:SI 1 r1 [137])
            (reg:SI 3 r3 [139]))) "uart.c":148:18 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 4 (set (reg/f:SI 3 r3 [142])
        (plus:SI (reg:SI 3 r3 [141])
            (const_int 28 [0x1c]))) "uart.c":148:18 7 {*arm_addsi3}
     (nil))
(insn 43 42 44 4 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (mem:SI (reg/f:SI 3 r3 [142]) [3 proc[i_19].status+0 S4 A32])) "uart.c":148:18 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 0 [0]))) "uart.c":148:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":148:10 273 {arm_cond_branch}
     (nil)
 -> 100)
;;  succ:       5 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 118 119 143 144 145 146 147 148
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 5 (set (reg/f:SI 1 r1 [143])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 5 (set (reg:SI 2 r2 [144])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 5 (set (reg:SI 3 r3 [145])
        (reg:SI 2 r2 [144])) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 6 [0x6]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 51 50 52 5 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 65 [0x41]))
        (nil)))
(insn 52 51 53 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 1 [0x1]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 53 52 54 5 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":148:51 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 131 [0x83]))
        (nil)))
(insn 54 53 55 5 (set (reg:SI 3 r3 [145])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 3 [0x3]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 55 54 56 5 (set (reg:SI 3 r3 [145])
        (minus:SI (reg:SI 3 r3 [145])
            (reg:SI 2 r2 [144]))) "uart.c":148:51 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [144])
            (const_int 1047 [0x417]))
        (nil)))
(insn 56 55 58 5 (set (reg:SI 3 r3 [146])
        (ashift:SI (reg:SI 3 r3 [145])
            (const_int 2 [0x2]))) "uart.c":148:51 147 {*arm_shiftsi3}
     (nil))
(insn 58 56 59 5 (set (reg:SI 3 r3 [147])
        (plus:SI (reg/f:SI 1 r1 [143])
            (reg:SI 3 r3 [145]))) "uart.c":148:51 7 {*arm_addsi3}
     (nil))
(insn 59 58 60 5 (set (reg/f:SI 3 r3 [148])
        (plus:SI (reg:SI 3 r3 [147])
            (const_int 84 [0x54]))) "uart.c":148:51 7 {*arm_addsi3}
     (nil))
(insn 60 59 61 5 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (mem/f:SI (reg/f:SI 3 r3 [148]) [10 proc[i_19].res+0 S4 A32])) "uart.c":148:51 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 5 (set (reg/f:SI 3 r3 [orig:118 _6 ] [118])
        (plus:SI (reg/f:SI 3 r3 [orig:117 _5 ] [117])
            (const_int 60 [0x3c]))) "uart.c":148:55 7 {*arm_addsi3}
     (nil))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7f19cf0af5a0 *.LC4>)) "uart.c":148:37 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:118 _6 ] [118])) "uart.c":148:37 253 {*arm_movsi_insn}
     (nil))
(call_insn/i 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7f19cf2e7700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":148:37 291 {*call_value_symbol}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (reg:SI 0 r0)) "uart.c":148:37 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:119 _7 ] [119])
            (const_int 0 [0]))) "uart.c":148:34 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 100)
            (pc))) "uart.c":148:34 273 {arm_cond_branch}
     (nil)
 -> 100)
;;  succ:       6 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 120 121 122 123 149 150 151 152 153 154 155 156 157 158 159 160
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 1 r1 [149])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 6 (set (reg:SI 2 r2 [150])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 6 (set (reg:SI 3 r3 [151])
        (reg:SI 2 r2 [150])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 6 [0x6]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 73 72 74 6 (set (reg:SI 3 r3 [151])
        (plus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 65 [0x41]))
        (nil)))
(insn 74 73 75 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 1 [0x1]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 75 74 76 6 (set (reg:SI 3 r3 [151])
        (plus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 131 [0x83]))
        (nil)))
(insn 76 75 77 6 (set (reg:SI 3 r3 [151])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 3 [0x3]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 77 76 78 6 (set (reg:SI 3 r3 [151])
        (minus:SI (reg:SI 3 r3 [151])
            (reg:SI 2 r2 [150]))) "uart.c":149:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [150])
            (const_int 1047 [0x417]))
        (nil)))
(insn 78 77 80 6 (set (reg:SI 3 r3 [152])
        (ashift:SI (reg:SI 3 r3 [151])
            (const_int 2 [0x2]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 80 78 81 6 (set (reg:SI 3 r3 [153])
        (plus:SI (reg/f:SI 1 r1 [149])
            (reg:SI 3 r3 [151]))) "uart.c":149:9 7 {*arm_addsi3}
     (nil))
(insn 81 80 82 6 (set (reg/f:SI 3 r3 [154])
        (plus:SI (reg:SI 3 r3 [153])
            (const_int 84 [0x54]))) "uart.c":149:9 7 {*arm_addsi3}
     (nil))
(insn 82 81 83 6 (set (reg/f:SI 3 r3 [orig:120 _8 ] [120])
        (mem/f:SI (reg/f:SI 3 r3 [154]) [10 proc[i_19].res+0 S4 A32])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 6 (set (reg:SI 1 r1 [orig:121 _9 ] [121])
        (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:120 _8 ] [120])
                (const_int 92 [0x5c])) [3 _8->signal+0 S4 A32])) "uart.c":149:22 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 6 (set (reg/f:SI 0 r0 [155])
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7f19cfd525a0 proc>)) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 6 (set (reg:SI 2 r2 [156])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 6 (set (reg:SI 3 r3 [157])
        (reg:SI 2 r2 [156])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 6 [0x6]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 88 87 89 6 (set (reg:SI 3 r3 [157])
        (plus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 65 [0x41]))
        (nil)))
(insn 89 88 90 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 1 [0x1]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 90 89 91 6 (set (reg:SI 3 r3 [157])
        (plus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":149:9 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 131 [0x83]))
        (nil)))
(insn 91 90 92 6 (set (reg:SI 3 r3 [157])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 3 [0x3]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 92 91 93 6 (set (reg:SI 3 r3 [157])
        (minus:SI (reg:SI 3 r3 [157])
            (reg:SI 2 r2 [156]))) "uart.c":149:9 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 r2 [156])
            (const_int 1047 [0x417]))
        (nil)))
(insn 93 92 95 6 (set (reg:SI 3 r3 [158])
        (ashift:SI (reg:SI 3 r3 [157])
            (const_int 2 [0x2]))) "uart.c":149:9 147 {*arm_shiftsi3}
     (nil))
(insn 95 93 96 6 (set (reg:SI 3 r3 [159])
        (plus:SI (reg/f:SI 0 r0 [155])
            (reg:SI 3 r3 [157]))) "uart.c":149:9 7 {*arm_addsi3}
     (nil))
(insn 96 95 97 6 (set (reg/f:SI 3 r3 [160])
        (plus:SI (reg:SI 3 r3 [159])
            (const_int 84 [0x54]))) "uart.c":149:9 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 6 (set (reg/f:SI 3 r3 [orig:122 _10 ] [122])
        (mem/f:SI (reg/f:SI 3 r3 [160]) [10 proc[i_19].res+0 S4 A32])) "uart.c":149:9 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 6 (set (reg:SI 2 r2 [orig:123 _11 ] [123])
        (ior:SI (reg:SI 1 r1 [orig:121 _9 ] [121])
            (const_int 4 [0x4]))) "uart.c":149:22 106 {*iorsi3_insn}
     (nil))
(insn 99 98 100 6 (set (mem:SI (plus:SI (reg/f:SI 3 r3 [orig:122 _10 ] [122])
                (const_int 92 [0x5c])) [3 _10->signal+0 S4 A32])
        (reg:SI 2 r2 [orig:123 _11 ] [123])) "uart.c":149:22 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5
;;              6 (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 161 162
(code_label 100 99 101 7 17 (nil) [2 uses])
(note 101 100 102 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 7 (set (reg:SI 3 r3 [162])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":147:25 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 7 (set (reg:SI 3 r3 [161])
        (plus:SI (reg:SI 3 r3 [162])
            (const_int 1 [0x1]))) "uart.c":147:25 7 {*arm_addsi3}
     (nil))
(insn 104 103 105 7 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])
        (reg:SI 3 r3 [161])) "uart.c":147:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 (FALLTHRU,DFS_BACK)
;;              3 [always] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 163
(code_label 105 104 106 8 16 (nil) [1 uses])
(note 106 105 110 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 110 106 111 8 (set (reg:SI 3 r3 [163])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 i+0 S4 A64])) "uart.c":147:16 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 112 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [163])
            (const_int 63 [0x3f]))) "uart.c":147:16 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 112 111 113 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) "uart.c":147:16 273 {arm_cond_branch}
     (nil)
 -> 107)
;;  succ:       4
;;              9 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 164 165
(note 113 112 114 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7f19cf0af510 *.LC3>)) "uart.c":152:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 115 114 116 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7f19cf067700 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":152:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 116 115 118 9 (set (reg:SI 3 r3 [164])
        (const_int 13 [0xd])) "uart.c":153:7 253 {*arm_movsi_insn}
     (nil))
(insn 118 116 119 9 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [165])) "uart.c":153:7 263 {*arm_movqi_insn}
     (nil))
;;  succ:       10 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       2
;;              9 (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 125 126 127 128 166 167 168 169 170 171 172 173 174 175 176 177
(code_label 119 118 120 10 15 (nil) [1 uses])
(note 120 119 121 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 121 120 122 10 (set (reg/f:SI 3 r3 [166])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":156:15 253 {*arm_movsi_insn}
     (nil))
(insn 122 121 123 10 (set (reg:SI 3 r3 [orig:124 _12 ] [124])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [166])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":156:15 253 {*arm_movsi_insn}
     (nil))
(insn 123 122 124 10 (set (reg:SI 1 r1 [orig:125 _14 ] [125])
        (plus:SI (reg:SI 3 r3 [orig:124 _12 ] [124])
            (const_int 1 [0x1]))) "uart.c":156:23 7 {*arm_addsi3}
     (nil))
(insn 124 123 125 10 (set (reg/f:SI 2 r2 [167])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":156:23 253 {*arm_movsi_insn}
     (nil))
(insn 125 124 126 10 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [167])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 1 r1 [orig:125 _14 ] [125])) "uart.c":156:23 253 {*arm_movsi_insn}
     (nil))
(insn 126 125 127 10 (set (reg/f:SI 2 r2 [168])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":156:27 253 {*arm_movsi_insn}
     (nil))
(insn 127 126 128 10 (set (reg/f:SI 3 r3 [169])
        (plus:SI (reg/f:SI 2 r2 [168])
            (reg:SI 3 r3 [orig:124 _12 ] [124]))) "uart.c":156:27 7 {*arm_addsi3}
     (nil))
(insn 128 127 129 10 (set (reg:QI 2 r2 [170])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -13 [0xfffffffffffffff3])) [0 c+0 S1 A8])) "uart.c":156:27 263 {*arm_movqi_insn}
     (nil))
(insn 129 128 130 10 (set (mem/v:QI (plus:SI (reg/f:SI 3 r3 [169])
                (const_int 4 [0x4])) [0 up_25->inbuf[_13]+0 S1 A8])
        (reg:QI 2 r2 [170])) "uart.c":156:27 263 {*arm_movqi_insn}
     (nil))
(insn 130 129 131 10 (set (reg/f:SI 3 r3 [171])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 131 130 132 10 (set (reg:SI 3 r3 [orig:126 _15 ] [126])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [171])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 132 131 133 10 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [orig:126 _15 ] [126]))
                    (const_int 0 [0])))
            (set (reg:SI 2 r2 [172])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [orig:126 _15 ] [126])))
        ]) "uart.c":157:14 46 {subsi3_compare0}
     (nil))
(insn 133 132 134 10 (set (reg:SI 3 r3 [orig:127 _16 ] [127])
        (and:SI (reg:SI 3 r3 [orig:126 _15 ] [126])
            (const_int 63 [0x3f]))) "uart.c":157:14 90 {*arm_andsi3_insn}
     (nil))
(insn 134 133 135 10 (set (reg:SI 2 r2 [173])
        (and:SI (reg:SI 2 r2 [172])
            (const_int 63 [0x3f]))) "uart.c":157:14 90 {*arm_andsi3_insn}
     (nil))
(insn 135 134 136 10 (set (reg:SI 3 r3 [orig:127 _16 ] [127])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 2 r2 [173]))
            (reg:SI 3 r3 [orig:127 _16 ] [127]))) "uart.c":157:14 371 {*if_neg_move}
     (nil))
(insn 136 135 137 10 (set (reg/f:SI 2 r2 [174])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 137 136 138 10 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [174])
                (const_int 68 [0x44])) [3 up_25->inhead+0 S4 A32])
        (reg:SI 3 r3 [orig:127 _16 ] [127])) "uart.c":157:14 253 {*arm_movsi_insn}
     (nil))
(insn 138 137 139 10 (set (reg:SI 3 r3 [175])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":158:3 253 {*arm_movsi_insn}
     (nil))
(insn 139 138 140 10 (set (reg/f:SI 3 r3 [orig:128 _17 ] [128])
        (plus:SI (reg:SI 3 r3 [175])
            (const_int 76 [0x4c]))) "uart.c":158:3 7 {*arm_addsi3}
     (nil))
(insn 140 139 141 10 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:128 _17 ] [128])) "uart.c":158:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 141 140 142 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("V") [flags 0x41]  <function_decl 0x7f19cf067d00 V>) [0 V S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":158:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 142 141 143 10 (set (reg/f:SI 3 r3 [176])
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7f19cfd52480 color>)) "uart.c":160:8 253 {*arm_movsi_insn}
     (nil))
(insn 143 142 144 10 (set (reg:SI 2 r2 [177])
        (const_int 6 [0x6])) "uart.c":160:8 253 {*arm_movsi_insn}
     (nil))
(insn 144 143 150 10 (set (mem/c:SI (reg/f:SI 3 r3 [176]) [3 color+0 S4 A32])
        (reg:SI 2 r2 [177])) "uart.c":160:8 253 {*arm_movsi_insn}
     (nil))
;;  succ:       11 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (RTL, MODIFIED)
;;  pred:       10 [always]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 150 144 151 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 151 150 152 11 (const_int 0 [0]) "uart.c":161:1 311 {nop}
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 152 151 0 NOTE_INSN_DELETED)

;; Function sputc (sputc, funcdef_no=3, decl_uid=4522, cgraph_uid=4, symbol_order=5)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 4:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 5:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 11:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) r  (1) m {*arm_zero_extendqisi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 17:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 18:  (0) r  (1) m {*arm_zero_extendqisi2}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 20:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) r {*arm_movqi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 5
EBB 3 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 33: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = -2
   Insn 35: point = 1, n_alt = -1
   Insn 32: point = 1, n_alt = -1
   Insn 31: point = 2, n_alt = -1
   Insn 28: point = 2, n_alt = 8
   Insn 27: point = 3, n_alt = 7
   Insn 26: point = 4, n_alt = 4
   Insn 25: point = 6, n_alt = 4
  BB 3
   Insn 23: point = 7, n_alt = -1
   Insn 22: point = 7, n_alt = 3
   Insn 20: point = 8, n_alt = 0
   Insn 19: point = 10, n_alt = -2
   Insn 18: point = 12, n_alt = 1
   Insn 17: point = 14, n_alt = 4
   Insn 16: point = 16, n_alt = 4
   Insn 15: point = 18, n_alt = 4
  BB 5
   Insn 37: point = 19, n_alt = -1
  BB 2
   Insn 13: point = 19, n_alt = 5
   Insn 12: point = 20, n_alt = 1
   Insn 11: point = 22, n_alt = 4
   Insn 10: point = 24, n_alt = 4
   Insn 9: point = 26, n_alt = 4
   Insn 5: point = 27, n_alt = 8
   Insn 4: point = 28, n_alt = 1
   Insn 3: point = 30, n_alt = -2
   Insn 2: point = 31, n_alt = 5
 r113: [23..24]
 r114: [21..22]
 r115: [19..20]
 r116: [15..16]
 r117: [13..14]
 r118: [11..12]
 r119: [9..10]
 r120: [7..8]
 r121: [2..4]
 r122: [0..1]
 r123: [29..30]
 r124: [27..28]
 r125: [25..26]
 r126: [17..18]
 r127: [5..6]
 r128: [2..3]
Compressing live ranges: from 31 to 30 - 96%
Ranges after the compression:
 r113: [22..23]
 r114: [20..21]
 r115: [18..19]
 r116: [14..15]
 r117: [12..13]
 r118: [10..11]
 r119: [8..9]
 r120: [6..7]
 r121: [2..3]
 r122: [0..1]
 r123: [28..29]
 r124: [26..27]
 r125: [24..25]
 r126: [16..17]
 r127: [4..5]
 r128: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 26
changing reg in insn 28
changing reg in insn 32
changing reg in insn 30
changing reg in insn 3
changing reg in insn 4
changing reg in insn 5
changing reg in insn 9
changing reg in insn 10
changing reg in insn 15
changing reg in insn 16
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
deleting insn with uid = 4.
deleting insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns


sputc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 100 [cc]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={2d,1u} r3={14d,13u} r11={1d,12u} r13={1d,5u} r14={1d} r100={1d,1u} r102={1d,1u} 
;;    total ref usage 62{25d,37u,0e} in 25{25 regular + 0 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 5, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 114 115 123 124 125
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":166:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 5 2 (set (reg:SI 3 r3 [123])
        (reg:SI 1 r1 [ c ])) "uart.c":166:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 3 6 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [124])) "uart.c":166:1 263 {*arm_movqi_insn}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:SI 3 r3 [125])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (mem/v/f:SI (reg/f:SI 3 r3 [125]) [2 up_11(D)->base+0 S4 A32])) "uart.c":167:15 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 3 r3 [orig:114 _2 ] [114])
        (plus:SI (reg/f:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 24 [0x18]))) "uart.c":167:22 7 {*arm_addsi3}
     (nil))
(insn 12 11 13 2 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:114 _2 ] [114]) [0 *_2+0 S1 A8]))) "uart.c":167:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 36 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A32])
        (reg:SI 3 r3 [orig:115 _3 ] [115])) "uart.c":167:7 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 2, next block 3, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 36 13 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 21 5 (const_int 0 [0]) "uart.c":168:8 311 {nop}
     (nil))
;;  succ:       3 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 5, next block 4, flags: (RTL, MODIFIED)
;;  pred:       5 [always]  (FALLTHRU)
;;              3 (DFS_BACK)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 118 119 120 126
(code_label 21 37 14 3 22 (nil) [1 uses])
(note 14 21 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:SI 3 r3 [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":168:13 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (mem/v/f:SI (reg/f:SI 3 r3 [126]) [2 up_11(D)->base+0 S4 A32])) "uart.c":168:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 3 r3 [orig:117 _5 ] [117])
        (plus:SI (reg/f:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 24 [0x18]))) "uart.c":168:20 7 {*arm_addsi3}
     (nil))
(insn 18 17 20 3 (set (reg:SI 3 r3 [orig:118 _6 ] [118])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:117 _5 ] [117]) [0 *_5+0 S1 A8]))) "uart.c":168:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 18 22 3 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (and:SI (reg:SI 3 r3 [orig:119 _7 ] [119])
            (const_int 32 [0x20]))) "uart.c":168:26 90 {*arm_andsi3_insn}
     (nil))
(insn 22 20 23 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:120 _8 ] [120])
            (const_int 0 [0]))) "uart.c":168:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "uart.c":168:9 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       3 (DFS_BACK)
;;              4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 121 122 127 128
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 3 r3 [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":170:7 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 3 r3 [orig:121 _9 ] [121])
        (mem/v/f:SI (reg/f:SI 3 r3 [127]) [2 up_11(D)->base+0 S4 A32])) "uart.c":170:7 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (reg:QI 2 r2 [128])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])) "uart.c":170:20 263 {*arm_movqi_insn}
     (nil))
(insn 28 27 31 4 (set (mem:QI (reg/f:SI 3 r3 [orig:121 _9 ] [121]) [0 *_9+0 S1 A8])
        (reg:QI 2 r2 [128])) "uart.c":170:20 263 {*arm_movqi_insn}
     (nil))
(insn 31 28 32 4 (clobber (reg/i:SI 0 r0)) "uart.c":171:1 -1
     (nil))
(insn 32 31 35 4 (clobber (reg:SI 3 r3 [orig:122 <retval> ] [122])) "uart.c":171:1 -1
     (nil))
(insn 35 32 30 4 (const_int 0 [0]) "uart.c":171:1 311 {nop}
     (nil))
(insn 30 35 33 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:122 <retval> ] [122])) "uart.c":171:1 253 {*arm_movsi_insn}
     (nil))
(insn 33 30 38 4 (use (reg/i:SI 0 r0)) "uart.c":171:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 38 33 0 NOTE_INSN_DELETED)

;; Function sgetc (sgetc, funcdef_no=4, decl_uid=4529, cgraph_uid=5, symbol_order=6)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 7:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 12:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 17:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 18:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 21:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) 0  (2) r {*if_neg_move}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 25:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (0) r  (1) m {*arm_zero_extendqisi2}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #1: **********

  BB 2
   Insn 35: point = 0, n_alt = -1
   Insn 34: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -2
   Insn 27: point = 3, n_alt = 1
   Insn 26: point = 4, n_alt = 5
   Insn 25: point = 5, n_alt = 4
   Insn 24: point = 6, n_alt = 1
   Insn 23: point = 8, n_alt = 0
   Insn 22: point = 10, n_alt = 0
   Insn 21: point = 12, n_alt = 2
   Insn 20: point = 13, n_alt = 4
   Insn 19: point = 15, n_alt = 4
   Insn 18: point = 16, n_alt = 8
   Insn 17: point = 17, n_alt = 7
   Insn 16: point = 19, n_alt = 4
   Insn 15: point = 21, n_alt = 4
   Insn 14: point = 22, n_alt = 5
   Insn 13: point = 23, n_alt = 4
   Insn 12: point = 24, n_alt = 4
   Insn 11: point = 25, n_alt = 4
   Insn 10: point = 27, n_alt = 4
   Insn 9: point = 28, n_alt = -1
   Insn 8: point = 28, n_alt = -2
   Insn 7: point = 29, n_alt = 4
   Insn 6: point = 31, n_alt = 4
   Insn 2: point = 32, n_alt = 5
 r113: [28..29]
 r114: [20..25]
 r115: [22..24]
 r116: [11..13]
 r117: [4..10]
 r118: [2..3]
 r119: [0..1]
 r120: [30..31]
 r121: [26..27]
 r122: [22..23]
 r123: [20..21]
 r124: [18..19]
 r125: [16..17]
 r126: [14..15]
 r127: [9..12]
 r128: [7..8]
 r129: [4..5]
Compressing live ranges: from 32 to 28 - 87%
Ranges after the compression:
 r113: [24..25]
 r114: [18..21]
 r115: [20..21]
 r116: [10..11]
 r117: [4..9]
 r118: [2..3]
 r119: [0..1]
 r120: [26..27]
 r121: [22..23]
 r122: [20..21]
 r123: [18..19]
 r124: [16..17]
 r125: [14..15]
 r126: [12..13]
 r127: [8..11]
 r128: [6..7]
 r129: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 16
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 21
changing reg in insn 24
changing reg in insn 22
changing reg in insn 26
changing reg in insn 24
changing reg in insn 27
changing reg in insn 30
changing reg in insn 30
changing reg in insn 34
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.


sgetc

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={4d,4u} r1={3d,1u} r2={7d,5u} r3={13d,14u} r11={1d,11u} r12={2d} r13={1d,3u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 165{125d,40u,0e} in 25{24 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":174:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 3 r3 [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":177:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 3 r3 [orig:113 _1 ] [113])
        (plus:SI (reg:SI 3 r3 [120])
            (const_int 76 [0x4c]))) "uart.c":177:3 7 {*arm_addsi3}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:113 _1 ] [113])) "uart.c":177:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("P") [flags 0x41]  <function_decl 0x7f19cf077700 P>) [0 P S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":177:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":179:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [121])
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])) "uart.c":179:19 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 1 r1 [orig:115 _4 ] [115])
        (plus:SI (reg:SI 3 r3 [orig:114 _2 ] [114])
            (const_int 1 [0x1]))) "uart.c":179:27 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 2 r2 [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":179:27 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [122])
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])
        (reg:SI 1 r1 [orig:115 _4 ] [115])) "uart.c":179:27 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg/f:SI 2 r2 [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":179:5 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg/f:SI 3 r3 [124])
        (plus:SI (reg/f:SI 2 r2 [123])
            (reg:SI 3 r3 [orig:114 _2 ] [114]))) "uart.c":179:5 7 {*arm_addsi3}
     (nil))
(insn 17 16 18 2 (set (reg:QI 3 r3 [125])
        (mem/v:QI (plus:SI (reg/f:SI 3 r3 [124])
                (const_int 4 [0x4])) [0 up_7(D)->inbuf[_3]+0 S1 A8])) "uart.c":179:5 263 {*arm_movqi_insn}
     (nil))
(insn 18 17 19 2 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [125])) "uart.c":179:5 263 {*arm_movqi_insn}
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 3 r3 [126])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 3 r3 [orig:116 _5 ] [116])
        (mem/v:SI (plus:SI (reg/f:SI 3 r3 [126])
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [orig:116 _5 ] [116]))
                    (const_int 0 [0])))
            (set (reg:SI 2 r2 [127])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [orig:116 _5 ] [116])))
        ]) "uart.c":180:14 46 {subsi3_compare0}
     (nil))
(insn 22 21 23 2 (set (reg:SI 3 r3 [orig:117 _6 ] [117])
        (and:SI (reg:SI 3 r3 [orig:116 _5 ] [116])
            (const_int 63 [0x3f]))) "uart.c":180:14 90 {*arm_andsi3_insn}
     (nil))
(insn 23 22 24 2 (set (reg:SI 2 r2 [128])
        (and:SI (reg:SI 2 r2 [127])
            (const_int 63 [0x3f]))) "uart.c":180:14 90 {*arm_andsi3_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 3 r3 [orig:117 _6 ] [117])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 2 r2 [128]))
            (reg:SI 3 r3 [orig:117 _6 ] [117]))) "uart.c":180:14 371 {*if_neg_move}
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 2 r2 [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (mem/v:SI (plus:SI (reg/f:SI 2 r2 [129])
                (const_int 72 [0x48])) [3 up_7(D)->intail+0 S4 A32])
        (reg:SI 3 r3 [orig:117 _6 ] [117])) "uart.c":180:14 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 34 2 (set (reg:SI 3 r3 [orig:118 _13 ] [118])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "uart.c":182:10 175 {*arm_zero_extendqisi2}
     (nil))
(insn 34 27 35 2 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:119 <retval> ] [119])) "uart.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 37 2 (use (reg/i:SI 0 r0)) "uart.c":183:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 37 35 0 NOTE_INSN_DELETED)

;; Function sgets (sgets, funcdef_no=5, decl_uid=4536, cgraph_uid=6, symbol_order=7)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 16:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 20:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 23:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 26:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 30:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 34:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 36:  (0) m  (1) r {*arm_movqi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 41: point = 0, n_alt = -1
   Insn 38: point = 0, n_alt = -2
   Insn 43: point = 1, n_alt = -1
   Insn 40: point = 1, n_alt = -1
   Insn 39: point = 2, n_alt = -1
   Insn 36: point = 2, n_alt = 8
   Insn 35: point = 3, n_alt = 1
   Insn 34: point = 5, n_alt = 1
   Insn 33: point = 6, n_alt = 4
  BB 4
   Insn 31: point = 7, n_alt = -1
   Insn 30: point = 7, n_alt = 3
   Insn 28: point = 8, n_alt = 1
   Insn 27: point = 10, n_alt = 4
   Insn 26: point = 11, n_alt = 8
   Insn 25: point = 12, n_alt = 1
   Insn 24: point = 14, n_alt = 4
   Insn 23: point = 15, n_alt = 0
   Insn 22: point = 17, n_alt = -2
   Insn 21: point = 18, n_alt = -1
   Insn 20: point = 18, n_alt = 4
  BB 2
   Insn 44: point = 18, n_alt = -1
   Insn 3: point = 18, n_alt = 5
   Insn 2: point = 18, n_alt = 5
  BB 3
   Insn 17: point = 18, n_alt = 5
   Insn 16: point = 19, n_alt = 4
   Insn 15: point = 21, n_alt = 4
   Insn 14: point = 22, n_alt = -1
   Insn 13: point = 22, n_alt = 4
   Insn 12: point = 22, n_alt = -2
   Insn 11: point = 23, n_alt = 1
   Insn 10: point = 25, n_alt = 4
 r113: [22..23]
 r114: [16..17]
 r115: [13..15]
 r116: [7..8]
 r117: [0..1]
 r118: [24..25]
 r119: [18..19]
 r120: [20..21]
 r121: [11..14]
 r122: [11..12]
 r123: [9..10]
 r124: [2..6]
 r125: [4..5]
 r126: [2..3]
Compressing live ranges: from 26 to 24 - 92%
Ranges after the compression:
 r113: [20..21]
 r114: [14..15]
 r115: [12..13]
 r116: [6..7]
 r117: [0..1]
 r118: [22..23]
 r119: [16..17]
 r120: [18..19]
 r121: [10..13]
 r122: [10..11]
 r123: [8..9]
 r124: [2..5]
 r125: [4..5]
 r126: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 12
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 28
changing reg in insn 30
changing reg in insn 40
changing reg in insn 38
changing reg in insn 10
changing reg in insn 11
changing reg in insn 16
changing reg in insn 17
changing reg in insn 15
changing reg in insn 16
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
deleting insn with uid = 25.
deleting insn with uid = 35.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 21.


sgets

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,6u} r1={4d,2u} r2={5d,2u} r3={13d,10u} r11={1d,15u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 264{220d,44u,0e} in 29{27 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":186:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 1 r1 [ s ])) "uart.c":186:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 44 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 44 4 45 2 (set (pc)
        (label_ref 18)) "uart.c":187:9 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 45 44 29)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 118 119 120
(code_label 29 45 9 3 27 (nil) [1 uses])
(note 9 29 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":188:5 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [118]) [0 *s_5+0 S1 A8]))) "uart.c":188:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 12 11 13 3 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:113 _1 ] [113])) "uart.c":188:5 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":188:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 14 13 15 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":188:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 15 14 16 3 (set (reg:SI 3 r3 [120])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":189:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 3 r3 [119])
        (plus:SI (reg:SI 3 r3 [120])
            (const_int 1 [0x1]))) "uart.c":189:6 7 {*arm_addsi3}
     (nil))
(insn 17 16 18 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 3 r3 [119])) "uart.c":189:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 116 121 122 123
(code_label 18 17 19 4 26 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":187:22 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":187:22 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 22 21 23 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (reg:SI 0 r0)) "uart.c":187:22 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 4 (set (reg:SI 2 r2 [orig:115 _3 ] [115])
        (and:SI (reg:SI 3 r3 [orig:114 _2 ] [114])
            (const_int 255 [0xff]))) "uart.c":187:16 90 {*arm_andsi3_insn}
     (nil))
(insn 24 23 26 4 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":187:14 253 {*arm_movsi_insn}
     (nil))
(insn 26 24 27 4 (set (mem:QI (reg/f:SI 3 r3 [121]) [0 *s_5+0 S1 A8])
        (reg:QI 2 r2 [122])) "uart.c":187:14 263 {*arm_movqi_insn}
     (nil))
(insn 27 26 28 4 (set (reg/f:SI 3 r3 [123])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":187:11 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 30 4 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [123]) [0 *s_5+0 S1 A8]))) "uart.c":187:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 30 28 31 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 13 [0xd]))) "uart.c":187:33 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 31 30 32 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "uart.c":187:33 273 {arm_cond_branch}
     (nil)
 -> 29)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 117 124 125 126
(note 32 31 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 5 (set (reg/f:SI 3 r3 [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":191:5 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 36 5 (set (reg:SI 2 r2 [125])
        (const_int 0 [0])) "uart.c":191:5 253 {*arm_movsi_insn}
     (nil))
(insn 36 34 39 5 (set (mem:QI (reg/f:SI 3 r3 [124]) [0 *s_5+0 S1 A8])
        (reg:QI 2 r2 [126])) "uart.c":191:5 263 {*arm_movqi_insn}
     (nil))
(insn 39 36 40 5 (clobber (reg/i:SI 0 r0)) "uart.c":192:1 -1
     (nil))
(insn 40 39 43 5 (clobber (reg:SI 3 r3 [orig:117 <retval> ] [117])) "uart.c":192:1 -1
     (nil))
(insn 43 40 38 5 (const_int 0 [0]) "uart.c":192:1 311 {nop}
     (nil))
(insn 38 43 41 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:117 <retval> ] [117])) "uart.c":192:1 253 {*arm_movsi_insn}
     (nil))
(insn 41 38 46 5 (use (reg/i:SI 0 r0)) "uart.c":192:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 46 41 0 NOTE_INSN_DELETED)

;; Function sputs (sputs, funcdef_no=6, decl_uid=4542, cgraph_uid=7, symbol_order=8)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 12:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4
EBB 5 6

********** Pseudo live ranges #1: **********

  BB 6
   Insn 40: point = 0, n_alt = -1
   Insn 37: point = 0, n_alt = -2
   Insn 42: point = 1, n_alt = -1
   Insn 39: point = 1, n_alt = -1
   Insn 38: point = 2, n_alt = -1
  BB 5
   Insn 34: point = 2, n_alt = -1
   Insn 33: point = 2, n_alt = 3
   Insn 31: point = 3, n_alt = 1
   Insn 30: point = 5, n_alt = 4
  BB 2
   Insn 43: point = 6, n_alt = -1
   Insn 2: point = 6, n_alt = 5
  BB 4
   Insn 27: point = 6, n_alt = -1
   Insn 26: point = 6, n_alt = -2
   Insn 25: point = 7, n_alt = 1
   Insn 24: point = 7, n_alt = 4
   Insn 23: point = 9, n_alt = 4
  BB 3
   Insn 21: point = 10, n_alt = -1
   Insn 20: point = 10, n_alt = 3
   Insn 19: point = 11, n_alt = 1
   Insn 18: point = 13, n_alt = 4
   Insn 17: point = 14, n_alt = -1
   Insn 16: point = 14, n_alt = -2
   Insn 15: point = 15, n_alt = -2
   Insn 14: point = 16, n_alt = 1
   Insn 13: point = 18, n_alt = 5
   Insn 12: point = 19, n_alt = 4
   Insn 11: point = 20, n_alt = 4
   Insn 10: point = 21, n_alt = 4
   Insn 9: point = 23, n_alt = 4
 r113: [14..21]
 r114: [17..20]
 r115: [15..16]
 r116: [10..11]
 r117: [6..7]
 r118: [2..3]
 r119: [0..1]
 r120: [22..23]
 r121: [18..19]
 r122: [12..13]
 r123: [8..9]
 r124: [4..5]
Compressing live ranges: from 24 to 20 - 83%
Ranges after the compression:
 r113: [14..17]
 r114: [16..17]
 r115: [14..15]
 r116: [10..11]
 r117: [6..7]
 r118: [2..3]
 r119: [0..1]
 r120: [18..19]
 r121: [16..17]
 r122: [12..13]
 r123: [8..9]
 r124: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 16
changing reg in insn 11
changing reg in insn 14
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 26
changing reg in insn 31
changing reg in insn 33
changing reg in insn 39
changing reg in insn 37
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 30
changing reg in insn 31
deleting insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 27.


sputs

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,2u} r2={4d,1u} r3={13d,11u} r11={1d,11u} r12={4d} r13={1d,8u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={4d,2u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 262{221d,41u,0e} in 28{26 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "uart.c":195:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 43 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 43 3 44 2 (set (pc)
        (label_ref 28)) "uart.c":196:8 284 {*arm_jump}
     (nil)
 -> 28)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 32)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       5
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 120 121 122
(code_label 32 44 8 3 30 (nil) [1 uses])
(note 8 32 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 3 r3 [120])
        (symbol_ref:SI ("up") [flags 0x2]  <var_decl 0x7f19cfd52b40 up>)) "uart.c":197:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg/f:SI 0 r0 [orig:113 up.0_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [120]) [6 up+0 S4 A32])) "uart.c":197:5 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 3 r3 [orig:114 s.1_2 ] [114])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":197:17 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 2 r2 [121])
        (plus:SI (reg/f:SI 3 r3 [orig:114 s.1_2 ] [114])
            (const_int 1 [0x1]))) "uart.c":197:17 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])
        (reg:SI 2 r2 [121])) "uart.c":197:17 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:114 s.1_2 ] [114]) [0 *s.1_2+0 S1 A8]))) "uart.c":197:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 15 14 17 3 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:115 _3 ] [115])) "uart.c":197:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 17 15 18 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":197:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 18 17 19 3 (set (reg/f:SI 3 r3 [122])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":198:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [122]) [0 *s_11+0 S1 A8]))) "uart.c":198:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:116 _4 ] [116])
            (const_int 10 [0xa]))) "uart.c":198:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 21 20 22 3 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "uart.c":198:8 273 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       4 (FALLTHRU)
;;              5 (DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 117 123
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg/f:SI 3 r3 [123])
        (symbol_ref:SI ("up") [flags 0x2]  <var_decl 0x7f19cfd52b40 up>)) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 3 r3 [orig:117 up.2_5 ] [117])
        (mem/f/c:SI (reg/f:SI 3 r3 [123]) [6 up+0 S4 A32])) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg:SI 0 r0)
        (reg/f:SI 3 r3 [orig:117 up.2_5 ] [117])) "uart.c":199:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":199:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU,DFS_BACK)
;;              3 (DFS_BACK)
;;              2 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 118 124
(code_label 28 27 29 5 29 (nil) [2 uses])
(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 5 (set (reg/f:SI 3 r3 [124])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A32])) "uart.c":196:9 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 33 5 (set (reg:SI 3 r3 [orig:118 _6 ] [118])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [124]) [0 *s_7+0 S1 A8]))) "uart.c":196:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 31 34 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:118 _6 ] [118])
            (const_int 0 [0]))) "uart.c":196:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "uart.c":196:9 273 {arm_cond_branch}
     (nil)
 -> 32)
;;  succ:       3
;;              6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 119
(note 35 34 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 6 (clobber (reg/i:SI 0 r0)) "uart.c":202:1 -1
     (nil))
(insn 39 38 42 6 (clobber (reg:SI 3 r3 [orig:119 <retval> ] [119])) "uart.c":202:1 -1
     (nil))
(insn 42 39 37 6 (const_int 0 [0]) "uart.c":202:1 311 {nop}
     (nil))
(insn 37 42 40 6 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:119 <retval> ] [119])) "uart.c":202:1 253 {*arm_movsi_insn}
     (nil))
(insn 40 37 45 6 (use (reg/i:SI 0 r0)) "uart.c":202:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 45 40 0 NOTE_INSN_DELETED)

;; Function sprints (sprints, funcdef_no=7, decl_uid=4549, cgraph_uid=8, symbol_order=9)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 11:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 29: point = 0, n_alt = -1
   Insn 26: point = 0, n_alt = -2
   Insn 31: point = 1, n_alt = -1
   Insn 28: point = 1, n_alt = -1
   Insn 27: point = 2, n_alt = -1
  BB 4
   Insn 23: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = 3
   Insn 20: point = 3, n_alt = 1
   Insn 19: point = 5, n_alt = 4
  BB 2
   Insn 32: point = 6, n_alt = -1
   Insn 3: point = 6, n_alt = 5
   Insn 2: point = 6, n_alt = 5
  BB 3
   Insn 16: point = 6, n_alt = -1
   Insn 15: point = 6, n_alt = 4
   Insn 14: point = 6, n_alt = -2
   Insn 13: point = 7, n_alt = 1
   Insn 12: point = 9, n_alt = 5
   Insn 11: point = 10, n_alt = 4
   Insn 10: point = 11, n_alt = 4
 r113: [8..11]
 r114: [6..7]
 r115: [2..3]
 r116: [0..1]
 r117: [9..10]
 r118: [4..5]
Compressing live ranges: from 12 to 10 - 83%
Ranges after the compression:
 r113: [8..9]
 r114: [6..7]
 r115: [2..3]
 r116: [0..1]
 r117: [8..9]
 r118: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 22
changing reg in insn 28
changing reg in insn 26
changing reg in insn 11
changing reg in insn 12
changing reg in insn 19
changing reg in insn 20
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.


sprints

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,4u} r1={3d,2u} r2={3d,1u} r3={7d,6u} r11={1d,11u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 148{116d,32u,0e} in 19{18 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":205:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 1 r1 [ s ])) "uart.c":205:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 32 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 32 4 33 2 (set (pc)
        (label_ref 17)) "uart.c":206:8 284 {*arm_jump}
     (nil)
 -> 17)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 33 32 21)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 117
(code_label 21 33 9 3 35 (nil) [1 uses])
(note 9 21 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 3 r3 [orig:113 s.3_1 ] [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":207:17 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 2 r2 [117])
        (plus:SI (reg/f:SI 3 r3 [orig:113 s.3_1 ] [113])
            (const_int 1 [0x1]))) "uart.c":207:17 7 {*arm_addsi3}
     (nil))
(insn 12 11 13 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 2 r2 [117])) "uart.c":207:17 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [orig:113 s.3_1 ] [113]) [0 *s.3_1+0 S1 A8]))) "uart.c":207:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "uart.c":207:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":207:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":207:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 115 118
(code_label 17 16 18 4 34 (nil) [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 3 r3 [118])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "uart.c":206:9 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 22 4 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [118]) [0 *s_4+0 S1 A8]))) "uart.c":206:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 22 20 23 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:115 _3 ] [115])
            (const_int 0 [0]))) "uart.c":206:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 23 22 24 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "uart.c":206:9 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 116
(note 24 23 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 24 28 5 (clobber (reg/i:SI 0 r0)) "uart.c":207:21 -1
     (nil))
(insn 28 27 31 5 (clobber (reg:SI 3 r3 [orig:116 <retval> ] [116])) "uart.c":207:21 -1
     (nil))
(insn 31 28 26 5 (const_int 0 [0]) "uart.c":207:21 311 {nop}
     (nil))
(insn 26 31 29 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:116 <retval> ] [116])) "uart.c":207:21 253 {*arm_movsi_insn}
     (nil))
(insn 29 26 34 5 (use (reg/i:SI 0 r0)) "uart.c":207:21 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 34 29 0 NOTE_INSN_DELETED)

;; Function srpx (srpx, funcdef_no=8, decl_uid=4556, cgraph_uid=9, symbol_order=10)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 14:  (0) r  (1) I  (2) r {subsi3_compare0}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 16:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) 0  (2) r {*if_neg_move}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 20:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 21:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 24:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 27:  (0) r  (1) I {*arm_cmpsi_insn}
          alt=0,overall=6,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 28:  (0) r  (1) rI  (2) 0 {*movsicc_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 29:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 32:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 36:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 38:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 44: point = 0, n_alt = -1
   Insn 41: point = 0, n_alt = -2
   Insn 46: point = 1, n_alt = -1
   Insn 43: point = 1, n_alt = -1
   Insn 42: point = 2, n_alt = -1
   Insn 39: point = 2, n_alt = -1
   Insn 38: point = 2, n_alt = 4
   Insn 37: point = 2, n_alt = -2
   Insn 36: point = 3, n_alt = 1
  BB 3
   Insn 33: point = 4, n_alt = -1
   Insn 32: point = 4, n_alt = 4
   Insn 31: point = 4, n_alt = -2
   Insn 30: point = 5, n_alt = -2
   Insn 29: point = 7, n_alt = 2
   Insn 28: point = 9, n_alt = 2
   Insn 27: point = 11, n_alt = 3
   Insn 24: point = 11, n_alt = 4
   Insn 23: point = 12, n_alt = -2
   Insn 22: point = 14, n_alt = 4
   Insn 21: point = 15, n_alt = 8
   Insn 20: point = 16, n_alt = 7
   Insn 19: point = 18, n_alt = 4
   Insn 18: point = 20, n_alt = -2
   Insn 17: point = 22, n_alt = 1
   Insn 16: point = 24, n_alt = 0
   Insn 15: point = 26, n_alt = 0
   Insn 14: point = 28, n_alt = 2
   Insn 13: point = 29, n_alt = 4
   Insn 12: point = 30, n_alt = 4
   Insn 11: point = 32, n_alt = 4
  BB 2
   Insn 9: point = 33, n_alt = -1
   Insn 8: point = 33, n_alt = 3
   Insn 7: point = 34, n_alt = 4
   Insn 3: point = 35, n_alt = 5
   Insn 2: point = 35, n_alt = 5
 r113: [19..30]
 r114: [21..26]
 r115: [19..20]
 r116: [17..18]
 r117: [4..5]
 r118: [0..1]
 r119: [33..34]
 r120: [31..32]
 r121: [27..29]
 r122: [25..28]
 r123: [23..24]
 r124: [15..16]
 r125: [13..14]
 r126: [8..12]
 r127: [10..11]
 r128: [6..7]
 r129: [2..3]
Compressing live ranges: from 35 to 28 - 80%
Ranges after the compression:
 r113: [16..23]
 r114: [18..21]
 r115: [16..17]
 r116: [14..15]
 r117: [4..5]
 r118: [0..1]
 r119: [26..27]
 r120: [24..25]
 r121: [22..23]
 r122: [20..23]
 r123: [18..19]
 r124: [12..13]
 r125: [10..11]
 r126: [8..9]
 r127: [8..9]
 r128: [6..7]
 r129: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 19
changing reg in insn 17
changing reg in insn 15
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 30
changing reg in insn 31
changing reg in insn 43
changing reg in insn 41
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 15
changing reg in insn 14
changing reg in insn 14
changing reg in insn 14
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 20
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 23
changing reg in insn 29
changing reg in insn 28
changing reg in insn 27
changing reg in insn 24
changing reg in insn 24
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 36
changing reg in insn 37
deleting insn with uid = 18.
deleting insn with uid = 23.
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 39.


srpx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={7d,5u} r2={5d,2u} r3={15d,16u} r11={1d,13u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={5d,3u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 278{227d,51u,0e} in 32{30 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":210:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":210:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 3 r3 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":212:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [119])
            (const_int 0 [0]))) "uart.c":212:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) "uart.c":212:6 273 {arm_cond_branch}
     (nil)
 -> 34)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 120 121 122 123 124 125 126 127 128
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 3 r3 [120])
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7f19cfd52510 tab>)) "uart.c":213:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 2 r2 [orig:113 tab.4_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [120]) [2 tab+0 S4 A32])) "uart.c":213:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 3 r3 [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":213:16 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 3 r3 [121]))
                    (const_int 0 [0])))
            (set (reg:SI 1 r1 [122])
                (minus:SI (const_int 0 [0])
                    (reg:SI 3 r3 [121])))
        ]) "uart.c":213:16 46 {subsi3_compare0}
     (nil))
(insn 15 14 16 3 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (and:SI (reg:SI 3 r3 [121])
            (const_int 15 [0xf]))) "uart.c":213:16 90 {*arm_andsi3_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 1 r1 [123])
        (and:SI (reg:SI 1 r1 [122])
            (const_int 15 [0xf]))) "uart.c":213:16 90 {*arm_andsi3_insn}
     (nil))
(insn 17 16 19 3 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 1 r1 [123]))
            (reg:SI 3 r3 [orig:114 _2 ] [114]))) "uart.c":213:16 371 {*if_neg_move}
     (nil))
(insn 19 17 20 3 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (plus:SI (reg/f:SI 2 r2 [orig:113 tab.4_1 ] [113])
            (reg:SI 3 r3 [orig:115 _3 ] [115]))) "uart.c":213:13 7 {*arm_addsi3}
     (nil))
(insn 20 19 21 3 (set (reg:QI 3 r3 [124])
        (mem:QI (reg/f:SI 3 r3 [orig:116 _4 ] [116]) [0 *_4+0 S1 A8])) "uart.c":213:8 263 {*arm_movqi_insn}
     (nil))
(insn 21 20 22 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [124])) "uart.c":213:8 263 {*arm_movqi_insn}
     (nil))
(insn 22 21 24 3 (set (reg:SI 3 r3 [125])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":214:6 253 {*arm_movsi_insn}
     (nil))
(insn 24 22 27 3 (set (reg:SI 2 r2 [127])
        (plus:SI (reg:SI 3 r3 [126])
            (const_int 15 [0xf]))) "uart.c":214:6 7 {*arm_addsi3}
     (nil))
(insn 27 24 28 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [126])
            (const_int 0 [0]))) "uart.c":214:6 268 {*arm_cmpsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 3 r3 [126])
        (if_then_else:SI (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (reg:SI 2 r2 [127])
            (reg:SI 3 r3 [126]))) "uart.c":214:6 282 {*movsicc_insn}
     (nil))
(insn 29 28 31 3 (set (reg:SI 3 r3 [128])
        (ashiftrt:SI (reg:SI 3 r3 [126])
            (const_int 4 [0x4]))) "uart.c":214:6 147 {*arm_shiftsi3}
     (nil))
(insn 31 29 32 3 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "uart.c":214:6 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":214:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 33 32 34 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpx") [flags 0x3]  <function_decl 0x7f19cf077f00 srpx>) [0 srpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":214:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 129
(code_label 34 33 35 4 37 (nil) [1 uses])
(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 4 (set (reg:SI 3 r3 [129])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "uart.c":216:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 37 36 38 4 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [129])) "uart.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":216:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 39 38 42 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":216:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 42 39 43 4 (clobber (reg/i:SI 0 r0)) "uart.c":217:1 -1
     (nil))
(insn 43 42 46 4 (clobber (reg:SI 3 r3 [orig:118 <retval> ] [118])) "uart.c":217:1 -1
     (nil))
(insn 46 43 41 4 (const_int 0 [0]) "uart.c":217:1 311 {nop}
     (nil))
(insn 41 46 44 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:118 <retval> ] [118])) "uart.c":217:1 253 {*arm_movsi_insn}
     (nil))
(insn 44 41 47 4 (use (reg/i:SI 0 r0)) "uart.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 47 44 0 NOTE_INSN_DELETED)

;; Function sprintx (sprintx, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=11)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 8:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 26:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 33: point = 0, n_alt = -1
   Insn 30: point = 0, n_alt = -2
   Insn 35: point = 1, n_alt = -1
   Insn 32: point = 1, n_alt = -1
   Insn 31: point = 2, n_alt = -1
   Insn 28: point = 2, n_alt = -1
   Insn 27: point = 2, n_alt = 4
   Insn 26: point = 2, n_alt = 1
  BB 3
   Insn 36: point = 2, n_alt = -1
   Insn 16: point = 2, n_alt = -1
   Insn 15: point = 2, n_alt = 4
   Insn 14: point = 2, n_alt = 1
  BB 4
   Insn 23: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = 4
   Insn 21: point = 2, n_alt = 4
  BB 2
   Insn 12: point = 2, n_alt = -1
   Insn 11: point = 2, n_alt = 3
   Insn 10: point = 3, n_alt = 4
   Insn 9: point = 4, n_alt = -1
   Insn 8: point = 4, n_alt = 4
   Insn 7: point = 4, n_alt = 4
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r113: [0..1]
 r114: [2..3]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 32
changing reg in insn 30
changing reg in insn 10
changing reg in insn 11
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 28.


sprintx

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={11d,7u} r1={9d,5u} r2={5d} r3={7d,2u} r11={1d,13u} r12={8d} r13={1d,9u} r14={5d} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={5d,1u} r101={4d} r102={1d,1u} r104={4d} r105={4d} r106={4d} 
;;    total ref usage 447{409d,38u,0e} in 23{19 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":220:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":220:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7f19cf0af6c0 *.LC5>)) "uart.c":221:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":221:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":221:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 10 9 11 2 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":222:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 0 [0]))) "uart.c":222:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "uart.c":222:6 273 {arm_cond_branch}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (const_int 48 [0x30])) "uart.c":223:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":223:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":223:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 36 16 37 3 (set (pc)
        (label_ref 24)) 284 {*arm_jump}
     (nil)
 -> 24)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 37 36 19)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 19 37 20 4 41 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":225:5 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":225:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpx") [flags 0x3]  <function_decl 0x7f19cf077f00 srpx>) [0 srpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":225:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 24 23 25 5 42 (nil) [1 uses])
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) "uart.c":226:3 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":226:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 28 27 31 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":226:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 31 28 32 5 (clobber (reg/i:SI 0 r0)) "uart.c":227:1 -1
     (nil))
(insn 32 31 35 5 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":227:1 -1
     (nil))
(insn 35 32 30 5 (const_int 0 [0]) "uart.c":227:1 311 {nop}
     (nil))
(insn 30 35 33 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":227:1 253 {*arm_movsi_insn}
     (nil))
(insn 33 30 38 5 (use (reg/i:SI 0 r0)) "uart.c":227:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 38 33 0 NOTE_INSN_DELETED)

;; Function srpu (srpu, funcdef_no=10, decl_uid=4565, cgraph_uid=11, symbol_order=12)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 15
	 Choosing alt 1 in insn 15:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=138 from oldreg=122, assigning class GENERAL_REGS to r138
   15: {r138:SI=trunc(sign_extend(r138:SI)*sign_extend(r121:SI) 0>>0x20);clobber r135:SI;}
      REG_DEAD r123:SI
      REG_UNUSED r135:SI
    Inserting insn reload before:
   54: r138:SI=r123:SI
    Inserting insn reload after:
   55: r122:SI=r138:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 16:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 17:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 18:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 20:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) r  (1) rk  (2) rI {*arm_addsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 22:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 24:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 26:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 27:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 28:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Early clobber: reject++
            1 Matching earlyclobber alt: reject--
            3 Scratch win: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            0 Early clobber: reject++
            3 Scratch win: reject+=2
            0 Conflict early clobber reload: reject--
          alt=2,overall=8,losers=1,rld_nregs=0
            0 Early clobber: reject++
            3 Scratch win: reject+=2
          alt=1,overall=3,losers=0,rld_nregs=0
  Commutative operand exchange in insn 31
	 Choosing alt 1 in insn 31:  (0) &r  (1) 0  (2) r  (3) &r {*smull_high}
      Creating newreg=139 from oldreg=130, assigning class GENERAL_REGS to r139
   31: {r139:SI=trunc(sign_extend(r139:SI)*sign_extend(r129:SI) 0>>0x20);clobber r136:SI;}
      REG_DEAD r131:SI
      REG_UNUSED r136:SI
    Inserting insn reload before:
   56: r139:SI=r131:SI
    Inserting insn reload after:
   57: r130:SI=r139:SI

          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) r  (2) M {*arm_shiftsi3}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) r  (2) M {*arm_shiftsi3}
            alt=4: Bad operand -- refuse
            alt=5: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 34:  (0) r  (1) r  (2) r {*arm_subsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 36:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 40:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 48: point = 0, n_alt = -1
   Insn 45: point = 0, n_alt = -2
   Insn 50: point = 1, n_alt = -1
   Insn 47: point = 1, n_alt = -1
   Insn 46: point = 2, n_alt = -1
   Insn 43: point = 2, n_alt = -1
   Insn 42: point = 2, n_alt = 4
   Insn 41: point = 2, n_alt = -2
   Insn 40: point = 3, n_alt = 1
  BB 3
   Insn 37: point = 4, n_alt = -1
   Insn 36: point = 4, n_alt = 4
   Insn 35: point = 4, n_alt = -2
   Insn 34: point = 5, n_alt = 6
   Insn 33: point = 7, n_alt = 2
   Insn 32: point = 9, n_alt = 2
   Insn 57: point = 11, n_alt = -2
	Hard reg 2 is preferable by r139 with profit 1000
   Insn 31: point = 13, n_alt = 1
   Insn 56: point = 15, n_alt = -2
	Hard reg 2 is preferable by r139 with profit 2000
   Insn 30: point = 17, n_alt = 4
   Insn 29: point = 18, n_alt = 4
   Insn 28: point = 19, n_alt = 8
   Insn 27: point = 20, n_alt = 7
   Insn 26: point = 22, n_alt = 4
   Insn 25: point = 24, n_alt = -2
   Insn 24: point = 26, n_alt = 6
   Insn 23: point = 28, n_alt = -2
   Insn 22: point = 30, n_alt = 2
   Insn 21: point = 32, n_alt = 4
   Insn 20: point = 34, n_alt = 2
   Insn 19: point = 35, n_alt = -2
   Insn 18: point = 36, n_alt = 6
   Insn 17: point = 38, n_alt = 2
   Insn 16: point = 39, n_alt = 2
   Insn 55: point = 41, n_alt = -2
	Hard reg 3 is preferable by r138 with profit 1000
   Insn 15: point = 43, n_alt = 1
   Insn 54: point = 45, n_alt = -2
	Hard reg 3 is preferable by r138 with profit 2000
   Insn 14: point = 47, n_alt = 4
   Insn 13: point = 48, n_alt = 4
   Insn 12: point = 49, n_alt = 4
   Insn 11: point = 51, n_alt = 4
  BB 2
   Insn 9: point = 52, n_alt = -1
   Insn 8: point = 52, n_alt = 3
   Insn 7: point = 53, n_alt = 4
   Insn 3: point = 54, n_alt = 5
   Insn 2: point = 54, n_alt = 5
 r113: [23..49]
 r114: [33..36] [25..26]
 r115: [23..24]
 r116: [21..22]
 r117: [4..5]
 r118: [0..1]
 r119: [52..53]
 r120: [50..51]
 r121: [27..48]
 r122: [40..41]
 r123: [46..47]
 r124: [37..39]
 r125: [37..38]
 r126: [31..35] [27..28]
 r127: [29..30]
 r128: [19..20]
 r129: [8..18]
 r130: [10..11]
 r131: [16..17]
 r132: [6..9]
 r133: [6..7]
 r134: [2..3]
 r135: [43..44]
 r136: [13..14]
 r138: [42..45]
 r139: [12..15]
Compressing live ranges: from 54 to 42 - 77%
Ranges after the compression:
 r113: [20..37]
 r114: [28..29] [22..23]
 r115: [20..21]
 r116: [18..19]
 r117: [4..5]
 r118: [0..1]
 r119: [40..41]
 r120: [38..39]
 r121: [24..37]
 r122: [32..33]
 r123: [36..37]
 r124: [30..31]
 r125: [30..31]
 r126: [28..29] [24..25]
 r127: [26..27]
 r128: [16..17]
 r129: [8..15]
 r130: [10..11]
 r131: [14..15]
 r132: [6..9]
 r133: [6..7]
 r134: [2..3]
 r135: [34..35]
 r136: [12..13]
 r138: [34..35]
 r139: [12..13]

********** Assignment #1: **********

	 Assigning to 138 (cl=GENERAL_REGS, orig=122, freq=3000, tfirst=138, tfreq=3000)...
	   Assign 3 to reload r138 (freq=3000)
	 Assigning to 139 (cl=GENERAL_REGS, orig=130, freq=3000, tfirst=139, tfreq=3000)...
	   Assign 2 to reload r139 (freq=3000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 12
changing reg in insn 26
changing reg in insn 24
changing reg in insn 18
changing reg in insn 25
changing reg in insn 21
changing reg in insn 19
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 35
changing reg in insn 47
changing reg in insn 45
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 24
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 24
changing reg in insn 22
changing reg in insn 21
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 33
changing reg in insn 32
changing reg in insn 30
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 15
changing reg in insn 31
deleting insn with uid = 54.
deleting insn with uid = 55.
deleting insn with uid = 23.
deleting insn with uid = 56.
deleting insn with uid = 57.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 43.


srpu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={8d,6u} r1={10d,7u,1e} r2={7d,6u,1e} r3={20d,18u} r11={1d,13u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 296{236d,58u,2e} in 40{38 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 119
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":230:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":230:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 3 r3 [119])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":232:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [119])
            (const_int 0 [0]))) "uart.c":232:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "uart.c":232:6 273 {arm_cond_branch}
     (nil)
 -> 38)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113 114 115 116 117 120 121 122 123 124 125 126 127 128 129 130 131 132 133 135 136
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 3 r3 [120])
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7f19cfd52510 tab>)) "uart.c":233:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg/f:SI 0 r0 [orig:113 tab.5_1 ] [113])
        (mem/f/c:SI (reg/f:SI 3 r3 [120]) [2 tab+0 S4 A32])) "uart.c":233:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 2 r2 [121])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [123])
        (const_int 1717986919 [0x66666667])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (parallel [
            (set (reg:SI 3 r3 [122])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 3 r3 [122]))
                            (sign_extend:DI (reg:SI 2 r2 [121])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [135]))
        ]) "uart.c":233:16 71 {*smull_high}
     (nil))
(insn 16 15 17 3 (set (reg:SI 1 r1 [124])
        (ashiftrt:SI (reg:SI 3 r3 [122])
            (const_int 2 [0x2]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [125])
        (ashiftrt:SI (reg:SI 2 r2 [121])
            (const_int 31 [0x1f]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 18 17 19 3 (set (reg:SI 1 r1 [orig:114 _2 ] [114])
        (minus:SI (reg:SI 1 r1 [124])
            (reg:SI 3 r3 [125]))) "uart.c":233:16 45 {*arm_subsi3_insn}
     (expr_list:REG_EQUAL (div:SI (reg:SI 2 r2 [121])
            (const_int 10 [0xa]))
        (nil)))
(insn 19 18 20 3 (set (reg:SI 3 r3 [126])
        (reg:SI 1 r1 [orig:114 _2 ] [114])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (reg:SI 3 r3 [126])
        (ashift:SI (reg:SI 3 r3 [126])
            (const_int 2 [0x2]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 21 20 22 3 (set (reg:SI 3 r3 [126])
        (plus:SI (reg:SI 3 r3 [126])
            (reg:SI 1 r1 [orig:114 _2 ] [114]))) "uart.c":233:16 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 r1 [orig:114 _2 ] [114])
            (const_int 5 [0x5]))
        (nil)))
(insn 22 21 24 3 (set (reg:SI 3 r3 [127])
        (ashift:SI (reg:SI 3 r3 [126])
            (const_int 1 [0x1]))) "uart.c":233:16 147 {*arm_shiftsi3}
     (nil))
(insn 24 22 25 3 (set (reg:SI 1 r1 [orig:114 _2 ] [114])
        (minus:SI (reg:SI 2 r2 [121])
            (reg:SI 3 r3 [126]))) "uart.c":233:16 45 {*arm_subsi3_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (reg:SI 1 r1 [orig:114 _2 ] [114])) "uart.c":233:16 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 3 r3 [orig:116 _4 ] [116])
        (plus:SI (reg/f:SI 0 r0 [orig:113 tab.5_1 ] [113])
            (reg:SI 3 r3 [orig:115 _3 ] [115]))) "uart.c":233:13 7 {*arm_addsi3}
     (nil))
(insn 27 26 28 3 (set (reg:QI 3 r3 [128])
        (mem:QI (reg/f:SI 3 r3 [orig:116 _4 ] [116]) [0 *_4+0 S1 A8])) "uart.c":233:8 263 {*arm_movqi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [128])) "uart.c":233:8 263 {*arm_movqi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:SI 3 r3 [129])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [3 x+0 S4 A32])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 2 r2 [131])
        (const_int 1717986919 [0x66666667])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 2 r2 [130])
                (truncate:SI (lshiftrt:DI (mult:DI (sign_extend:DI (reg:SI 2 r2 [130]))
                            (sign_extend:DI (reg:SI 3 r3 [129])))
                        (const_int 32 [0x20]))))
            (clobber (reg:SI 1 r1 [136]))
        ]) "uart.c":234:6 71 {*smull_high}
     (nil))
(insn 32 31 33 3 (set (reg:SI 2 r2 [132])
        (ashiftrt:SI (reg:SI 2 r2 [130])
            (const_int 2 [0x2]))) "uart.c":234:6 147 {*arm_shiftsi3}
     (nil))
(insn 33 32 34 3 (set (reg:SI 3 r3 [133])
        (ashiftrt:SI (reg:SI 3 r3 [129])
            (const_int 31 [0x1f]))) "uart.c":234:6 147 {*arm_shiftsi3}
     (nil))
(insn 34 33 35 3 (set (reg:SI 3 r3 [orig:117 _5 ] [117])
        (minus:SI (reg:SI 2 r2 [132])
            (reg:SI 3 r3 [133]))) "uart.c":234:6 45 {*arm_subsi3_insn}
     (nil))
(insn 35 34 36 3 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:117 _5 ] [117])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":234:6 253 {*arm_movsi_insn}
     (nil))
(call_insn 37 36 38 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpu") [flags 0x3]  <function_decl 0x7f19cf07d300 srpu>) [0 srpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":234:6 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 134
(code_label 38 37 39 4 46 (nil) [1 uses])
(note 39 38 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 4 (set (reg:SI 3 r3 [134])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "uart.c":236:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 41 40 42 4 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [134])) "uart.c":236:3 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":236:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 46 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":236:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 46 43 47 4 (clobber (reg/i:SI 0 r0)) "uart.c":237:1 -1
     (nil))
(insn 47 46 50 4 (clobber (reg:SI 3 r3 [orig:118 <retval> ] [118])) "uart.c":237:1 -1
     (nil))
(insn 50 47 45 4 (const_int 0 [0]) "uart.c":237:1 311 {nop}
     (nil))
(insn 45 50 48 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:118 <retval> ] [118])) "uart.c":237:1 253 {*arm_movsi_insn}
     (nil))
(insn 48 45 53 4 (use (reg/i:SI 0 r0)) "uart.c":237:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 53 48 0 NOTE_INSN_DELETED)

;; Function sprintu (sprintu, funcdef_no=11, decl_uid=4570, cgraph_uid=12, symbol_order=13)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 7:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 11:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 12:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 30: point = 0, n_alt = -1
   Insn 27: point = 0, n_alt = -2
   Insn 32: point = 1, n_alt = -1
   Insn 29: point = 1, n_alt = -1
   Insn 28: point = 2, n_alt = -1
   Insn 25: point = 2, n_alt = -1
   Insn 24: point = 2, n_alt = 4
   Insn 23: point = 2, n_alt = 1
  BB 3
   Insn 33: point = 2, n_alt = -1
   Insn 13: point = 2, n_alt = -1
   Insn 12: point = 2, n_alt = 4
   Insn 11: point = 2, n_alt = 1
  BB 4
   Insn 20: point = 2, n_alt = -1
   Insn 19: point = 2, n_alt = 4
   Insn 18: point = 2, n_alt = 4
  BB 2
   Insn 9: point = 2, n_alt = -1
   Insn 8: point = 2, n_alt = 3
   Insn 7: point = 3, n_alt = 4
   Insn 3: point = 4, n_alt = 5
   Insn 2: point = 4, n_alt = 5
 r113: [0..1]
 r114: [2..3]
Compressing live ranges: from 4 to 4 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 29
changing reg in insn 27
changing reg in insn 7
changing reg in insn 8
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 25.


sprintu

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={9d,6u} r1={7d,4u} r2={4d} r3={6d,2u} r11={1d,12u} r12={6d} r13={1d,8u} r14={4d} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={4d,1u} r101={3d} r102={1d,1u} r104={3d} r105={3d} r106={3d} 
;;    total ref usage 344{310d,34u,0e} in 20{17 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":240:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":240:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":241:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 0 [0]))) "uart.c":241:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 16)
            (pc))) "uart.c":241:6 273 {arm_cond_branch}
     (nil)
 -> 16)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg:SI 1 r1)
        (const_int 48 [0x30])) "uart.c":242:5 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":242:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 13 12 33 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":242:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 33 13 34 3 (set (pc)
        (label_ref 21)) 284 {*arm_jump}
     (nil)
 -> 21)
;;  succ:       5 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 34 33 16)
;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(code_label 16 34 17 4 50 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":244:5 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":244:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 21 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("srpu") [flags 0x3]  <function_decl 0x7f19cf07d300 srpu>) [0 srpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":244:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;;              3 [always] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 21 20 22 5 51 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) "uart.c":245:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":245:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 25 24 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":245:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 28 25 29 5 (clobber (reg/i:SI 0 r0)) "uart.c":246:1 -1
     (nil))
(insn 29 28 32 5 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":246:1 -1
     (nil))
(insn 32 29 27 5 (const_int 0 [0]) "uart.c":246:1 311 {nop}
     (nil))
(insn 27 32 30 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":246:1 253 {*arm_movsi_insn}
     (nil))
(insn 30 27 35 5 (use (reg/i:SI 0 r0)) "uart.c":246:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 35 30 0 NOTE_INSN_DELETED)

;; Function sprinti (sprinti, funcdef_no=12, decl_uid=4574, cgraph_uid=13, symbol_order=14)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 16:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 17:  (0) r  (1) r {*arm_negsi2}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 4
   Insn 28: point = 0, n_alt = -1
   Insn 25: point = 0, n_alt = -2
   Insn 30: point = 1, n_alt = -1
   Insn 27: point = 1, n_alt = -1
   Insn 26: point = 2, n_alt = -1
   Insn 23: point = 2, n_alt = -1
   Insn 22: point = 2, n_alt = 4
   Insn 21: point = 2, n_alt = 4
  BB 3
   Insn 18: point = 2, n_alt = 5
   Insn 17: point = 3, n_alt = 1
   Insn 16: point = 5, n_alt = 4
   Insn 15: point = 6, n_alt = -1
   Insn 14: point = 6, n_alt = 4
   Insn 13: point = 6, n_alt = 1
  BB 2
   Insn 11: point = 6, n_alt = -1
   Insn 10: point = 6, n_alt = 3
   Insn 9: point = 7, n_alt = 4
   Insn 3: point = 8, n_alt = 5
   Insn 2: point = 8, n_alt = 5
 r113: [0..1]
 r114: [6..7]
 r115: [2..3]
 r116: [4..5]
Compressing live ranges: from 8 to 8 - 100%
Ranges after the compression:
 r113: [0..1]
 r114: [6..7]
 r115: [2..3]
 r116: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=12, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=8, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 27
changing reg in insn 25
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 23.


sprinti

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={7d,5u} r1={5d,3u} r2={3d} r3={7d,4u} r11={1d,12u} r12={4d} r13={1d,6u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 245{213d,32u,0e} in 19{17 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 114
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":249:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "uart.c":249:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 4 10 2 (set (reg:SI 3 r3 [114])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":250:6 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [114])
            (const_int 0 [0]))) "uart.c":250:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "uart.c":250:6 273 {arm_cond_branch}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg:SI 1 r1)
        (const_int 45 [0x2d])) "uart.c":251:5 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":251:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":251:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 16 15 17 3 (set (reg:SI 3 r3 [116])
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":252:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 3 r3 [115])
        (neg:SI (reg:SI 3 r3 [116]))) "uart.c":252:7 164 {*arm_negsi2}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 3 r3 [115])) "uart.c":252:7 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 113
(code_label 19 18 20 4 53 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "uart.c":254:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":254:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 26 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":254:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 26 23 27 4 (clobber (reg/i:SI 0 r0)) "uart.c":255:1 -1
     (nil))
(insn 27 26 30 4 (clobber (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":255:1 -1
     (nil))
(insn 30 27 25 4 (const_int 0 [0]) "uart.c":255:1 311 {nop}
     (nil))
(insn 25 30 28 4 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:113 <retval> ] [113])) "uart.c":255:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 31 4 (use (reg/i:SI 0 r0)) "uart.c":255:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 31 28 0 NOTE_INSN_DELETED)

;; Function sfprintf (sfprintf, funcdef_no=13, decl_uid=4578, cgraph_uid=14, symbol_order=15)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=24, prev_offset=0)
Can't eliminate 103 to 102 (offset=12, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-8, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 8:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 9:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 13:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 19:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 21:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 23:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 29:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 33:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 34:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 40:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 41:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 42:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 43:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 44:  (0) r  (1) m {*arm_zero_extendqisi2}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 46:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) r  (1) rI {*arm_casesi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 53:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 55:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 57:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 63:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 67:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 73:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 76:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 82:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 85:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 91:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 94:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 98:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 99:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 100:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 101:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 102:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 103:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 106:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 107:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 16
EBB 13
EBB 14 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 116: point = 0, n_alt = -1
   Insn 113: point = 0, n_alt = -2
   Insn 118: point = 1, n_alt = -1
   Insn 115: point = 1, n_alt = -1
   Insn 114: point = 2, n_alt = -1
  BB 14
   Insn 110: point = 2, n_alt = -1
   Insn 109: point = 2, n_alt = 3
   Insn 107: point = 3, n_alt = 1
   Insn 106: point = 5, n_alt = 4
  BB 6
   Insn 121: point = 6, n_alt = -1
   Insn 35: point = 6, n_alt = 5
   Insn 34: point = 7, n_alt = 4
   Insn 33: point = 9, n_alt = 4
  BB 5
   Insn 30: point = 10, n_alt = -1
   Insn 29: point = 10, n_alt = 4
   Insn 28: point = 10, n_alt = 1
  BB 4
   Insn 26: point = 10, n_alt = -1
   Insn 25: point = 10, n_alt = 3
   Insn 24: point = 11, n_alt = 1
   Insn 23: point = 13, n_alt = 4
   Insn 22: point = 14, n_alt = -1
   Insn 21: point = 14, n_alt = 4
   Insn 20: point = 14, n_alt = -2
   Insn 19: point = 15, n_alt = 1
   Insn 18: point = 17, n_alt = 4
  BB 2
   Insn 119: point = 18, n_alt = -1
   Insn 9: point = 18, n_alt = 5
   Insn 8: point = 19, n_alt = 4
   Insn 7: point = 20, n_alt = 5
   Insn 6: point = 21, n_alt = 4
   Insn 2: point = 22, n_alt = 5
  BB 13
   Insn 103: point = 22, n_alt = 5
   Insn 102: point = 23, n_alt = 4
   Insn 101: point = 25, n_alt = 4
   Insn 100: point = 26, n_alt = 5
   Insn 99: point = 27, n_alt = 4
   Insn 98: point = 29, n_alt = 4
  BB 11
   Insn 129: point = 30, n_alt = -1
   Insn 86: point = 30, n_alt = -1
   Insn 85: point = 30, n_alt = 4
   Insn 84: point = 30, n_alt = -2
   Insn 83: point = 31, n_alt = 4
   Insn 82: point = 33, n_alt = 4
  BB 10
   Insn 127: point = 34, n_alt = -1
   Insn 77: point = 34, n_alt = -1
   Insn 76: point = 34, n_alt = 4
   Insn 75: point = 34, n_alt = -2
   Insn 74: point = 35, n_alt = 4
   Insn 73: point = 37, n_alt = 4
  BB 9
   Insn 125: point = 38, n_alt = -1
   Insn 68: point = 38, n_alt = -1
   Insn 67: point = 38, n_alt = 4
   Insn 66: point = 38, n_alt = -2
   Insn 65: point = 39, n_alt = -2
   Insn 64: point = 41, n_alt = 4
   Insn 63: point = 43, n_alt = 4
  BB 8
   Insn 123: point = 44, n_alt = -1
   Insn 58: point = 44, n_alt = -1
   Insn 57: point = 44, n_alt = 4
   Insn 56: point = 44, n_alt = -2
   Insn 55: point = 45, n_alt = 0
   Insn 54: point = 47, n_alt = 4
   Insn 53: point = 49, n_alt = 4
  BB 16
   Insn 132: point = 50, n_alt = -1
  BB 12
   Insn 95: point = 50, n_alt = -1
   Insn 94: point = 50, n_alt = 4
   Insn 93: point = 50, n_alt = -2
   Insn 92: point = 51, n_alt = 4
   Insn 91: point = 53, n_alt = 4
  BB 7
   Insn 47: point = 54, n_alt = 0
   Insn 46: point = 55, n_alt = 10
   Insn 45: point = 57, n_alt = -2
   Insn 44: point = 59, n_alt = 1
   Insn 43: point = 61, n_alt = 4
   Insn 42: point = 62, n_alt = 5
   Insn 41: point = 63, n_alt = 4
   Insn 40: point = 65, n_alt = 4
  BB 3
   Insn 16: point = 66, n_alt = -1
   Insn 15: point = 66, n_alt = 3
   Insn 14: point = 67, n_alt = 1
   Insn 13: point = 69, n_alt = 4
 r113: [66..67]
 r114: [14..15]
 r115: [10..11]
 r116: [58..59]
 r117: [56..57]
 r118: [46..47]
 r119: [44..45]
 r120: [40..41]
 r121: [38..39]
 r122: [34..35]
 r123: [30..31]
 r124: [50..51]
 r125: [2..3]
 r126: [0..1]
 r127: [20..21]
 r128: [18..19]
 r129: [68..69]
 r130: [16..17]
 r131: [12..13]
 r132: [6..7]
 r133: [8..9]
 r134: [62..63]
 r135: [64..65]
 r136: [60..61]
 r137: [54..55]
 r138: [48..49]
 r139: [42..43]
 r140: [36..37]
 r141: [32..33]
 r142: [52..53]
 r143: [26..27]
 r144: [28..29]
 r145: [22..23]
 r146: [24..25]
 r147: [4..5]
Compressing live ranges: from 70 to 70 - 100%
Ranges after the compression:
 r113: [66..67]
 r114: [14..15]
 r115: [10..11]
 r116: [58..59]
 r117: [56..57]
 r118: [46..47]
 r119: [44..45]
 r120: [40..41]
 r121: [38..39]
 r122: [34..35]
 r123: [30..31]
 r124: [50..51]
 r125: [2..3]
 r126: [0..1]
 r127: [20..21]
 r128: [18..19]
 r129: [68..69]
 r130: [16..17]
 r131: [12..13]
 r132: [6..7]
 r133: [8..9]
 r134: [62..63]
 r135: [64..65]
 r136: [60..61]
 r137: [54..55]
 r138: [48..49]
 r139: [42..43]
 r140: [36..37]
 r141: [32..33]
 r142: [52..53]
 r143: [26..27]
 r144: [28..29]
 r145: [22..23]
 r146: [24..25]
 r147: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=24, prev_offset=0)
Can't eliminate 103 to 102 (offset=12, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-8, prev_offset=-8)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 74
changing reg in insn 75
changing reg in insn 83
changing reg in insn 84
changing reg in insn 92
changing reg in insn 93
changing reg in insn 107
changing reg in insn 109
changing reg in insn 115
changing reg in insn 113
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 34
changing reg in insn 35
changing reg in insn 33
changing reg in insn 34
changing reg in insn 41
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 63
changing reg in insn 64
changing reg in insn 73
changing reg in insn 74
changing reg in insn 82
changing reg in insn 83
changing reg in insn 91
changing reg in insn 92
changing reg in insn 99
changing reg in insn 100
changing reg in insn 98
changing reg in insn 99
changing reg in insn 102
changing reg in insn 103
changing reg in insn 101
changing reg in insn 102
changing reg in insn 106
changing reg in insn 107
deleting insn with uid = 45.
deleting insn with uid = 65.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 86.
verify found no changes in insn with uid = 95.


sfprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,10u} r1={15d,7u} r2={8d} r3={41d,34u} r11={1d,46u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,1u} r104={7d} r105={7d} r106={7d} 
;;    total ref usage 864{740d,124u,0e} in 79{72 regular + 7 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127 128
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":258:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int 4 [0x4])) [2 fmt+0 S4 A64])) "uart.c":261:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])
        (reg/f:SI 3 r3 [127])) "uart.c":261:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 3 r3 [128])
        (plus:SI (reg/f:SI 11 fp)
            (const_int 8 [0x8]))) "uart.c":262:6 7 {*arm_addsi3}
     (nil))
(insn 9 8 119 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])
        (reg:SI 3 r3 [128])) "uart.c":262:6 253 {*arm_movsi_insn}
     (nil))
(jump_insn 119 9 120 2 (set (pc)
        (label_ref 104)) "uart.c":264:8 284 {*arm_jump}
     (nil)
 -> 104)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 120 119 108)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 129
(code_label 108 120 12 3 65 (nil) [1 uses])
(note 12 108 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 3 r3 [129])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":265:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [129]) [0 *cp_15+0 S1 A8]))) "uart.c":265:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 15 14 16 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 37 [0x25]))) "uart.c":265:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 16 15 17 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "uart.c":265:8 273 {arm_cond_branch}
     (nil)
 -> 38)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 130 131
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 3 r3 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":266:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [130]) [0 *cp_15+0 S1 A8]))) "uart.c":266:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 20 19 21 4 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "uart.c":266:7 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":266:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 22 21 23 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":266:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 23 22 24 4 (set (reg/f:SI 3 r3 [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":267:11 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [131]) [0 *cp_15+0 S1 A8]))) "uart.c":267:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:115 _3 ] [115])
            (const_int 10 [0xa]))) "uart.c":267:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "uart.c":267:10 273 {arm_cond_branch}
     (nil)
 -> 31)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":268:2 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":268:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 30 29 31 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":268:2 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 132 133
(code_label 31 30 32 6 57 (nil) [1 uses])
(note 32 31 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 6 (set (reg:SI 3 r3 [133])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":269:9 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 6 (set (reg:SI 3 r3 [132])
        (plus:SI (reg:SI 3 r3 [133])
            (const_int 1 [0x1]))) "uart.c":269:9 7 {*arm_addsi3}
     (nil))
(insn 35 34 121 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])
        (reg:SI 3 r3 [132])) "uart.c":269:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 121 35 122 6 (set (pc)
        (label_ref 104)) "uart.c":270:7 284 {*arm_jump}
     (nil)
 -> 104)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 122 121 38)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 134 135 136 137
(code_label 38 122 39 7 56 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:SI 3 r3 [135])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":272:7 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 7 (set (reg:SI 3 r3 [134])
        (plus:SI (reg:SI 3 r3 [135])
            (const_int 1 [0x1]))) "uart.c":272:7 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])
        (reg:SI 3 r3 [134])) "uart.c":272:7 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 7 (set (reg/f:SI 3 r3 [136])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":273:12 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 46 7 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [136]) [0 *cp_22+0 S1 A8]))) "uart.c":273:12 175 {*arm_zero_extendqisi2}
     (nil))
(insn 46 44 47 7 (set (reg:SI 3 r3 [137])
        (plus:SI (reg:SI 3 r3 [orig:117 _5 ] [117])
            (const_int -99 [0xffffffffffffff9d]))) "uart.c":273:5 7 {*arm_addsi3}
     (nil))
(jump_insn 47 46 48 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 3 r3 [137])
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 3 r3 [137])
                                (const_int 4 [0x4]))
                            (label_ref:SI 48)) [0  S4 A32])
                    (label_ref:SI 96)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 48))
        ]) "uart.c":273:5 308 {*arm_casesi_internal}
     (insn_list:REG_LABEL_TARGET 96 (nil))
 -> 48)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 48 47 49 60 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 49 48 50 (addr_vec:SI [
            (label_ref:SI 51)
            (label_ref:SI 71)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 61)
            (label_ref:SI 96)
            (label_ref:SI 80)
            (label_ref:SI 96)
            (label_ref:SI 96)
            (label_ref:SI 89)
        ]))
(barrier 50 49 51)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 138
(code_label 51 50 52 8 64 (nil) [1 uses])
(note 52 51 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 8 (set (reg/f:SI 3 r3 [138])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":274:31 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 8 (set (reg:SI 3 r3 [orig:118 _6 ] [118])
        (mem:SI (reg/f:SI 3 r3 [138]) [3 *ip_14+0 S4 A32])) "uart.c":274:31 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 8 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (and:SI (reg:SI 3 r3 [orig:118 _6 ] [118])
            (const_int 255 [0xff]))) "uart.c":274:15 90 {*arm_andsi3_insn}
     (nil))
(insn 56 55 57 8 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "uart.c":274:15 253 {*arm_movsi_insn}
     (nil))
(insn 57 56 58 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":274:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 58 57 123 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":274:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 123 58 124 8 (set (pc)
        (label_ref 96)) "uart.c":274:42 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 124 123 61)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 139
(code_label 61 124 62 9 62 (nil) [1 uses])
(note 62 61 63 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 9 (set (reg/f:SI 3 r3 [139])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":275:35 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 66 9 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (mem:SI (reg/f:SI 3 r3 [139]) [3 *ip_14+0 S4 A32])) "uart.c":275:35 253 {*arm_movsi_insn}
     (nil))
(insn 66 64 67 9 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:121 _9 ] [121])) "uart.c":275:15 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":275:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 68 67 125 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":275:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 125 68 126 9 (set (pc)
        (label_ref 96)) "uart.c":275:42 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 126 125 71)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 140
(code_label 71 126 72 10 63 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg/f:SI 3 r3 [140])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 3 r3 [orig:122 _10 ] [122])
        (mem:SI (reg/f:SI 3 r3 [140]) [3 *ip_14+0 S4 A32])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:122 _10 ] [122])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 10 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":276:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 77 76 127 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprinti") [flags 0x3]  <function_decl 0x7f19cf07d700 sprinti>) [0 sprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":276:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 127 77 128 10 (set (pc)
        (label_ref 96)) "uart.c":276:43 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 128 127 80)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 141
(code_label 80 128 81 11 61 (nil) [1 uses])
(note 81 80 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 11 (set (reg/f:SI 3 r3 [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 11 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (mem:SI (reg/f:SI 3 r3 [141]) [3 *ip_14+0 S4 A32])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 11 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":277:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 86 85 129 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":277:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 129 86 130 11 (set (pc)
        (label_ref 96)) "uart.c":277:43 284 {*arm_jump}
     (nil)
 -> 96)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 130 129 89)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 142
(code_label 89 130 90 12 59 (nil) [1 uses])
(note 90 89 91 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 91 90 92 12 (set (reg/f:SI 3 r3 [142])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 12 (set (reg:SI 3 r3 [orig:124 _12 ] [124])
        (mem:SI (reg/f:SI 3 r3 [142]) [3 *ip_14+0 S4 A32])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 12 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:124 _12 ] [124])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 12 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [6 up+0 S4 A32])) "uart.c":278:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 95 94 131 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintx") [flags 0x3]  <function_decl 0x7f19cf07d100 sprintx>) [0 sprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":278:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 131 95 132 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 132 131 96 16 (const_int 0 [0]) "uart.c":278:34 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL, MODIFIED)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 143 144 145 146
(code_label 96 132 97 13 58 (nil) [22 uses])
(note 97 96 98 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 98 97 99 13 (set (reg:SI 3 r3 [144])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":280:7 253 {*arm_movsi_insn}
     (nil))
(insn 99 98 100 13 (set (reg:SI 3 r3 [143])
        (plus:SI (reg:SI 3 r3 [144])
            (const_int 1 [0x1]))) "uart.c":280:7 7 {*arm_addsi3}
     (nil))
(insn 100 99 101 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])
        (reg:SI 3 r3 [143])) "uart.c":280:7 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 102 13 (set (reg:SI 3 r3 [146])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])) "uart.c":280:13 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 13 (set (reg:SI 3 r3 [145])
        (plus:SI (reg:SI 3 r3 [146])
            (const_int 4 [0x4]))) "uart.c":280:13 7 {*arm_addsi3}
     (nil))
(insn 103 102 104 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A64])
        (reg:SI 3 r3 [145])) "uart.c":280:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 125 147
(code_label 104 103 105 14 55 (nil) [2 uses])
(note 105 104 106 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 14 (set (reg/f:SI 3 r3 [147])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A32])) "uart.c":264:9 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 109 14 (set (reg:SI 3 r3 [orig:125 _13 ] [125])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [147]) [0 *cp_15+0 S1 A8]))) "uart.c":264:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 109 107 110 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:125 _13 ] [125])
            (const_int 0 [0]))) "uart.c":264:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 110 109 111 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) "uart.c":264:9 273 {arm_cond_branch}
     (nil)
 -> 108)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 126
(note 111 110 114 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 114 111 115 15 (clobber (reg/i:SI 0 r0)) "uart.c":282:1 -1
     (nil))
(insn 115 114 118 15 (clobber (reg:SI 3 r3 [orig:126 <retval> ] [126])) "uart.c":282:1 -1
     (nil))
(insn 118 115 113 15 (const_int 0 [0]) "uart.c":282:1 311 {nop}
     (nil))
(insn 113 118 116 15 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:126 <retval> ] [126])) "uart.c":282:1 253 {*arm_movsi_insn}
     (nil))
(insn 116 113 133 15 (use (reg/i:SI 0 r0)) "uart.c":282:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 133 116 0 NOTE_INSN_DELETED)

;; Function ksprintf (ksprintf, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=16)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 5:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 6:  (0) m  (1) rk {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 7:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 9:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 14:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 19:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 22:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 24:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 25:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) I {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 30:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 34:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 35:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 41:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 42:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 43:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 44:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 45:  (0) r  (1) m {*arm_zero_extendqisi2}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            alt=5: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            alt=7: Bad operand -- refuse
          alt=10,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 10 in insn 47:  (0) r  (1) rk  (2) L {*arm_addsi3}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r  (1) rI {*arm_casesi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 54:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 55:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=15,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %r  (2) I {*arm_andsi3_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 58:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 64:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 65:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 68:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 74:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 75:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 77:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 83:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 84:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 86:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 92:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 93:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 95:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 99:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 100:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 101:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 102:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 103:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 104:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 107:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 108:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 110:  (0) r  (1) I {*arm_cmpsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3 4 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12 16
EBB 13
EBB 14 15

********** Pseudo live ranges #1: **********

  BB 15
   Insn 117: point = 0, n_alt = -1
   Insn 114: point = 0, n_alt = -2
   Insn 119: point = 1, n_alt = -1
   Insn 116: point = 1, n_alt = -1
   Insn 115: point = 2, n_alt = -1
  BB 14
   Insn 111: point = 2, n_alt = -1
   Insn 110: point = 2, n_alt = 3
   Insn 108: point = 3, n_alt = 1
   Insn 107: point = 5, n_alt = 4
  BB 6
   Insn 122: point = 6, n_alt = -1
   Insn 36: point = 6, n_alt = 5
   Insn 35: point = 7, n_alt = 4
   Insn 34: point = 9, n_alt = 4
  BB 5
   Insn 31: point = 10, n_alt = -1
   Insn 30: point = 10, n_alt = 4
   Insn 29: point = 10, n_alt = 1
  BB 4
   Insn 27: point = 10, n_alt = -1
   Insn 26: point = 10, n_alt = 3
   Insn 25: point = 11, n_alt = 1
   Insn 24: point = 13, n_alt = 4
   Insn 23: point = 14, n_alt = -1
   Insn 22: point = 14, n_alt = 4
   Insn 21: point = 14, n_alt = -2
   Insn 20: point = 15, n_alt = 1
   Insn 19: point = 17, n_alt = 4
  BB 2
   Insn 120: point = 18, n_alt = -1
   Insn 10: point = 18, n_alt = 5
   Insn 9: point = 19, n_alt = 4
   Insn 8: point = 20, n_alt = 5
   Insn 7: point = 21, n_alt = 4
   Insn 6: point = 22, n_alt = 5
   Insn 5: point = 23, n_alt = 4
  BB 13
   Insn 104: point = 24, n_alt = 5
   Insn 103: point = 25, n_alt = 4
   Insn 102: point = 27, n_alt = 4
   Insn 101: point = 28, n_alt = 5
   Insn 100: point = 29, n_alt = 4
   Insn 99: point = 31, n_alt = 4
  BB 11
   Insn 130: point = 32, n_alt = -1
   Insn 87: point = 32, n_alt = -1
   Insn 86: point = 32, n_alt = 4
   Insn 85: point = 32, n_alt = -2
   Insn 84: point = 33, n_alt = 4
   Insn 83: point = 35, n_alt = 4
  BB 10
   Insn 128: point = 36, n_alt = -1
   Insn 78: point = 36, n_alt = -1
   Insn 77: point = 36, n_alt = 4
   Insn 76: point = 36, n_alt = -2
   Insn 75: point = 37, n_alt = 4
   Insn 74: point = 39, n_alt = 4
  BB 9
   Insn 126: point = 40, n_alt = -1
   Insn 69: point = 40, n_alt = -1
   Insn 68: point = 40, n_alt = 4
   Insn 67: point = 40, n_alt = -2
   Insn 66: point = 41, n_alt = -2
   Insn 65: point = 43, n_alt = 4
   Insn 64: point = 45, n_alt = 4
  BB 8
   Insn 124: point = 46, n_alt = -1
   Insn 59: point = 46, n_alt = -1
   Insn 58: point = 46, n_alt = 4
   Insn 57: point = 46, n_alt = -2
   Insn 56: point = 47, n_alt = 0
   Insn 55: point = 49, n_alt = 4
   Insn 54: point = 51, n_alt = 4
  BB 16
   Insn 133: point = 52, n_alt = -1
  BB 12
   Insn 96: point = 52, n_alt = -1
   Insn 95: point = 52, n_alt = 4
   Insn 94: point = 52, n_alt = -2
   Insn 93: point = 53, n_alt = 4
   Insn 92: point = 55, n_alt = 4
  BB 7
   Insn 48: point = 56, n_alt = 0
   Insn 47: point = 57, n_alt = 10
   Insn 46: point = 59, n_alt = -2
   Insn 45: point = 61, n_alt = 1
   Insn 44: point = 63, n_alt = 4
   Insn 43: point = 64, n_alt = 5
   Insn 42: point = 65, n_alt = 4
   Insn 41: point = 67, n_alt = 4
  BB 3
   Insn 17: point = 68, n_alt = -1
   Insn 16: point = 68, n_alt = 3
   Insn 15: point = 69, n_alt = 1
   Insn 14: point = 71, n_alt = 4
 r113: [68..69]
 r114: [14..15]
 r115: [10..11]
 r116: [60..61]
 r117: [58..59]
 r118: [48..49]
 r119: [46..47]
 r120: [42..43]
 r121: [40..41]
 r122: [36..37]
 r123: [32..33]
 r124: [52..53]
 r125: [2..3]
 r126: [0..1]
 r127: [22..23]
 r128: [20..21]
 r129: [18..19]
 r130: [70..71]
 r131: [16..17]
 r132: [12..13]
 r133: [6..7]
 r134: [8..9]
 r135: [64..65]
 r136: [66..67]
 r137: [62..63]
 r138: [56..57]
 r139: [50..51]
 r140: [44..45]
 r141: [38..39]
 r142: [34..35]
 r143: [54..55]
 r144: [28..29]
 r145: [30..31]
 r146: [24..25]
 r147: [26..27]
 r148: [4..5]
Compressing live ranges: from 72 to 72 - 100%
Ranges after the compression:
 r113: [68..69]
 r114: [14..15]
 r115: [10..11]
 r116: [60..61]
 r117: [58..59]
 r118: [48..49]
 r119: [46..47]
 r120: [42..43]
 r121: [40..41]
 r122: [36..37]
 r123: [32..33]
 r124: [52..53]
 r125: [2..3]
 r126: [0..1]
 r127: [22..23]
 r128: [20..21]
 r129: [18..19]
 r130: [70..71]
 r131: [16..17]
 r132: [12..13]
 r133: [6..7]
 r134: [8..9]
 r135: [64..65]
 r136: [66..67]
 r137: [62..63]
 r138: [56..57]
 r139: [50..51]
 r140: [44..45]
 r141: [38..39]
 r142: [34..35]
 r143: [54..55]
 r144: [28..29]
 r145: [30..31]
 r146: [24..25]
 r147: [26..27]
 r148: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 67
changing reg in insn 75
changing reg in insn 76
changing reg in insn 84
changing reg in insn 85
changing reg in insn 93
changing reg in insn 94
changing reg in insn 108
changing reg in insn 110
changing reg in insn 116
changing reg in insn 114
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 35
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 54
changing reg in insn 55
changing reg in insn 64
changing reg in insn 65
changing reg in insn 74
changing reg in insn 75
changing reg in insn 83
changing reg in insn 84
changing reg in insn 92
changing reg in insn 93
changing reg in insn 100
changing reg in insn 101
changing reg in insn 99
changing reg in insn 100
changing reg in insn 103
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
deleting insn with uid = 46.
deleting insn with uid = 66.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 96.


ksprintf

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={17d,9u} r1={15d,7u} r2={8d} r3={42d,35u} r11={1d,46u} r12={14d} r13={1d,23u} r14={8d} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={11d,3u} r101={7d} r102={1d,1u} r104={7d} r105={7d} r106={7d} 
;;    total ref usage 865{741d,124u,0e} in 80{73 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 127 128 129
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 3 r3 [127])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int 4 [0x4])) [2 fmt+0 S4 A64])) "uart.c":288:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])
        (reg/f:SI 3 r3 [127])) "uart.c":288:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 3 r3 [128])
        (plus:SI (reg/f:SI 11 fp)
            (const_int 8 [0x8]))) "uart.c":289:6 7 {*arm_addsi3}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])
        (reg:SI 3 r3 [128])) "uart.c":289:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 3 r3 [129])
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":291:9 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 120 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg/f:SI 3 r3 [129])) "uart.c":291:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 120 10 121 2 (set (pc)
        (label_ref 105)) "uart.c":293:8 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 121 120 109)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       14
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 113 130
(code_label 109 121 13 3 77 (nil) [1 uses])
(note 13 109 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 3 r3 [130])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":294:9 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 3 r3 [orig:113 _1 ] [113])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [130]) [0 *cp_15+0 S1 A8]))) "uart.c":294:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 16 15 17 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:113 _1 ] [113])
            (const_int 37 [0x25]))) "uart.c":294:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) "uart.c":294:8 273 {arm_cond_branch}
     (nil)
 -> 39)
;;  succ:       4 (FALLTHRU)
;;              7
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 115 131 132
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:SI 3 r3 [131])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":295:7 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [131]) [0 *cp_15+0 S1 A8]))) "uart.c":295:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 21 20 22 4 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:114 _2 ] [114])) "uart.c":295:7 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":295:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":295:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(insn 24 23 25 4 (set (reg/f:SI 3 r3 [132])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":296:11 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 3 r3 [orig:115 _3 ] [115])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [132]) [0 *cp_15+0 S1 A8]))) "uart.c":296:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 26 25 27 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:115 _3 ] [115])
            (const_int 10 [0xa]))) "uart.c":296:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 27 26 28 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 32)
            (pc))) "uart.c":296:10 273 {arm_cond_branch}
     (nil)
 -> 32)
;;  succ:       5 (FALLTHRU)
;;              6
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
(note 28 27 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 5 (set (reg:SI 1 r1)
        (const_int 13 [0xd])) "uart.c":297:2 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":297:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 31 30 32 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":297:2 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 133 134
(code_label 32 31 33 6 69 (nil) [1 uses])
(note 33 32 34 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 6 (set (reg:SI 3 r3 [134])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":298:9 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 6 (set (reg:SI 3 r3 [133])
        (plus:SI (reg:SI 3 r3 [134])
            (const_int 1 [0x1]))) "uart.c":298:9 7 {*arm_addsi3}
     (nil))
(insn 36 35 122 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])
        (reg:SI 3 r3 [133])) "uart.c":298:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 122 36 123 6 (set (pc)
        (label_ref 105)) "uart.c":299:7 284 {*arm_jump}
     (nil)
 -> 105)
;;  succ:       14 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 123 122 39)
;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (RTL, MODIFIED)
;;  pred:       3
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 116 117 135 136 137 138
(code_label 39 123 40 7 68 (nil) [1 uses])
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 41 40 42 7 (set (reg:SI 3 r3 [136])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":301:7 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 7 (set (reg:SI 3 r3 [135])
        (plus:SI (reg:SI 3 r3 [136])
            (const_int 1 [0x1]))) "uart.c":301:7 7 {*arm_addsi3}
     (nil))
(insn 43 42 44 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])
        (reg:SI 3 r3 [135])) "uart.c":301:7 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 7 (set (reg/f:SI 3 r3 [137])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":302:12 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 47 7 (set (reg:SI 3 r3 [orig:116 _4 ] [116])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [137]) [0 *cp_23+0 S1 A8]))) "uart.c":302:12 175 {*arm_zero_extendqisi2}
     (nil))
(insn 47 45 48 7 (set (reg:SI 3 r3 [138])
        (plus:SI (reg:SI 3 r3 [orig:117 _5 ] [117])
            (const_int -99 [0xffffffffffffff9d]))) "uart.c":302:5 7 {*arm_addsi3}
     (nil))
(jump_insn 48 47 49 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 3 r3 [138])
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 3 r3 [138])
                                (const_int 4 [0x4]))
                            (label_ref:SI 49)) [0  S4 A32])
                    (label_ref:SI 97)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 49))
        ]) "uart.c":302:5 308 {*arm_casesi_internal}
     (insn_list:REG_LABEL_TARGET 97 (nil))
 -> 49)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; Insn is not within a basic block
(code_label 49 48 50 72 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 50 49 51 (addr_vec:SI [
            (label_ref:SI 52)
            (label_ref:SI 72)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 62)
            (label_ref:SI 97)
            (label_ref:SI 81)
            (label_ref:SI 97)
            (label_ref:SI 97)
            (label_ref:SI 90)
        ]))
(barrier 51 50 52)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 118 119 139
(code_label 52 51 53 8 76 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg/f:SI 3 r3 [139])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":303:31 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 8 (set (reg:SI 3 r3 [orig:118 _6 ] [118])
        (mem:SI (reg/f:SI 3 r3 [139]) [3 *ip_14+0 S4 A32])) "uart.c":303:31 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 8 (set (reg:SI 3 r3 [orig:119 _7 ] [119])
        (and:SI (reg:SI 3 r3 [orig:118 _6 ] [118])
            (const_int 255 [0xff]))) "uart.c":303:15 90 {*arm_andsi3_insn}
     (nil))
(insn 57 56 58 8 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:119 _7 ] [119])) "uart.c":303:15 253 {*arm_movsi_insn}
     (nil))
(insn 58 57 59 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":303:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 59 58 124 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sputc") [flags 0x3]  <function_decl 0x7f19cf077300 sputc>) [0 sputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":303:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:QI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 124 59 125 8 (set (pc)
        (label_ref 97)) "uart.c":303:42 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 125 124 62)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 120 121 140
(code_label 62 125 63 9 74 (nil) [1 uses])
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 3 r3 [140])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":304:35 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 67 9 (set (reg:SI 3 r3 [orig:120 _8 ] [120])
        (mem:SI (reg/f:SI 3 r3 [140]) [3 *ip_14+0 S4 A32])) "uart.c":304:35 253 {*arm_movsi_insn}
     (nil))
(insn 67 65 68 9 (set (reg:SI 1 r1)
        (reg/f:SI 3 r3 [orig:121 _9 ] [121])) "uart.c":304:15 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 9 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":304:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 69 68 126 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprints") [flags 0x3]  <function_decl 0x7f19cf077d00 sprints>) [0 sprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":304:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 126 69 127 9 (set (pc)
        (label_ref 97)) "uart.c":304:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 127 126 72)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 122 141
(code_label 72 127 73 10 75 (nil) [1 uses])
(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 10 (set (reg/f:SI 3 r3 [141])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:SI 3 r3 [orig:122 _10 ] [122])
        (mem:SI (reg/f:SI 3 r3 [141]) [3 *ip_14+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 10 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:122 _10 ] [122])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 10 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":305:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 128 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprinti") [flags 0x3]  <function_decl 0x7f19cf07d700 sprinti>) [0 sprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":305:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 128 78 129 10 (set (pc)
        (label_ref 97)) "uart.c":305:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 129 128 81)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 123 142
(code_label 81 129 82 11 73 (nil) [1 uses])
(note 82 81 83 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 83 82 84 11 (set (reg/f:SI 3 r3 [142])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 3 r3 [orig:123 _11 ] [123])
        (mem:SI (reg/f:SI 3 r3 [142]) [3 *ip_14+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 11 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:123 _11 ] [123])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 11 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":306:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 87 86 130 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintu") [flags 0x3]  <function_decl 0x7f19cf07d500 sprintu>) [0 sprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":306:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(jump_insn 130 87 131 11 (set (pc)
        (label_ref 97)) "uart.c":306:43 284 {*arm_jump}
     (nil)
 -> 97)
;;  succ:       13 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 131 130 90)
;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 16, flags: (RTL, MODIFIED)
;;  pred:       7 [7.4% (adjusted)] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 124 143
(code_label 90 131 91 12 71 (nil) [1 uses])
(note 91 90 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 12 (set (reg/f:SI 3 r3 [143])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 12 (set (reg:SI 3 r3 [orig:124 _12 ] [124])
        (mem:SI (reg/f:SI 3 r3 [143]) [3 *ip_14+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 12 (set (reg:SI 1 r1)
        (reg:SI 3 r3 [orig:124 _12 ] [124])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 12 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":307:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 96 95 132 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sprintx") [flags 0x3]  <function_decl 0x7f19cf07d100 sprintx>) [0 sprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":307:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       16 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 16, loop depth 0, maybe hot
;;  prev block 12, next block 13, flags: (RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 132 96 133 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 133 132 97 16 (const_int 0 [0]) "uart.c":307:34 311 {nop}
     (nil))
;;  succ:       13 [always]  (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 13, loop depth 0, maybe hot
;;  prev block 16, next block 14, flags: (RTL, MODIFIED)
;;  pred:       7 [63.0% (adjusted)] 
;;              16 [always]  (FALLTHRU)
;;              8 [always] 
;;              9 [always] 
;;              10 [always] 
;;              11 [always] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 144 145 146 147
(code_label 97 133 98 13 70 (nil) [22 uses])
(note 98 97 99 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 13 (set (reg:SI 3 r3 [145])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":309:7 253 {*arm_movsi_insn}
     (nil))
(insn 100 99 101 13 (set (reg:SI 3 r3 [144])
        (plus:SI (reg:SI 3 r3 [145])
            (const_int 1 [0x1]))) "uart.c":309:7 7 {*arm_addsi3}
     (nil))
(insn 101 100 102 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])
        (reg:SI 3 r3 [144])) "uart.c":309:7 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 13 (set (reg:SI 3 r3 [147])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])) "uart.c":309:13 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 13 (set (reg:SI 3 r3 [146])
        (plus:SI (reg:SI 3 r3 [147])
            (const_int 4 [0x4]))) "uart.c":309:13 7 {*arm_addsi3}
     (nil))
(insn 104 103 105 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [9 ip+0 S4 A32])
        (reg:SI 3 r3 [146])) "uart.c":309:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (RTL, MODIFIED)
;;  pred:       13 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;;              6 [always] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 100 [cc] 125 148
(code_label 105 104 106 14 67 (nil) [2 uses])
(note 106 105 107 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 107 106 108 14 (set (reg/f:SI 3 r3 [148])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -12 [0xfffffffffffffff4])) [2 cp+0 S4 A64])) "uart.c":293:9 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 110 14 (set (reg:SI 3 r3 [orig:125 _13 ] [125])
        (zero_extend:SI (mem:QI (reg/f:SI 3 r3 [148]) [0 *cp_15+0 S1 A8]))) "uart.c":293:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 110 108 111 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [orig:125 _13 ] [125])
            (const_int 0 [0]))) "uart.c":293:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 111 110 112 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) "uart.c":293:9 273 {arm_cond_branch}
     (nil)
 -> 109)
;;  succ:       3
;;              15 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 126
(note 112 111 115 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 115 112 116 15 (clobber (reg/i:SI 0 r0)) "uart.c":311:1 -1
     (nil))
(insn 116 115 119 15 (clobber (reg:SI 3 r3 [orig:126 <retval> ] [126])) "uart.c":311:1 -1
     (nil))
(insn 119 116 114 15 (const_int 0 [0]) "uart.c":311:1 311 {nop}
     (nil))
(insn 114 119 117 15 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:126 <retval> ] [126])) "uart.c":311:1 253 {*arm_movsi_insn}
     (nil))
(insn 117 114 134 15 (use (reg/i:SI 0 r0)) "uart.c":311:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 134 117 0 NOTE_INSN_DELETED)

;; Function sgetline (sgetline, funcdef_no=15, decl_uid=4607, cgraph_uid=16, symbol_order=17)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 6:  (0) rk  (1) mi {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 11:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 12:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 14:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 15:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 18:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 22:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 24:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 28:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 30:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 31:  (0) m  (1) r {*arm_movqi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 36: point = 0, n_alt = -1
   Insn 33: point = 0, n_alt = -2
   Insn 38: point = 1, n_alt = -1
   Insn 35: point = 1, n_alt = -1
   Insn 34: point = 2, n_alt = -1
   Insn 31: point = 2, n_alt = 8
   Insn 30: point = 3, n_alt = 1
   Insn 29: point = 5, n_alt = 1
   Insn 28: point = 6, n_alt = 4
  BB 4
   Insn 26: point = 7, n_alt = -1
   Insn 25: point = 7, n_alt = 3
   Insn 24: point = 8, n_alt = 1
   Insn 22: point = 9, n_alt = 8
   Insn 21: point = 10, n_alt = 1
   Insn 20: point = 12, n_alt = -2
   Insn 19: point = 13, n_alt = -1
   Insn 18: point = 13, n_alt = 4
  BB 2
   Insn 39: point = 13, n_alt = -1
   Insn 7: point = 13, n_alt = 5
   Insn 6: point = 14, n_alt = 4
   Insn 2: point = 15, n_alt = 5
  BB 3
   Insn 15: point = 15, n_alt = 8
   Insn 14: point = 16, n_alt = 7
   Insn 13: point = 17, n_alt = 5
   Insn 12: point = 18, n_alt = 4
   Insn 11: point = 19, n_alt = 4
 r113: [15..19]
 r114: [11..12]
 r115: [0..1]
 r116: [13..14]
 r117: [17..18]
 r118: [15..16]
 r119: [9..10]
 r120: [7..8]
 r121: [2..6]
 r122: [4..5]
 r123: [2..3]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r113: [14..17]
 r114: [10..11]
 r115: [0..1]
 r116: [12..13]
 r117: [16..17]
 r118: [14..15]
 r119: [8..9]
 r120: [6..7]
 r121: [2..5]
 r122: [4..5]
 r123: [2..3]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 20
changing reg in insn 35
changing reg in insn 33
changing reg in insn 6
changing reg in insn 7
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
deleting insn with uid = 21.
deleting insn with uid = 30.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.


sgetline

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={5d,5u} r1={2d} r2={5d,3u} r3={8d,7u} r11={1d,14u} r12={2d} r13={1d,6u} r14={2d} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={2d,1u} r101={1d} r102={1d,1u} r104={1d} r105={1d} r106={1d} 
;;    total ref usage 155{118d,37u,0e} in 24{23 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 116
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "uart.c":314:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 3 r3 [116])
        (symbol_ref:SI ("uart") [flags 0x2]  <var_decl 0x7f19cfd52ab0 uart>)) "uart.c":316:9 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 39 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])
        (reg/f:SI 3 r3 [116])) "uart.c":316:9 253 {*arm_movsi_insn}
     (nil))
(jump_insn 39 7 40 2 (set (pc)
        (label_ref 16)) "uart.c":318:9 284 {*arm_jump}
     (nil)
 -> 16)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 40 39 23)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 117 118
(code_label 23 40 10 3 82 (nil) [1 uses])
(note 10 23 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 3 r3 [orig:113 s.6_1 ] [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 s+0 S4 A32])) "uart.c":319:7 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 2 r2 [117])
        (plus:SI (reg/f:SI 3 r3 [orig:113 s.6_1 ] [113])
            (const_int 1 [0x1]))) "uart.c":319:7 7 {*arm_addsi3}
     (nil))
(insn 13 12 14 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 s+0 S4 A32])
        (reg:SI 2 r2 [117])) "uart.c":319:7 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:QI 2 r2 [118])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])) "uart.c":319:10 263 {*arm_movqi_insn}
     (nil))
(insn 15 14 16 3 (set (mem:QI (reg/f:SI 3 r3 [orig:113 s.6_1 ] [113]) [0 *s.6_1+0 S1 A8])
        (reg:QI 2 r2 [118])) "uart.c":319:10 263 {*arm_movqi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 119 120
(code_label 16 15 17 4 81 (nil) [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -8 [0xfffffffffffffff8])) [6 up+0 S4 A32])) "uart.c":318:13 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 20 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":318:13 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 20 19 22 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (reg:SI 0 r0)) "uart.c":318:13 253 {*arm_movsi_insn}
     (nil))
(insn 22 20 24 4 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [119])) "uart.c":318:12 263 {*arm_movqi_insn}
     (nil))
(insn 24 22 25 4 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "uart.c":318:24 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [120])
            (const_int 13 [0xd]))) "uart.c":318:24 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "uart.c":318:24 273 {arm_cond_branch}
     (nil)
 -> 23)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 115 121 122 123
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [2 s+0 S4 A32])) "uart.c":321:5 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 31 5 (set (reg:SI 2 r2 [122])
        (const_int 0 [0])) "uart.c":321:5 253 {*arm_movsi_insn}
     (nil))
(insn 31 29 34 5 (set (mem:QI (reg/f:SI 3 r3 [121]) [0 *s_3+0 S1 A8])
        (reg:QI 2 r2 [123])) "uart.c":321:5 263 {*arm_movqi_insn}
     (nil))
(insn 34 31 35 5 (clobber (reg/i:SI 0 r0)) "uart.c":322:1 -1
     (nil))
(insn 35 34 38 5 (clobber (reg:SI 3 r3 [orig:115 <retval> ] [115])) "uart.c":322:1 -1
     (nil))
(insn 38 35 33 5 (const_int 0 [0]) "uart.c":322:1 311 {nop}
     (nil))
(insn 33 38 36 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:115 <retval> ] [115])) "uart.c":322:1 253 {*arm_movsi_insn}
     (nil))
(insn 36 33 41 5 (use (reg/i:SI 0 r0)) "uart.c":322:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 41 36 0 NOTE_INSN_DELETED)

;; Function usgets (usgets, funcdef_no=16, decl_uid=4616, cgraph_uid=17, symbol_order=18)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=0)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 2:  (0) m  (1) rk {*arm_movsi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=23,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 3:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 10:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=4,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
            alt=5: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=6,overall=9,losers=1 -- refuse
            alt=7: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=10,overall=9,losers=1 -- refuse
            alt=11: Bad operand -- refuse
            alt=12: Bad operand -- refuse
            Staticly defined alt reject+=6
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=15,losers=1 -- refuse
	 Choosing alt 4 in insn 11:  (0) r  (1) rk  (2) rI {*arm_addsi3}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=1: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=4,overall=21,losers=2,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) rk {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            alt=2: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=7,overall=0,losers=0,rld_nregs=0
	 Choosing alt 7 in insn 13:  (0) r  (1) Uh {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 14:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 17:  (0) rk  (1) mi {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 20:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 21:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 23:  (0) r  (1) m {*arm_zero_extendqisi2}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) I {*arm_cmpsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 27:  (0) rk  (1) mi {*arm_movsi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 28:  (0) r  (1) I {*arm_movsi_insn}
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) r  (1) rk {*arm_movqi_insn}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Spill pseudo into memory: reject+=3
            Using memory insn operand 1: reject+=3
          alt=7,overall=21,losers=2,rld_nregs=1
          alt=8,overall=0,losers=0,rld_nregs=0
	 Choosing alt 8 in insn 30:  (0) m  (1) r {*arm_movqi_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 31:  (0) rk  (1) mi {*arm_movsi_insn}
	   Spilling non-eliminable hard regs: 11

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4 5

********** Pseudo live ranges #1: **********

  BB 5
   Insn 41: point = 0, n_alt = -1
   Insn 40: point = 0, n_alt = -2
   Insn 36: point = 1, n_alt = -2
   Insn 33: point = 3, n_alt = -2
   Insn 32: point = 4, n_alt = -1
   Insn 31: point = 4, n_alt = 4
   Insn 30: point = 4, n_alt = 8
   Insn 29: point = 5, n_alt = 1
   Insn 28: point = 7, n_alt = 1
   Insn 27: point = 8, n_alt = 4
  BB 4
   Insn 25: point = 9, n_alt = -1
   Insn 24: point = 9, n_alt = 3
   Insn 23: point = 10, n_alt = 1
   Insn 21: point = 11, n_alt = 8
   Insn 20: point = 12, n_alt = 1
   Insn 19: point = 14, n_alt = -2
   Insn 18: point = 15, n_alt = -1
   Insn 17: point = 15, n_alt = 4
  BB 2
   Insn 43: point = 15, n_alt = -1
   Insn 3: point = 15, n_alt = 5
   Insn 2: point = 15, n_alt = 5
  BB 3
   Insn 14: point = 15, n_alt = 8
   Insn 13: point = 16, n_alt = 7
   Insn 12: point = 17, n_alt = 5
   Insn 11: point = 18, n_alt = 4
   Insn 10: point = 19, n_alt = 4
 r113: [15..19]
 r114: [13..14]
 r115: [2..3]
 r116: [0..1]
 r117: [17..18]
 r118: [15..16]
 r119: [11..12]
 r120: [9..10]
 r121: [4..8]
 r122: [6..7]
 r123: [4..5]
Compressing live ranges: from 20 to 18 - 90%
Ranges after the compression:
 r113: [14..17]
 r114: [12..13]
 r115: [2..3]
 r116: [0..1]
 r117: [16..17]
 r118: [14..15]
 r119: [10..11]
 r120: [8..9]
 r121: [4..7]
 r122: [6..7]
 r123: [4..5]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 11
	   Spilling non-eliminable hard regs: 11
New elimination table:
Can't eliminate 103 to 13 (offset=20, prev_offset=0)
Can't eliminate 103 to 102 (offset=8, prev_offset=0)
Can eliminate 103 to 11 (offset=0, prev_offset=0)
Can't eliminate 103 to 7 (offset=0, prev_offset=0)
Can't eliminate 102 to 13 (offset=16, prev_offset=0)
Can eliminate 102 to 11 (offset=-4, prev_offset=-4)
Can't eliminate 102 to 7 (offset=0, prev_offset=0)
changing reg in insn 10
changing reg in insn 14
changing reg in insn 11
changing reg in insn 19
changing reg in insn 33
changing reg in insn 36
changing reg in insn 36
changing reg in insn 40
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 21
changing reg in insn 23
changing reg in insn 24
changing reg in insn 27
changing reg in insn 30
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
deleting insn with uid = 20.
deleting insn with uid = 29.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 32.


usgets

Dataflow summary:
;;  fully invalidated by EH 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0]
;;  hardware regs used 	
;;  regular block artificial uses 	 11 [fp] 13 [sp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 102 [sfp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp]
;;  regs ever live 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 100 [cc]
;;  ref usage 	r0={6d,7u} r1={3d,1u} r2={6d,3u} r3={8d,6u} r11={1d,15u} r12={4d} r13={1d,7u} r14={3d} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={3d,1u} r101={2d} r102={1d,1u} r104={2d} r105={2d} r106={2d} 
;;    total ref usage 255{214d,41u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])
        (reg:SI 0 r0 [ up ])) "uart.c":325:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 buf+0 S4 A32])
        (reg:SI 1 r1 [ buf ])) "uart.c":325:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 43 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 43 4 44 2 (set (pc)
        (label_ref 15)) "uart.c":328:8 284 {*arm_jump}
     (nil)
 -> 15)
;;  succ:       4 [always] 
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(barrier 44 43 22)
;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (RTL, MODIFIED)
;;  pred:       4
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 113 117 118
(code_label 22 44 9 3 87 (nil) [1 uses])
(note 9 22 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 3 r3 [orig:113 buf.7_1 ] [113])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 buf+0 S4 A32])) "uart.c":329:9 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg:SI 2 r2 [117])
        (plus:SI (reg/f:SI 3 r3 [orig:113 buf.7_1 ] [113])
            (const_int 1 [0x1]))) "uart.c":329:9 7 {*arm_addsi3}
     (nil))
(insn 12 11 13 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 buf+0 S4 A32])
        (reg:SI 2 r2 [117])) "uart.c":329:9 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:QI 2 r2 [118])
        (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "uart.c":329:12 263 {*arm_movqi_insn}
     (nil))
(insn 14 13 15 3 (set (mem:QI (reg/f:SI 3 r3 [orig:113 buf.7_1 ] [113]) [0 *buf.7_1+0 S1 A8])
        (reg:QI 2 r2 [118])) "uart.c":329:12 263 {*arm_movqi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (RTL, MODIFIED)
;;  pred:       3 (FALLTHRU,DFS_BACK)
;;              2 [always] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 114 119 120
(code_label 15 14 16 4 86 (nil) [1 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -16 [0xfffffffffffffff0])) [6 up+0 S4 A32])) "uart.c":328:12 253 {*arm_movsi_insn}
     (nil))
(call_insn 18 17 19 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sgetc") [flags 0x3]  <function_decl 0x7f19cf077500 sgetc>) [0 sgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":328:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 19 18 21 4 (set (reg:SI 3 r3 [orig:114 _2 ] [114])
        (reg:SI 0 r0)) "uart.c":328:12 253 {*arm_movsi_insn}
     (nil))
(insn 21 19 23 4 (set (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 3 r3 [119])) "uart.c":328:11 263 {*arm_movqi_insn}
     (nil))
(insn 23 21 24 4 (set (reg:SI 3 r3 [120])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 11 fp)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "uart.c":328:23 175 {*arm_zero_extendqisi2}
     (nil))
(insn 24 23 25 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 3 r3 [120])
            (const_int 13 [0xd]))) "uart.c":328:23 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 25 24 26 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "uart.c":328:23 273 {arm_cond_branch}
     (nil)
 -> 22)
;;  succ:       3
;;              5 (FALLTHRU)
;; lr  out 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(11){ }u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  use 	 11 [fp] 13 [sp] 102 [sfp] 103 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [s0] 17 [s1] 18 [s2] 19 [s3] 20 [s4] 21 [s5] 22 [s6] 23 [s7] 24 [s8] 25 [s9] 26 [s10] 27 [s11] 28 [s12] 29 [s13] 30 [s14] 31 [s15] 32 [s16] 33 [s17] 34 [s18] 35 [s19] 36 [s20] 37 [s21] 38 [s22] 39 [s23] 40 [s24] 41 [s25] 42 [s26] 43 [s27] 44 [s28] 45 [s29] 46 [s30] 47 [s31] 48 [d16] 49 [?16] 50 [d17] 51 [?17] 52 [d18] 53 [?18] 54 [d19] 55 [?19] 56 [d20] 57 [?20] 58 [d21] 59 [?21] 60 [d22] 61 [?22] 62 [d23] 63 [?23] 64 [d24] 65 [?24] 66 [d25] 67 [?25] 68 [d26] 69 [?26] 70 [d27] 71 [?27] 72 [d28] 73 [?28] 74 [d29] 75 [?29] 76 [d30] 77 [?30] 78 [d31] 79 [?31] 80 [wr0] 81 [wr1] 82 [wr2] 83 [wr3] 84 [wr4] 85 [wr5] 86 [wr6] 87 [wr7] 88 [wr8] 89 [wr9] 90 [wr10] 91 [wr11] 92 [wr12] 93 [wr13] 94 [wr14] 95 [wr15] 96 [wcgr0] 97 [wcgr1] 98 [wcgr2] 99 [wcgr3] 100 [cc] 101 [vfpcc] 104 [apsrq] 105 [apsrge] 106 [p0] 115 116 121 122 123
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 27 26 28 5 (set (reg/f:SI 3 r3 [121])
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 buf+0 S4 A32])) "uart.c":331:8 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 30 5 (set (reg:SI 2 r2 [122])
        (const_int 0 [0])) "uart.c":331:8 253 {*arm_movsi_insn}
     (nil))
(insn 30 28 31 5 (set (mem:QI (reg/f:SI 3 r3 [121]) [0 *buf_3+0 S1 A8])
        (reg:QI 2 r2 [123])) "uart.c":331:8 263 {*arm_movqi_insn}
     (nil))
(insn 31 30 32 5 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 11 fp)
                (const_int -20 [0xffffffffffffffec])) [2 buf+0 S4 A32])) "uart.c":332:10 253 {*arm_movsi_insn}
     (nil))
(call_insn 32 31 33 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kstrlen") [flags 0x41]  <function_decl 0x7f19cf085100 kstrlen>) [0 kstrlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "uart.c":332:10 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 33 32 40 5 (set (reg:SI 3 r3 [orig:115 _12 ] [115])
        (reg:SI 0 r0)) "uart.c":332:10 253 {*arm_movsi_insn}
     (nil))
(insn 40 33 41 5 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [orig:116 <retval> ] [116])) "uart.c":333:1 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 45 5 (use (reg/i:SI 0 r0)) "uart.c":333:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 102 [sfp] 103 [afp]

(note 45 41 0 NOTE_INSN_DELETED)
