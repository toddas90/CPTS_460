
;; Function P (P, funcdef_no=0, decl_uid=4476, cgraph_uid=1, symbol_order=0)


5 basic blocks, 5 edges.
;; basic block 0, loop depth 0, maybe hot
;;  prev block (nil), next block 2, flags: (RTL)
;;  pred:      
;;  succ:       2 (FALLTHRU)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "pv.c":25:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":28:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":28:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":30:5 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ _1 ])
        (mem:SI (reg/f:SI 120) [1 s_12(D)->value+0 S4 A32])) "pv.c":30:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ _2 ])
        (plus:SI (reg:SI 113 [ _1 ])
            (const_int -1 [0xffffffffffffffff]))) "pv.c":30:12 7 {*arm_addsi3}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":30:12 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:SI 121) [1 s_12(D)->value+0 S4 A32])
        (reg:SI 114 [ _2 ])) "pv.c":30:12 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":31:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 17 2 (set (reg:SI 115 [ _3 ])
        (mem:SI (reg/f:SI 122) [1 s_12(D)->value+0 S4 A32])) "pv.c":31:9 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 18 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 0 [0]))) "pv.c":31:7 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "pv.c":31:7 273 {arm_cond_branch}
     (nil)
 -> 36)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg/f:SI 123)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":33:14 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg/f:SI 116 [ running.0_4 ])
        (mem/f/c:SI (reg/f:SI 123) [4 running+0 S4 A32])) "pv.c":33:14 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg:SI 124)
        (const_int 3 [0x3])) "pv.c":33:22 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (mem:SI (plus:SI (reg/f:SI 116 [ running.0_4 ])
                (const_int 28 [0x1c])) [1 running.0_4->status+0 S4 A32])
        (reg:SI 124)) "pv.c":33:22 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 125)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":34:14 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 117 [ running.1_5 ])
        (mem/f/c:SI (reg/f:SI 125) [4 running+0 S4 A32])) "pv.c":34:14 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":34:20 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 3 (set (mem/f:SI (plus:SI (reg/f:SI 117 [ running.1_5 ])
                (const_int 88 [0x58])) [2 running.1_5->sem+0 S4 A32])
        (reg/f:SI 126)) "pv.c":34:20 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 127)
            (const_int 4 [0x4]))) "pv.c":35:7 7 {*arm_addsi3}
     (nil))
(insn 30 29 31 3 (set (reg/f:SI 128)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (set (reg/f:SI 119 [ running.2_7 ])
        (mem/f/c:SI (reg/f:SI 128) [4 running+0 S4 A32])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 3 (set (reg:SI 1 r1)
        (reg/f:SI 119 [ running.2_7 ])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 r0)
        (reg/f:SI 118 [ _6 ])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":35:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(call_insn 35 34 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tswitch") [flags 0x41]  <function_decl 0x7fc2bd161a00 tswitch>) [0 tswitch S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":36:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 36 35 37 4 2 (nil) [1 uses])
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])) "pv.c":38:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 39 38 0 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":38:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)

;; basic block 1, loop depth 0, maybe hot
;;  prev block 4, next block (nil), flags: (REACHABLE, RTL)
;;  pred:       4 [always]  (FALLTHRU)
;;  succ:      




try_optimize_cfg iteration 1

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "pv.c":25:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":28:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":28:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":30:5 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ _1 ])
        (mem:SI (reg/f:SI 120) [1 s_12(D)->value+0 S4 A32])) "pv.c":30:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ _2 ])
        (plus:SI (reg:SI 113 [ _1 ])
            (const_int -1 [0xffffffffffffffff]))) "pv.c":30:12 7 {*arm_addsi3}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":30:12 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:SI 121) [1 s_12(D)->value+0 S4 A32])
        (reg:SI 114 [ _2 ])) "pv.c":30:12 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":31:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 17 2 (set (reg:SI 115 [ _3 ])
        (mem:SI (reg/f:SI 122) [1 s_12(D)->value+0 S4 A32])) "pv.c":31:9 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 18 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 0 [0]))) "pv.c":31:7 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) "pv.c":31:7 273 {arm_cond_branch}
     (nil)
 -> 36)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg/f:SI 123)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":33:14 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg/f:SI 116 [ running.0_4 ])
        (mem/f/c:SI (reg/f:SI 123) [4 running+0 S4 A32])) "pv.c":33:14 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg:SI 124)
        (const_int 3 [0x3])) "pv.c":33:22 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (mem:SI (plus:SI (reg/f:SI 116 [ running.0_4 ])
                (const_int 28 [0x1c])) [1 running.0_4->status+0 S4 A32])
        (reg:SI 124)) "pv.c":33:22 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 125)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":34:14 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 117 [ running.1_5 ])
        (mem/f/c:SI (reg/f:SI 125) [4 running+0 S4 A32])) "pv.c":34:14 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":34:20 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 3 (set (mem/f:SI (plus:SI (reg/f:SI 117 [ running.1_5 ])
                (const_int 88 [0x58])) [2 running.1_5->sem+0 S4 A32])
        (reg/f:SI 126)) "pv.c":34:20 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 127)
            (const_int 4 [0x4]))) "pv.c":35:7 7 {*arm_addsi3}
     (nil))
(insn 30 29 31 3 (set (reg/f:SI 128)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fc2bde4c7e0 running>)) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (set (reg/f:SI 119 [ running.2_7 ])
        (mem/f/c:SI (reg/f:SI 128) [4 running+0 S4 A32])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 3 (set (reg:SI 1 r1)
        (reg/f:SI 119 [ running.2_7 ])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 3 (set (reg:SI 0 r0)
        (reg/f:SI 118 [ _6 ])) "pv.c":35:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":35:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(call_insn 35 34 36 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tswitch") [flags 0x41]  <function_decl 0x7fc2bd161a00 tswitch>) [0 tswitch S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":36:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 36 35 37 4 2 (nil) [1 uses])
(note 37 36 38 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])) "pv.c":38:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 39 38 0 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":38:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function V (V, funcdef_no=1, decl_uid=4486, cgraph_uid=2, symbol_order=1)


5 basic blocks, 5 edges.
;; basic block 0, loop depth 0, maybe hot
;;  prev block (nil), next block 2, flags: (RTL)
;;  pred:      
;;  succ:       2 (FALLTHRU)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "pv.c":42:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":45:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ps+0 S4 A64])
        (reg:SI 0 r0)) "pv.c":45:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 117)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":46:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ _1 ])
        (mem:SI (reg/f:SI 117) [1 s_9(D)->value+0 S4 A32])) "pv.c":46:6 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ _2 ])
        (plus:SI (reg:SI 113 [ _1 ])
            (const_int 1 [0x1]))) "pv.c":46:13 7 {*arm_addsi3}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":46:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:SI 118) [1 s_9(D)->value+0 S4 A32])
        (reg:SI 114 [ _2 ])) "pv.c":46:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":47:10 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 17 2 (set (reg:SI 115 [ _3 ])
        (mem:SI (reg/f:SI 119) [1 s_9(D)->value+0 S4 A32])) "pv.c":47:10 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 18 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 0 [0]))) "pv.c":47:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "pv.c":47:8 273 {arm_cond_branch}
     (nil)
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg/f:SI 116 [ _4 ])
        (plus:SI (reg:SI 120)
            (const_int 4 [0x4]))) "pv.c":48:13 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 r0)
        (reg/f:SI 116 [ _4 ])) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dequeue") [flags 0x41]  <function_decl 0x7fc2bd161100 dequeue>) [0 dequeue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":48:13 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 24 23 25 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg:SI 122)
        (const_int 1 [0x1])) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 3 (set (mem:SI (plus:SI (reg/f:SI 121)
                (const_int 28 [0x1c])) [1 p_12->status+0 S4 A32])
        (reg:SI 122)) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])) "pv.c":50:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 r0)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fc2bde4c6c0 readyQueue>)) "pv.c":50:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 30 29 31 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":50:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 31 30 32 4 6 (nil) [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ps+0 S4 A64])) "pv.c":53:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 0 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":53:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)

;; basic block 1, loop depth 0, maybe hot
;;  prev block 4, next block (nil), flags: (REACHABLE, RTL)
;;  pred:       4 [always]  (FALLTHRU)
;;  succ:      




try_optimize_cfg iteration 1

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "pv.c":42:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 6 3 7 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":45:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 7 6 8 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ps+0 S4 A64])
        (reg:SI 0 r0)) "pv.c":45:8 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 117)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":46:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ _1 ])
        (mem:SI (reg/f:SI 117) [1 s_9(D)->value+0 S4 A32])) "pv.c":46:6 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ _2 ])
        (plus:SI (reg:SI 113 [ _1 ])
            (const_int 1 [0x1]))) "pv.c":46:13 7 {*arm_addsi3}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":46:13 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (mem:SI (reg/f:SI 118) [1 s_9(D)->value+0 S4 A32])
        (reg:SI 114 [ _2 ])) "pv.c":46:13 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":47:10 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 17 2 (set (reg:SI 115 [ _3 ])
        (mem:SI (reg/f:SI 119) [1 s_9(D)->value+0 S4 A32])) "pv.c":47:10 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 18 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 0 [0]))) "pv.c":47:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 18 17 19 2 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "pv.c":47:8 273 {arm_cond_branch}
     (nil)
 -> 31)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 19 18 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 3 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg/f:SI 116 [ _4 ])
        (plus:SI (reg:SI 120)
            (const_int 4 [0x4]))) "pv.c":48:13 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 3 (set (reg:SI 0 r0)
        (reg/f:SI 116 [ _4 ])) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 24 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dequeue") [flags 0x41]  <function_decl 0x7fc2bd161100 dequeue>) [0 dequeue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":48:13 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 24 23 25 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":48:13 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 3 (set (reg:SI 122)
        (const_int 1 [0x1])) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 3 (set (mem:SI (plus:SI (reg/f:SI 121)
                (const_int 28 [0x1c])) [1 p_12->status+0 S4 A32])
        (reg:SI 122)) "pv.c":49:19 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [4 p+0 S4 A32])) "pv.c":50:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:SI 0 r0)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fc2bde4c6c0 readyQueue>)) "pv.c":50:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 30 29 31 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":50:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 31 30 32 4 6 (nil) [1 uses])
(note 32 31 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 33 32 34 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ps+0 S4 A64])) "pv.c":53:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 0 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":53:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function wV (wV, funcdef_no=2, decl_uid=4493, cgraph_uid=3, symbol_order=2)


10 basic blocks, 12 edges.
;; basic block 0, loop depth 0, maybe hot
;;  prev block (nil), next block 2, flags: (RTL)
;;  pred:      
;;  succ:       2 (FALLTHRU)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])
        (reg:SI 0 r0 [ p ])) "pv.c":57:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 121)
        (mem/f:SI (plus:SI (reg/f:SI 120)
                (const_int 88 [0x58])) [2 p_11(D)->sem+0 S4 A32])) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])
        (reg/f:SI 121)) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":62:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":62:8 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 113 [ _1 ])
        (mem/f:SI (plus:SI (reg/f:SI 122)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])) "pv.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":71:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123)
            (reg/f:SI 113 [ _1 ]))) "pv.c":71:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "pv.c":71:8 273 {arm_cond_branch}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:SI 124)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":72:20 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 114 [ _2 ])
        (mem/f:SI (reg/f:SI 124) [4 p_11(D)->next+0 S4 A32])) "pv.c":72:20 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":72:17 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 23 3 (set (mem/f:SI (plus:SI (reg/f:SI 125)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])
        (reg/f:SI 114 [ _2 ])) "pv.c":72:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 23 20 24 4 10 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 127)
        (mem/f:SI (plus:SI (reg/f:SI 126)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])
        (reg/f:SI 127)) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 4 (set (reg/f:SI 129)
        (mem/f:SI (reg/f:SI 128) [4 r_15->next+0 S4 A32])) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 54 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])
        (reg/f:SI 129)) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 54 30 33 5 14 (nil) [1 uses])
(note 33 54 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":78:12 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 5 (set (reg:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":78:12 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (reg:SI 131))) "pv.c":78:12 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "pv.c":78:12 273 {arm_cond_branch}
     (nil)
 -> 45)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":79:15 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 115 [ _3 ])
        (mem/f:SI (reg/f:SI 132) [4 q_7->next+0 S4 A32])) "pv.c":79:15 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])) "pv.c":79:12 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 45 6 (set (mem/f:SI (reg/f:SI 133) [4 r_8->next+0 S4 A32])
        (reg/f:SI 115 [ _3 ])) "pv.c":79:12 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 45 42 46 7 13 (nil) [1 uses])
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])
        (reg/f:SI 134)) "pv.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 7 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 7 (set (reg/f:SI 136)
        (mem/f:SI (reg/f:SI 135) [4 q_7->next+0 S4 A32])) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])
        (reg/f:SI 136)) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [always]  (FALLTHRU)
;;              7 (FALLTHRU,DFS_BACK)
(code_label 52 51 53 8 12 (nil) [0 uses])
(note 53 52 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 53 56 8 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":77:13 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137)
            (const_int 0 [0]))) "pv.c":77:13 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 57 56 58 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "pv.c":77:13 273 {arm_cond_branch}
     (nil)
 -> 54)
;;  succ:       5
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [always]  (FALLTHRU)
;;              6 [always]  (FALLTHRU)
;;              8 (FALLTHRU)
(code_label 58 57 59 9 11 (nil) [0 uses])
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":86:6 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 9 (set (reg:SI 116 [ _4 ])
        (mem:SI (reg/f:SI 138) [1 s_12->value+0 S4 A32])) "pv.c":86:6 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 9 (set (reg:SI 117 [ _5 ])
        (plus:SI (reg:SI 116 [ _4 ])
            (const_int 1 [0x1]))) "pv.c":86:13 7 {*arm_addsi3}
     (nil))
(insn 63 62 64 9 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":86:13 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 9 (set (mem:SI (reg/f:SI 139) [1 s_12->value+0 S4 A32])
        (reg:SI 117 [ _5 ])) "pv.c":86:13 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 9 (set (reg:SI 141)
        (const_int 1 [0x1])) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (mem:SI (plus:SI (reg/f:SI 140)
                (const_int 28 [0x1c])) [1 p_11(D)->status+0 S4 A32])
        (reg:SI 141)) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 9 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 9 (set (reg:SI 143)
        (const_int 0 [0])) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 9 (set (mem/f:SI (plus:SI (reg/f:SI 142)
                (const_int 88 [0x58])) [2 p_11(D)->sem+0 S4 A32])
        (reg:SI 143)) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":88:5 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 9 (set (reg:SI 0 r0)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fc2bde4c6c0 readyQueue>)) "pv.c":88:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 73 72 74 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":88:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 74 73 75 9 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 9 (set (reg:SI 118 [ _6 ])
        (mem:SI (plus:SI (reg/f:SI 144)
                (const_int 24 [0x18])) [1 p_11(D)->pid+0 S4 A32])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 9 (set (reg:SI 1 r1)
        (reg:SI 118 [ _6 ])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fc2bd168c60 *.LC0>)) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 79 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fc2bd16d500 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":89:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 79 78 80 9 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])) "pv.c":90:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 80 79 83 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":90:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 83 80 84 9 (clobber (reg/i:SI 0 r0)) "pv.c":91:1 -1
     (nil))
(insn 84 83 87 9 (clobber (reg:SI 119 [ <retval> ])) "pv.c":91:1 -1
     (nil))
(insn 87 84 82 9 (const_int 0 [0]) "pv.c":91:1 311 {nop}
     (nil))
(insn 82 87 85 9 (set (reg/i:SI 0 r0)
        (reg:SI 119 [ <retval> ])) "pv.c":91:1 253 {*arm_movsi_insn}
     (nil))
(insn 85 82 0 9 (use (reg/i:SI 0 r0)) "pv.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

;; basic block 1, loop depth 0, maybe hot
;;  prev block 9, next block (nil), flags: (REACHABLE, RTL)
;;  pred:       9 [always]  (FALLTHRU)
;;  succ:      




try_optimize_cfg iteration 1

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])
        (reg:SI 0 r0 [ p ])) "pv.c":57:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 121)
        (mem/f:SI (plus:SI (reg/f:SI 120)
                (const_int 88 [0x58])) [2 p_11(D)->sem+0 S4 A32])) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])
        (reg/f:SI 121)) "pv.c":60:21 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_off") [flags 0x41]  <function_decl 0x7fc2bd161900 int_off>) [0 int_off S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":62:8 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 10 9 11 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])
        (reg:SI 0 r0)) "pv.c":62:8 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 122)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg/f:SI 113 [ _1 ])
        (mem/f:SI (plus:SI (reg/f:SI 122)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])) "pv.c":71:15 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 123)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":71:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123)
            (reg/f:SI 113 [ _1 ]))) "pv.c":71:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 23)
            (pc))) "pv.c":71:8 273 {arm_cond_branch}
     (nil)
 -> 23)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 3 (set (reg/f:SI 124)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":72:20 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 114 [ _2 ])
        (mem/f:SI (reg/f:SI 124) [4 p_11(D)->next+0 S4 A32])) "pv.c":72:20 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":72:17 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 23 3 (set (mem/f:SI (plus:SI (reg/f:SI 125)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])
        (reg/f:SI 114 [ _2 ])) "pv.c":72:17 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 23 20 24 4 10 (nil) [1 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 127)
        (mem/f:SI (plus:SI (reg/f:SI 126)
                (const_int 4 [0x4])) [4 s_12->queue+0 S4 A32])) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])
        (reg/f:SI 127)) "pv.c":75:9 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 4 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 4 (set (reg/f:SI 129)
        (mem/f:SI (reg/f:SI 128) [4 r_15->next+0 S4 A32])) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 54 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])
        (reg/f:SI 129)) "pv.c":76:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 [always]  (FALLTHRU)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 54 30 33 5 14 (nil) [1 uses])
(note 33 54 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":78:12 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 5 (set (reg:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":78:12 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (reg:SI 131))) "pv.c":78:12 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "pv.c":78:12 273 {arm_cond_branch}
     (nil)
 -> 45)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":79:15 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 115 [ _3 ])
        (mem/f:SI (reg/f:SI 132) [4 q_7->next+0 S4 A32])) "pv.c":79:15 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])) "pv.c":79:12 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 45 6 (set (mem/f:SI (reg/f:SI 133) [4 r_8->next+0 S4 A32])
        (reg/f:SI 115 [ _3 ])) "pv.c":79:12 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 45 42 46 7 13 (nil) [1 uses])
(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 7 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 48 47 49 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [4 r+0 S4 A32])
        (reg/f:SI 134)) "pv.c":82:11 253 {*arm_movsi_insn}
     (nil))
(insn 49 48 50 7 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 7 (set (reg/f:SI 136)
        (mem/f:SI (reg/f:SI 135) [4 q_7->next+0 S4 A32])) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])
        (reg/f:SI 136)) "pv.c":83:11 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 [always]  (FALLTHRU)
;;              7 (FALLTHRU,DFS_BACK)
(code_label 52 51 53 8 12 (nil) [0 uses])
(note 53 52 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 55 53 56 8 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [4 q+0 S4 A64])) "pv.c":77:13 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137)
            (const_int 0 [0]))) "pv.c":77:13 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 57 56 58 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 54)
            (pc))) "pv.c":77:13 273 {arm_cond_branch}
     (nil)
 -> 54)
;;  succ:       5
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [always]  (FALLTHRU)
;;              6 [always]  (FALLTHRU)
;;              8 (FALLTHRU)
(code_label 58 57 59 9 11 (nil) [0 uses])
(note 59 58 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 60 59 61 9 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":86:6 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 9 (set (reg:SI 116 [ _4 ])
        (mem:SI (reg/f:SI 138) [1 s_12->value+0 S4 A32])) "pv.c":86:6 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 9 (set (reg:SI 117 [ _5 ])
        (plus:SI (reg:SI 116 [ _4 ])
            (const_int 1 [0x1]))) "pv.c":86:13 7 {*arm_addsi3}
     (nil))
(insn 63 62 64 9 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [2 s+0 S4 A64])) "pv.c":86:13 253 {*arm_movsi_insn}
     (nil))
(insn 64 63 65 9 (set (mem:SI (reg/f:SI 139) [1 s_12->value+0 S4 A32])
        (reg:SI 117 [ _5 ])) "pv.c":86:13 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 9 (set (reg:SI 141)
        (const_int 1 [0x1])) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (mem:SI (plus:SI (reg/f:SI 140)
                (const_int 28 [0x1c])) [1 p_11(D)->status+0 S4 A32])
        (reg:SI 141)) "pv.c":87:15 253 {*arm_movsi_insn}
     (nil))
(insn 68 67 69 9 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 9 (set (reg:SI 143)
        (const_int 0 [0])) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 9 (set (mem/f:SI (plus:SI (reg/f:SI 142)
                (const_int 88 [0x58])) [2 p_11(D)->sem+0 S4 A32])
        (reg:SI 143)) "pv.c":87:31 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:SI 1 r1)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":88:5 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 9 (set (reg:SI 0 r0)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fc2bde4c6c0 readyQueue>)) "pv.c":88:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 73 72 74 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("enqueue") [flags 0x41]  <function_decl 0x7fc2bd161000 enqueue>) [0 enqueue S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":88:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 74 73 75 9 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [4 p+0 S4 A32])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 9 (set (reg:SI 118 [ _6 ])
        (mem:SI (plus:SI (reg/f:SI 144)
                (const_int 24 [0x18])) [1 p_11(D)->pid+0 S4 A32])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 76 75 77 9 (set (reg:SI 1 r1)
        (reg:SI 118 [ _6 ])) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 9 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fc2bd168c60 *.LC0>)) "pv.c":89:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 78 77 79 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fc2bd16d500 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":89:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 79 78 80 9 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [1 ps+0 S4 A32])) "pv.c":90:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 80 79 83 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("int_on") [flags 0x41]  <function_decl 0x7fc2bd161c00 int_on>) [0 int_on S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "pv.c":90:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 83 80 84 9 (clobber (reg/i:SI 0 r0)) "pv.c":91:1 -1
     (nil))
(insn 84 83 87 9 (clobber (reg:SI 119 [ <retval> ])) "pv.c":91:1 -1
     (nil))
(insn 87 84 82 9 (const_int 0 [0]) "pv.c":91:1 311 {nop}
     (nil))
(insn 82 87 85 9 (set (reg/i:SI 0 r0)
        (reg:SI 119 [ <retval> ])) "pv.c":91:1 253 {*arm_movsi_insn}
     (nil))
(insn 85 82 0 9 (use (reg/i:SI 0 r0)) "pv.c":91:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

