
;; Function kbd_init (kbd_init, funcdef_no=0, decl_uid=4487, cgraph_uid=1, symbol_order=10)

int kbd_init ()
{
  volatile struct KBD * kp;
  char scode;
  char * _1;
  char * _2;
  char * _3;
  int _4;
  char * _5;
  char * _6;
  char _7;
  int _8;
  int _9;
  char * _10;
  int _11;
  int keyset.0_12;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  keyset ={v} 1;
  kp_16 = &kbd;
  kp_16->base ={v} 268460032B;
  _1 ={v} kp_16->base;
  *_1 = 16;
  _2 ={v} kp_16->base;
  _3 = _2 + 12;
  *_3 = 8;
  _4 = 0;
  kp_16->tail ={v} _4;
  kp_16->head ={v} _4;
  kp_16->data ={v} 0;
  kp_16->room ={v} 128;
  shifted = 0;
  release = 0;
  control = 0;
  kprintf ("Detect KBD scan code: press the ENTER key : ");
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       2
;;                3
  _5 ={v} kp_16->base;
  _6 = _5 + 4;
  _7 = *_6;
  _8 = (int) _7;
  _9 = _8 & 16;
  if (_9 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 4, loop depth 0
;;    pred:       3
  _10 ={v} kp_16->base;
  scode_28 = MEM[(char *)_10 + 8B];
  _11 = (int) scode_28;
  kprintf ("scode=%x ", _11);
  if (scode_28 == 90)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  keyset ={v} 2;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  keyset.0_12 ={v} keyset;
  kprintf ("keyset=%d\n", keyset.0_12);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (keyset.0_12 - 12 )
Partition 16 (kp_16 - 16 )
Partition 28 (scode_28 - 28 )
Partition 32 (_32(D) - 32 )


Coalescible Partition map 

Partition 0, base 0 (_32(D) - 32 )


Partition map 

Partition 0 (_32(D) - 32 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_32(D) - 32 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (keyset.0_12 - 12 )
Partition 12 (kp_16 - 16 )
Partition 13 (scode_28 - 28 )
Partition 14 (_32(D) - 32 )

int kbd_init ()
{
  volatile struct KBD * kp;
  char scode;
  char * _1;
  char * _2;
  char * _3;
  int _4;
  char * _5;
  char * _6;
  char _7;
  int _8;
  int _9;
  char * _10;
  int _11;
  int keyset.0_12;
  int _32(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  keyset ={v} 1;
  kp_16 = &kbd;
  kp_16->base ={v} 268460032B;
  _1 ={v} kp_16->base;
  *_1 = 16;
  _2 ={v} kp_16->base;
  _3 = _2 + 12;
  *_3 = 8;
  _4 = 0;
  kp_16->tail ={v} _4;
  kp_16->head ={v} _4;
  kp_16->data ={v} 0;
  kp_16->room ={v} 128;
  shifted = 0;
  release = 0;
  control = 0;
  kprintf ("Detect KBD scan code: press the ENTER key : ");
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       2
;;                3
  _5 ={v} kp_16->base;
  _6 = _5 + 4;
  _7 = *_6;
  _8 = (int) _7;
  _9 = _8 & 16;
  if (_9 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 4, loop depth 0
;;    pred:       3
  _10 ={v} kp_16->base;
  scode_28 = MEM[(char *)_10 + 8B];
  _11 = (int) scode_28;
  kprintf ("scode=%x ", _11);
  if (scode_28 == 90)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  keyset ={v} 2;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  keyset.0_12 ={v} keyset;
  kprintf ("keyset=%d\n", keyset.0_12);
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	kp_16
Partition 1: size 1 align 1
	scode_28

;; Generating RTL for gimple basic block 2

;; keyset ={v} 1;

(insn 5 4 6 (set (reg/f:SI 126)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":58:10 -1
     (nil))

(insn 6 5 7 (set (reg:SI 127)
        (const_int 1 [0x1])) "kbd.c":58:10 -1
     (nil))

(insn 7 6 0 (set (mem/v/c:SI (reg/f:SI 126) [3 keyset+0 S4 A32])
        (reg:SI 127)) "kbd.c":58:10 -1
     (nil))

;; kp_16 = &kbd;

(insn 8 7 9 (set (reg/f:SI 128)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":60:8 -1
     (nil))

(insn 9 8 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 128)) "kbd.c":60:8 -1
     (nil))

;; kp_16->base ={v} 268460032B;

(insn 10 9 11 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":61:12 -1
     (nil))

(insn 11 10 12 (set (reg:SI 130)
        (const_int 268460032 [0x10006000])) "kbd.c":61:12 -1
     (nil))

(insn 12 11 0 (set (mem/v/f:SI (reg/f:SI 129) [2 kp_16->base+0 S4 A32])
        (reg:SI 130)) "kbd.c":61:12 -1
     (nil))

;; _1 ={v} kp_16->base;

(insn 13 12 14 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":62:7 -1
     (nil))

(insn 14 13 0 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 131) [2 kp_16->base+0 S4 A32])) "kbd.c":62:7 -1
     (nil))

;; *_1 = 16;

(insn 15 14 16 (set (reg:SI 132)
        (const_int 16 [0x10])) "kbd.c":62:23 -1
     (nil))

(insn 16 15 17 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "kbd.c":62:23 -1
     (nil))

(insn 17 16 0 (set (mem:QI (reg/f:SI 113 [ _1 ]) [0 *_1+0 S1 A8])
        (reg:QI 133)) "kbd.c":62:23 -1
     (nil))

;; _2 ={v} kp_16->base;

(insn 18 17 19 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":63:7 -1
     (nil))

(insn 19 18 0 (set (reg/f:SI 114 [ _2 ])
        (mem/v/f:SI (reg/f:SI 134) [2 kp_16->base+0 S4 A32])) "kbd.c":63:7 -1
     (nil))

;; _3 = _2 + 12;

(insn 20 19 0 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 114 [ _2 ])
            (const_int 12 [0xc]))) "kbd.c":63:14 -1
     (nil))

;; *_3 = 8;

(insn 21 20 22 (set (reg:SI 135)
        (const_int 8 [0x8])) "kbd.c":63:23 -1
     (nil))

(insn 22 21 23 (set (reg:QI 136)
        (subreg:QI (reg:SI 135) 0)) "kbd.c":63:23 -1
     (nil))

(insn 23 22 0 (set (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])
        (reg:QI 136)) "kbd.c":63:23 -1
     (nil))

;; _4 = 0;

(insn 24 23 0 (set (reg:SI 116 [ _4 ])
        (const_int 0 [0])) "kbd.c":64:23 -1
     (nil))

;; kp_16->tail ={v} _4;

(insn 25 24 26 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:23 -1
     (nil))

(insn 26 25 0 (set (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 136 [0x88])) [3 kp_16->tail+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:23 -1
     (nil))

;; kp_16->head ={v} _4;

(insn 27 26 28 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:12 -1
     (nil))

(insn 28 27 0 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 132 [0x84])) [3 kp_16->head+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:12 -1
     (nil))

;; kp_16->data ={v} 0;

(insn 29 28 30 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:12 -1
     (nil))

(insn 30 29 31 (set (reg:SI 140)
        (const_int 0 [0])) "kbd.c":65:12 -1
     (nil))

(insn 31 30 0 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 140 [0x8c])) [3 kp_16->data+0 S4 A32])
        (reg:SI 140)) "kbd.c":65:12 -1
     (nil))

;; kp_16->room ={v} 128;

(insn 32 31 33 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:26 -1
     (nil))

(insn 33 32 34 (set (reg:SI 142)
        (const_int 128 [0x80])) "kbd.c":65:26 -1
     (nil))

(insn 34 33 0 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 144 [0x90])) [3 kp_16->room+0 S4 A32])
        (reg:SI 142)) "kbd.c":65:26 -1
     (nil))

;; shifted = 0;

(insn 35 34 36 (set (reg/f:SI 143)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":66:11 -1
     (nil))

(insn 36 35 37 (set (reg:SI 144)
        (const_int 0 [0])) "kbd.c":66:11 -1
     (nil))

(insn 37 36 0 (set (mem/c:SI (reg/f:SI 143) [3 shifted+0 S4 A32])
        (reg:SI 144)) "kbd.c":66:11 -1
     (nil))

;; release = 0;

(insn 38 37 39 (set (reg/f:SI 145)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":67:11 -1
     (nil))

(insn 39 38 40 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":67:11 -1
     (nil))

(insn 40 39 0 (set (mem/c:SI (reg/f:SI 145) [3 release+0 S4 A32])
        (reg:SI 146)) "kbd.c":67:11 -1
     (nil))

;; control = 0;

(insn 41 40 42 (set (reg/f:SI 147)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":68:11 -1
     (nil))

(insn 42 41 43 (set (reg:SI 148)
        (const_int 0 [0])) "kbd.c":68:11 -1
     (nil))

(insn 43 42 0 (set (mem/c:SI (reg/f:SI 147) [3 control+0 S4 A32])
        (reg:SI 148)) "kbd.c":68:11 -1
     (nil))

;; kprintf ("Detect KBD scan code: press the ENTER key : ");

(insn 44 43 45 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fcdc0b61870 *.LC0>)) "kbd.c":70:3 -1
     (nil))

(call_insn 45 44 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":70:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 3

;; _5 ={v} kp_16->base;

(insn 47 46 48 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":71:15 -1
     (nil))

(insn 48 47 0 (set (reg/f:SI 117 [ _5 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_16->base+0 S4 A32])) "kbd.c":71:15 -1
     (nil))

;; _6 = _5 + 4;

(insn 49 48 0 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 4 [0x4]))) "kbd.c":71:22 -1
     (nil))

;; _7 = *_6;

(insn 50 49 0 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8]))) "kbd.c":71:11 -1
     (nil))

;; _8 = (int) _7;

(insn 51 50 0 (set (reg:SI 120 [ _8 ])
        (reg:SI 119 [ _7 ])) "kbd.c":71:31 -1
     (nil))

;; _9 = _8 & 16;

(insn 52 51 0 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 16 [0x10]))) "kbd.c":71:31 -1
     (nil))

;; if (_9 == 0)

(insn 54 52 55 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "kbd.c":71:39 -1
     (nil))

(jump_insn 55 54 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "kbd.c":71:39 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _10 ={v} kp_16->base;

(insn 57 56 58 (set (reg/f:SI 150)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":72:15 -1
     (nil))

(insn 58 57 0 (set (reg/f:SI 122 [ _10 ])
        (mem/v/f:SI (reg/f:SI 150) [2 kp_16->base+0 S4 A32])) "kbd.c":72:15 -1
     (nil))

;; scode_28 = MEM[(char *)_10 + 8B];

(insn 59 58 60 (set (reg:QI 151)
        (mem:QI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 8 [0x8])) [0 MEM[(char *)_10 + 8B]+0 S1 A8])) "kbd.c":72:9 -1
     (nil))

(insn 60 59 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8])
        (reg:QI 151)) "kbd.c":72:9 -1
     (nil))

;; _11 = (int) scode_28;

(insn 61 60 0 (set (reg:SI 123 [ _11 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":73:3 -1
     (nil))

;; kprintf ("scode=%x ", _11);

(insn 62 61 63 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "kbd.c":73:3 -1
     (nil))

(insn 63 62 64 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7fcdc0b61900 *.LC1>)) "kbd.c":73:3 -1
     (nil))

(call_insn 64 63 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":73:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; if (scode_28 == 90)

(insn 65 64 66 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":74:6 -1
     (nil))

(insn 66 65 67 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 152)
            (const_int 90 [0x5a]))) "kbd.c":74:6 -1
     (nil))

(jump_insn 67 66 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":74:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; keyset ={v} 2;

(insn 69 68 70 (set (reg/f:SI 153)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":75:11 -1
     (nil))

(insn 70 69 71 (set (reg:SI 154)
        (const_int 2 [0x2])) "kbd.c":75:11 -1
     (nil))

(insn 71 70 0 (set (mem/v/c:SI (reg/f:SI 153) [3 keyset+0 S4 A32])
        (reg:SI 154)) "kbd.c":75:11 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 72 71 73 3 (nil) [0 uses])

(note 73 72 0 NOTE_INSN_BASIC_BLOCK)

;; keyset.0_12 ={v} keyset;

(insn 74 73 75 (set (reg/f:SI 155)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":76:3 -1
     (nil))

(insn 75 74 0 (set (reg:SI 124 [ keyset.0_12 ])
        (mem/v/c:SI (reg/f:SI 155) [3 keyset+0 S4 A32])) "kbd.c":76:3 -1
     (nil))

;; kprintf ("keyset=%d\n", keyset.0_12);

(insn 76 75 77 (set (reg:SI 1 r1)
        (reg:SI 124 [ keyset.0_12 ])) "kbd.c":76:3 -1
     (nil))

(insn 77 76 78 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7fcdc0b61990 *.LC2>)) "kbd.c":76:3 -1
     (nil))

(call_insn 78 77 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":76:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 8 into block 7...
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":58:10 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 127)
        (const_int 1 [0x1])) "kbd.c":58:10 -1
     (nil))
(insn 7 6 8 2 (set (mem/v/c:SI (reg/f:SI 126) [3 keyset+0 S4 A32])
        (reg:SI 127)) "kbd.c":58:10 -1
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 128)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":60:8 -1
     (nil))
(insn 9 8 10 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 128)) "kbd.c":60:8 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":61:12 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 130)
        (const_int 268460032 [0x10006000])) "kbd.c":61:12 -1
     (nil))
(insn 12 11 13 2 (set (mem/v/f:SI (reg/f:SI 129) [2 kp_16->base+0 S4 A32])
        (reg:SI 130)) "kbd.c":61:12 -1
     (nil))
(insn 13 12 14 2 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":62:7 -1
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 131) [2 kp_16->base+0 S4 A32])) "kbd.c":62:7 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 132)
        (const_int 16 [0x10])) "kbd.c":62:23 -1
     (nil))
(insn 16 15 17 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "kbd.c":62:23 -1
     (nil))
(insn 17 16 18 2 (set (mem:QI (reg/f:SI 113 [ _1 ]) [0 *_1+0 S1 A8])
        (reg:QI 133)) "kbd.c":62:23 -1
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":63:7 -1
     (nil))
(insn 19 18 20 2 (set (reg/f:SI 114 [ _2 ])
        (mem/v/f:SI (reg/f:SI 134) [2 kp_16->base+0 S4 A32])) "kbd.c":63:7 -1
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 114 [ _2 ])
            (const_int 12 [0xc]))) "kbd.c":63:14 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 135)
        (const_int 8 [0x8])) "kbd.c":63:23 -1
     (nil))
(insn 22 21 23 2 (set (reg:QI 136)
        (subreg:QI (reg:SI 135) 0)) "kbd.c":63:23 -1
     (nil))
(insn 23 22 24 2 (set (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])
        (reg:QI 136)) "kbd.c":63:23 -1
     (nil))
(insn 24 23 25 2 (set (reg:SI 116 [ _4 ])
        (const_int 0 [0])) "kbd.c":64:23 -1
     (nil))
(insn 25 24 26 2 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:23 -1
     (nil))
(insn 26 25 27 2 (set (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 136 [0x88])) [3 kp_16->tail+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:23 -1
     (nil))
(insn 27 26 28 2 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":64:12 -1
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 132 [0x84])) [3 kp_16->head+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":64:12 -1
     (nil))
(insn 29 28 30 2 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:12 -1
     (nil))
(insn 30 29 31 2 (set (reg:SI 140)
        (const_int 0 [0])) "kbd.c":65:12 -1
     (nil))
(insn 31 30 32 2 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 140 [0x8c])) [3 kp_16->data+0 S4 A32])
        (reg:SI 140)) "kbd.c":65:12 -1
     (nil))
(insn 32 31 33 2 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":65:26 -1
     (nil))
(insn 33 32 34 2 (set (reg:SI 142)
        (const_int 128 [0x80])) "kbd.c":65:26 -1
     (nil))
(insn 34 33 35 2 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 144 [0x90])) [3 kp_16->room+0 S4 A32])
        (reg:SI 142)) "kbd.c":65:26 -1
     (nil))
(insn 35 34 36 2 (set (reg/f:SI 143)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":66:11 -1
     (nil))
(insn 36 35 37 2 (set (reg:SI 144)
        (const_int 0 [0])) "kbd.c":66:11 -1
     (nil))
(insn 37 36 38 2 (set (mem/c:SI (reg/f:SI 143) [3 shifted+0 S4 A32])
        (reg:SI 144)) "kbd.c":66:11 -1
     (nil))
(insn 38 37 39 2 (set (reg/f:SI 145)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":67:11 -1
     (nil))
(insn 39 38 40 2 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":67:11 -1
     (nil))
(insn 40 39 41 2 (set (mem/c:SI (reg/f:SI 145) [3 release+0 S4 A32])
        (reg:SI 146)) "kbd.c":67:11 -1
     (nil))
(insn 41 40 42 2 (set (reg/f:SI 147)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":68:11 -1
     (nil))
(insn 42 41 43 2 (set (reg:SI 148)
        (const_int 0 [0])) "kbd.c":68:11 -1
     (nil))
(insn 43 42 44 2 (set (mem/c:SI (reg/f:SI 147) [3 control+0 S4 A32])
        (reg:SI 148)) "kbd.c":68:11 -1
     (nil))
(insn 44 43 45 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7fcdc0b61870 *.LC0>)) "kbd.c":70:3 -1
     (nil))
(call_insn 45 44 53 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":70:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
;;              4 (DFS_BACK)
(code_label 53 45 46 4 2 (nil) [1 uses])
(note 46 53 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 4 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":71:15 -1
     (nil))
(insn 48 47 49 4 (set (reg/f:SI 117 [ _5 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_16->base+0 S4 A32])) "kbd.c":71:15 -1
     (nil))
(insn 49 48 50 4 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 117 [ _5 ])
            (const_int 4 [0x4]))) "kbd.c":71:22 -1
     (nil))
(insn 50 49 51 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8]))) "kbd.c":71:11 -1
     (nil))
(insn 51 50 52 4 (set (reg:SI 120 [ _8 ])
        (reg:SI 119 [ _7 ])) "kbd.c":71:31 -1
     (nil))
(insn 52 51 54 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 16 [0x10]))) "kbd.c":71:31 -1
     (nil))
(insn 54 52 55 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "kbd.c":71:39 -1
     (nil))
(jump_insn 55 54 56 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 53)
            (pc))) "kbd.c":71:39 -1
     (nil)
 -> 53)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 56 55 57 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 57 56 58 5 (set (reg/f:SI 150)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":72:15 -1
     (nil))
(insn 58 57 59 5 (set (reg/f:SI 122 [ _10 ])
        (mem/v/f:SI (reg/f:SI 150) [2 kp_16->base+0 S4 A32])) "kbd.c":72:15 -1
     (nil))
(insn 59 58 60 5 (set (reg:QI 151)
        (mem:QI (plus:SI (reg/f:SI 122 [ _10 ])
                (const_int 8 [0x8])) [0 MEM[(char *)_10 + 8B]+0 S1 A8])) "kbd.c":72:9 -1
     (nil))
(insn 60 59 61 5 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8])
        (reg:QI 151)) "kbd.c":72:9 -1
     (nil))
(insn 61 60 62 5 (set (reg:SI 123 [ _11 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":73:3 -1
     (nil))
(insn 62 61 63 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "kbd.c":73:3 -1
     (nil))
(insn 63 62 64 5 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7fcdc0b61900 *.LC1>)) "kbd.c":73:3 -1
     (nil))
(call_insn 64 63 65 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":73:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 65 64 66 5 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 scode+0 S1 A8]))) "kbd.c":74:6 -1
     (nil))
(insn 66 65 67 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 152)
            (const_int 90 [0x5a]))) "kbd.c":74:6 -1
     (nil))
(jump_insn 67 66 68 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 72)
            (pc))) "kbd.c":74:6 -1
     (nil)
 -> 72)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 68 67 69 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 6 (set (reg/f:SI 153)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":75:11 -1
     (nil))
(insn 70 69 71 6 (set (reg:SI 154)
        (const_int 2 [0x2])) "kbd.c":75:11 -1
     (nil))
(insn 71 70 72 6 (set (mem/v/c:SI (reg/f:SI 153) [3 keyset+0 S4 A32])
        (reg:SI 154)) "kbd.c":75:11 -1
     (nil))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 72 71 73 7 3 (nil) [1 uses])
(note 73 72 74 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 74 73 75 7 (set (reg/f:SI 155)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":76:3 -1
     (nil))
(insn 75 74 76 7 (set (reg:SI 124 [ keyset.0_12 ])
        (mem/v/c:SI (reg/f:SI 155) [3 keyset+0 S4 A32])) "kbd.c":76:3 -1
     (nil))
(insn 76 75 77 7 (set (reg:SI 1 r1)
        (reg:SI 124 [ keyset.0_12 ])) "kbd.c":76:3 -1
     (nil))
(insn 77 76 78 7 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x7fcdc0b61990 *.LC2>)) "kbd.c":76:3 -1
     (nil))
(call_insn 78 77 81 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":76:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 81 78 82 7 (clobber (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (nil))
(insn 82 81 85 7 (clobber (reg:SI 125 [ <retval> ])) "kbd.c":77:1 -1
     (nil))
(insn 85 82 80 7 (const_int 0 [0]) "kbd.c":77:1 -1
     (nil))
(insn 80 85 83 7 (set (reg/i:SI 0 r0)
        (reg:SI 125 [ <retval> ])) "kbd.c":77:1 -1
     (nil))
(insn 83 80 0 7 (use (reg/i:SI 0 r0)) "kbd.c":77:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF1 (doF1, funcdef_no=1, decl_uid=4503, cgraph_uid=2, symbol_order=16)

int doF1 ()
{
  struct PROC * running.1_1;
  int _2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  running.1_1 = running;
  _2 = running.1_1->pid;
  kprintf ("running=%d\n", _2);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (running.1_1 - 1 )
Partition 2 (_2 - 2 )
Partition 5 (_5(D) - 5 )


Coalescible Partition map 

Partition 0, base 0 (_5(D) - 5 )


Partition map 

Partition 0 (_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (running.1_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_5(D) - 5 )

int doF1 ()
{
  struct PROC * running.1_1;
  int _2;
  int _5(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  running.1_1 = running;
  _2 = running.1_1->pid;
  kprintf ("running=%d\n", _2);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; running.1_1 = running;

(insn 5 4 6 (set (reg/f:SI 116)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fcdc17fe7e0 running>)) "kbd.c":105:33 -1
     (nil))

(insn 6 5 0 (set (reg/f:SI 113 [ running.1_1 ])
        (mem/f/c:SI (reg/f:SI 116) [6 running+0 S4 A32])) "kbd.c":105:33 -1
     (nil))

;; _2 = running.1_1->pid;

(insn 7 6 0 (set (reg:SI 114 [ _2 ])
        (mem:SI (plus:SI (reg/f:SI 113 [ running.1_1 ])
                (const_int 24 [0x18])) [3 running.1_1->pid+0 S4 A32])) "kbd.c":105:3 -1
     (nil))

;; kprintf ("running=%d\n", _2);

(insn 8 7 9 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "kbd.c":105:3 -1
     (nil))

(insn 9 8 10 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fcdc0b61ab0 *.LC3>)) "kbd.c":105:3 -1
     (nil))

(call_insn 10 9 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":105:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("running") [flags 0x40]  <var_decl 0x7fcdc17fe7e0 running>)) "kbd.c":105:33 -1
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ running.1_1 ])
        (mem/f/c:SI (reg/f:SI 116) [6 running+0 S4 A32])) "kbd.c":105:33 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 114 [ _2 ])
        (mem:SI (plus:SI (reg/f:SI 113 [ running.1_1 ])
                (const_int 24 [0x18])) [3 running.1_1->pid+0 S4 A32])) "kbd.c":105:3 -1
     (nil))
(insn 8 7 9 2 (set (reg:SI 1 r1)
        (reg:SI 114 [ _2 ])) "kbd.c":105:3 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x7fcdc0b61ab0 *.LC3>)) "kbd.c":105:3 -1
     (nil))
(call_insn 10 9 13 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":105:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 13 10 14 2 (clobber (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (nil))
(insn 14 13 17 2 (clobber (reg:SI 115 [ <retval> ])) "kbd.c":106:1 -1
     (nil))
(insn 17 14 12 2 (const_int 0 [0]) "kbd.c":106:1 -1
     (nil))
(insn 12 17 15 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "kbd.c":106:1 -1
     (nil))
(insn 15 12 0 2 (use (reg/i:SI 0 r0)) "kbd.c":106:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF2 (doF2, funcdef_no=2, decl_uid=4506, cgraph_uid=3, symbol_order=17)

int doF2 ()
{
  struct PROC * readyQueue.2_1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  readyQueue.2_1 = readyQueue;
  printQ (readyQueue.2_1);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (readyQueue.2_1 - 1 )
Partition 4 (_4(D) - 4 )


Coalescible Partition map 

Partition 0, base 0 (_4(D) - 4 )


Partition map 

Partition 0 (_4(D) - 4 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_4(D) - 4 )

After Coalescing:

Partition map 

Partition 0 (readyQueue.2_1 - 1 )
Partition 1 (_4(D) - 4 )

int doF2 ()
{
  struct PROC * readyQueue.2_1;
  int _4(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  readyQueue.2_1 = readyQueue;
  printQ (readyQueue.2_1);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; readyQueue.2_1 = readyQueue;

(insn 5 4 6 (set (reg/f:SI 115)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fcdc17fe6c0 readyQueue>)) "kbd.c":109:5 -1
     (nil))

(insn 6 5 0 (set (reg/f:SI 113 [ readyQueue.2_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 readyQueue+0 S4 A32])) "kbd.c":109:5 -1
     (nil))

;; printQ (readyQueue.2_1);

(insn 7 6 8 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ readyQueue.2_1 ])) "kbd.c":109:5 -1
     (nil))

(call_insn 8 7 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printQ") [flags 0x41]  <function_decl 0x7fcdc0b13200 printQ>) [0 printQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":109:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("readyQueue") [flags 0x40]  <var_decl 0x7fcdc17fe6c0 readyQueue>)) "kbd.c":109:5 -1
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ readyQueue.2_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 readyQueue+0 S4 A32])) "kbd.c":109:5 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ readyQueue.2_1 ])) "kbd.c":109:5 -1
     (nil))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printQ") [flags 0x41]  <function_decl 0x7fcdc0b13200 printQ>) [0 printQ S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":109:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (nil))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":110:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":110:1 -1
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":110:1 -1
     (nil))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":110:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF3 (doF3, funcdef_no=3, decl_uid=4508, cgraph_uid=4, symbol_order=18)

int doF3 ()
{
  struct PROC * sleepList.3_1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  sleepList.3_1 = sleepList;
  printSleepList (sleepList.3_1);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (sleepList.3_1 - 1 )
Partition 4 (_4(D) - 4 )


Coalescible Partition map 

Partition 0, base 0 (_4(D) - 4 )


Partition map 

Partition 0 (_4(D) - 4 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_4(D) - 4 )

After Coalescing:

Partition map 

Partition 0 (sleepList.3_1 - 1 )
Partition 1 (_4(D) - 4 )

int doF3 ()
{
  struct PROC * sleepList.3_1;
  int _4(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  sleepList.3_1 = sleepList;
  printSleepList (sleepList.3_1);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; sleepList.3_1 = sleepList;

(insn 5 4 6 (set (reg/f:SI 115)
        (symbol_ref:SI ("sleepList") [flags 0x40]  <var_decl 0x7fcdc17fe750 sleepList>)) "kbd.c":113:3 -1
     (nil))

(insn 6 5 0 (set (reg/f:SI 113 [ sleepList.3_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 sleepList+0 S4 A32])) "kbd.c":113:3 -1
     (nil))

;; printSleepList (sleepList.3_1);

(insn 7 6 8 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ sleepList.3_1 ])) "kbd.c":113:3 -1
     (nil))

(call_insn 8 7 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printSleepList") [flags 0x41]  <function_decl 0x7fcdc0b13300 printSleepList>) [0 printSleepList S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":113:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 115)
        (symbol_ref:SI ("sleepList") [flags 0x40]  <var_decl 0x7fcdc17fe750 sleepList>)) "kbd.c":113:3 -1
     (nil))
(insn 6 5 7 2 (set (reg/f:SI 113 [ sleepList.3_1 ])
        (mem/f/c:SI (reg/f:SI 115) [6 sleepList+0 S4 A32])) "kbd.c":113:3 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ sleepList.3_1 ])) "kbd.c":113:3 -1
     (nil))
(call_insn 8 7 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printSleepList") [flags 0x41]  <function_decl 0x7fcdc0b13300 printSleepList>) [0 printSleepList S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":113:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 11 8 12 2 (clobber (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (nil))
(insn 12 11 15 2 (clobber (reg:SI 114 [ <retval> ])) "kbd.c":114:1 -1
     (nil))
(insn 15 12 10 2 (const_int 0 [0]) "kbd.c":114:1 -1
     (nil))
(insn 10 15 13 2 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "kbd.c":114:1 -1
     (nil))
(insn 13 10 0 2 (use (reg/i:SI 0 r0)) "kbd.c":114:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function doF4 (doF4, funcdef_no=4, decl_uid=4510, cgraph_uid=5, symbol_order=19)

int doF4 ()
{
;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kps ();
  return;
;;    succ:       EXIT

}



Partition map 

Partition 3 (_3(D) - 3 )


Coalescible Partition map 

Partition 0, base 0 (_3(D) - 3 )


Partition map 

Partition 0 (_3(D) - 3 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_3(D) - 3 )

After Coalescing:

Partition map 

Partition 0 (_3(D) - 3 )

int doF4 ()
{
  int _3(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kps ();
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; kps ();

(call_insn 5 4 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kps") [flags 0x41]  <function_decl 0x7fcdc0b26500 kps>) [0 kps S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":117:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 5 2 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kps") [flags 0x41]  <function_decl 0x7fcdc0b26500 kps>) [0 kps S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":117:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 8 5 9 2 (clobber (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (nil))
(insn 9 8 12 2 (clobber (reg:SI 113 [ <retval> ])) "kbd.c":118:1 -1
     (nil))
(insn 12 9 7 2 (const_int 0 [0]) "kbd.c":118:1 -1
     (nil))
(insn 7 12 10 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "kbd.c":118:1 -1
     (nil))
(insn 10 7 0 2 (use (reg/i:SI 0 r0)) "kbd.c":118:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler1 (kbd_handler1, funcdef_no=5, decl_uid=4514, cgraph_uid=6, symbol_order=20)

void kbd_handler1 ()
{
  volatile struct KBD * kp;
  int i;
  unsigned char c;
  unsigned char code;
  unsigned char iftmp.13;
  char * _1;
  char * _2;
  int esc.4_3;
  int _4;
  int esc.5_5;
  int esc.6_6;
  int esc.7_7;
  int escKey.8_8;
  int _9;
  int _10;
  int _11;
  char _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int _17;
  int _18;
  int _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _24;
  int _25;
  volatile int * _26;
  signed char code.9_27;
  int capslock.10_28;
  int _29;
  int control.11_30;
  int alt.12_31;
  int shift.14_32;
  int _33;
  int _34;
  int capslock.15_35;
  int control.16_36;
  int _37;
  struct pres * _38;
  char[32] * _39;
  int _40;
  struct pres * _41;
  unsigned int _42;
  struct pres * _43;
  unsigned int _44;
  int control.17_45;
  int _46;
  int _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _52;
  int _53;
  volatile int * _54;
  int kline.18_55;
  int _56;
  char * _57;
  char * _58;
  volatile u32 * _59;
  unsigned char iftmp.13_64;
  unsigned char iftmp.13_81;
  unsigned char iftmp.13_82;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_77 = &kbd;
  _1 ={v} kp_77->base;
  _2 = _1 + 8;
  code_79 = *_2;
  if (code_79 == 224)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  esc.4_3 = esc;
  _4 = esc.4_3 + 1;
  esc = _4;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  esc.5_5 = esc;
  if (esc.5_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       5
;;                7

;;   basic block 5, loop depth 0
;;    pred:       4
  esc.6_6 = esc;
  if (esc.6_6 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 7, loop depth 0
;;    pred:       4
;;                5
  esc.7_7 = esc;
  if (esc.7_7 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 25>; [INV]
;;    succ:       8
;;                25

;;   basic block 8, loop depth 0
;;    pred:       7
  if (code_79 == 224)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 10, loop depth 0
;;    pred:       8
  code_110 = code_79 & 127;
  if (code_110 == 83)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 12, loop depth 0
;;    pred:       10
  if (code_110 == 56)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  alt = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 14, loop depth 0
;;    pred:       12
  if (code_110 == 29)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  control = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 16, loop depth 0
;;    pred:       14
  if (code_110 == 72)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]
;;    succ:       17
;;                18

;;   basic block 17, loop depth 0
;;    pred:       16
  escKey = 11;
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       16
;;                17
  if (code_110 == 80)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  escKey = 12;
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       18
;;                19
  if (code_110 == 75)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]
;;    succ:       21
;;                22

;;   basic block 21, loop depth 0
;;    pred:       20
  escKey = 13;
;;    succ:       22

;;   basic block 22, loop depth 0
;;    pred:       20
;;                21
  if (code_110 == 77)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]
;;    succ:       23
;;                24

;;   basic block 23, loop depth 0
;;    pred:       22
  escKey = 14;
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       22
;;                23
  escKey.8_8 = escKey;
  _9 ={v} kp_77->head;
  _10 = _9;
  _11 = _10 + 1;
  kp_77->head ={v} _11;
  _12 = (char) escKey.8_8;
  kp_77->buf[_10] ={v} _12;
  _13 ={v} kp_77->head;
  _14 = _13 % 128;
  kp_77->head ={v} _14;
  _15 ={v} kp_77->data;
  _16 = _15 + 1;
  kp_77->data ={v} _16;
  _17 ={v} kp_77->head;
  _18 = _17;
  _19 = _18 + 1;
  kp_77->head ={v} _19;
  kp_77->buf[_18] ={v} 10;
  _20 ={v} kp_77->head;
  _21 = _20 % 128;
  kp_77->head ={v} _21;
  _22 ={v} kp_77->data;
  _23 = _22 + 1;
  kp_77->data ={v} _23;
  _24 ={v} kp_77->room;
  _25 = _24 + -1;
  kp_77->room ={v} _25;
  _26 = &kp_77->data;
  kwakeup (_26);
  esc = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 25, loop depth 0
;;    pred:       7
  code.9_27 = (signed char) code_79;
  if (code.9_27 < 0)
    goto <bb 26>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       26
;;                34

;;   basic block 26, loop depth 0
;;    pred:       25
  code_106 = code_79 & 127;
  if (code_106 == 42)
    goto <bb 28>; [INV]
  else
    goto <bb 27>; [INV]
;;    succ:       28
;;                27

;;   basic block 27, loop depth 0
;;    pred:       26
  if (code_106 == 54)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]
;;    succ:       28
;;                29

;;   basic block 28, loop depth 0
;;    pred:       26
;;                27
  shift = 0;
;;    succ:       29

;;   basic block 29, loop depth 0
;;    pred:       27
;;                28
  if (code_106 == 29)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       30
;;                31

;;   basic block 30, loop depth 0
;;    pred:       29
  control = 0;
;;    succ:       31

;;   basic block 31, loop depth 0
;;    pred:       29
;;                30
  if (code_106 == 56)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]
;;    succ:       32
;;                33

;;   basic block 32, loop depth 0
;;    pred:       31
  alt = 0;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       31
;;                32
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 34, loop depth 0
;;    pred:       25
  if (code_79 == 42)
    goto <bb 36>; [INV]
  else
    goto <bb 35>; [INV]
;;    succ:       36
;;                35

;;   basic block 35, loop depth 0
;;    pred:       34
  if (code_79 == 54)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       36
;;                37

;;   basic block 36, loop depth 0
;;    pred:       34
;;                35
  shift = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 37, loop depth 0
;;    pred:       35
  if (code_79 == 56)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  alt = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 39, loop depth 0
;;    pred:       37
  if (code_79 == 29)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]
;;    succ:       40
;;                41

;;   basic block 40, loop depth 0
;;    pred:       39
  control = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 41, loop depth 0
;;    pred:       39
  if (code_79 == 58)
    goto <bb 42>; [INV]
  else
    goto <bb 43>; [INV]
;;    succ:       42
;;                43

;;   basic block 42, loop depth 0
;;    pred:       41
  capslock.10_28 = capslock;
  _29 = 1 - capslock.10_28;
  capslock = _29;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 43, loop depth 0
;;    pred:       41
  control.11_30 = control;
  if (control.11_30 != 0)
    goto <bb 44>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       44
;;                47

;;   basic block 44, loop depth 0
;;    pred:       43
  alt.12_31 = alt;
  if (alt.12_31 != 0)
    goto <bb 45>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       45
;;                47

;;   basic block 45, loop depth 0
;;    pred:       44
  if (code_79 == 83)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       46
;;                47

;;   basic block 46, loop depth 0
;;    pred:       45
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 47, loop depth 0
;;    pred:       43
;;                44
;;                45
  if (code_79 == 59)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]
;;    succ:       48
;;                49

;;   basic block 48, loop depth 0
;;    pred:       47
  doF1 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 49, loop depth 0
;;    pred:       47
  if (code_79 == 60)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]
;;    succ:       50
;;                51

;;   basic block 50, loop depth 0
;;    pred:       49
  doF2 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 51, loop depth 0
;;    pred:       49
  if (code_79 == 61)
    goto <bb 52>; [INV]
  else
    goto <bb 53>; [INV]
;;    succ:       52
;;                53

;;   basic block 52, loop depth 0
;;    pred:       51
  doF3 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 53, loop depth 0
;;    pred:       51
  if (code_79 == 62)
    goto <bb 54>; [INV]
  else
    goto <bb 55>; [INV]
;;    succ:       54
;;                55

;;   basic block 54, loop depth 0
;;    pred:       53
  doF4 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 55, loop depth 0
;;    pred:       53
  shift.14_32 = shift;
  if (shift.14_32 != 0)
    goto <bb 56>; [INV]
  else
    goto <bb 57>; [INV]
;;    succ:       56
;;                57

;;   basic block 56, loop depth 0
;;    pred:       55
  _33 = (int) code_79;
  iftmp.13_82 = sh[_33];
  goto <bb 58>; [INV]
;;    succ:       58

;;   basic block 57, loop depth 0
;;    pred:       55
  _34 = (int) code_79;
  iftmp.13_81 = unsh[_34];
;;    succ:       58

;;   basic block 58, loop depth 0
;;    pred:       56
;;                57
  # iftmp.13_64 = PHI <iftmp.13_82(56), iftmp.13_81(57)>
  c_83 = iftmp.13_64;
  capslock.15_35 = capslock;
  if (capslock.15_35 != 0)
    goto <bb 59>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       59
;;                65

;;   basic block 59, loop depth 0
;;    pred:       58
  if (c_83 > 64)
    goto <bb 60>; [INV]
  else
    goto <bb 62>; [INV]
;;    succ:       60
;;                62

;;   basic block 60, loop depth 0
;;    pred:       59
  if (c_83 <= 90)
    goto <bb 61>; [INV]
  else
    goto <bb 62>; [INV]
;;    succ:       61
;;                62

;;   basic block 61, loop depth 0
;;    pred:       60
  c_84 = c_83 + 32;
  goto <bb 65>; [INV]
;;    succ:       65

;;   basic block 62, loop depth 0
;;    pred:       59
;;                60
  if (c_83 > 96)
    goto <bb 63>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       63
;;                65

;;   basic block 63, loop depth 0
;;    pred:       62
  if (c_83 <= 122)
    goto <bb 64>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       64
;;                65

;;   basic block 64, loop depth 0
;;    pred:       63
  c_85 = c_83 + 224;
;;    succ:       65

;;   basic block 65, loop depth 0
;;    pred:       58
;;                61
;;                62
;;                63
;;                64
  # c_60 = PHI <c_83(58), c_84(61), c_83(62), c_83(63), c_85(64)>
  control.16_36 = control;
  if (control.16_36 != 0)
    goto <bb 66>; [INV]
  else
    goto <bb 74>; [INV]
;;    succ:       66
;;                74

;;   basic block 66, loop depth 0
;;    pred:       65
  if (c_60 == 99)
    goto <bb 67>; [INV]
  else
    goto <bb 74>; [INV]
;;    succ:       67
;;                74

;;   basic block 67, loop depth 0
;;    pred:       66
  i_86 = 1;
  goto <bb 72>; [INV]
;;    succ:       72

;;   basic block 68, loop depth 1
;;    pred:       72
  _37 = proc[i_63].status;
  if (_37 != 0)
    goto <bb 69>; [INV]
  else
    goto <bb 71>; [INV]
;;    succ:       69
;;                71

;;   basic block 69, loop depth 1
;;    pred:       68
  _38 = proc[i_63].res;
  _39 = &_38->tty;
  _40 = strcmp (_39, "/dev/tty0");
  if (_40 == 0)
    goto <bb 70>; [INV]
  else
    goto <bb 71>; [INV]
;;    succ:       70
;;                71

;;   basic block 70, loop depth 1
;;    pred:       69
  _41 = proc[i_63].res;
  _42 = _41->signal;
  _43 = proc[i_63].res;
  _44 = _42 | 4;
  _43->signal = _44;
;;    succ:       71

;;   basic block 71, loop depth 1
;;    pred:       68
;;                69
;;                70
  i_89 = i_63 + 1;
;;    succ:       72

;;   basic block 72, loop depth 1
;;    pred:       67
;;                71
  # i_63 = PHI <i_86(67), i_89(71)>
  if (i_63 <= 63)
    goto <bb 68>; [INV]
  else
    goto <bb 73>; [INV]
;;    succ:       68
;;                73

;;   basic block 73, loop depth 0
;;    pred:       72
  c_87 = 10;
;;    succ:       74

;;   basic block 74, loop depth 0
;;    pred:       65
;;                66
;;                73
  # c_61 = PHI <c_60(65), c_60(66), c_87(73)>
  control.17_45 = control;
  if (control.17_45 != 0)
    goto <bb 75>; [INV]
  else
    goto <bb 78>; [INV]
;;    succ:       75
;;                78

;;   basic block 75, loop depth 0
;;    pred:       74
  if (c_61 == 100)
    goto <bb 77>; [INV]
  else
    goto <bb 76>; [INV]
;;    succ:       77
;;                76

;;   basic block 76, loop depth 0
;;    pred:       75
  if (c_61 == 68)
    goto <bb 77>; [INV]
  else
    goto <bb 78>; [INV]
;;    succ:       77
;;                78

;;   basic block 77, loop depth 0
;;    pred:       75
;;                76
  c_90 = 4;
;;    succ:       78

;;   basic block 78, loop depth 0
;;    pred:       74
;;                76
;;                77
  # c_62 = PHI <c_61(74), c_61(76), c_90(77)>
  _46 ={v} kp_77->data;
  if (_46 == 128)
    goto <bb 79>; [INV]
  else
    goto <bb 80>; [INV]
;;    succ:       79
;;                80

;;   basic block 79, loop depth 0
;;    pred:       78
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 80, loop depth 0
;;    pred:       78
  _47 ={v} kp_77->head;
  _48 = _47;
  _49 = _48 + 1;
  kp_77->head ={v} _49;
  kp_77->buf[_48] ={v} c_62;
  _50 ={v} kp_77->head;
  _51 = _50 % 128;
  kp_77->head ={v} _51;
  _52 ={v} kp_77->data;
  _53 = _52 + 1;
  kp_77->data ={v} _53;
  _54 = &kp_77->data;
  kwakeup (_54);
  if (c_62 == 13)
    goto <bb 81>; [INV]
  else
    goto <bb 82>; [INV]
;;    succ:       81
;;                82

;;   basic block 81, loop depth 0
;;    pred:       80
  kline.18_55 ={v} kline;
  _56 = kline.18_55 + 1;
  kline ={v} _56;
  kwakeup (&kline);
;;    succ:       82

;;   basic block 82, loop depth 0
;;    pred:       6
;;                9
;;                11
;;                13
;;                15
;;                24
;;                33
;;                36
;;                38
;;                40
;;                42
;;                46
;;                48
;;                50
;;                52
;;                54
;;                79
;;                80
;;                81
out:
  _57 ={v} kp_77->base;
  _58 = _57 + 4;
  *_58 = 255;
  _59 = 269746224B;
  *_59 ={v} 255;
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (esc.4_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (esc.5_5 - 5 )
Partition 6 (esc.6_6 - 6 )
Partition 7 (esc.7_7 - 7 )
Partition 8 (escKey.8_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (code.9_27 - 27 )
Partition 28 (capslock.10_28 - 28 )
Partition 29 (_29 - 29 )
Partition 30 (control.11_30 - 30 )
Partition 31 (alt.12_31 - 31 )
Partition 32 (shift.14_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (capslock.15_35 - 35 )
Partition 36 (control.16_36 - 36 )
Partition 37 (_37 - 37 )
Partition 38 (_38 - 38 )
Partition 39 (_39 - 39 )
Partition 40 (_40 - 40 )
Partition 41 (_41 - 41 )
Partition 42 (_42 - 42 )
Partition 43 (_43 - 43 )
Partition 44 (_44 - 44 )
Partition 45 (control.17_45 - 45 )
Partition 46 (_46 - 46 )
Partition 47 (_47 - 47 )
Partition 48 (_48 - 48 )
Partition 49 (_49 - 49 )
Partition 50 (_50 - 50 )
Partition 51 (_51 - 51 )
Partition 52 (_52 - 52 )
Partition 53 (_53 - 53 )
Partition 54 (_54 - 54 )
Partition 55 (kline.18_55 - 55 )
Partition 56 (_56 - 56 )
Partition 57 (_57 - 57 )
Partition 58 (_58 - 58 )
Partition 59 (_59 - 59 )
Partition 60 (c_60 - 60 )
Partition 61 (c_61 - 61 )
Partition 62 (c_62 - 62 )
Partition 63 (i_63 - 63 )
Partition 64 (iftmp.13_64 - 64 )
Partition 77 (kp_77 - 77 )
Partition 79 (code_79 - 79 )
Partition 81 (iftmp.13_81 - 81 )
Partition 82 (iftmp.13_82 - 82 )
Partition 83 (c_83 - 83 )
Partition 84 (c_84 - 84 )
Partition 85 (c_85 - 85 )
Partition 86 (i_86 - 86 )
Partition 87 (c_87 - 87 )
Partition 89 (i_89 - 89 )
Partition 90 (c_90 - 90 )
Partition 106 (code_106 - 106 )
Partition 110 (code_110 - 110 )


Coalescible Partition map 

Partition 0, base 0 (_9 - 9 10 )
Partition 2, base 1 (_17 - 17 18 )
Partition 4, base 2 (_47 - 47 48 )
Partition 6, base 3 (c_60 - 60 61 62 83 84 85 87 90 )
Partition 9, base 4 (i_63 - 63 86 89 )
Partition 10, base 5 (iftmp.13_64 - 64 81 82 )
Partition 11, base 6 (code_79 - 79 106 110 )


Partition map 

Partition 0 (_9 - 9 )
Partition 1 (_10 - 10 )
Partition 2 (_17 - 17 )
Partition 3 (_18 - 18 )
Partition 4 (_47 - 47 )
Partition 5 (_48 - 48 )
Partition 6 (c_60 - 60 )
Partition 7 (c_61 - 61 )
Partition 8 (c_62 - 62 )
Partition 9 (i_63 - 63 )
Partition 10 (iftmp.13_64 - 64 )
Partition 11 (code_79 - 79 )
Partition 12 (iftmp.13_81 - 81 )
Partition 13 (iftmp.13_82 - 82 )
Partition 14 (c_83 - 83 )
Partition 15 (c_84 - 84 )
Partition 16 (c_85 - 85 )
Partition 17 (i_86 - 86 )
Partition 18 (c_87 - 87 )
Partition 19 (i_89 - 89 )
Partition 20 (c_90 - 90 )
Partition 21 (code_106 - 106 )
Partition 22 (code_110 - 110 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) c_60 <-> c_83
(2147483646, 0) c_60 <-> c_84
(2147483646, 0) c_60 <-> c_85
(2147483646, 0) i_63 <-> i_86
(2147483646, 0) i_63 <-> i_89
(2147483646, 0) c_60 <-> c_61
(2147483646, 0) c_60 <-> c_62
(2147483646, 0) c_60 <-> c_87
(2147483646, 0) c_60 <-> c_90
(2147483646, 0) code_79 <-> code_106
(2147483646, 0) code_79 <-> code_110
(40000, 0) c_61 <-> c_62
(10000, 0) _9 <-> _10
(10000, 0) _17 <-> _18
(10000, 0) iftmp.13_64 <-> iftmp.13_82
(10000, 0) iftmp.13_64 <-> iftmp.13_81
(10000, 0) c_61 <-> c_87
(10000, 0) c_62 <-> c_90
(10000, 0) _47 <-> _48

Partition map 

Partition 0 (_9 - 9 )
Partition 1 (_10 - 10 )
Partition 2 (_17 - 17 )
Partition 3 (_18 - 18 )
Partition 4 (_47 - 47 )
Partition 5 (_48 - 48 )
Partition 6 (c_60 - 60 )
Partition 7 (c_61 - 61 )
Partition 8 (c_62 - 62 )
Partition 9 (i_63 - 63 )
Partition 10 (iftmp.13_64 - 64 )
Partition 11 (code_79 - 79 )
Partition 12 (iftmp.13_81 - 81 )
Partition 13 (iftmp.13_82 - 82 )
Partition 14 (c_83 - 83 )
Partition 15 (c_84 - 84 )
Partition 16 (c_85 - 85 )
Partition 17 (i_86 - 86 )
Partition 18 (c_87 - 87 )
Partition 19 (i_89 - 89 )
Partition 20 (c_90 - 90 )
Partition 21 (code_106 - 106 )
Partition 22 (code_110 - 110 )

Coalesce list: (60)c_60 & (83)c_83 [map: 6, 14] : Success -> 6
Coalesce list: (60)c_60 & (84)c_84 [map: 6, 15] : Success -> 6
Coalesce list: (60)c_60 & (85)c_85 [map: 6, 16] : Success -> 6
Coalesce list: (63)i_63 & (86)i_86 [map: 9, 17] : Success -> 9
Coalesce list: (63)i_63 & (89)i_89 [map: 9, 19] : Success -> 9
Coalesce list: (60)c_60 & (61)c_61 [map: 6, 7] : Success -> 6
Coalesce list: (60)c_60 & (62)c_62 [map: 6, 8] : Success -> 6
Coalesce list: (60)c_60 & (87)c_87 [map: 6, 18] : Success -> 6
Coalesce list: (60)c_60 & (90)c_90 [map: 6, 20] : Success -> 6
Coalesce list: (79)code_79 & (106)code_106 [map: 11, 21] : Success -> 11
Coalesce list: (79)code_79 & (110)code_110 [map: 11, 22] : Success -> 11
Coalesce list: (61)c_60 & (62)c_60: Already Coalesced.
Coalesce list: (9)_9 & (10)_10 [map: 0, 1] : Success -> 0
Coalesce list: (17)_17 & (18)_18 [map: 2, 3] : Success -> 2
Coalesce list: (64)iftmp.13_64 & (82)iftmp.13_82 [map: 10, 13] : Success -> 10
Coalesce list: (64)iftmp.13_64 & (81)iftmp.13_81 [map: 10, 12] : Success -> 10
Coalesce list: (61)c_60 & (87)c_60: Already Coalesced.
Coalesce list: (62)c_60 & (90)c_60: Already Coalesced.
Coalesce list: (47)_47 & (48)_48 [map: 4, 5] : Success -> 4
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (esc.4_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (esc.5_5 - 5 )
Partition 5 (esc.6_6 - 6 )
Partition 6 (esc.7_7 - 7 )
Partition 7 (escKey.8_8 - 8 )
Partition 8 (_9 - 9 10 )
Partition 9 (_11 - 11 )
Partition 10 (_12 - 12 )
Partition 11 (_13 - 13 )
Partition 12 (_14 - 14 )
Partition 13 (_15 - 15 )
Partition 14 (_16 - 16 )
Partition 15 (_17 - 17 18 )
Partition 16 (_19 - 19 )
Partition 17 (_20 - 20 )
Partition 18 (_21 - 21 )
Partition 19 (_22 - 22 )
Partition 20 (_23 - 23 )
Partition 21 (_24 - 24 )
Partition 22 (_25 - 25 )
Partition 23 (_26 - 26 )
Partition 24 (code.9_27 - 27 )
Partition 25 (capslock.10_28 - 28 )
Partition 26 (_29 - 29 )
Partition 27 (control.11_30 - 30 )
Partition 28 (alt.12_31 - 31 )
Partition 29 (shift.14_32 - 32 )
Partition 30 (_33 - 33 )
Partition 31 (_34 - 34 )
Partition 32 (capslock.15_35 - 35 )
Partition 33 (control.16_36 - 36 )
Partition 34 (_37 - 37 )
Partition 35 (_38 - 38 )
Partition 36 (_39 - 39 )
Partition 37 (_40 - 40 )
Partition 38 (_41 - 41 )
Partition 39 (_42 - 42 )
Partition 40 (_43 - 43 )
Partition 41 (_44 - 44 )
Partition 42 (control.17_45 - 45 )
Partition 43 (_46 - 46 )
Partition 44 (_47 - 47 48 )
Partition 45 (_49 - 49 )
Partition 46 (_50 - 50 )
Partition 47 (_51 - 51 )
Partition 48 (_52 - 52 )
Partition 49 (_53 - 53 )
Partition 50 (_54 - 54 )
Partition 51 (kline.18_55 - 55 )
Partition 52 (_56 - 56 )
Partition 53 (_57 - 57 )
Partition 54 (_58 - 58 )
Partition 55 (_59 - 59 )
Partition 56 (c_60 - 60 61 62 83 84 85 87 90 )
Partition 57 (i_63 - 63 86 89 )
Partition 58 (iftmp.13_64 - 64 81 82 )
Partition 59 (kp_77 - 77 )
Partition 60 (code_79 - 79 106 110 )

void kbd_handler1 ()
{
  volatile struct KBD * kp;
  int i;
  unsigned char c;
  unsigned char code;
  unsigned char iftmp.13;
  char * _1;
  char * _2;
  int esc.4_3;
  int _4;
  int esc.5_5;
  int esc.6_6;
  int esc.7_7;
  int escKey.8_8;
  int _9;
  int _10;
  int _11;
  char _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int _17;
  int _18;
  int _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _24;
  int _25;
  volatile int * _26;
  signed char code.9_27;
  int capslock.10_28;
  int _29;
  int control.11_30;
  int alt.12_31;
  int shift.14_32;
  int _33;
  int _34;
  int capslock.15_35;
  int control.16_36;
  int _37;
  struct pres * _38;
  char[32] * _39;
  int _40;
  struct pres * _41;
  unsigned int _42;
  struct pres * _43;
  unsigned int _44;
  int control.17_45;
  int _46;
  int _47;
  int _48;
  int _49;
  int _50;
  int _51;
  int _52;
  int _53;
  volatile int * _54;
  int kline.18_55;
  int _56;
  char * _57;
  char * _58;
  volatile u32 * _59;
  unsigned char iftmp.13_64;
  unsigned char iftmp.13_81;
  unsigned char iftmp.13_82;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_77 = &kbd;
  _1 ={v} kp_77->base;
  _2 = _1 + 8;
  code_79 = *_2;
  if (code_79 == 224)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  esc.4_3 = esc;
  _4 = esc.4_3 + 1;
  esc = _4;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  esc.5_5 = esc;
  if (esc.5_5 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       5
;;                7

;;   basic block 5, loop depth 0
;;    pred:       4
  esc.6_6 = esc;
  if (esc.6_6 <= 1)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 7, loop depth 0
;;    pred:       4
;;                5
  esc.7_7 = esc;
  if (esc.7_7 == 2)
    goto <bb 8>; [INV]
  else
    goto <bb 25>; [INV]
;;    succ:       8
;;                25

;;   basic block 8, loop depth 0
;;    pred:       7
  if (code_79 == 224)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 10, loop depth 0
;;    pred:       8
  code_110 = code_79 & 127;
  if (code_110 == 83)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 12, loop depth 0
;;    pred:       10
  if (code_110 == 56)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  alt = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 14, loop depth 0
;;    pred:       12
  if (code_110 == 29)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  control = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 16, loop depth 0
;;    pred:       14
  if (code_110 == 72)
    goto <bb 17>; [INV]
  else
    goto <bb 18>; [INV]
;;    succ:       17
;;                18

;;   basic block 17, loop depth 0
;;    pred:       16
  escKey = 11;
;;    succ:       18

;;   basic block 18, loop depth 0
;;    pred:       16
;;                17
  if (code_110 == 80)
    goto <bb 19>; [INV]
  else
    goto <bb 20>; [INV]
;;    succ:       19
;;                20

;;   basic block 19, loop depth 0
;;    pred:       18
  escKey = 12;
;;    succ:       20

;;   basic block 20, loop depth 0
;;    pred:       18
;;                19
  if (code_110 == 75)
    goto <bb 21>; [INV]
  else
    goto <bb 22>; [INV]
;;    succ:       21
;;                22

;;   basic block 21, loop depth 0
;;    pred:       20
  escKey = 13;
;;    succ:       22

;;   basic block 22, loop depth 0
;;    pred:       20
;;                21
  if (code_110 == 77)
    goto <bb 23>; [INV]
  else
    goto <bb 24>; [INV]
;;    succ:       23
;;                24

;;   basic block 23, loop depth 0
;;    pred:       22
  escKey = 14;
;;    succ:       24

;;   basic block 24, loop depth 0
;;    pred:       22
;;                23
  escKey.8_8 = escKey;
  _9 ={v} kp_77->head;
  _10 = _9;
  _11 = _10 + 1;
  kp_77->head ={v} _11;
  _12 = (char) escKey.8_8;
  kp_77->buf[_10] ={v} _12;
  _13 ={v} kp_77->head;
  _14 = _13 % 128;
  kp_77->head ={v} _14;
  _15 ={v} kp_77->data;
  _16 = _15 + 1;
  kp_77->data ={v} _16;
  _17 ={v} kp_77->head;
  _18 = _17;
  _19 = _18 + 1;
  kp_77->head ={v} _19;
  kp_77->buf[_18] ={v} 10;
  _20 ={v} kp_77->head;
  _21 = _20 % 128;
  kp_77->head ={v} _21;
  _22 ={v} kp_77->data;
  _23 = _22 + 1;
  kp_77->data ={v} _23;
  _24 ={v} kp_77->room;
  _25 = _24 + -1;
  kp_77->room ={v} _25;
  _26 = &kp_77->data;
  kwakeup (_26);
  esc = 0;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 25, loop depth 0
;;    pred:       7
  code.9_27 = (signed char) code_79;
  if (code.9_27 < 0)
    goto <bb 26>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       26
;;                34

;;   basic block 26, loop depth 0
;;    pred:       25
  code_106 = code_79 & 127;
  if (code_106 == 42)
    goto <bb 28>; [INV]
  else
    goto <bb 27>; [INV]
;;    succ:       28
;;                27

;;   basic block 27, loop depth 0
;;    pred:       26
  if (code_106 == 54)
    goto <bb 28>; [INV]
  else
    goto <bb 29>; [INV]
;;    succ:       28
;;                29

;;   basic block 28, loop depth 0
;;    pred:       26
;;                27
  shift = 0;
;;    succ:       29

;;   basic block 29, loop depth 0
;;    pred:       27
;;                28
  if (code_106 == 29)
    goto <bb 30>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       30
;;                31

;;   basic block 30, loop depth 0
;;    pred:       29
  control = 0;
;;    succ:       31

;;   basic block 31, loop depth 0
;;    pred:       29
;;                30
  if (code_106 == 56)
    goto <bb 32>; [INV]
  else
    goto <bb 33>; [INV]
;;    succ:       32
;;                33

;;   basic block 32, loop depth 0
;;    pred:       31
  alt = 0;
;;    succ:       33

;;   basic block 33, loop depth 0
;;    pred:       31
;;                32
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 34, loop depth 0
;;    pred:       25
  if (code_79 == 42)
    goto <bb 36>; [INV]
  else
    goto <bb 35>; [INV]
;;    succ:       36
;;                35

;;   basic block 35, loop depth 0
;;    pred:       34
  if (code_79 == 54)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       36
;;                37

;;   basic block 36, loop depth 0
;;    pred:       34
;;                35
  shift = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 37, loop depth 0
;;    pred:       35
  if (code_79 == 56)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  alt = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 39, loop depth 0
;;    pred:       37
  if (code_79 == 29)
    goto <bb 40>; [INV]
  else
    goto <bb 41>; [INV]
;;    succ:       40
;;                41

;;   basic block 40, loop depth 0
;;    pred:       39
  control = 1;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 41, loop depth 0
;;    pred:       39
  if (code_79 == 58)
    goto <bb 42>; [INV]
  else
    goto <bb 43>; [INV]
;;    succ:       42
;;                43

;;   basic block 42, loop depth 0
;;    pred:       41
  capslock.10_28 = capslock;
  _29 = 1 - capslock.10_28;
  capslock = _29;
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 43, loop depth 0
;;    pred:       41
  control.11_30 = control;
  if (control.11_30 != 0)
    goto <bb 44>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       44
;;                47

;;   basic block 44, loop depth 0
;;    pred:       43
  alt.12_31 = alt;
  if (alt.12_31 != 0)
    goto <bb 45>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       45
;;                47

;;   basic block 45, loop depth 0
;;    pred:       44
  if (code_79 == 83)
    goto <bb 46>; [INV]
  else
    goto <bb 47>; [INV]
;;    succ:       46
;;                47

;;   basic block 46, loop depth 0
;;    pred:       45
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 47, loop depth 0
;;    pred:       43
;;                44
;;                45
  if (code_79 == 59)
    goto <bb 48>; [INV]
  else
    goto <bb 49>; [INV]
;;    succ:       48
;;                49

;;   basic block 48, loop depth 0
;;    pred:       47
  doF1 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 49, loop depth 0
;;    pred:       47
  if (code_79 == 60)
    goto <bb 50>; [INV]
  else
    goto <bb 51>; [INV]
;;    succ:       50
;;                51

;;   basic block 50, loop depth 0
;;    pred:       49
  doF2 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 51, loop depth 0
;;    pred:       49
  if (code_79 == 61)
    goto <bb 52>; [INV]
  else
    goto <bb 53>; [INV]
;;    succ:       52
;;                53

;;   basic block 52, loop depth 0
;;    pred:       51
  doF3 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 53, loop depth 0
;;    pred:       51
  if (code_79 == 62)
    goto <bb 54>; [INV]
  else
    goto <bb 55>; [INV]
;;    succ:       54
;;                55

;;   basic block 54, loop depth 0
;;    pred:       53
  doF4 ();
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 55, loop depth 0
;;    pred:       53
  shift.14_32 = shift;
  if (shift.14_32 != 0)
    goto <bb 56>; [INV]
  else
    goto <bb 57>; [INV]
;;    succ:       56
;;                57

;;   basic block 56, loop depth 0
;;    pred:       55
  _33 = (int) code_79;
  iftmp.13_82 = sh[_33];
  goto <bb 58>; [INV]
;;    succ:       58

;;   basic block 57, loop depth 0
;;    pred:       55
  _34 = (int) code_79;
  iftmp.13_81 = unsh[_34];
;;    succ:       58

;;   basic block 58, loop depth 0
;;    pred:       56
;;                57
  # iftmp.13_64 = PHI <iftmp.13_82(56), iftmp.13_81(57)>
  c_83 = iftmp.13_64;
  capslock.15_35 = capslock;
  if (capslock.15_35 != 0)
    goto <bb 59>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       59
;;                65

;;   basic block 59, loop depth 0
;;    pred:       58
  if (c_83 > 64)
    goto <bb 60>; [INV]
  else
    goto <bb 62>; [INV]
;;    succ:       60
;;                62

;;   basic block 60, loop depth 0
;;    pred:       59
  if (c_83 <= 90)
    goto <bb 61>; [INV]
  else
    goto <bb 62>; [INV]
;;    succ:       61
;;                62

;;   basic block 61, loop depth 0
;;    pred:       60
  c_84 = c_83 + 32;
  goto <bb 65>; [INV]
;;    succ:       65

;;   basic block 62, loop depth 0
;;    pred:       59
;;                60
  if (c_83 > 96)
    goto <bb 63>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       63
;;                65

;;   basic block 63, loop depth 0
;;    pred:       62
  if (c_83 <= 122)
    goto <bb 64>; [INV]
  else
    goto <bb 65>; [INV]
;;    succ:       64
;;                65

;;   basic block 64, loop depth 0
;;    pred:       63
  c_85 = c_83 + 224;
;;    succ:       65

;;   basic block 65, loop depth 0
;;    pred:       58
;;                61
;;                62
;;                63
;;                64
  # c_60 = PHI <c_83(58), c_84(61), c_83(62), c_83(63), c_85(64)>
  control.16_36 = control;
  if (control.16_36 != 0)
    goto <bb 66>; [INV]
  else
    goto <bb 74>; [INV]
;;    succ:       66
;;                74

;;   basic block 66, loop depth 0
;;    pred:       65
  if (c_60 == 99)
    goto <bb 67>; [INV]
  else
    goto <bb 74>; [INV]
;;    succ:       67
;;                74

;;   basic block 67, loop depth 0
;;    pred:       66
  i_86 = 1;
  goto <bb 72>; [INV]
;;    succ:       72

;;   basic block 68, loop depth 1
;;    pred:       72
  _37 = proc[i_63].status;
  if (_37 != 0)
    goto <bb 69>; [INV]
  else
    goto <bb 71>; [INV]
;;    succ:       69
;;                71

;;   basic block 69, loop depth 1
;;    pred:       68
  _38 = proc[i_63].res;
  _39 = &_38->tty;
  _40 = strcmp (_39, "/dev/tty0");
  if (_40 == 0)
    goto <bb 70>; [INV]
  else
    goto <bb 71>; [INV]
;;    succ:       70
;;                71

;;   basic block 70, loop depth 1
;;    pred:       69
  _41 = proc[i_63].res;
  _42 = _41->signal;
  _43 = proc[i_63].res;
  _44 = _42 | 4;
  _43->signal = _44;
;;    succ:       71

;;   basic block 71, loop depth 1
;;    pred:       68
;;                69
;;                70
  i_89 = i_63 + 1;
;;    succ:       72

;;   basic block 72, loop depth 1
;;    pred:       67
;;                71
  # i_63 = PHI <i_86(67), i_89(71)>
  if (i_63 <= 63)
    goto <bb 68>; [INV]
  else
    goto <bb 73>; [INV]
;;    succ:       68
;;                73

;;   basic block 73, loop depth 0
;;    pred:       72
  c_87 = 10;
;;    succ:       74

;;   basic block 74, loop depth 0
;;    pred:       65
;;                66
;;                73
  # c_61 = PHI <c_60(65), c_60(66), c_87(73)>
  control.17_45 = control;
  if (control.17_45 != 0)
    goto <bb 75>; [INV]
  else
    goto <bb 78>; [INV]
;;    succ:       75
;;                78

;;   basic block 75, loop depth 0
;;    pred:       74
  if (c_61 == 100)
    goto <bb 77>; [INV]
  else
    goto <bb 76>; [INV]
;;    succ:       77
;;                76

;;   basic block 76, loop depth 0
;;    pred:       75
  if (c_61 == 68)
    goto <bb 77>; [INV]
  else
    goto <bb 78>; [INV]
;;    succ:       77
;;                78

;;   basic block 77, loop depth 0
;;    pred:       75
;;                76
  c_90 = 4;
;;    succ:       78

;;   basic block 78, loop depth 0
;;    pred:       74
;;                76
;;                77
  # c_62 = PHI <c_61(74), c_61(76), c_90(77)>
  _46 ={v} kp_77->data;
  if (_46 == 128)
    goto <bb 79>; [INV]
  else
    goto <bb 80>; [INV]
;;    succ:       79
;;                80

;;   basic block 79, loop depth 0
;;    pred:       78
  // predicted unlikely by goto predictor.
  goto <bb 82>; [INV]
;;    succ:       82

;;   basic block 80, loop depth 0
;;    pred:       78
  _47 ={v} kp_77->head;
  _48 = _47;
  _49 = _48 + 1;
  kp_77->head ={v} _49;
  kp_77->buf[_48] ={v} c_62;
  _50 ={v} kp_77->head;
  _51 = _50 % 128;
  kp_77->head ={v} _51;
  _52 ={v} kp_77->data;
  _53 = _52 + 1;
  kp_77->data ={v} _53;
  _54 = &kp_77->data;
  kwakeup (_54);
  if (c_62 == 13)
    goto <bb 81>; [INV]
  else
    goto <bb 82>; [INV]
;;    succ:       81
;;                82

;;   basic block 81, loop depth 0
;;    pred:       80
  kline.18_55 ={v} kline;
  _56 = kline.18_55 + 1;
  kline ={v} _56;
  kwakeup (&kline);
;;    succ:       82

;;   basic block 82, loop depth 0
;;    pred:       6
;;                9
;;                11
;;                13
;;                15
;;                24
;;                33
;;                36
;;                38
;;                40
;;                42
;;                46
;;                48
;;                50
;;                52
;;                54
;;                79
;;                80
;;                81
out:
  _57 ={v} kp_77->base;
  _58 = _57 + 4;
  *_58 = 255;
  _59 = 269746224B;
  *_59 ={v} 255;
  return;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	kp_77
Partition 1: size 4 align 4
	i_63
Partition 3: size 1 align 1
	code_79
Partition 0: size 1 align 1
	c_60

;; Generating RTL for gimple basic block 2

;; kp_77 = &kbd;

(insn 5 4 6 (set (reg/f:SI 170)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":124:8 -1
     (nil))

(insn 6 5 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 170)) "kbd.c":124:8 -1
     (nil))

;; _1 ={v} kp_77->base;

(insn 7 6 8 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":126:14 -1
     (nil))

(insn 8 7 0 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 171) [2 kp_77->base+0 S4 A32])) "kbd.c":126:14 -1
     (nil))

;; _2 = _1 + 8;

(insn 9 8 0 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":126:21 -1
     (nil))

;; code_79 = *_2;

(insn 10 9 11 (set (reg:QI 172)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":126:8 -1
     (nil))

(insn 11 10 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 172)) "kbd.c":126:8 -1
     (nil))

;; if (code_79 == 224)

(insn 12 11 13 (set (reg:SI 173)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":135:6 -1
     (nil))

(insn 13 12 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 173)
            (const_int 224 [0xe0]))) "kbd.c":135:6 -1
     (nil))

(jump_insn 14 13 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":135:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; esc.4_3 = esc;

(insn 16 15 17 (set (reg/f:SI 174)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 -1
     (nil))

(insn 17 16 0 (set (reg:SI 115 [ esc.4_3 ])
        (mem/c:SI (reg/f:SI 174) [3 esc+0 S4 A32])) "kbd.c":136:9 -1
     (nil))

;; _4 = esc.4_3 + 1;

(insn 18 17 0 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 115 [ esc.4_3 ])
            (const_int 1 [0x1]))) "kbd.c":136:9 -1
     (nil))

;; esc = _4;

(insn 19 18 20 (set (reg/f:SI 175)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 -1
     (nil))

(insn 20 19 0 (set (mem/c:SI (reg/f:SI 175) [3 esc+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":136:9 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 21 20 22 17 (nil) [0 uses])

(note 22 21 0 NOTE_INSN_BASIC_BLOCK)

;; esc.5_5 = esc;

(insn 23 22 24 (set (reg/f:SI 176)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:7 -1
     (nil))

(insn 24 23 0 (set (reg:SI 117 [ esc.5_5 ])
        (mem/c:SI (reg/f:SI 176) [3 esc+0 S4 A32])) "kbd.c":138:7 -1
     (nil))

;; if (esc.5_5 != 0)

(insn 25 24 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ esc.5_5 ])
            (const_int 0 [0]))) "kbd.c":138:6 -1
     (nil))

(jump_insn 26 25 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":138:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; esc.6_6 = esc;

(insn 28 27 29 (set (reg/f:SI 177)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:18 -1
     (nil))

(insn 29 28 0 (set (reg:SI 118 [ esc.6_6 ])
        (mem/c:SI (reg/f:SI 177) [3 esc+0 S4 A32])) "kbd.c":138:18 -1
     (nil))

;; if (esc.6_6 <= 1)

(insn 32 29 33 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ esc.6_6 ])
            (const_int 1 [0x1]))) "kbd.c":138:11 -1
     (nil))

(jump_insn 33 32 0 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":138:11 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 7

;; 

(code_label 37 36 38 18 (nil) [0 uses])

(note 38 37 0 NOTE_INSN_BASIC_BLOCK)

;; esc.7_7 = esc;

(insn 39 38 40 (set (reg/f:SI 178)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":141:11 -1
     (nil))

(insn 40 39 0 (set (reg:SI 119 [ esc.7_7 ])
        (mem/c:SI (reg/f:SI 178) [3 esc+0 S4 A32])) "kbd.c":141:11 -1
     (nil))

;; if (esc.7_7 == 2)

(insn 41 40 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ esc.7_7 ])
            (const_int 2 [0x2]))) "kbd.c":141:6 -1
     (nil))

(jump_insn 42 41 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":141:6 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; if (code_79 == 224)

(insn 44 43 45 (set (reg:SI 179)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":142:8 -1
     (nil))

(insn 45 44 46 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 179)
            (const_int 224 [0xe0]))) "kbd.c":142:8 -1
     (nil))

(jump_insn 46 45 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":142:8 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 10

;; 

(code_label 50 49 51 21 (nil) [0 uses])

(note 51 50 0 NOTE_INSN_BASIC_BLOCK)

;; code_110 = code_79 & 127;

(insn 52 51 53 (set (reg:QI 180)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":147:11 -1
     (nil))

(insn 53 52 54 (set (reg:SI 181)
        (and:SI (subreg:SI (reg:QI 180) 0)
            (const_int 127 [0x7f]))) "kbd.c":147:11 -1
     (nil))

(insn 54 53 55 (set (reg:QI 182)
        (subreg:QI (reg:SI 181) 0)) "kbd.c":147:11 -1
     (nil))

(insn 55 54 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 182)) "kbd.c":147:11 -1
     (nil))

;; if (code_110 == 83)

(insn 56 55 57 (set (reg:SI 183)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":149:9 -1
     (nil))

(insn 57 56 58 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 183)
            (const_int 83 [0x53]))) "kbd.c":149:9 -1
     (nil))

(jump_insn 58 57 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":149:9 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 12

;; 

(code_label 62 61 63 22 (nil) [0 uses])

(note 63 62 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 56)

(insn 64 63 65 (set (reg:SI 184)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":155:9 -1
     (nil))

(insn 65 64 66 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 184)
            (const_int 56 [0x38]))) "kbd.c":155:9 -1
     (nil))

(jump_insn 66 65 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":155:9 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; alt = 0;

(insn 68 67 69 (set (reg/f:SI 185)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":156:12 -1
     (nil))

(insn 69 68 70 (set (reg:SI 186)
        (const_int 0 [0])) "kbd.c":156:12 -1
     (nil))

(insn 70 69 0 (set (mem/c:SI (reg/f:SI 185) [3 alt+0 S4 A32])
        (reg:SI 186)) "kbd.c":156:12 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 14

;; 

(code_label 73 72 74 23 (nil) [0 uses])

(note 74 73 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 29)

(insn 75 74 76 (set (reg:SI 187)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":160:9 -1
     (nil))

(insn 76 75 77 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 187)
            (const_int 29 [0x1d]))) "kbd.c":160:9 -1
     (nil))

(jump_insn 77 76 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":160:9 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; control = 0;

(insn 79 78 80 (set (reg/f:SI 188)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":161:16 -1
     (nil))

(insn 80 79 81 (set (reg:SI 189)
        (const_int 0 [0])) "kbd.c":161:16 -1
     (nil))

(insn 81 80 0 (set (mem/c:SI (reg/f:SI 188) [3 control+0 S4 A32])
        (reg:SI 189)) "kbd.c":161:16 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 16

;; 

(code_label 84 83 85 24 (nil) [0 uses])

(note 85 84 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 72)

(insn 86 85 87 (set (reg:SI 190)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":165:9 -1
     (nil))

(insn 87 86 88 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 190)
            (const_int 72 [0x48]))) "kbd.c":165:9 -1
     (nil))

(jump_insn 88 87 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":165:9 -1
     (nil))

;; Generating RTL for gimple basic block 17

;; escKey = 11;

(insn 90 89 91 (set (reg/f:SI 191)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":166:15 -1
     (nil))

(insn 91 90 92 (set (reg:SI 192)
        (const_int 11 [0xb])) "kbd.c":166:15 -1
     (nil))

(insn 92 91 0 (set (mem/c:SI (reg/f:SI 191) [3 escKey+0 S4 A32])
        (reg:SI 192)) "kbd.c":166:15 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; 

(code_label 93 92 94 25 (nil) [0 uses])

(note 94 93 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 80)

(insn 95 94 96 (set (reg:SI 193)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":167:9 -1
     (nil))

(insn 96 95 97 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 193)
            (const_int 80 [0x50]))) "kbd.c":167:9 -1
     (nil))

(jump_insn 97 96 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":167:9 -1
     (nil))

;; Generating RTL for gimple basic block 19

;; escKey = 12;

(insn 99 98 100 (set (reg/f:SI 194)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":168:15 -1
     (nil))

(insn 100 99 101 (set (reg:SI 195)
        (const_int 12 [0xc])) "kbd.c":168:15 -1
     (nil))

(insn 101 100 0 (set (mem/c:SI (reg/f:SI 194) [3 escKey+0 S4 A32])
        (reg:SI 195)) "kbd.c":168:15 -1
     (nil))

;; Generating RTL for gimple basic block 20

;; 

(code_label 102 101 103 26 (nil) [0 uses])

(note 103 102 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 75)

(insn 104 103 105 (set (reg:SI 196)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":169:9 -1
     (nil))

(insn 105 104 106 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 196)
            (const_int 75 [0x4b]))) "kbd.c":169:9 -1
     (nil))

(jump_insn 106 105 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":169:9 -1
     (nil))

;; Generating RTL for gimple basic block 21

;; escKey = 13;

(insn 108 107 109 (set (reg/f:SI 197)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":170:15 -1
     (nil))

(insn 109 108 110 (set (reg:SI 198)
        (const_int 13 [0xd])) "kbd.c":170:15 -1
     (nil))

(insn 110 109 0 (set (mem/c:SI (reg/f:SI 197) [3 escKey+0 S4 A32])
        (reg:SI 198)) "kbd.c":170:15 -1
     (nil))

;; Generating RTL for gimple basic block 22

;; 

(code_label 111 110 112 27 (nil) [0 uses])

(note 112 111 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_110 == 77)

(insn 113 112 114 (set (reg:SI 199)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":171:9 -1
     (nil))

(insn 114 113 115 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 199)
            (const_int 77 [0x4d]))) "kbd.c":171:9 -1
     (nil))

(jump_insn 115 114 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":171:9 -1
     (nil))

;; Generating RTL for gimple basic block 23

;; escKey = 14;

(insn 117 116 118 (set (reg/f:SI 200)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":172:15 -1
     (nil))

(insn 118 117 119 (set (reg:SI 201)
        (const_int 14 [0xe])) "kbd.c":172:15 -1
     (nil))

(insn 119 118 0 (set (mem/c:SI (reg/f:SI 200) [3 escKey+0 S4 A32])
        (reg:SI 201)) "kbd.c":172:15 -1
     (nil))

;; Generating RTL for gimple basic block 24

;; 

(code_label 120 119 121 28 (nil) [0 uses])

(note 121 120 0 NOTE_INSN_BASIC_BLOCK)

;; escKey.8_8 = escKey;

(insn 122 121 123 (set (reg/f:SI 202)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":174:26 -1
     (nil))

(insn 123 122 0 (set (reg:SI 120 [ escKey.8_8 ])
        (mem/c:SI (reg/f:SI 202) [3 escKey+0 S4 A32])) "kbd.c":174:26 -1
     (nil))

;; _9 ={v} kp_77->head;

(insn 124 123 125 (set (reg/f:SI 203)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:16 -1
     (nil))

(insn 125 124 0 (set (reg:SI 121 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 203)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":174:16 -1
     (nil))

;; _10 = _9;

(nil)

;; _11 = _10 + 1;

(insn 126 125 0 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":174:22 -1
     (nil))

;; kp_77->head ={v} _11;

(insn 127 126 128 (set (reg/f:SI 204)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:22 -1
     (nil))

(insn 128 127 0 (set (mem/v:SI (plus:SI (reg/f:SI 204)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":174:22 -1
     (nil))

;; _12 = (char) escKey.8_8;

(insn 129 128 0 (set (reg:SI 123 [ _12 ])
        (and:SI (reg:SI 120 [ escKey.8_8 ])
            (const_int 255 [0xff]))) "kbd.c":174:26 -1
     (nil))

;; kp_77->buf[_10] ={v} _12;

(insn 130 129 131 (set (reg/f:SI 205)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:26 -1
     (nil))

(insn 131 130 132 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 205)
            (reg:SI 121 [ _9 ]))) "kbd.c":174:26 -1
     (nil))

(insn 132 131 133 (set (reg:QI 207)
        (subreg/s/v:QI (reg:SI 123 [ _12 ]) 0)) "kbd.c":174:26 -1
     (nil))

(insn 133 132 0 (set (mem/v:QI (plus:SI (reg/f:SI 206)
                (const_int 4 [0x4])) [0 kp_77->buf[_10]+0 S1 A8])
        (reg:QI 207)) "kbd.c":174:26 -1
     (nil))

;; _13 ={v} kp_77->head;

(insn 134 133 135 (set (reg/f:SI 208)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 -1
     (nil))

(insn 135 134 0 (set (reg:SI 124 [ _13 ])
        (mem/v:SI (plus:SI (reg/f:SI 208)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":175:15 -1
     (nil))

;; _14 = _13 % 128;

(insn 136 135 137 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 124 [ _13 ]))
                    (const_int 0 [0])))
            (set (reg:SI 209)
                (minus:SI (const_int 0 [0])
                    (reg:SI 124 [ _13 ])))
        ]) "kbd.c":175:15 -1
     (nil))

(insn 137 136 138 (set (reg:SI 125 [ _14 ])
        (and:SI (reg:SI 124 [ _13 ])
            (const_int 127 [0x7f]))) "kbd.c":175:15 -1
     (nil))

(insn 138 137 139 (set (reg:SI 210)
        (and:SI (reg:SI 209)
            (const_int 127 [0x7f]))) "kbd.c":175:15 -1
     (nil))

(insn 139 138 0 (set (reg:SI 125 [ _14 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 210))
            (reg:SI 125 [ _14 ]))) "kbd.c":175:15 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 124 [ _13 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_77->head ={v} _14;

(insn 140 139 141 (set (reg/f:SI 211)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 -1
     (nil))

(insn 141 140 0 (set (mem/v:SI (plus:SI (reg/f:SI 211)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":175:15 -1
     (nil))

;; _15 ={v} kp_77->data;

(insn 142 141 143 (set (reg/f:SI 212)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:8 -1
     (nil))

(insn 143 142 0 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 212)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":177:8 -1
     (nil))

;; _16 = _15 + 1;

(insn 144 143 0 (set (reg:SI 127 [ _16 ])
        (plus:SI (reg:SI 126 [ _15 ])
            (const_int 1 [0x1]))) "kbd.c":177:14 -1
     (nil))

;; kp_77->data ={v} _16;

(insn 145 144 146 (set (reg/f:SI 213)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:14 -1
     (nil))

(insn 146 145 0 (set (mem/v:SI (plus:SI (reg/f:SI 213)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 127 [ _16 ])) "kbd.c":177:14 -1
     (nil))

;; _17 ={v} kp_77->head;

(insn 147 146 148 (set (reg/f:SI 214)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:16 -1
     (nil))

(insn 148 147 0 (set (reg:SI 128 [ _17 ])
        (mem/v:SI (plus:SI (reg/f:SI 214)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":179:16 -1
     (nil))

;; _18 = _17;

(nil)

;; _19 = _18 + 1;

(insn 149 148 0 (set (reg:SI 129 [ _19 ])
        (plus:SI (reg:SI 128 [ _17 ])
            (const_int 1 [0x1]))) "kbd.c":179:22 -1
     (nil))

;; kp_77->head ={v} _19;

(insn 150 149 151 (set (reg/f:SI 215)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:22 -1
     (nil))

(insn 151 150 0 (set (mem/v:SI (plus:SI (reg/f:SI 215)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 129 [ _19 ])) "kbd.c":179:22 -1
     (nil))

;; kp_77->buf[_18] ={v} 10;

(insn 152 151 153 (set (reg/f:SI 216)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:26 -1
     (nil))

(insn 153 152 154 (set (reg/f:SI 217)
        (plus:SI (reg/f:SI 216)
            (reg:SI 128 [ _17 ]))) "kbd.c":179:26 -1
     (nil))

(insn 154 153 155 (set (reg:SI 218)
        (const_int 10 [0xa])) "kbd.c":179:26 -1
     (nil))

(insn 155 154 156 (set (reg:QI 219)
        (subreg:QI (reg:SI 218) 0)) "kbd.c":179:26 -1
     (nil))

(insn 156 155 0 (set (mem/v:QI (plus:SI (reg/f:SI 217)
                (const_int 4 [0x4])) [0 kp_77->buf[_18]+0 S1 A8])
        (reg:QI 219)) "kbd.c":179:26 -1
     (nil))

;; _20 ={v} kp_77->head;

(insn 157 156 158 (set (reg/f:SI 220)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 -1
     (nil))

(insn 158 157 0 (set (reg:SI 130 [ _20 ])
        (mem/v:SI (plus:SI (reg/f:SI 220)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":180:15 -1
     (nil))

;; _21 = _20 % 128;

(insn 159 158 160 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 130 [ _20 ]))
                    (const_int 0 [0])))
            (set (reg:SI 221)
                (minus:SI (const_int 0 [0])
                    (reg:SI 130 [ _20 ])))
        ]) "kbd.c":180:15 -1
     (nil))

(insn 160 159 161 (set (reg:SI 131 [ _21 ])
        (and:SI (reg:SI 130 [ _20 ])
            (const_int 127 [0x7f]))) "kbd.c":180:15 -1
     (nil))

(insn 161 160 162 (set (reg:SI 222)
        (and:SI (reg:SI 221)
            (const_int 127 [0x7f]))) "kbd.c":180:15 -1
     (nil))

(insn 162 161 0 (set (reg:SI 131 [ _21 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 222))
            (reg:SI 131 [ _21 ]))) "kbd.c":180:15 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 130 [ _20 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_77->head ={v} _21;

(insn 163 162 164 (set (reg/f:SI 223)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 -1
     (nil))

(insn 164 163 0 (set (mem/v:SI (plus:SI (reg/f:SI 223)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 131 [ _21 ])) "kbd.c":180:15 -1
     (nil))

;; _22 ={v} kp_77->data;

(insn 165 164 166 (set (reg/f:SI 224)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:8 -1
     (nil))

(insn 166 165 0 (set (reg:SI 132 [ _22 ])
        (mem/v:SI (plus:SI (reg/f:SI 224)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":181:8 -1
     (nil))

;; _23 = _22 + 1;

(insn 167 166 0 (set (reg:SI 133 [ _23 ])
        (plus:SI (reg:SI 132 [ _22 ])
            (const_int 1 [0x1]))) "kbd.c":181:14 -1
     (nil))

;; kp_77->data ={v} _23;

(insn 168 167 169 (set (reg/f:SI 225)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:14 -1
     (nil))

(insn 169 168 0 (set (mem/v:SI (plus:SI (reg/f:SI 225)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 133 [ _23 ])) "kbd.c":181:14 -1
     (nil))

;; _24 ={v} kp_77->room;

(insn 170 169 171 (set (reg/f:SI 226)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:20 -1
     (nil))

(insn 171 170 0 (set (reg:SI 134 [ _24 ])
        (mem/v:SI (plus:SI (reg/f:SI 226)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])) "kbd.c":181:20 -1
     (nil))

;; _25 = _24 + -1;

(insn 172 171 0 (set (reg:SI 135 [ _25 ])
        (plus:SI (reg:SI 134 [ _24 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":181:26 -1
     (nil))

;; kp_77->room ={v} _25;

(insn 173 172 174 (set (reg/f:SI 227)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:26 -1
     (nil))

(insn 174 173 0 (set (mem/v:SI (plus:SI (reg/f:SI 227)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])
        (reg:SI 135 [ _25 ])) "kbd.c":181:26 -1
     (nil))

;; _26 = &kp_77->data;

(insn 175 174 176 (set (reg:SI 228)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":184:6 -1
     (nil))

(insn 176 175 0 (set (reg/f:SI 136 [ _26 ])
        (plus:SI (reg:SI 228)
            (const_int 140 [0x8c]))) "kbd.c":184:6 -1
     (nil))

;; kwakeup (_26);

(insn 177 176 178 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ _26 ])) "kbd.c":184:6 -1
     (nil))

(call_insn 178 177 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":184:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; esc = 0;

(insn 179 178 180 (set (reg/f:SI 229)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":186:10 -1
     (nil))

(insn 180 179 181 (set (reg:SI 230)
        (const_int 0 [0])) "kbd.c":186:10 -1
     (nil))

(insn 181 180 0 (set (mem/c:SI (reg/f:SI 229) [3 esc+0 S4 A32])
        (reg:SI 230)) "kbd.c":186:10 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 25

;; 

(code_label 184 183 185 20 (nil) [0 uses])

(note 185 184 0 NOTE_INSN_BASIC_BLOCK)

;; code.9_27 = (signed char) code_79;

(insn 186 185 0 (set (reg:SI 137 [ code.9_27 ])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":190:7 -1
     (nil))

;; if (code.9_27 < 0)

(insn 191 186 192 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137 [ code.9_27 ])
            (const_int 0 [0]))) "kbd.c":190:6 -1
     (nil))

(jump_insn 192 191 0 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":190:6 -1
     (nil))

;; Generating RTL for gimple basic block 26

;; code_106 = code_79 & 127;

(insn 194 193 195 (set (reg:QI 233)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":192:10 -1
     (nil))

(insn 195 194 196 (set (reg:SI 234)
        (and:SI (subreg:SI (reg:QI 233) 0)
            (const_int 127 [0x7f]))) "kbd.c":192:10 -1
     (nil))

(insn 196 195 197 (set (reg:QI 235)
        (subreg:QI (reg:SI 234) 0)) "kbd.c":192:10 -1
     (nil))

(insn 197 196 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 235)) "kbd.c":192:10 -1
     (nil))

;; if (code_106 == 42)

(insn 198 197 199 (set (reg:SI 236)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:8 -1
     (nil))

(insn 199 198 200 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 236)
            (const_int 42 [0x2a]))) "kbd.c":193:8 -1
     (nil))

(jump_insn 200 199 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":193:8 -1
     (nil))

;; Generating RTL for gimple basic block 27

;; if (code_106 == 54)

(insn 202 201 203 (set (reg:SI 237)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:24 -1
     (nil))

(insn 203 202 204 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 237)
            (const_int 54 [0x36]))) "kbd.c":193:24 -1
     (nil))

(jump_insn 204 203 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":193:24 -1
     (nil))

;; Generating RTL for gimple basic block 28

;; 

(code_label 205 204 206 30 (nil) [0 uses])

(note 206 205 0 NOTE_INSN_BASIC_BLOCK)

;; shift = 0;

(insn 207 206 208 (set (reg/f:SI 238)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":194:13 -1
     (nil))

(insn 208 207 209 (set (reg:SI 239)
        (const_int 0 [0])) "kbd.c":194:13 -1
     (nil))

(insn 209 208 0 (set (mem/c:SI (reg/f:SI 238) [3 shift+0 S4 A32])
        (reg:SI 239)) "kbd.c":194:13 -1
     (nil))

;; Generating RTL for gimple basic block 29

;; 

(code_label 210 209 211 31 (nil) [0 uses])

(note 211 210 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_106 == 29)

(insn 212 211 213 (set (reg:SI 240)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":195:8 -1
     (nil))

(insn 213 212 214 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 240)
            (const_int 29 [0x1d]))) "kbd.c":195:8 -1
     (nil))

(jump_insn 214 213 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":195:8 -1
     (nil))

;; Generating RTL for gimple basic block 30

;; control = 0;

(insn 216 215 217 (set (reg/f:SI 241)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":196:15 -1
     (nil))

(insn 217 216 218 (set (reg:SI 242)
        (const_int 0 [0])) "kbd.c":196:15 -1
     (nil))

(insn 218 217 0 (set (mem/c:SI (reg/f:SI 241) [3 control+0 S4 A32])
        (reg:SI 242)) "kbd.c":196:15 -1
     (nil))

;; Generating RTL for gimple basic block 31

;; 

(code_label 219 218 220 32 (nil) [0 uses])

(note 220 219 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_106 == 56)

(insn 221 220 222 (set (reg:SI 243)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":197:8 -1
     (nil))

(insn 222 221 223 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 243)
            (const_int 56 [0x38]))) "kbd.c":197:8 -1
     (nil))

(jump_insn 223 222 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":197:8 -1
     (nil))

;; Generating RTL for gimple basic block 32

;; alt = 0;

(insn 225 224 226 (set (reg/f:SI 244)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":198:11 -1
     (nil))

(insn 226 225 227 (set (reg:SI 245)
        (const_int 0 [0])) "kbd.c":198:11 -1
     (nil))

(insn 227 226 0 (set (mem/c:SI (reg/f:SI 244) [3 alt+0 S4 A32])
        (reg:SI 245)) "kbd.c":198:11 -1
     (nil))

;; Generating RTL for gimple basic block 33

;; 

(code_label 228 227 229 33 (nil) [0 uses])

(note 229 228 0 NOTE_INSN_BASIC_BLOCK)

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 34

;; 

(code_label 232 231 233 29 (nil) [0 uses])

(note 233 232 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 42)

(insn 234 233 235 (set (reg:SI 246)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:6 -1
     (nil))

(insn 235 234 236 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 246)
            (const_int 42 [0x2a]))) "kbd.c":203:6 -1
     (nil))

(jump_insn 236 235 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":203:6 -1
     (nil))

;; Generating RTL for gimple basic block 35

;; if (code_79 == 54)

(insn 238 237 239 (set (reg:SI 247)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:22 -1
     (nil))

(insn 239 238 240 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 247)
            (const_int 54 [0x36]))) "kbd.c":203:22 -1
     (nil))

(jump_insn 240 239 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":203:22 -1
     (nil))

;; Generating RTL for gimple basic block 36

;; 

(code_label 241 240 242 34 (nil) [0 uses])

(note 242 241 0 NOTE_INSN_BASIC_BLOCK)

;; shift = 1;

(insn 243 242 244 (set (reg/f:SI 248)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":204:11 -1
     (nil))

(insn 244 243 245 (set (reg:SI 249)
        (const_int 1 [0x1])) "kbd.c":204:11 -1
     (nil))

(insn 245 244 0 (set (mem/c:SI (reg/f:SI 248) [3 shift+0 S4 A32])
        (reg:SI 249)) "kbd.c":204:11 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 37

;; 

(code_label 248 247 249 35 (nil) [0 uses])

(note 249 248 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 56)

(insn 250 249 251 (set (reg:SI 250)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":207:6 -1
     (nil))

(insn 251 250 252 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 250)
            (const_int 56 [0x38]))) "kbd.c":207:6 -1
     (nil))

(jump_insn 252 251 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":207:6 -1
     (nil))

;; Generating RTL for gimple basic block 38

;; alt = 1;

(insn 254 253 255 (set (reg/f:SI 251)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":208:9 -1
     (nil))

(insn 255 254 256 (set (reg:SI 252)
        (const_int 1 [0x1])) "kbd.c":208:9 -1
     (nil))

(insn 256 255 0 (set (mem/c:SI (reg/f:SI 251) [3 alt+0 S4 A32])
        (reg:SI 252)) "kbd.c":208:9 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 39

;; 

(code_label 259 258 260 36 (nil) [0 uses])

(note 260 259 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 29)

(insn 261 260 262 (set (reg:SI 253)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":211:6 -1
     (nil))

(insn 262 261 263 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 253)
            (const_int 29 [0x1d]))) "kbd.c":211:6 -1
     (nil))

(jump_insn 263 262 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":211:6 -1
     (nil))

;; Generating RTL for gimple basic block 40

;; control = 1;

(insn 265 264 266 (set (reg/f:SI 254)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":212:13 -1
     (nil))

(insn 266 265 267 (set (reg:SI 255)
        (const_int 1 [0x1])) "kbd.c":212:13 -1
     (nil))

(insn 267 266 0 (set (mem/c:SI (reg/f:SI 254) [3 control+0 S4 A32])
        (reg:SI 255)) "kbd.c":212:13 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 41

;; 

(code_label 270 269 271 37 (nil) [0 uses])

(note 271 270 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 58)

(insn 272 271 273 (set (reg:SI 256)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":216:6 -1
     (nil))

(insn 273 272 274 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 256)
            (const_int 58 [0x3a]))) "kbd.c":216:6 -1
     (nil))

(jump_insn 274 273 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":216:6 -1
     (nil))

;; Generating RTL for gimple basic block 42

;; capslock.10_28 = capslock;

(insn 276 275 277 (set (reg/f:SI 257)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:18 -1
     (nil))

(insn 277 276 0 (set (reg:SI 138 [ capslock.10_28 ])
        (mem/c:SI (reg/f:SI 257) [3 capslock+0 S4 A32])) "kbd.c":217:18 -1
     (nil))

;; _29 = 1 - capslock.10_28;

(insn 278 277 0 (set (reg:SI 139 [ _29 ])
        (minus:SI (const_int 1 [0x1])
            (reg:SI 138 [ capslock.10_28 ]))) "kbd.c":217:18 -1
     (nil))

;; capslock = _29;

(insn 279 278 280 (set (reg/f:SI 258)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:14 -1
     (nil))

(insn 280 279 0 (set (mem/c:SI (reg/f:SI 258) [3 capslock+0 S4 A32])
        (reg:SI 139 [ _29 ])) "kbd.c":217:14 -1
     (nil))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 43

;; 

(code_label 283 282 284 38 (nil) [0 uses])

(note 284 283 0 NOTE_INSN_BASIC_BLOCK)

;; control.11_30 = control;

(insn 285 284 286 (set (reg/f:SI 259)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":221:7 -1
     (nil))

(insn 286 285 0 (set (reg:SI 140 [ control.11_30 ])
        (mem/c:SI (reg/f:SI 259) [3 control+0 S4 A32])) "kbd.c":221:7 -1
     (nil))

;; if (control.11_30 != 0)

(insn 287 286 288 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140 [ control.11_30 ])
            (const_int 0 [0]))) "kbd.c":221:6 -1
     (nil))

(jump_insn 288 287 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":221:6 -1
     (nil))

;; Generating RTL for gimple basic block 44

;; alt.12_31 = alt;

(insn 290 289 291 (set (reg/f:SI 260)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":221:15 -1
     (nil))

(insn 291 290 0 (set (reg:SI 141 [ alt.12_31 ])
        (mem/c:SI (reg/f:SI 260) [3 alt+0 S4 A32])) "kbd.c":221:15 -1
     (nil))

;; if (alt.12_31 != 0)

(insn 292 291 293 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 141 [ alt.12_31 ])
            (const_int 0 [0]))) "kbd.c":221:15 -1
     (nil))

(jump_insn 293 292 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":221:15 -1
     (nil))

;; Generating RTL for gimple basic block 45

;; if (code_79 == 83)

(insn 295 294 296 (set (reg:SI 261)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":221:22 -1
     (nil))

(insn 296 295 297 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 261)
            (const_int 83 [0x53]))) "kbd.c":221:22 -1
     (nil))

(jump_insn 297 296 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":221:22 -1
     (nil))

;; Generating RTL for gimple basic block 46

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 47

;; 

(code_label 301 300 302 39 (nil) [0 uses])

(note 302 301 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 59)

(insn 303 302 304 (set (reg:SI 262)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":226:6 -1
     (nil))

(insn 304 303 305 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 262)
            (const_int 59 [0x3b]))) "kbd.c":226:6 -1
     (nil))

(jump_insn 305 304 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":226:6 -1
     (nil))

;; Generating RTL for gimple basic block 48

;; doF1 ();

(call_insn 307 306 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF1") [flags 0x3]  <function_decl 0x7fcdc0b13c00 doF1>) [0 doF1 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":227:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 49

;; 

(code_label 310 309 311 40 (nil) [0 uses])

(note 311 310 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 60)

(insn 312 311 313 (set (reg:SI 263)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":229:6 -1
     (nil))

(insn 313 312 314 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 263)
            (const_int 60 [0x3c]))) "kbd.c":229:6 -1
     (nil))

(jump_insn 314 313 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":229:6 -1
     (nil))

;; Generating RTL for gimple basic block 50

;; doF2 ();

(call_insn 316 315 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF2") [flags 0x3]  <function_decl 0x7fcdc0b13f00 doF2>) [0 doF2 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":230:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 51

;; 

(code_label 319 318 320 41 (nil) [0 uses])

(note 320 319 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 61)

(insn 321 320 322 (set (reg:SI 264)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":232:6 -1
     (nil))

(insn 322 321 323 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 264)
            (const_int 61 [0x3d]))) "kbd.c":232:6 -1
     (nil))

(jump_insn 323 322 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":232:6 -1
     (nil))

;; Generating RTL for gimple basic block 52

;; doF3 ();

(call_insn 325 324 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF3") [flags 0x3]  <function_decl 0x7fcdc0b26100 doF3>) [0 doF3 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":233:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 53

;; 

(code_label 328 327 329 42 (nil) [0 uses])

(note 329 328 0 NOTE_INSN_BASIC_BLOCK)

;; if (code_79 == 62)

(insn 330 329 331 (set (reg:SI 265)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":235:6 -1
     (nil))

(insn 331 330 332 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 265)
            (const_int 62 [0x3e]))) "kbd.c":235:6 -1
     (nil))

(jump_insn 332 331 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":235:6 -1
     (nil))

;; Generating RTL for gimple basic block 54

;; doF4 ();

(call_insn 334 333 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF4") [flags 0x3]  <function_decl 0x7fcdc0b26300 doF4>) [0 doF4 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":236:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 55

;; 

(code_label 337 336 338 43 (nil) [0 uses])

(note 338 337 0 NOTE_INSN_BASIC_BLOCK)

;; shift.14_32 = shift;

(insn 339 338 340 (set (reg/f:SI 266)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":239:14 -1
     (nil))

(insn 340 339 0 (set (reg:SI 142 [ shift.14_32 ])
        (mem/c:SI (reg/f:SI 266) [3 shift+0 S4 A32])) "kbd.c":239:14 -1
     (nil))

;; if (shift.14_32 != 0)

(insn 341 340 342 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 142 [ shift.14_32 ])
            (const_int 0 [0]))) "kbd.c":239:5 -1
     (nil))

(jump_insn 342 341 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":239:5 -1
     (nil))

;; Generating RTL for gimple basic block 56

;; _33 = (int) code_79;

(insn 344 343 0 (set (reg:SI 143 [ _33 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:18 -1
     (nil))

;; iftmp.13_82 = sh[_33];

(insn 345 344 346 (set (reg/f:SI 267)
        (symbol_ref:SI ("sh") [flags 0x2]  <var_decl 0x7fcdc0b1a090 sh>)) "kbd.c":239:5 -1
     (nil))

(insn 346 345 0 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 267)
                    (reg:SI 143 [ _33 ])) [0 sh[_33]+0 S1 A8]))) "kbd.c":239:5 -1
     (nil))

;; Generating RTL for gimple basic block 57

;; 

(code_label 349 348 350 44 (nil) [0 uses])

(note 350 349 0 NOTE_INSN_BASIC_BLOCK)

;; _34 = (int) code_79;

(insn 351 350 0 (set (reg:SI 144 [ _34 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:31 -1
     (nil))

;; iftmp.13_81 = unsh[_34];

(insn 352 351 353 (set (reg/f:SI 268)
        (symbol_ref:SI ("unsh") [flags 0x2]  <var_decl 0x7fcdc0b165a0 unsh>)) "kbd.c":239:5 -1
     (nil))

(insn 353 352 0 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 268)
                    (reg:SI 144 [ _34 ])) [0 unsh[_34]+0 S1 A8]))) "kbd.c":239:5 -1
     (nil))

;; Generating RTL for gimple basic block 58

;; 

(code_label 354 353 355 45 (nil) [0 uses])

(note 355 354 0 NOTE_INSN_BASIC_BLOCK)

;; c_83 = iftmp.13_64;

(insn 356 355 357 (set (reg:QI 269)
        (subreg/s/v:QI (reg:SI 169 [ iftmp.13_64 ]) 0)) "kbd.c":239:5 -1
     (nil))

(insn 357 356 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 269)) "kbd.c":239:5 -1
     (nil))

;; capslock.15_35 = capslock;

(insn 358 357 359 (set (reg/f:SI 270)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":241:7 -1
     (nil))

(insn 359 358 0 (set (reg:SI 145 [ capslock.15_35 ])
        (mem/c:SI (reg/f:SI 270) [3 capslock+0 S4 A32])) "kbd.c":241:7 -1
     (nil))

;; if (capslock.15_35 != 0)

(insn 360 359 361 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145 [ capslock.15_35 ])
            (const_int 0 [0]))) "kbd.c":241:6 -1
     (nil))

(jump_insn 361 360 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":241:6 -1
     (nil))

;; Generating RTL for gimple basic block 59

;; if (c_83 > 64)

(insn 367 362 368 (set (reg:SI 273)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:8 -1
     (nil))

(insn 368 367 369 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 273)
            (const_int 64 [0x40]))) "kbd.c":242:8 -1
     (nil))

(jump_insn 369 368 0 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":242:8 -1
     (nil))

;; Generating RTL for gimple basic block 60

;; if (c_83 <= 90)

(insn 375 370 376 (set (reg:SI 276)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:18 -1
     (nil))

(insn 376 375 377 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 276)
            (const_int 90 [0x5a]))) "kbd.c":242:18 -1
     (nil))

(jump_insn 377 376 0 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":242:18 -1
     (nil))

;; Generating RTL for gimple basic block 61

;; c_84 = c_83 + 32;

(insn 379 378 380 (set (reg:QI 277)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":243:4 -1
     (nil))

(insn 380 379 381 (set (reg:SI 278)
        (plus:SI (subreg:SI (reg:QI 277) 0)
            (const_int 32 [0x20]))) "kbd.c":243:4 -1
     (nil))

(insn 381 380 382 (set (reg:QI 279)
        (subreg:QI (reg:SI 278) 0)) "kbd.c":243:4 -1
     (nil))

(insn 382 381 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 279)) "kbd.c":243:4 -1
     (nil))

;; Generating RTL for gimple basic block 62

;; 

(code_label 385 384 386 47 (nil) [0 uses])

(note 386 385 0 NOTE_INSN_BASIC_BLOCK)

;; if (c_83 > 96)

(insn 391 386 392 (set (reg:SI 282)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:13 -1
     (nil))

(insn 392 391 393 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 282)
            (const_int 96 [0x60]))) "kbd.c":244:13 -1
     (nil))

(jump_insn 393 392 0 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":244:13 -1
     (nil))

;; Generating RTL for gimple basic block 63

;; if (c_83 <= 122)

(insn 399 394 400 (set (reg:SI 285)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:23 -1
     (nil))

(insn 400 399 401 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 285)
            (const_int 122 [0x7a]))) "kbd.c":244:23 -1
     (nil))

(jump_insn 401 400 0 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":244:23 -1
     (nil))

;; Generating RTL for gimple basic block 64

;; c_85 = c_83 + 224;

(insn 403 402 404 (set (reg:QI 286)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":245:4 -1
     (nil))

(insn 404 403 405 (set (reg:SI 287)
        (plus:SI (subreg:SI (reg:QI 286) 0)
            (const_int -32 [0xffffffffffffffe0]))) "kbd.c":245:4 -1
     (nil))

(insn 405 404 406 (set (reg:QI 288)
        (subreg:QI (reg:SI 287) 0)) "kbd.c":245:4 -1
     (nil))

(insn 406 405 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 288)) "kbd.c":245:4 -1
     (nil))

;; Generating RTL for gimple basic block 65

;; 

(code_label 407 406 408 46 (nil) [0 uses])

(note 408 407 0 NOTE_INSN_BASIC_BLOCK)

;; control.16_36 = control;

(insn 409 408 410 (set (reg/f:SI 289)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":248:7 -1
     (nil))

(insn 410 409 0 (set (reg:SI 146 [ control.16_36 ])
        (mem/c:SI (reg/f:SI 289) [3 control+0 S4 A32])) "kbd.c":248:7 -1
     (nil))

;; if (control.16_36 != 0)

(insn 411 410 412 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 146 [ control.16_36 ])
            (const_int 0 [0]))) "kbd.c":248:6 -1
     (nil))

(jump_insn 412 411 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":248:6 -1
     (nil))

;; Generating RTL for gimple basic block 66

;; if (c_60 == 99)

(insn 414 413 415 (set (reg:SI 290)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":248:15 -1
     (nil))

(insn 415 414 416 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 290)
            (const_int 99 [0x63]))) "kbd.c":248:15 -1
     (nil))

(jump_insn 416 415 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":248:15 -1
     (nil))

;; Generating RTL for gimple basic block 67

;; i_86 = 1;

(insn 418 417 419 (set (reg:SI 291)
        (const_int 1 [0x1])) "kbd.c":250:11 -1
     (nil))

(insn 419 418 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 291)) "kbd.c":250:11 -1
     (nil))

;; Generating RTL for gimple basic block 68

;; _37 = proc[i_63].status;

(insn 423 422 424 (set (reg/f:SI 292)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:18 -1
     (nil))

(insn 424 423 425 (set (reg:SI 293)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:18 -1
     (nil))

(insn 425 424 426 (set (reg:SI 294)
        (reg:SI 293)) "kbd.c":251:18 -1
     (nil))

(insn 426 425 427 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 6 [0x6]))) "kbd.c":251:18 -1
     (nil))

(insn 427 426 428 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 65 [0x41]))
        (nil)))

(insn 428 427 429 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 1 [0x1]))) "kbd.c":251:18 -1
     (nil))

(insn 429 428 430 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 131 [0x83]))
        (nil)))

(insn 430 429 431 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 3 [0x3]))) "kbd.c":251:18 -1
     (nil))

(insn 431 430 432 (set (reg:SI 294)
        (minus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 1047 [0x417]))
        (nil)))

(insn 432 431 433 (set (reg:SI 295)
        (ashift:SI (reg:SI 294)
            (const_int 2 [0x2]))) "kbd.c":251:18 -1
     (nil))

(insn 433 432 434 (set (reg:SI 294)
        (reg:SI 295)) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 434 433 435 (set (reg:SI 296)
        (plus:SI (reg/f:SI 292)
            (reg:SI 294))) "kbd.c":251:18 -1
     (nil))

(insn 435 434 436 (set (reg/f:SI 297)
        (plus:SI (reg:SI 296)
            (const_int 28 [0x1c]))) "kbd.c":251:18 -1
     (nil))

(insn 436 435 0 (set (reg:SI 147 [ _37 ])
        (mem:SI (reg/f:SI 297) [3 proc[i_63].status+0 S4 A32])) "kbd.c":251:18 -1
     (nil))

;; if (_37 != 0)

(insn 437 436 438 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 147 [ _37 ])
            (const_int 0 [0]))) "kbd.c":251:10 -1
     (nil))

(jump_insn 438 437 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":251:10 -1
     (nil))

;; Generating RTL for gimple basic block 69

;; _38 = proc[i_63].res;

(insn 440 439 441 (set (reg/f:SI 298)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:51 -1
     (nil))

(insn 441 440 442 (set (reg:SI 299)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:51 -1
     (nil))

(insn 442 441 443 (set (reg:SI 300)
        (reg:SI 299)) "kbd.c":251:51 -1
     (nil))

(insn 443 442 444 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 6 [0x6]))) "kbd.c":251:51 -1
     (nil))

(insn 444 443 445 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 65 [0x41]))
        (nil)))

(insn 445 444 446 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 1 [0x1]))) "kbd.c":251:51 -1
     (nil))

(insn 446 445 447 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 131 [0x83]))
        (nil)))

(insn 447 446 448 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 3 [0x3]))) "kbd.c":251:51 -1
     (nil))

(insn 448 447 449 (set (reg:SI 300)
        (minus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 1047 [0x417]))
        (nil)))

(insn 449 448 450 (set (reg:SI 301)
        (ashift:SI (reg:SI 300)
            (const_int 2 [0x2]))) "kbd.c":251:51 -1
     (nil))

(insn 450 449 451 (set (reg:SI 300)
        (reg:SI 301)) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 451 450 452 (set (reg:SI 302)
        (plus:SI (reg/f:SI 298)
            (reg:SI 300))) "kbd.c":251:51 -1
     (nil))

(insn 452 451 453 (set (reg/f:SI 303)
        (plus:SI (reg:SI 302)
            (const_int 84 [0x54]))) "kbd.c":251:51 -1
     (nil))

(insn 453 452 0 (set (reg/f:SI 148 [ _38 ])
        (mem/f:SI (reg/f:SI 303) [9 proc[i_63].res+0 S4 A32])) "kbd.c":251:51 -1
     (nil))

;; _39 = &_38->tty;

(insn 454 453 0 (set (reg/f:SI 149 [ _39 ])
        (plus:SI (reg/f:SI 148 [ _38 ])
            (const_int 60 [0x3c]))) "kbd.c":251:55 -1
     (nil))

;; _40 = strcmp (_39, "/dev/tty0");

(insn 455 454 456 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":251:37 -1
     (nil))

(insn 456 455 457 (set (reg:SI 0 r0)
        (reg/f:SI 149 [ _39 ])) "kbd.c":251:37 -1
     (nil))

(call_insn/i 457 456 458 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":251:37 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

(insn 458 457 0 (set (reg:SI 150 [ _40 ])
        (reg:SI 0 r0)) "kbd.c":251:37 -1
     (nil))

;; if (_40 == 0)

(insn 459 458 460 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 150 [ _40 ])
            (const_int 0 [0]))) "kbd.c":251:34 -1
     (nil))

(jump_insn 460 459 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":251:34 -1
     (nil))

;; Generating RTL for gimple basic block 70

;; _41 = proc[i_63].res;

(insn 462 461 463 (set (reg/f:SI 304)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 -1
     (nil))

(insn 463 462 464 (set (reg:SI 305)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 -1
     (nil))

(insn 464 463 465 (set (reg:SI 306)
        (reg:SI 305)) "kbd.c":252:9 -1
     (nil))

(insn 465 464 466 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 6 [0x6]))) "kbd.c":252:9 -1
     (nil))

(insn 466 465 467 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 65 [0x41]))
        (nil)))

(insn 467 466 468 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 1 [0x1]))) "kbd.c":252:9 -1
     (nil))

(insn 468 467 469 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 131 [0x83]))
        (nil)))

(insn 469 468 470 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 3 [0x3]))) "kbd.c":252:9 -1
     (nil))

(insn 470 469 471 (set (reg:SI 306)
        (minus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 1047 [0x417]))
        (nil)))

(insn 471 470 472 (set (reg:SI 307)
        (ashift:SI (reg:SI 306)
            (const_int 2 [0x2]))) "kbd.c":252:9 -1
     (nil))

(insn 472 471 473 (set (reg:SI 306)
        (reg:SI 307)) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 473 472 474 (set (reg:SI 308)
        (plus:SI (reg/f:SI 304)
            (reg:SI 306))) "kbd.c":252:9 -1
     (nil))

(insn 474 473 475 (set (reg/f:SI 309)
        (plus:SI (reg:SI 308)
            (const_int 84 [0x54]))) "kbd.c":252:9 -1
     (nil))

(insn 475 474 0 (set (reg/f:SI 151 [ _41 ])
        (mem/f:SI (reg/f:SI 309) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 -1
     (nil))

;; _42 = _41->signal;

(insn 476 475 0 (set (reg:SI 152 [ _42 ])
        (mem:SI (plus:SI (reg/f:SI 151 [ _41 ])
                (const_int 92 [0x5c])) [3 _41->signal+0 S4 A32])) "kbd.c":252:22 -1
     (nil))

;; _43 = proc[i_63].res;

(insn 477 476 478 (set (reg/f:SI 310)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 -1
     (nil))

(insn 478 477 479 (set (reg:SI 311)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 -1
     (nil))

(insn 479 478 480 (set (reg:SI 312)
        (reg:SI 311)) "kbd.c":252:9 -1
     (nil))

(insn 480 479 481 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 6 [0x6]))) "kbd.c":252:9 -1
     (nil))

(insn 481 480 482 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 65 [0x41]))
        (nil)))

(insn 482 481 483 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 1 [0x1]))) "kbd.c":252:9 -1
     (nil))

(insn 483 482 484 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 131 [0x83]))
        (nil)))

(insn 484 483 485 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 3 [0x3]))) "kbd.c":252:9 -1
     (nil))

(insn 485 484 486 (set (reg:SI 312)
        (minus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 1047 [0x417]))
        (nil)))

(insn 486 485 487 (set (reg:SI 313)
        (ashift:SI (reg:SI 312)
            (const_int 2 [0x2]))) "kbd.c":252:9 -1
     (nil))

(insn 487 486 488 (set (reg:SI 312)
        (reg:SI 313)) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 488 487 489 (set (reg:SI 314)
        (plus:SI (reg/f:SI 310)
            (reg:SI 312))) "kbd.c":252:9 -1
     (nil))

(insn 489 488 490 (set (reg/f:SI 315)
        (plus:SI (reg:SI 314)
            (const_int 84 [0x54]))) "kbd.c":252:9 -1
     (nil))

(insn 490 489 0 (set (reg/f:SI 153 [ _43 ])
        (mem/f:SI (reg/f:SI 315) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 -1
     (nil))

;; _44 = _42 | 4;

(insn 491 490 0 (set (reg:SI 154 [ _44 ])
        (ior:SI (reg:SI 152 [ _42 ])
            (const_int 4 [0x4]))) "kbd.c":252:22 -1
     (nil))

;; _43->signal = _44;

(insn 492 491 0 (set (mem:SI (plus:SI (reg/f:SI 153 [ _43 ])
                (const_int 92 [0x5c])) [3 _43->signal+0 S4 A32])
        (reg:SI 154 [ _44 ])) "kbd.c":252:22 -1
     (nil))

;; Generating RTL for gimple basic block 71

;; 

(code_label 493 492 494 50 (nil) [0 uses])

(note 494 493 0 NOTE_INSN_BASIC_BLOCK)

;; i_89 = i_63 + 1;

(insn 495 494 496 (set (reg:SI 317)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:25 -1
     (nil))

(insn 496 495 497 (set (reg:SI 316)
        (plus:SI (reg:SI 317)
            (const_int 1 [0x1]))) "kbd.c":250:25 -1
     (nil))

(insn 497 496 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 316)) "kbd.c":250:25 -1
     (nil))

;; Generating RTL for gimple basic block 72

;; 

(code_label 498 497 499 49 (nil) [0 uses])

(note 499 498 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_63 <= 63)

(insn 503 499 504 (set (reg:SI 318)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:16 -1
     (nil))

(insn 504 503 505 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 318)
            (const_int 63 [0x3f]))) "kbd.c":250:16 -1
     (nil))

(jump_insn 505 504 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 500)
            (pc))) "kbd.c":250:16 -1
     (nil))

;; Generating RTL for gimple basic block 73

;; c_87 = 10;

(insn 507 506 508 (set (reg:SI 319)
        (const_int 10 [0xa])) "kbd.c":255:7 -1
     (nil))

(insn 508 507 509 (set (reg:QI 320)
        (subreg:QI (reg:SI 319) 0)) "kbd.c":255:7 -1
     (nil))

(insn 509 508 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 320)) "kbd.c":255:7 -1
     (nil))

;; Generating RTL for gimple basic block 74

;; 

(code_label 510 509 511 48 (nil) [0 uses])

(note 511 510 0 NOTE_INSN_BASIC_BLOCK)

;; control.17_45 = control;

(insn 512 511 513 (set (reg/f:SI 321)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":258:7 -1
     (nil))

(insn 513 512 0 (set (reg:SI 155 [ control.17_45 ])
        (mem/c:SI (reg/f:SI 321) [3 control+0 S4 A32])) "kbd.c":258:7 -1
     (nil))

;; if (control.17_45 != 0)

(insn 514 513 515 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155 [ control.17_45 ])
            (const_int 0 [0]))) "kbd.c":258:6 -1
     (nil))

(jump_insn 515 514 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":258:6 -1
     (nil))

;; Generating RTL for gimple basic block 75

;; if (c_61 == 100)

(insn 517 516 518 (set (reg:SI 322)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:15 -1
     (nil))

(insn 518 517 519 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 322)
            (const_int 100 [0x64]))) "kbd.c":258:15 -1
     (nil))

(jump_insn 519 518 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":258:15 -1
     (nil))

;; Generating RTL for gimple basic block 76

;; if (c_61 == 68)

(insn 521 520 522 (set (reg:SI 323)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:25 -1
     (nil))

(insn 522 521 523 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 323)
            (const_int 68 [0x44]))) "kbd.c":258:25 -1
     (nil))

(jump_insn 523 522 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":258:25 -1
     (nil))

;; Generating RTL for gimple basic block 77

;; 

(code_label 524 523 525 53 (nil) [0 uses])

(note 525 524 0 NOTE_INSN_BASIC_BLOCK)

;; c_90 = 4;

(insn 526 525 527 (set (reg:SI 324)
        (const_int 4 [0x4])) "kbd.c":259:7 -1
     (nil))

(insn 527 526 528 (set (reg:QI 325)
        (subreg:QI (reg:SI 324) 0)) "kbd.c":259:7 -1
     (nil))

(insn 528 527 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 325)) "kbd.c":259:7 -1
     (nil))

;; Generating RTL for gimple basic block 78

;; 

(code_label 529 528 530 52 (nil) [0 uses])

(note 530 529 0 NOTE_INSN_BASIC_BLOCK)

;; _46 ={v} kp_77->data;

(insn 531 530 532 (set (reg/f:SI 326)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":264:9 -1
     (nil))

(insn 532 531 0 (set (reg:SI 156 [ _46 ])
        (mem/v:SI (plus:SI (reg/f:SI 326)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":264:9 -1
     (nil))

;; if (_46 == 128)

(insn 533 532 534 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 156 [ _46 ])
            (const_int 128 [0x80]))) "kbd.c":264:6 -1
     (nil))

(jump_insn 534 533 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":264:6 -1
     (nil))

;; Generating RTL for gimple basic block 79

;; // predicted unlikely by goto predictor.

(nil)

;; Generating RTL for gimple basic block 80

;; 

(code_label 538 537 539 54 (nil) [0 uses])

(note 539 538 0 NOTE_INSN_BASIC_BLOCK)

;; _47 ={v} kp_77->head;

(insn 540 539 541 (set (reg/f:SI 327)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:13 -1
     (nil))

(insn 541 540 0 (set (reg:SI 157 [ _47 ])
        (mem/v:SI (plus:SI (reg/f:SI 327)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":267:13 -1
     (nil))

;; _48 = _47;

(nil)

;; _49 = _48 + 1;

(insn 542 541 0 (set (reg:SI 158 [ _49 ])
        (plus:SI (reg:SI 157 [ _47 ])
            (const_int 1 [0x1]))) "kbd.c":267:19 -1
     (nil))

;; kp_77->head ={v} _49;

(insn 543 542 544 (set (reg/f:SI 328)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:19 -1
     (nil))

(insn 544 543 0 (set (mem/v:SI (plus:SI (reg/f:SI 328)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 158 [ _49 ])) "kbd.c":267:19 -1
     (nil))

;; kp_77->buf[_48] ={v} c_62;

(insn 545 544 546 (set (reg/f:SI 329)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:23 -1
     (nil))

(insn 546 545 547 (set (reg/f:SI 330)
        (plus:SI (reg/f:SI 329)
            (reg:SI 157 [ _47 ]))) "kbd.c":267:23 -1
     (nil))

(insn 547 546 548 (set (reg:QI 331)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":267:23 -1
     (nil))

(insn 548 547 0 (set (mem/v:QI (plus:SI (reg/f:SI 330)
                (const_int 4 [0x4])) [0 kp_77->buf[_48]+0 S1 A8])
        (reg:QI 331)) "kbd.c":267:23 -1
     (nil))

;; _50 ={v} kp_77->head;

(insn 549 548 550 (set (reg/f:SI 332)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 -1
     (nil))

(insn 550 549 0 (set (reg:SI 159 [ _50 ])
        (mem/v:SI (plus:SI (reg/f:SI 332)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":268:12 -1
     (nil))

;; _51 = _50 % 128;

(insn 551 550 552 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 159 [ _50 ]))
                    (const_int 0 [0])))
            (set (reg:SI 333)
                (minus:SI (const_int 0 [0])
                    (reg:SI 159 [ _50 ])))
        ]) "kbd.c":268:12 -1
     (nil))

(insn 552 551 553 (set (reg:SI 160 [ _51 ])
        (and:SI (reg:SI 159 [ _50 ])
            (const_int 127 [0x7f]))) "kbd.c":268:12 -1
     (nil))

(insn 553 552 554 (set (reg:SI 334)
        (and:SI (reg:SI 333)
            (const_int 127 [0x7f]))) "kbd.c":268:12 -1
     (nil))

(insn 554 553 0 (set (reg:SI 160 [ _51 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 334))
            (reg:SI 160 [ _51 ]))) "kbd.c":268:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 159 [ _50 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_77->head ={v} _51;

(insn 555 554 556 (set (reg/f:SI 335)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 -1
     (nil))

(insn 556 555 0 (set (mem/v:SI (plus:SI (reg/f:SI 335)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 160 [ _51 ])) "kbd.c":268:12 -1
     (nil))

;; _52 ={v} kp_77->data;

(insn 557 556 558 (set (reg/f:SI 336)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:5 -1
     (nil))

(insn 558 557 0 (set (reg:SI 161 [ _52 ])
        (mem/v:SI (plus:SI (reg/f:SI 336)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":270:5 -1
     (nil))

;; _53 = _52 + 1;

(insn 559 558 0 (set (reg:SI 162 [ _53 ])
        (plus:SI (reg:SI 161 [ _52 ])
            (const_int 1 [0x1]))) "kbd.c":270:11 -1
     (nil))

;; kp_77->data ={v} _53;

(insn 560 559 561 (set (reg/f:SI 337)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:11 -1
     (nil))

(insn 561 560 0 (set (mem/v:SI (plus:SI (reg/f:SI 337)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 162 [ _53 ])) "kbd.c":270:11 -1
     (nil))

;; _54 = &kp_77->data;

(insn 562 561 563 (set (reg:SI 338)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":271:3 -1
     (nil))

(insn 563 562 0 (set (reg/f:SI 163 [ _54 ])
        (plus:SI (reg:SI 338)
            (const_int 140 [0x8c]))) "kbd.c":271:3 -1
     (nil))

;; kwakeup (_54);

(insn 564 563 565 (set (reg:SI 0 r0)
        (reg/f:SI 163 [ _54 ])) "kbd.c":271:3 -1
     (nil))

(call_insn 565 564 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":271:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; if (c_62 == 13)

(insn 566 565 567 (set (reg:SI 339)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":273:6 -1
     (nil))

(insn 567 566 568 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 339)
            (const_int 13 [0xd]))) "kbd.c":273:6 -1
     (nil))

(jump_insn 568 567 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":273:6 -1
     (nil))

;; Generating RTL for gimple basic block 81

;; kline.18_55 ={v} kline;

(insn 570 569 571 (set (reg/f:SI 340)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 -1
     (nil))

(insn 571 570 0 (set (reg:SI 164 [ kline.18_55 ])
        (mem/v/c:SI (reg/f:SI 340) [3 kline+0 S4 A32])) "kbd.c":274:10 -1
     (nil))

;; _56 = kline.18_55 + 1;

(insn 572 571 0 (set (reg:SI 165 [ _56 ])
        (plus:SI (reg:SI 164 [ kline.18_55 ])
            (const_int 1 [0x1]))) "kbd.c":274:10 -1
     (nil))

;; kline ={v} _56;

(insn 573 572 574 (set (reg/f:SI 341)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 -1
     (nil))

(insn 574 573 0 (set (mem/v/c:SI (reg/f:SI 341) [3 kline+0 S4 A32])
        (reg:SI 165 [ _56 ])) "kbd.c":274:10 -1
     (nil))

;; kwakeup (&kline);

(insn 575 574 576 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":275:5 -1
     (nil))

(call_insn 576 575 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":275:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 82

;; out:

(code_label 577 576 578 19 ("out") [0 uses])

(note 578 577 0 NOTE_INSN_BASIC_BLOCK)

;; _57 ={v} kp_77->base;

(insn 579 578 580 (set (reg/f:SI 342)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":278:7 -1
     (nil))

(insn 580 579 0 (set (reg/f:SI 166 [ _57 ])
        (mem/v/f:SI (reg/f:SI 342) [2 kp_77->base+0 S4 A32])) "kbd.c":278:7 -1
     (nil))

;; _58 = _57 + 4;

(insn 581 580 0 (set (reg/f:SI 167 [ _58 ])
        (plus:SI (reg/f:SI 166 [ _57 ])
            (const_int 4 [0x4]))) "kbd.c":278:14 -1
     (nil))

;; *_58 = 255;

(insn 582 581 583 (set (reg:SI 343)
        (const_int -1 [0xffffffffffffffff])) "kbd.c":278:23 -1
     (nil))

(insn 583 582 584 (set (reg:QI 344)
        (subreg:QI (reg:SI 343) 0)) "kbd.c":278:23 -1
     (nil))

(insn 584 583 0 (set (mem:QI (reg/f:SI 167 [ _58 ]) [0 *_58+0 S1 A8])
        (reg:QI 344)) "kbd.c":278:23 -1
     (nil))

;; _59 = 269746224B;

(insn 585 584 0 (set (reg/f:SI 168 [ _59 ])
        (const_int 269746224 [0x10140030])) "kbd.c":279:3 -1
     (nil))

;; *_59 ={v} 255;

(insn 586 585 587 (set (reg:SI 345)
        (const_int 255 [0xff])) "kbd.c":279:13 -1
     (nil))

(insn 587 586 0 (set (mem/v:SI (reg/f:SI 168 [ _59 ]) [3 *_59+0 S4 A32])
        (reg:SI 345)) "kbd.c":279:13 -1
     (nil))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 6->7 to 83 failed.
Forwarding edge 9->10 to 83 failed.
Forwarding edge 11->12 to 83 failed.
Edge 32->34 redirected to 83
Merging block 34 into block 33...
Merged blocks 33 and 34.
Merged 33 and 34 without moving.
Forwarding edge 46->47 to 83 failed.
Forwarding edge 79->80 to 83 failed.
Merging block 84 into block 83...
Merged blocks 83 and 84.
Merged 83 and 84 without moving.


try_optimize_cfg iteration 2

Forwarding edge 6->7 to 83 failed.
Forwarding edge 9->10 to 83 failed.
Forwarding edge 11->12 to 83 failed.
Forwarding edge 46->47 to 83 failed.
Forwarding edge 79->80 to 83 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 170)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":124:8 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 170)) "kbd.c":124:8 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 171)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":126:14 -1
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 171) [2 kp_77->base+0 S4 A32])) "kbd.c":126:14 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":126:21 -1
     (nil))
(insn 10 9 11 2 (set (reg:QI 172)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":126:8 -1
     (nil))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 172)) "kbd.c":126:8 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 173)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":135:6 -1
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 173)
            (const_int 224 [0xe0]))) "kbd.c":135:6 -1
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":135:6 -1
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 174)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 -1
     (nil))
(insn 17 16 18 4 (set (reg:SI 115 [ esc.4_3 ])
        (mem/c:SI (reg/f:SI 174) [3 esc+0 S4 A32])) "kbd.c":136:9 -1
     (nil))
(insn 18 17 19 4 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 115 [ esc.4_3 ])
            (const_int 1 [0x1]))) "kbd.c":136:9 -1
     (nil))
(insn 19 18 20 4 (set (reg/f:SI 175)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":136:9 -1
     (nil))
(insn 20 19 21 4 (set (mem/c:SI (reg/f:SI 175) [3 esc+0 S4 A32])
        (reg:SI 116 [ _4 ])) "kbd.c":136:9 -1
     (nil))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU)
(code_label 21 20 22 5 17 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg/f:SI 176)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:7 -1
     (nil))
(insn 24 23 25 5 (set (reg:SI 117 [ esc.5_5 ])
        (mem/c:SI (reg/f:SI 176) [3 esc+0 S4 A32])) "kbd.c":138:7 -1
     (nil))
(insn 25 24 26 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ esc.5_5 ])
            (const_int 0 [0]))) "kbd.c":138:6 -1
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":138:6 -1
     (nil)
 -> 37)
;;  succ:       6 (FALLTHRU)
;;              8

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:SI 177)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":138:18 -1
     (nil))
(insn 29 28 32 6 (set (reg:SI 118 [ esc.6_6 ])
        (mem/c:SI (reg/f:SI 177) [3 esc+0 S4 A32])) "kbd.c":138:18 -1
     (nil))
(insn 32 29 33 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ esc.6_6 ])
            (const_int 1 [0x1]))) "kbd.c":138:11 -1
     (nil))
(jump_insn 33 32 34 6 (set (pc)
        (if_then_else (gt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":138:11 -1
     (nil)
 -> 37)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 34 33 35 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 35 34 36 7 (set (pc)
        (label_ref 577)) "kbd.c":139:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 36 35 37)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6
(code_label 37 36 38 8 18 (nil) [2 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg/f:SI 178)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":141:11 -1
     (nil))
(insn 40 39 41 8 (set (reg:SI 119 [ esc.7_7 ])
        (mem/c:SI (reg/f:SI 178) [3 esc+0 S4 A32])) "kbd.c":141:11 -1
     (nil))
(insn 41 40 42 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ esc.7_7 ])
            (const_int 2 [0x2]))) "kbd.c":141:6 -1
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) "kbd.c":141:6 -1
     (nil)
 -> 184)
;;  succ:       9 (FALLTHRU)
;;              26

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:SI 179)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":142:8 -1
     (nil))
(insn 45 44 46 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 179)
            (const_int 224 [0xe0]))) "kbd.c":142:8 -1
     (nil))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "kbd.c":142:8 -1
     (nil)
 -> 50)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 48 47 49 10 (set (pc)
        (label_ref 577)) "kbd.c":143:8 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 49 48 50)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 50 49 51 11 21 (nil) [1 uses])
(note 51 50 52 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 52 51 53 11 (set (reg:QI 180)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":147:11 -1
     (nil))
(insn 53 52 54 11 (set (reg:SI 181)
        (and:SI (subreg:SI (reg:QI 180) 0)
            (const_int 127 [0x7f]))) "kbd.c":147:11 -1
     (nil))
(insn 54 53 55 11 (set (reg:QI 182)
        (subreg:QI (reg:SI 181) 0)) "kbd.c":147:11 -1
     (nil))
(insn 55 54 56 11 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 182)) "kbd.c":147:11 -1
     (nil))
(insn 56 55 57 11 (set (reg:SI 183)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":149:9 -1
     (nil))
(insn 57 56 58 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 183)
            (const_int 83 [0x53]))) "kbd.c":149:9 -1
     (nil))
(jump_insn 58 57 59 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) "kbd.c":149:9 -1
     (nil)
 -> 62)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 59 58 60 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 60 59 61 12 (set (pc)
        (label_ref 577)) "kbd.c":152:8 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 61 60 62)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
(code_label 62 61 63 13 22 (nil) [1 uses])
(note 63 62 64 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 13 (set (reg:SI 184)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":155:9 -1
     (nil))
(insn 65 64 66 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 184)
            (const_int 56 [0x38]))) "kbd.c":155:9 -1
     (nil))
(jump_insn 66 65 67 13 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) "kbd.c":155:9 -1
     (nil)
 -> 73)
;;  succ:       14 (FALLTHRU)
;;              15

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 (FALLTHRU)
(note 67 66 68 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 14 (set (reg/f:SI 185)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":156:12 -1
     (nil))
(insn 69 68 70 14 (set (reg:SI 186)
        (const_int 0 [0])) "kbd.c":156:12 -1
     (nil))
(insn 70 69 71 14 (set (mem/c:SI (reg/f:SI 185) [3 alt+0 S4 A32])
        (reg:SI 186)) "kbd.c":156:12 -1
     (nil))
(jump_insn 71 70 72 14 (set (pc)
        (label_ref 577)) "kbd.c":157:8 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 72 71 73)
;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       13
(code_label 73 72 74 15 23 (nil) [1 uses])
(note 74 73 75 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 15 (set (reg:SI 187)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":160:9 -1
     (nil))
(insn 76 75 77 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 187)
            (const_int 29 [0x1d]))) "kbd.c":160:9 -1
     (nil))
(jump_insn 77 76 78 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) "kbd.c":160:9 -1
     (nil)
 -> 84)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 (FALLTHRU)
(note 78 77 79 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 79 78 80 16 (set (reg/f:SI 188)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":161:16 -1
     (nil))
(insn 80 79 81 16 (set (reg:SI 189)
        (const_int 0 [0])) "kbd.c":161:16 -1
     (nil))
(insn 81 80 82 16 (set (mem/c:SI (reg/f:SI 188) [3 control+0 S4 A32])
        (reg:SI 189)) "kbd.c":161:16 -1
     (nil))
(jump_insn 82 81 83 16 (set (pc)
        (label_ref 577)) "kbd.c":162:8 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 83 82 84)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
(code_label 84 83 85 17 24 (nil) [1 uses])
(note 85 84 86 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 17 (set (reg:SI 190)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":165:9 -1
     (nil))
(insn 87 86 88 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 190)
            (const_int 72 [0x48]))) "kbd.c":165:9 -1
     (nil))
(jump_insn 88 87 89 17 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 93)
            (pc))) "kbd.c":165:9 -1
     (nil)
 -> 93)
;;  succ:       18 (FALLTHRU)
;;              19

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       17 (FALLTHRU)
(note 89 88 90 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 90 89 91 18 (set (reg/f:SI 191)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":166:15 -1
     (nil))
(insn 91 90 92 18 (set (reg:SI 192)
        (const_int 11 [0xb])) "kbd.c":166:15 -1
     (nil))
(insn 92 91 93 18 (set (mem/c:SI (reg/f:SI 191) [3 escKey+0 S4 A32])
        (reg:SI 192)) "kbd.c":166:15 -1
     (nil))
;;  succ:       19 (FALLTHRU)

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       17
;;              18 (FALLTHRU)
(code_label 93 92 94 19 25 (nil) [1 uses])
(note 94 93 95 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 95 94 96 19 (set (reg:SI 193)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":167:9 -1
     (nil))
(insn 96 95 97 19 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 193)
            (const_int 80 [0x50]))) "kbd.c":167:9 -1
     (nil))
(jump_insn 97 96 98 19 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "kbd.c":167:9 -1
     (nil)
 -> 102)
;;  succ:       20 (FALLTHRU)
;;              21

;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
(note 98 97 99 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 99 98 100 20 (set (reg/f:SI 194)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":168:15 -1
     (nil))
(insn 100 99 101 20 (set (reg:SI 195)
        (const_int 12 [0xc])) "kbd.c":168:15 -1
     (nil))
(insn 101 100 102 20 (set (mem/c:SI (reg/f:SI 194) [3 escKey+0 S4 A32])
        (reg:SI 195)) "kbd.c":168:15 -1
     (nil))
;;  succ:       21 (FALLTHRU)

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       19
;;              20 (FALLTHRU)
(code_label 102 101 103 21 26 (nil) [1 uses])
(note 103 102 104 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 104 103 105 21 (set (reg:SI 196)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":169:9 -1
     (nil))
(insn 105 104 106 21 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 196)
            (const_int 75 [0x4b]))) "kbd.c":169:9 -1
     (nil))
(jump_insn 106 105 107 21 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) "kbd.c":169:9 -1
     (nil)
 -> 111)
;;  succ:       22 (FALLTHRU)
;;              23

;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       21 (FALLTHRU)
(note 107 106 108 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 108 107 109 22 (set (reg/f:SI 197)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":170:15 -1
     (nil))
(insn 109 108 110 22 (set (reg:SI 198)
        (const_int 13 [0xd])) "kbd.c":170:15 -1
     (nil))
(insn 110 109 111 22 (set (mem/c:SI (reg/f:SI 197) [3 escKey+0 S4 A32])
        (reg:SI 198)) "kbd.c":170:15 -1
     (nil))
;;  succ:       23 (FALLTHRU)

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       21
;;              22 (FALLTHRU)
(code_label 111 110 112 23 27 (nil) [1 uses])
(note 112 111 113 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 113 112 114 23 (set (reg:SI 199)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":171:9 -1
     (nil))
(insn 114 113 115 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 199)
            (const_int 77 [0x4d]))) "kbd.c":171:9 -1
     (nil))
(jump_insn 115 114 116 23 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 120)
            (pc))) "kbd.c":171:9 -1
     (nil)
 -> 120)
;;  succ:       24 (FALLTHRU)
;;              25

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       23 (FALLTHRU)
(note 116 115 117 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 24 (set (reg/f:SI 200)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":172:15 -1
     (nil))
(insn 118 117 119 24 (set (reg:SI 201)
        (const_int 14 [0xe])) "kbd.c":172:15 -1
     (nil))
(insn 119 118 120 24 (set (mem/c:SI (reg/f:SI 200) [3 escKey+0 S4 A32])
        (reg:SI 201)) "kbd.c":172:15 -1
     (nil))
;;  succ:       25 (FALLTHRU)

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       23
;;              24 (FALLTHRU)
(code_label 120 119 121 25 28 (nil) [1 uses])
(note 121 120 122 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 122 121 123 25 (set (reg/f:SI 202)
        (symbol_ref:SI ("escKey") [flags 0x2]  <var_decl 0x7fcdc0b1ad80 escKey>)) "kbd.c":174:26 -1
     (nil))
(insn 123 122 124 25 (set (reg:SI 120 [ escKey.8_8 ])
        (mem/c:SI (reg/f:SI 202) [3 escKey+0 S4 A32])) "kbd.c":174:26 -1
     (nil))
(insn 124 123 125 25 (set (reg/f:SI 203)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:16 -1
     (nil))
(insn 125 124 126 25 (set (reg:SI 121 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 203)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":174:16 -1
     (nil))
(insn 126 125 127 25 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":174:22 -1
     (nil))
(insn 127 126 128 25 (set (reg/f:SI 204)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:22 -1
     (nil))
(insn 128 127 129 25 (set (mem/v:SI (plus:SI (reg/f:SI 204)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":174:22 -1
     (nil))
(insn 129 128 130 25 (set (reg:SI 123 [ _12 ])
        (and:SI (reg:SI 120 [ escKey.8_8 ])
            (const_int 255 [0xff]))) "kbd.c":174:26 -1
     (nil))
(insn 130 129 131 25 (set (reg/f:SI 205)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":174:26 -1
     (nil))
(insn 131 130 132 25 (set (reg/f:SI 206)
        (plus:SI (reg/f:SI 205)
            (reg:SI 121 [ _9 ]))) "kbd.c":174:26 -1
     (nil))
(insn 132 131 133 25 (set (reg:QI 207)
        (subreg/s/v:QI (reg:SI 123 [ _12 ]) 0)) "kbd.c":174:26 -1
     (nil))
(insn 133 132 134 25 (set (mem/v:QI (plus:SI (reg/f:SI 206)
                (const_int 4 [0x4])) [0 kp_77->buf[_10]+0 S1 A8])
        (reg:QI 207)) "kbd.c":174:26 -1
     (nil))
(insn 134 133 135 25 (set (reg/f:SI 208)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 -1
     (nil))
(insn 135 134 136 25 (set (reg:SI 124 [ _13 ])
        (mem/v:SI (plus:SI (reg/f:SI 208)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":175:15 -1
     (nil))
(insn 136 135 137 25 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 124 [ _13 ]))
                    (const_int 0 [0])))
            (set (reg:SI 209)
                (minus:SI (const_int 0 [0])
                    (reg:SI 124 [ _13 ])))
        ]) "kbd.c":175:15 -1
     (nil))
(insn 137 136 138 25 (set (reg:SI 125 [ _14 ])
        (and:SI (reg:SI 124 [ _13 ])
            (const_int 127 [0x7f]))) "kbd.c":175:15 -1
     (nil))
(insn 138 137 139 25 (set (reg:SI 210)
        (and:SI (reg:SI 209)
            (const_int 127 [0x7f]))) "kbd.c":175:15 -1
     (nil))
(insn 139 138 140 25 (set (reg:SI 125 [ _14 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 210))
            (reg:SI 125 [ _14 ]))) "kbd.c":175:15 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 124 [ _13 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 140 139 141 25 (set (reg/f:SI 211)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":175:15 -1
     (nil))
(insn 141 140 142 25 (set (mem/v:SI (plus:SI (reg/f:SI 211)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":175:15 -1
     (nil))
(insn 142 141 143 25 (set (reg/f:SI 212)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:8 -1
     (nil))
(insn 143 142 144 25 (set (reg:SI 126 [ _15 ])
        (mem/v:SI (plus:SI (reg/f:SI 212)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":177:8 -1
     (nil))
(insn 144 143 145 25 (set (reg:SI 127 [ _16 ])
        (plus:SI (reg:SI 126 [ _15 ])
            (const_int 1 [0x1]))) "kbd.c":177:14 -1
     (nil))
(insn 145 144 146 25 (set (reg/f:SI 213)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":177:14 -1
     (nil))
(insn 146 145 147 25 (set (mem/v:SI (plus:SI (reg/f:SI 213)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 127 [ _16 ])) "kbd.c":177:14 -1
     (nil))
(insn 147 146 148 25 (set (reg/f:SI 214)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:16 -1
     (nil))
(insn 148 147 149 25 (set (reg:SI 128 [ _17 ])
        (mem/v:SI (plus:SI (reg/f:SI 214)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":179:16 -1
     (nil))
(insn 149 148 150 25 (set (reg:SI 129 [ _19 ])
        (plus:SI (reg:SI 128 [ _17 ])
            (const_int 1 [0x1]))) "kbd.c":179:22 -1
     (nil))
(insn 150 149 151 25 (set (reg/f:SI 215)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:22 -1
     (nil))
(insn 151 150 152 25 (set (mem/v:SI (plus:SI (reg/f:SI 215)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 129 [ _19 ])) "kbd.c":179:22 -1
     (nil))
(insn 152 151 153 25 (set (reg/f:SI 216)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":179:26 -1
     (nil))
(insn 153 152 154 25 (set (reg/f:SI 217)
        (plus:SI (reg/f:SI 216)
            (reg:SI 128 [ _17 ]))) "kbd.c":179:26 -1
     (nil))
(insn 154 153 155 25 (set (reg:SI 218)
        (const_int 10 [0xa])) "kbd.c":179:26 -1
     (nil))
(insn 155 154 156 25 (set (reg:QI 219)
        (subreg:QI (reg:SI 218) 0)) "kbd.c":179:26 -1
     (nil))
(insn 156 155 157 25 (set (mem/v:QI (plus:SI (reg/f:SI 217)
                (const_int 4 [0x4])) [0 kp_77->buf[_18]+0 S1 A8])
        (reg:QI 219)) "kbd.c":179:26 -1
     (nil))
(insn 157 156 158 25 (set (reg/f:SI 220)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 -1
     (nil))
(insn 158 157 159 25 (set (reg:SI 130 [ _20 ])
        (mem/v:SI (plus:SI (reg/f:SI 220)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":180:15 -1
     (nil))
(insn 159 158 160 25 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 130 [ _20 ]))
                    (const_int 0 [0])))
            (set (reg:SI 221)
                (minus:SI (const_int 0 [0])
                    (reg:SI 130 [ _20 ])))
        ]) "kbd.c":180:15 -1
     (nil))
(insn 160 159 161 25 (set (reg:SI 131 [ _21 ])
        (and:SI (reg:SI 130 [ _20 ])
            (const_int 127 [0x7f]))) "kbd.c":180:15 -1
     (nil))
(insn 161 160 162 25 (set (reg:SI 222)
        (and:SI (reg:SI 221)
            (const_int 127 [0x7f]))) "kbd.c":180:15 -1
     (nil))
(insn 162 161 163 25 (set (reg:SI 131 [ _21 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 222))
            (reg:SI 131 [ _21 ]))) "kbd.c":180:15 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 130 [ _20 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 163 162 164 25 (set (reg/f:SI 223)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":180:15 -1
     (nil))
(insn 164 163 165 25 (set (mem/v:SI (plus:SI (reg/f:SI 223)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 131 [ _21 ])) "kbd.c":180:15 -1
     (nil))
(insn 165 164 166 25 (set (reg/f:SI 224)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:8 -1
     (nil))
(insn 166 165 167 25 (set (reg:SI 132 [ _22 ])
        (mem/v:SI (plus:SI (reg/f:SI 224)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":181:8 -1
     (nil))
(insn 167 166 168 25 (set (reg:SI 133 [ _23 ])
        (plus:SI (reg:SI 132 [ _22 ])
            (const_int 1 [0x1]))) "kbd.c":181:14 -1
     (nil))
(insn 168 167 169 25 (set (reg/f:SI 225)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:14 -1
     (nil))
(insn 169 168 170 25 (set (mem/v:SI (plus:SI (reg/f:SI 225)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 133 [ _23 ])) "kbd.c":181:14 -1
     (nil))
(insn 170 169 171 25 (set (reg/f:SI 226)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:20 -1
     (nil))
(insn 171 170 172 25 (set (reg:SI 134 [ _24 ])
        (mem/v:SI (plus:SI (reg/f:SI 226)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])) "kbd.c":181:20 -1
     (nil))
(insn 172 171 173 25 (set (reg:SI 135 [ _25 ])
        (plus:SI (reg:SI 134 [ _24 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":181:26 -1
     (nil))
(insn 173 172 174 25 (set (reg/f:SI 227)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":181:26 -1
     (nil))
(insn 174 173 175 25 (set (mem/v:SI (plus:SI (reg/f:SI 227)
                (const_int 144 [0x90])) [3 kp_77->room+0 S4 A32])
        (reg:SI 135 [ _25 ])) "kbd.c":181:26 -1
     (nil))
(insn 175 174 176 25 (set (reg:SI 228)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":184:6 -1
     (nil))
(insn 176 175 177 25 (set (reg/f:SI 136 [ _26 ])
        (plus:SI (reg:SI 228)
            (const_int 140 [0x8c]))) "kbd.c":184:6 -1
     (nil))
(insn 177 176 178 25 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ _26 ])) "kbd.c":184:6 -1
     (nil))
(call_insn 178 177 179 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":184:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 179 178 180 25 (set (reg/f:SI 229)
        (symbol_ref:SI ("esc") [flags 0x2]  <var_decl 0x7fcdc0b1abd0 esc>)) "kbd.c":186:10 -1
     (nil))
(insn 180 179 181 25 (set (reg:SI 230)
        (const_int 0 [0])) "kbd.c":186:10 -1
     (nil))
(insn 181 180 182 25 (set (mem/c:SI (reg/f:SI 229) [3 esc+0 S4 A32])
        (reg:SI 230)) "kbd.c":186:10 -1
     (nil))
(jump_insn 182 181 183 25 (set (pc)
        (label_ref 577)) "kbd.c":187:6 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 183 182 184)
;; basic block 26, loop depth 0, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 184 183 185 26 20 (nil) [1 uses])
(note 185 184 186 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 186 185 191 26 (set (reg:SI 137 [ code.9_27 ])
        (sign_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":190:7 -1
     (nil))
(insn 191 186 192 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 137 [ code.9_27 ])
            (const_int 0 [0]))) "kbd.c":190:6 -1
     (nil))
(jump_insn 192 191 193 26 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 232)
            (pc))) "kbd.c":190:6 -1
     (nil)
 -> 232)
;;  succ:       27 (FALLTHRU)
;;              35

;; basic block 27, loop depth 0, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       26 (FALLTHRU)
(note 193 192 194 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 194 193 195 27 (set (reg:QI 233)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])) "kbd.c":192:10 -1
     (nil))
(insn 195 194 196 27 (set (reg:SI 234)
        (and:SI (subreg:SI (reg:QI 233) 0)
            (const_int 127 [0x7f]))) "kbd.c":192:10 -1
     (nil))
(insn 196 195 197 27 (set (reg:QI 235)
        (subreg:QI (reg:SI 234) 0)) "kbd.c":192:10 -1
     (nil))
(insn 197 196 198 27 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8])
        (reg:QI 235)) "kbd.c":192:10 -1
     (nil))
(insn 198 197 199 27 (set (reg:SI 236)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:8 -1
     (nil))
(insn 199 198 200 27 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 236)
            (const_int 42 [0x2a]))) "kbd.c":193:8 -1
     (nil))
(jump_insn 200 199 201 27 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 205)
            (pc))) "kbd.c":193:8 -1
     (nil)
 -> 205)
;;  succ:       29
;;              28 (FALLTHRU)

;; basic block 28, loop depth 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 (FALLTHRU)
(note 201 200 202 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 202 201 203 28 (set (reg:SI 237)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":193:24 -1
     (nil))
(insn 203 202 204 28 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 237)
            (const_int 54 [0x36]))) "kbd.c":193:24 -1
     (nil))
(jump_insn 204 203 205 28 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 210)
            (pc))) "kbd.c":193:24 -1
     (nil)
 -> 210)
;;  succ:       29 (FALLTHRU)
;;              30

;; basic block 29, loop depth 0, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       27
;;              28 (FALLTHRU)
(code_label 205 204 206 29 30 (nil) [1 uses])
(note 206 205 207 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 207 206 208 29 (set (reg/f:SI 238)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":194:13 -1
     (nil))
(insn 208 207 209 29 (set (reg:SI 239)
        (const_int 0 [0])) "kbd.c":194:13 -1
     (nil))
(insn 209 208 210 29 (set (mem/c:SI (reg/f:SI 238) [3 shift+0 S4 A32])
        (reg:SI 239)) "kbd.c":194:13 -1
     (nil))
;;  succ:       30 (FALLTHRU)

;; basic block 30, loop depth 0, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       28
;;              29 (FALLTHRU)
(code_label 210 209 211 30 31 (nil) [1 uses])
(note 211 210 212 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 212 211 213 30 (set (reg:SI 240)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":195:8 -1
     (nil))
(insn 213 212 214 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 240)
            (const_int 29 [0x1d]))) "kbd.c":195:8 -1
     (nil))
(jump_insn 214 213 215 30 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) "kbd.c":195:8 -1
     (nil)
 -> 219)
;;  succ:       31 (FALLTHRU)
;;              32

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       30 (FALLTHRU)
(note 215 214 216 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 216 215 217 31 (set (reg/f:SI 241)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":196:15 -1
     (nil))
(insn 217 216 218 31 (set (reg:SI 242)
        (const_int 0 [0])) "kbd.c":196:15 -1
     (nil))
(insn 218 217 219 31 (set (mem/c:SI (reg/f:SI 241) [3 control+0 S4 A32])
        (reg:SI 242)) "kbd.c":196:15 -1
     (nil))
;;  succ:       32 (FALLTHRU)

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       30
;;              31 (FALLTHRU)
(code_label 219 218 220 32 32 (nil) [1 uses])
(note 220 219 221 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 221 220 222 32 (set (reg:SI 243)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":197:8 -1
     (nil))
(insn 222 221 223 32 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 243)
            (const_int 56 [0x38]))) "kbd.c":197:8 -1
     (nil))
(jump_insn 223 222 224 32 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 577)
            (pc))) "kbd.c":197:8 273 {arm_cond_branch}
     (nil)
 -> 577)
;;  succ:       33 (FALLTHRU)
;;              83

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 35, flags: (NEW, REACHABLE, RTL)
;;  pred:       32 (FALLTHRU)
(note 224 223 225 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 225 224 226 33 (set (reg/f:SI 244)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":198:11 -1
     (nil))
(insn 226 225 227 33 (set (reg:SI 245)
        (const_int 0 [0])) "kbd.c":198:11 -1
     (nil))
(insn 227 226 230 33 (set (mem/c:SI (reg/f:SI 244) [3 alt+0 S4 A32])
        (reg:SI 245)) "kbd.c":198:11 -1
     (nil))
(jump_insn 230 227 231 33 (set (pc)
        (label_ref 577)) "kbd.c":199:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 231 230 232)
;; basic block 35, loop depth 0, maybe hot
;;  prev block 33, next block 36, flags: (NEW, REACHABLE, RTL)
;;  pred:       26
(code_label 232 231 233 35 29 (nil) [1 uses])
(note 233 232 234 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 234 233 235 35 (set (reg:SI 246)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:6 -1
     (nil))
(insn 235 234 236 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 246)
            (const_int 42 [0x2a]))) "kbd.c":203:6 -1
     (nil))
(jump_insn 236 235 237 35 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 241)
            (pc))) "kbd.c":203:6 -1
     (nil)
 -> 241)
;;  succ:       37
;;              36 (FALLTHRU)

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL)
;;  pred:       35 (FALLTHRU)
(note 237 236 238 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 238 237 239 36 (set (reg:SI 247)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":203:22 -1
     (nil))
(insn 239 238 240 36 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 247)
            (const_int 54 [0x36]))) "kbd.c":203:22 -1
     (nil))
(jump_insn 240 239 241 36 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 248)
            (pc))) "kbd.c":203:22 -1
     (nil)
 -> 248)
;;  succ:       37 (FALLTHRU)
;;              38

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL)
;;  pred:       35
;;              36 (FALLTHRU)
(code_label 241 240 242 37 34 (nil) [1 uses])
(note 242 241 243 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 243 242 244 37 (set (reg/f:SI 248)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":204:11 -1
     (nil))
(insn 244 243 245 37 (set (reg:SI 249)
        (const_int 1 [0x1])) "kbd.c":204:11 -1
     (nil))
(insn 245 244 246 37 (set (mem/c:SI (reg/f:SI 248) [3 shift+0 S4 A32])
        (reg:SI 249)) "kbd.c":204:11 -1
     (nil))
(jump_insn 246 245 247 37 (set (pc)
        (label_ref 577)) "kbd.c":205:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 247 246 248)
;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL)
;;  pred:       36
(code_label 248 247 249 38 35 (nil) [1 uses])
(note 249 248 250 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 250 249 251 38 (set (reg:SI 250)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":207:6 -1
     (nil))
(insn 251 250 252 38 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 250)
            (const_int 56 [0x38]))) "kbd.c":207:6 -1
     (nil))
(jump_insn 252 251 253 38 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 259)
            (pc))) "kbd.c":207:6 -1
     (nil)
 -> 259)
;;  succ:       39 (FALLTHRU)
;;              40

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 40, flags: (NEW, REACHABLE, RTL)
;;  pred:       38 (FALLTHRU)
(note 253 252 254 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 254 253 255 39 (set (reg/f:SI 251)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":208:9 -1
     (nil))
(insn 255 254 256 39 (set (reg:SI 252)
        (const_int 1 [0x1])) "kbd.c":208:9 -1
     (nil))
(insn 256 255 257 39 (set (mem/c:SI (reg/f:SI 251) [3 alt+0 S4 A32])
        (reg:SI 252)) "kbd.c":208:9 -1
     (nil))
(jump_insn 257 256 258 39 (set (pc)
        (label_ref 577)) "kbd.c":209:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 258 257 259)
;; basic block 40, loop depth 0, maybe hot
;;  prev block 39, next block 41, flags: (NEW, REACHABLE, RTL)
;;  pred:       38
(code_label 259 258 260 40 36 (nil) [1 uses])
(note 260 259 261 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(insn 261 260 262 40 (set (reg:SI 253)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":211:6 -1
     (nil))
(insn 262 261 263 40 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 253)
            (const_int 29 [0x1d]))) "kbd.c":211:6 -1
     (nil))
(jump_insn 263 262 264 40 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 270)
            (pc))) "kbd.c":211:6 -1
     (nil)
 -> 270)
;;  succ:       41 (FALLTHRU)
;;              42

;; basic block 41, loop depth 0, maybe hot
;;  prev block 40, next block 42, flags: (NEW, REACHABLE, RTL)
;;  pred:       40 (FALLTHRU)
(note 264 263 265 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn 265 264 266 41 (set (reg/f:SI 254)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":212:13 -1
     (nil))
(insn 266 265 267 41 (set (reg:SI 255)
        (const_int 1 [0x1])) "kbd.c":212:13 -1
     (nil))
(insn 267 266 268 41 (set (mem/c:SI (reg/f:SI 254) [3 control+0 S4 A32])
        (reg:SI 255)) "kbd.c":212:13 -1
     (nil))
(jump_insn 268 267 269 41 (set (pc)
        (label_ref 577)) "kbd.c":213:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 269 268 270)
;; basic block 42, loop depth 0, maybe hot
;;  prev block 41, next block 43, flags: (NEW, REACHABLE, RTL)
;;  pred:       40
(code_label 270 269 271 42 37 (nil) [1 uses])
(note 271 270 272 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 42 (set (reg:SI 256)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":216:6 -1
     (nil))
(insn 273 272 274 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 256)
            (const_int 58 [0x3a]))) "kbd.c":216:6 -1
     (nil))
(jump_insn 274 273 275 42 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":216:6 -1
     (nil)
 -> 283)
;;  succ:       43 (FALLTHRU)
;;              44

;; basic block 43, loop depth 0, maybe hot
;;  prev block 42, next block 44, flags: (NEW, REACHABLE, RTL)
;;  pred:       42 (FALLTHRU)
(note 275 274 276 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 43 (set (reg/f:SI 257)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:18 -1
     (nil))
(insn 277 276 278 43 (set (reg:SI 138 [ capslock.10_28 ])
        (mem/c:SI (reg/f:SI 257) [3 capslock+0 S4 A32])) "kbd.c":217:18 -1
     (nil))
(insn 278 277 279 43 (set (reg:SI 139 [ _29 ])
        (minus:SI (const_int 1 [0x1])
            (reg:SI 138 [ capslock.10_28 ]))) "kbd.c":217:18 -1
     (nil))
(insn 279 278 280 43 (set (reg/f:SI 258)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":217:14 -1
     (nil))
(insn 280 279 281 43 (set (mem/c:SI (reg/f:SI 258) [3 capslock+0 S4 A32])
        (reg:SI 139 [ _29 ])) "kbd.c":217:14 -1
     (nil))
(jump_insn 281 280 282 43 (set (pc)
        (label_ref 577)) "kbd.c":218:5 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 282 281 283)
;; basic block 44, loop depth 0, maybe hot
;;  prev block 43, next block 45, flags: (NEW, REACHABLE, RTL)
;;  pred:       42
(code_label 283 282 284 44 38 (nil) [1 uses])
(note 284 283 285 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 44 (set (reg/f:SI 259)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":221:7 -1
     (nil))
(insn 286 285 287 44 (set (reg:SI 140 [ control.11_30 ])
        (mem/c:SI (reg/f:SI 259) [3 control+0 S4 A32])) "kbd.c":221:7 -1
     (nil))
(insn 287 286 288 44 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140 [ control.11_30 ])
            (const_int 0 [0]))) "kbd.c":221:6 -1
     (nil))
(jump_insn 288 287 289 44 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:6 -1
     (nil)
 -> 301)
;;  succ:       45 (FALLTHRU)
;;              48

;; basic block 45, loop depth 0, maybe hot
;;  prev block 44, next block 46, flags: (NEW, REACHABLE, RTL)
;;  pred:       44 (FALLTHRU)
(note 289 288 290 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn 290 289 291 45 (set (reg/f:SI 260)
        (symbol_ref:SI ("alt") [flags 0x2]  <var_decl 0x7fcdc0b1aab0 alt>)) "kbd.c":221:15 -1
     (nil))
(insn 291 290 292 45 (set (reg:SI 141 [ alt.12_31 ])
        (mem/c:SI (reg/f:SI 260) [3 alt+0 S4 A32])) "kbd.c":221:15 -1
     (nil))
(insn 292 291 293 45 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 141 [ alt.12_31 ])
            (const_int 0 [0]))) "kbd.c":221:15 -1
     (nil))
(jump_insn 293 292 294 45 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:15 -1
     (nil)
 -> 301)
;;  succ:       46 (FALLTHRU)
;;              48

;; basic block 46, loop depth 0, maybe hot
;;  prev block 45, next block 47, flags: (NEW, REACHABLE, RTL)
;;  pred:       45 (FALLTHRU)
(note 294 293 295 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(insn 295 294 296 46 (set (reg:SI 261)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":221:22 -1
     (nil))
(insn 296 295 297 46 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 261)
            (const_int 83 [0x53]))) "kbd.c":221:22 -1
     (nil))
(jump_insn 297 296 298 46 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 301)
            (pc))) "kbd.c":221:22 -1
     (nil)
 -> 301)
;;  succ:       47 (FALLTHRU)
;;              48

;; basic block 47, loop depth 0, maybe hot
;;  prev block 46, next block 48, flags: (NEW, REACHABLE, RTL)
;;  pred:       46 (FALLTHRU)
(note 298 297 299 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(jump_insn 299 298 300 47 (set (pc)
        (label_ref 577)) "kbd.c":223:7 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 300 299 301)
;; basic block 48, loop depth 0, maybe hot
;;  prev block 47, next block 49, flags: (NEW, REACHABLE, RTL)
;;  pred:       44
;;              45
;;              46
(code_label 301 300 302 48 39 (nil) [3 uses])
(note 302 301 303 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn 303 302 304 48 (set (reg:SI 262)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":226:6 -1
     (nil))
(insn 304 303 305 48 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 262)
            (const_int 59 [0x3b]))) "kbd.c":226:6 -1
     (nil))
(jump_insn 305 304 306 48 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) "kbd.c":226:6 -1
     (nil)
 -> 310)
;;  succ:       49 (FALLTHRU)
;;              50

;; basic block 49, loop depth 0, maybe hot
;;  prev block 48, next block 50, flags: (NEW, REACHABLE, RTL)
;;  pred:       48 (FALLTHRU)
(note 306 305 307 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(call_insn 307 306 308 49 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF1") [flags 0x3]  <function_decl 0x7fcdc0b13c00 doF1>) [0 doF1 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":227:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 308 307 309 49 (set (pc)
        (label_ref 577)) "kbd.c":227:14 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 309 308 310)
;; basic block 50, loop depth 0, maybe hot
;;  prev block 49, next block 51, flags: (NEW, REACHABLE, RTL)
;;  pred:       48
(code_label 310 309 311 50 40 (nil) [1 uses])
(note 311 310 312 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn 312 311 313 50 (set (reg:SI 263)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":229:6 -1
     (nil))
(insn 313 312 314 50 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 263)
            (const_int 60 [0x3c]))) "kbd.c":229:6 -1
     (nil))
(jump_insn 314 313 315 50 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 319)
            (pc))) "kbd.c":229:6 -1
     (nil)
 -> 319)
;;  succ:       51 (FALLTHRU)
;;              52

;; basic block 51, loop depth 0, maybe hot
;;  prev block 50, next block 52, flags: (NEW, REACHABLE, RTL)
;;  pred:       50 (FALLTHRU)
(note 315 314 316 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(call_insn 316 315 317 51 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF2") [flags 0x3]  <function_decl 0x7fcdc0b13f00 doF2>) [0 doF2 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":230:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 317 316 318 51 (set (pc)
        (label_ref 577)) "kbd.c":230:14 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 318 317 319)
;; basic block 52, loop depth 0, maybe hot
;;  prev block 51, next block 53, flags: (NEW, REACHABLE, RTL)
;;  pred:       50
(code_label 319 318 320 52 41 (nil) [1 uses])
(note 320 319 321 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(insn 321 320 322 52 (set (reg:SI 264)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":232:6 -1
     (nil))
(insn 322 321 323 52 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 264)
            (const_int 61 [0x3d]))) "kbd.c":232:6 -1
     (nil))
(jump_insn 323 322 324 52 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 328)
            (pc))) "kbd.c":232:6 -1
     (nil)
 -> 328)
;;  succ:       53 (FALLTHRU)
;;              54

;; basic block 53, loop depth 0, maybe hot
;;  prev block 52, next block 54, flags: (NEW, REACHABLE, RTL)
;;  pred:       52 (FALLTHRU)
(note 324 323 325 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(call_insn 325 324 326 53 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF3") [flags 0x3]  <function_decl 0x7fcdc0b26100 doF3>) [0 doF3 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":233:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 326 325 327 53 (set (pc)
        (label_ref 577)) "kbd.c":233:14 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 327 326 328)
;; basic block 54, loop depth 0, maybe hot
;;  prev block 53, next block 55, flags: (NEW, REACHABLE, RTL)
;;  pred:       52
(code_label 328 327 329 54 42 (nil) [1 uses])
(note 329 328 330 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(insn 330 329 331 54 (set (reg:SI 265)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":235:6 -1
     (nil))
(insn 331 330 332 54 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 265)
            (const_int 62 [0x3e]))) "kbd.c":235:6 -1
     (nil))
(jump_insn 332 331 333 54 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 337)
            (pc))) "kbd.c":235:6 -1
     (nil)
 -> 337)
;;  succ:       55 (FALLTHRU)
;;              56

;; basic block 55, loop depth 0, maybe hot
;;  prev block 54, next block 56, flags: (NEW, REACHABLE, RTL)
;;  pred:       54 (FALLTHRU)
(note 333 332 334 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(call_insn 334 333 335 55 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("doF4") [flags 0x3]  <function_decl 0x7fcdc0b26300 doF4>) [0 doF4 S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":236:6 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 335 334 336 55 (set (pc)
        (label_ref 577)) "kbd.c":236:14 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 336 335 337)
;; basic block 56, loop depth 0, maybe hot
;;  prev block 55, next block 57, flags: (NEW, REACHABLE, RTL)
;;  pred:       54
(code_label 337 336 338 56 43 (nil) [1 uses])
(note 338 337 339 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn 339 338 340 56 (set (reg/f:SI 266)
        (symbol_ref:SI ("shift") [flags 0x2]  <var_decl 0x7fcdc0b1acf0 shift>)) "kbd.c":239:14 -1
     (nil))
(insn 340 339 341 56 (set (reg:SI 142 [ shift.14_32 ])
        (mem/c:SI (reg/f:SI 266) [3 shift+0 S4 A32])) "kbd.c":239:14 -1
     (nil))
(insn 341 340 342 56 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 142 [ shift.14_32 ])
            (const_int 0 [0]))) "kbd.c":239:5 -1
     (nil))
(jump_insn 342 341 343 56 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 349)
            (pc))) "kbd.c":239:5 -1
     (nil)
 -> 349)
;;  succ:       57 (FALLTHRU)
;;              58

;; basic block 57, loop depth 0, maybe hot
;;  prev block 56, next block 58, flags: (NEW, REACHABLE, RTL)
;;  pred:       56 (FALLTHRU)
(note 343 342 344 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn 344 343 345 57 (set (reg:SI 143 [ _33 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:18 -1
     (nil))
(insn 345 344 346 57 (set (reg/f:SI 267)
        (symbol_ref:SI ("sh") [flags 0x2]  <var_decl 0x7fcdc0b1a090 sh>)) "kbd.c":239:5 -1
     (nil))
(insn 346 345 347 57 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 267)
                    (reg:SI 143 [ _33 ])) [0 sh[_33]+0 S1 A8]))) "kbd.c":239:5 -1
     (nil))
(jump_insn 347 346 348 57 (set (pc)
        (label_ref 354)) -1
     (nil)
 -> 354)
;;  succ:       59

(barrier 348 347 349)
;; basic block 58, loop depth 0, maybe hot
;;  prev block 57, next block 59, flags: (NEW, REACHABLE, RTL)
;;  pred:       56
(code_label 349 348 350 58 44 (nil) [1 uses])
(note 350 349 351 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(insn 351 350 352 58 (set (reg:SI 144 [ _34 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 code+0 S1 A8]))) "kbd.c":239:31 -1
     (nil))
(insn 352 351 353 58 (set (reg/f:SI 268)
        (symbol_ref:SI ("unsh") [flags 0x2]  <var_decl 0x7fcdc0b165a0 unsh>)) "kbd.c":239:5 -1
     (nil))
(insn 353 352 354 58 (set (reg:SI 169 [ iftmp.13_64 ])
        (zero_extend:SI (mem:QI (plus:SI (reg/f:SI 268)
                    (reg:SI 144 [ _34 ])) [0 unsh[_34]+0 S1 A8]))) "kbd.c":239:5 -1
     (nil))
;;  succ:       59 (FALLTHRU)

;; basic block 59, loop depth 0, maybe hot
;;  prev block 58, next block 60, flags: (NEW, REACHABLE, RTL)
;;  pred:       57
;;              58 (FALLTHRU)
(code_label 354 353 355 59 45 (nil) [1 uses])
(note 355 354 356 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(insn 356 355 357 59 (set (reg:QI 269)
        (subreg/s/v:QI (reg:SI 169 [ iftmp.13_64 ]) 0)) "kbd.c":239:5 -1
     (nil))
(insn 357 356 358 59 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 269)) "kbd.c":239:5 -1
     (nil))
(insn 358 357 359 59 (set (reg/f:SI 270)
        (symbol_ref:SI ("capslock") [flags 0x2]  <var_decl 0x7fcdc0b1ab40 capslock>)) "kbd.c":241:7 -1
     (nil))
(insn 359 358 360 59 (set (reg:SI 145 [ capslock.15_35 ])
        (mem/c:SI (reg/f:SI 270) [3 capslock+0 S4 A32])) "kbd.c":241:7 -1
     (nil))
(insn 360 359 361 59 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145 [ capslock.15_35 ])
            (const_int 0 [0]))) "kbd.c":241:6 -1
     (nil))
(jump_insn 361 360 362 59 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":241:6 -1
     (nil)
 -> 407)
;;  succ:       60 (FALLTHRU)
;;              66

;; basic block 60, loop depth 0, maybe hot
;;  prev block 59, next block 61, flags: (NEW, REACHABLE, RTL)
;;  pred:       59 (FALLTHRU)
(note 362 361 367 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(insn 367 362 368 60 (set (reg:SI 273)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:8 -1
     (nil))
(insn 368 367 369 60 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 273)
            (const_int 64 [0x40]))) "kbd.c":242:8 -1
     (nil))
(jump_insn 369 368 370 60 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:8 -1
     (nil)
 -> 385)
;;  succ:       61 (FALLTHRU)
;;              63

;; basic block 61, loop depth 0, maybe hot
;;  prev block 60, next block 62, flags: (NEW, REACHABLE, RTL)
;;  pred:       60 (FALLTHRU)
(note 370 369 375 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn 375 370 376 61 (set (reg:SI 276)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":242:18 -1
     (nil))
(insn 376 375 377 61 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 276)
            (const_int 90 [0x5a]))) "kbd.c":242:18 -1
     (nil))
(jump_insn 377 376 378 61 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 385)
            (pc))) "kbd.c":242:18 -1
     (nil)
 -> 385)
;;  succ:       62 (FALLTHRU)
;;              63

;; basic block 62, loop depth 0, maybe hot
;;  prev block 61, next block 63, flags: (NEW, REACHABLE, RTL)
;;  pred:       61 (FALLTHRU)
(note 378 377 379 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(insn 379 378 380 62 (set (reg:QI 277)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":243:4 -1
     (nil))
(insn 380 379 381 62 (set (reg:SI 278)
        (plus:SI (subreg:SI (reg:QI 277) 0)
            (const_int 32 [0x20]))) "kbd.c":243:4 -1
     (nil))
(insn 381 380 382 62 (set (reg:QI 279)
        (subreg:QI (reg:SI 278) 0)) "kbd.c":243:4 -1
     (nil))
(insn 382 381 383 62 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 279)) "kbd.c":243:4 -1
     (nil))
(jump_insn 383 382 384 62 (set (pc)
        (label_ref 407)) "kbd.c":243:4 -1
     (nil)
 -> 407)
;;  succ:       66

(barrier 384 383 385)
;; basic block 63, loop depth 0, maybe hot
;;  prev block 62, next block 64, flags: (NEW, REACHABLE, RTL)
;;  pred:       60
;;              61
(code_label 385 384 386 63 47 (nil) [2 uses])
(note 386 385 391 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn 391 386 392 63 (set (reg:SI 282)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:13 -1
     (nil))
(insn 392 391 393 63 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 282)
            (const_int 96 [0x60]))) "kbd.c":244:13 -1
     (nil))
(jump_insn 393 392 394 63 (set (pc)
        (if_then_else (leu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:13 -1
     (nil)
 -> 407)
;;  succ:       64 (FALLTHRU)
;;              66

;; basic block 64, loop depth 0, maybe hot
;;  prev block 63, next block 65, flags: (NEW, REACHABLE, RTL)
;;  pred:       63 (FALLTHRU)
(note 394 393 399 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn 399 394 400 64 (set (reg:SI 285)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":244:23 -1
     (nil))
(insn 400 399 401 64 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 285)
            (const_int 122 [0x7a]))) "kbd.c":244:23 -1
     (nil))
(jump_insn 401 400 402 64 (set (pc)
        (if_then_else (gtu (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 407)
            (pc))) "kbd.c":244:23 -1
     (nil)
 -> 407)
;;  succ:       65 (FALLTHRU)
;;              66

;; basic block 65, loop depth 0, maybe hot
;;  prev block 64, next block 66, flags: (NEW, REACHABLE, RTL)
;;  pred:       64 (FALLTHRU)
(note 402 401 403 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn 403 402 404 65 (set (reg:QI 286)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":245:4 -1
     (nil))
(insn 404 403 405 65 (set (reg:SI 287)
        (plus:SI (subreg:SI (reg:QI 286) 0)
            (const_int -32 [0xffffffffffffffe0]))) "kbd.c":245:4 -1
     (nil))
(insn 405 404 406 65 (set (reg:QI 288)
        (subreg:QI (reg:SI 287) 0)) "kbd.c":245:4 -1
     (nil))
(insn 406 405 407 65 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 288)) "kbd.c":245:4 -1
     (nil))
;;  succ:       66 (FALLTHRU)

;; basic block 66, loop depth 0, maybe hot
;;  prev block 65, next block 67, flags: (NEW, REACHABLE, RTL)
;;  pred:       59
;;              62
;;              63
;;              64
;;              65 (FALLTHRU)
(code_label 407 406 408 66 46 (nil) [4 uses])
(note 408 407 409 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn 409 408 410 66 (set (reg/f:SI 289)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":248:7 -1
     (nil))
(insn 410 409 411 66 (set (reg:SI 146 [ control.16_36 ])
        (mem/c:SI (reg/f:SI 289) [3 control+0 S4 A32])) "kbd.c":248:7 -1
     (nil))
(insn 411 410 412 66 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 146 [ control.16_36 ])
            (const_int 0 [0]))) "kbd.c":248:6 -1
     (nil))
(jump_insn 412 411 413 66 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:6 -1
     (nil)
 -> 510)
;;  succ:       67 (FALLTHRU)
;;              75

;; basic block 67, loop depth 0, maybe hot
;;  prev block 66, next block 68, flags: (NEW, REACHABLE, RTL)
;;  pred:       66 (FALLTHRU)
(note 413 412 414 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(insn 414 413 415 67 (set (reg:SI 290)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":248:15 -1
     (nil))
(insn 415 414 416 67 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 290)
            (const_int 99 [0x63]))) "kbd.c":248:15 -1
     (nil))
(jump_insn 416 415 417 67 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 510)
            (pc))) "kbd.c":248:15 -1
     (nil)
 -> 510)
;;  succ:       68 (FALLTHRU)
;;              75

;; basic block 68, loop depth 0, maybe hot
;;  prev block 67, next block 69, flags: (NEW, REACHABLE, RTL)
;;  pred:       67 (FALLTHRU)
(note 417 416 418 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn 418 417 419 68 (set (reg:SI 291)
        (const_int 1 [0x1])) "kbd.c":250:11 -1
     (nil))
(insn 419 418 420 68 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 291)) "kbd.c":250:11 -1
     (nil))
(jump_insn 420 419 421 68 (set (pc)
        (label_ref 498)) "kbd.c":250:5 -1
     (nil)
 -> 498)
;;  succ:       73

(barrier 421 420 500)
;; basic block 69, loop depth 1, maybe hot
;;  prev block 68, next block 70, flags: (NEW, REACHABLE, RTL)
;;  pred:       73
(code_label 500 421 422 69 51 (nil) [1 uses])
(note 422 500 423 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn 423 422 424 69 (set (reg/f:SI 292)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:18 -1
     (nil))
(insn 424 423 425 69 (set (reg:SI 293)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:18 -1
     (nil))
(insn 425 424 426 69 (set (reg:SI 294)
        (reg:SI 293)) "kbd.c":251:18 -1
     (nil))
(insn 426 425 427 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 6 [0x6]))) "kbd.c":251:18 -1
     (nil))
(insn 427 426 428 69 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 65 [0x41]))
        (nil)))
(insn 428 427 429 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 1 [0x1]))) "kbd.c":251:18 -1
     (nil))
(insn 429 428 430 69 (set (reg:SI 294)
        (plus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 131 [0x83]))
        (nil)))
(insn 430 429 431 69 (set (reg:SI 294)
        (ashift:SI (reg:SI 294)
            (const_int 3 [0x3]))) "kbd.c":251:18 -1
     (nil))
(insn 431 430 432 69 (set (reg:SI 294)
        (minus:SI (reg:SI 294)
            (reg:SI 293))) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 1047 [0x417]))
        (nil)))
(insn 432 431 433 69 (set (reg:SI 295)
        (ashift:SI (reg:SI 294)
            (const_int 2 [0x2]))) "kbd.c":251:18 -1
     (nil))
(insn 433 432 434 69 (set (reg:SI 294)
        (reg:SI 295)) "kbd.c":251:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 293)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 434 433 435 69 (set (reg:SI 296)
        (plus:SI (reg/f:SI 292)
            (reg:SI 294))) "kbd.c":251:18 -1
     (nil))
(insn 435 434 436 69 (set (reg/f:SI 297)
        (plus:SI (reg:SI 296)
            (const_int 28 [0x1c]))) "kbd.c":251:18 -1
     (nil))
(insn 436 435 437 69 (set (reg:SI 147 [ _37 ])
        (mem:SI (reg/f:SI 297) [3 proc[i_63].status+0 S4 A32])) "kbd.c":251:18 -1
     (nil))
(insn 437 436 438 69 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 147 [ _37 ])
            (const_int 0 [0]))) "kbd.c":251:10 -1
     (nil))
(jump_insn 438 437 439 69 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:10 -1
     (nil)
 -> 493)
;;  succ:       70 (FALLTHRU)
;;              72

;; basic block 70, loop depth 1, maybe hot
;;  prev block 69, next block 71, flags: (NEW, REACHABLE, RTL)
;;  pred:       69 (FALLTHRU)
(note 439 438 440 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn 440 439 441 70 (set (reg/f:SI 298)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":251:51 -1
     (nil))
(insn 441 440 442 70 (set (reg:SI 299)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":251:51 -1
     (nil))
(insn 442 441 443 70 (set (reg:SI 300)
        (reg:SI 299)) "kbd.c":251:51 -1
     (nil))
(insn 443 442 444 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 6 [0x6]))) "kbd.c":251:51 -1
     (nil))
(insn 444 443 445 70 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 65 [0x41]))
        (nil)))
(insn 445 444 446 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 1 [0x1]))) "kbd.c":251:51 -1
     (nil))
(insn 446 445 447 70 (set (reg:SI 300)
        (plus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 131 [0x83]))
        (nil)))
(insn 447 446 448 70 (set (reg:SI 300)
        (ashift:SI (reg:SI 300)
            (const_int 3 [0x3]))) "kbd.c":251:51 -1
     (nil))
(insn 448 447 449 70 (set (reg:SI 300)
        (minus:SI (reg:SI 300)
            (reg:SI 299))) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 1047 [0x417]))
        (nil)))
(insn 449 448 450 70 (set (reg:SI 301)
        (ashift:SI (reg:SI 300)
            (const_int 2 [0x2]))) "kbd.c":251:51 -1
     (nil))
(insn 450 449 451 70 (set (reg:SI 300)
        (reg:SI 301)) "kbd.c":251:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 299)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 451 450 452 70 (set (reg:SI 302)
        (plus:SI (reg/f:SI 298)
            (reg:SI 300))) "kbd.c":251:51 -1
     (nil))
(insn 452 451 453 70 (set (reg/f:SI 303)
        (plus:SI (reg:SI 302)
            (const_int 84 [0x54]))) "kbd.c":251:51 -1
     (nil))
(insn 453 452 454 70 (set (reg/f:SI 148 [ _38 ])
        (mem/f:SI (reg/f:SI 303) [9 proc[i_63].res+0 S4 A32])) "kbd.c":251:51 -1
     (nil))
(insn 454 453 455 70 (set (reg/f:SI 149 [ _39 ])
        (plus:SI (reg/f:SI 148 [ _38 ])
            (const_int 60 [0x3c]))) "kbd.c":251:55 -1
     (nil))
(insn 455 454 456 70 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":251:37 -1
     (nil))
(insn 456 455 457 70 (set (reg:SI 0 r0)
        (reg/f:SI 149 [ _39 ])) "kbd.c":251:37 -1
     (nil))
(call_insn/i 457 456 458 70 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":251:37 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 458 457 459 70 (set (reg:SI 150 [ _40 ])
        (reg:SI 0 r0)) "kbd.c":251:37 -1
     (nil))
(insn 459 458 460 70 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 150 [ _40 ])
            (const_int 0 [0]))) "kbd.c":251:34 -1
     (nil))
(jump_insn 460 459 461 70 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 493)
            (pc))) "kbd.c":251:34 -1
     (nil)
 -> 493)
;;  succ:       71 (FALLTHRU)
;;              72

;; basic block 71, loop depth 1, maybe hot
;;  prev block 70, next block 72, flags: (NEW, REACHABLE, RTL)
;;  pred:       70 (FALLTHRU)
(note 461 460 462 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(insn 462 461 463 71 (set (reg/f:SI 304)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 -1
     (nil))
(insn 463 462 464 71 (set (reg:SI 305)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 -1
     (nil))
(insn 464 463 465 71 (set (reg:SI 306)
        (reg:SI 305)) "kbd.c":252:9 -1
     (nil))
(insn 465 464 466 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 6 [0x6]))) "kbd.c":252:9 -1
     (nil))
(insn 466 465 467 71 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 65 [0x41]))
        (nil)))
(insn 467 466 468 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 1 [0x1]))) "kbd.c":252:9 -1
     (nil))
(insn 468 467 469 71 (set (reg:SI 306)
        (plus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 131 [0x83]))
        (nil)))
(insn 469 468 470 71 (set (reg:SI 306)
        (ashift:SI (reg:SI 306)
            (const_int 3 [0x3]))) "kbd.c":252:9 -1
     (nil))
(insn 470 469 471 71 (set (reg:SI 306)
        (minus:SI (reg:SI 306)
            (reg:SI 305))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 1047 [0x417]))
        (nil)))
(insn 471 470 472 71 (set (reg:SI 307)
        (ashift:SI (reg:SI 306)
            (const_int 2 [0x2]))) "kbd.c":252:9 -1
     (nil))
(insn 472 471 473 71 (set (reg:SI 306)
        (reg:SI 307)) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 305)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 473 472 474 71 (set (reg:SI 308)
        (plus:SI (reg/f:SI 304)
            (reg:SI 306))) "kbd.c":252:9 -1
     (nil))
(insn 474 473 475 71 (set (reg/f:SI 309)
        (plus:SI (reg:SI 308)
            (const_int 84 [0x54]))) "kbd.c":252:9 -1
     (nil))
(insn 475 474 476 71 (set (reg/f:SI 151 [ _41 ])
        (mem/f:SI (reg/f:SI 309) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 -1
     (nil))
(insn 476 475 477 71 (set (reg:SI 152 [ _42 ])
        (mem:SI (plus:SI (reg/f:SI 151 [ _41 ])
                (const_int 92 [0x5c])) [3 _41->signal+0 S4 A32])) "kbd.c":252:22 -1
     (nil))
(insn 477 476 478 71 (set (reg/f:SI 310)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":252:9 -1
     (nil))
(insn 478 477 479 71 (set (reg:SI 311)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":252:9 -1
     (nil))
(insn 479 478 480 71 (set (reg:SI 312)
        (reg:SI 311)) "kbd.c":252:9 -1
     (nil))
(insn 480 479 481 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 6 [0x6]))) "kbd.c":252:9 -1
     (nil))
(insn 481 480 482 71 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 65 [0x41]))
        (nil)))
(insn 482 481 483 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 1 [0x1]))) "kbd.c":252:9 -1
     (nil))
(insn 483 482 484 71 (set (reg:SI 312)
        (plus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 131 [0x83]))
        (nil)))
(insn 484 483 485 71 (set (reg:SI 312)
        (ashift:SI (reg:SI 312)
            (const_int 3 [0x3]))) "kbd.c":252:9 -1
     (nil))
(insn 485 484 486 71 (set (reg:SI 312)
        (minus:SI (reg:SI 312)
            (reg:SI 311))) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 1047 [0x417]))
        (nil)))
(insn 486 485 487 71 (set (reg:SI 313)
        (ashift:SI (reg:SI 312)
            (const_int 2 [0x2]))) "kbd.c":252:9 -1
     (nil))
(insn 487 486 488 71 (set (reg:SI 312)
        (reg:SI 313)) "kbd.c":252:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 311)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 488 487 489 71 (set (reg:SI 314)
        (plus:SI (reg/f:SI 310)
            (reg:SI 312))) "kbd.c":252:9 -1
     (nil))
(insn 489 488 490 71 (set (reg/f:SI 315)
        (plus:SI (reg:SI 314)
            (const_int 84 [0x54]))) "kbd.c":252:9 -1
     (nil))
(insn 490 489 491 71 (set (reg/f:SI 153 [ _43 ])
        (mem/f:SI (reg/f:SI 315) [9 proc[i_63].res+0 S4 A32])) "kbd.c":252:9 -1
     (nil))
(insn 491 490 492 71 (set (reg:SI 154 [ _44 ])
        (ior:SI (reg:SI 152 [ _42 ])
            (const_int 4 [0x4]))) "kbd.c":252:22 -1
     (nil))
(insn 492 491 493 71 (set (mem:SI (plus:SI (reg/f:SI 153 [ _43 ])
                (const_int 92 [0x5c])) [3 _43->signal+0 S4 A32])
        (reg:SI 154 [ _44 ])) "kbd.c":252:22 -1
     (nil))
;;  succ:       72 (FALLTHRU)

;; basic block 72, loop depth 1, maybe hot
;;  prev block 71, next block 73, flags: (NEW, REACHABLE, RTL)
;;  pred:       69
;;              70
;;              71 (FALLTHRU)
(code_label 493 492 494 72 50 (nil) [2 uses])
(note 494 493 495 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn 495 494 496 72 (set (reg:SI 317)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:25 -1
     (nil))
(insn 496 495 497 72 (set (reg:SI 316)
        (plus:SI (reg:SI 317)
            (const_int 1 [0x1]))) "kbd.c":250:25 -1
     (nil))
(insn 497 496 498 72 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 316)) "kbd.c":250:25 -1
     (nil))
;;  succ:       73 (FALLTHRU,DFS_BACK)

;; basic block 73, loop depth 1, maybe hot
;;  prev block 72, next block 74, flags: (NEW, REACHABLE, RTL)
;;  pred:       68
;;              72 (FALLTHRU,DFS_BACK)
(code_label 498 497 499 73 49 (nil) [1 uses])
(note 499 498 503 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(insn 503 499 504 73 (set (reg:SI 318)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":250:16 -1
     (nil))
(insn 504 503 505 73 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 318)
            (const_int 63 [0x3f]))) "kbd.c":250:16 -1
     (nil))
(jump_insn 505 504 506 73 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 500)
            (pc))) "kbd.c":250:16 -1
     (nil)
 -> 500)
;;  succ:       69
;;              74 (FALLTHRU)

;; basic block 74, loop depth 0, maybe hot
;;  prev block 73, next block 75, flags: (NEW, REACHABLE, RTL)
;;  pred:       73 (FALLTHRU)
(note 506 505 507 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn 507 506 508 74 (set (reg:SI 319)
        (const_int 10 [0xa])) "kbd.c":255:7 -1
     (nil))
(insn 508 507 509 74 (set (reg:QI 320)
        (subreg:QI (reg:SI 319) 0)) "kbd.c":255:7 -1
     (nil))
(insn 509 508 510 74 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 320)) "kbd.c":255:7 -1
     (nil))
;;  succ:       75 (FALLTHRU)

;; basic block 75, loop depth 0, maybe hot
;;  prev block 74, next block 76, flags: (NEW, REACHABLE, RTL)
;;  pred:       66
;;              67
;;              74 (FALLTHRU)
(code_label 510 509 511 75 48 (nil) [2 uses])
(note 511 510 512 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn 512 511 513 75 (set (reg/f:SI 321)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":258:7 -1
     (nil))
(insn 513 512 514 75 (set (reg:SI 155 [ control.17_45 ])
        (mem/c:SI (reg/f:SI 321) [3 control+0 S4 A32])) "kbd.c":258:7 -1
     (nil))
(insn 514 513 515 75 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155 [ control.17_45 ])
            (const_int 0 [0]))) "kbd.c":258:6 -1
     (nil))
(jump_insn 515 514 516 75 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:6 -1
     (nil)
 -> 529)
;;  succ:       76 (FALLTHRU)
;;              79

;; basic block 76, loop depth 0, maybe hot
;;  prev block 75, next block 77, flags: (NEW, REACHABLE, RTL)
;;  pred:       75 (FALLTHRU)
(note 516 515 517 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn 517 516 518 76 (set (reg:SI 322)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:15 -1
     (nil))
(insn 518 517 519 76 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 322)
            (const_int 100 [0x64]))) "kbd.c":258:15 -1
     (nil))
(jump_insn 519 518 520 76 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 524)
            (pc))) "kbd.c":258:15 -1
     (nil)
 -> 524)
;;  succ:       78
;;              77 (FALLTHRU)

;; basic block 77, loop depth 0, maybe hot
;;  prev block 76, next block 78, flags: (NEW, REACHABLE, RTL)
;;  pred:       76 (FALLTHRU)
(note 520 519 521 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn 521 520 522 77 (set (reg:SI 323)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":258:25 -1
     (nil))
(insn 522 521 523 77 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 323)
            (const_int 68 [0x44]))) "kbd.c":258:25 -1
     (nil))
(jump_insn 523 522 524 77 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 529)
            (pc))) "kbd.c":258:25 -1
     (nil)
 -> 529)
;;  succ:       78 (FALLTHRU)
;;              79

;; basic block 78, loop depth 0, maybe hot
;;  prev block 77, next block 79, flags: (NEW, REACHABLE, RTL)
;;  pred:       76
;;              77 (FALLTHRU)
(code_label 524 523 525 78 53 (nil) [1 uses])
(note 525 524 526 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn 526 525 527 78 (set (reg:SI 324)
        (const_int 4 [0x4])) "kbd.c":259:7 -1
     (nil))
(insn 527 526 528 78 (set (reg:QI 325)
        (subreg:QI (reg:SI 324) 0)) "kbd.c":259:7 -1
     (nil))
(insn 528 527 529 78 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 325)) "kbd.c":259:7 -1
     (nil))
;;  succ:       79 (FALLTHRU)

;; basic block 79, loop depth 0, maybe hot
;;  prev block 78, next block 80, flags: (NEW, REACHABLE, RTL)
;;  pred:       75
;;              77
;;              78 (FALLTHRU)
(code_label 529 528 530 79 52 (nil) [2 uses])
(note 530 529 531 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn 531 530 532 79 (set (reg/f:SI 326)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":264:9 -1
     (nil))
(insn 532 531 533 79 (set (reg:SI 156 [ _46 ])
        (mem/v:SI (plus:SI (reg/f:SI 326)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":264:9 -1
     (nil))
(insn 533 532 534 79 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 156 [ _46 ])
            (const_int 128 [0x80]))) "kbd.c":264:6 -1
     (nil))
(jump_insn 534 533 535 79 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 538)
            (pc))) "kbd.c":264:6 -1
     (nil)
 -> 538)
;;  succ:       80 (FALLTHRU)
;;              81

;; basic block 80, loop depth 0, maybe hot
;;  prev block 79, next block 81, flags: (NEW, REACHABLE, RTL)
;;  pred:       79 (FALLTHRU)
(note 535 534 536 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(jump_insn 536 535 537 80 (set (pc)
        (label_ref 577)) "kbd.c":265:6 -1
     (nil)
 -> 577)
;;  succ:       83

(barrier 537 536 538)
;; basic block 81, loop depth 0, maybe hot
;;  prev block 80, next block 82, flags: (NEW, REACHABLE, RTL)
;;  pred:       79
(code_label 538 537 539 81 54 (nil) [1 uses])
(note 539 538 540 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn 540 539 541 81 (set (reg/f:SI 327)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:13 -1
     (nil))
(insn 541 540 542 81 (set (reg:SI 157 [ _47 ])
        (mem/v:SI (plus:SI (reg/f:SI 327)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":267:13 -1
     (nil))
(insn 542 541 543 81 (set (reg:SI 158 [ _49 ])
        (plus:SI (reg:SI 157 [ _47 ])
            (const_int 1 [0x1]))) "kbd.c":267:19 -1
     (nil))
(insn 543 542 544 81 (set (reg/f:SI 328)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:19 -1
     (nil))
(insn 544 543 545 81 (set (mem/v:SI (plus:SI (reg/f:SI 328)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 158 [ _49 ])) "kbd.c":267:19 -1
     (nil))
(insn 545 544 546 81 (set (reg/f:SI 329)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":267:23 -1
     (nil))
(insn 546 545 547 81 (set (reg/f:SI 330)
        (plus:SI (reg/f:SI 329)
            (reg:SI 157 [ _47 ]))) "kbd.c":267:23 -1
     (nil))
(insn 547 546 548 81 (set (reg:QI 331)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":267:23 -1
     (nil))
(insn 548 547 549 81 (set (mem/v:QI (plus:SI (reg/f:SI 330)
                (const_int 4 [0x4])) [0 kp_77->buf[_48]+0 S1 A8])
        (reg:QI 331)) "kbd.c":267:23 -1
     (nil))
(insn 549 548 550 81 (set (reg/f:SI 332)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 -1
     (nil))
(insn 550 549 551 81 (set (reg:SI 159 [ _50 ])
        (mem/v:SI (plus:SI (reg/f:SI 332)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])) "kbd.c":268:12 -1
     (nil))
(insn 551 550 552 81 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 159 [ _50 ]))
                    (const_int 0 [0])))
            (set (reg:SI 333)
                (minus:SI (const_int 0 [0])
                    (reg:SI 159 [ _50 ])))
        ]) "kbd.c":268:12 -1
     (nil))
(insn 552 551 553 81 (set (reg:SI 160 [ _51 ])
        (and:SI (reg:SI 159 [ _50 ])
            (const_int 127 [0x7f]))) "kbd.c":268:12 -1
     (nil))
(insn 553 552 554 81 (set (reg:SI 334)
        (and:SI (reg:SI 333)
            (const_int 127 [0x7f]))) "kbd.c":268:12 -1
     (nil))
(insn 554 553 555 81 (set (reg:SI 160 [ _51 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 334))
            (reg:SI 160 [ _51 ]))) "kbd.c":268:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 159 [ _50 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 555 554 556 81 (set (reg/f:SI 335)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":268:12 -1
     (nil))
(insn 556 555 557 81 (set (mem/v:SI (plus:SI (reg/f:SI 335)
                (const_int 132 [0x84])) [3 kp_77->head+0 S4 A32])
        (reg:SI 160 [ _51 ])) "kbd.c":268:12 -1
     (nil))
(insn 557 556 558 81 (set (reg/f:SI 336)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:5 -1
     (nil))
(insn 558 557 559 81 (set (reg:SI 161 [ _52 ])
        (mem/v:SI (plus:SI (reg/f:SI 336)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])) "kbd.c":270:5 -1
     (nil))
(insn 559 558 560 81 (set (reg:SI 162 [ _53 ])
        (plus:SI (reg:SI 161 [ _52 ])
            (const_int 1 [0x1]))) "kbd.c":270:11 -1
     (nil))
(insn 560 559 561 81 (set (reg/f:SI 337)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":270:11 -1
     (nil))
(insn 561 560 562 81 (set (mem/v:SI (plus:SI (reg/f:SI 337)
                (const_int 140 [0x8c])) [3 kp_77->data+0 S4 A32])
        (reg:SI 162 [ _53 ])) "kbd.c":270:11 -1
     (nil))
(insn 562 561 563 81 (set (reg:SI 338)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":271:3 -1
     (nil))
(insn 563 562 564 81 (set (reg/f:SI 163 [ _54 ])
        (plus:SI (reg:SI 338)
            (const_int 140 [0x8c]))) "kbd.c":271:3 -1
     (nil))
(insn 564 563 565 81 (set (reg:SI 0 r0)
        (reg/f:SI 163 [ _54 ])) "kbd.c":271:3 -1
     (nil))
(call_insn 565 564 566 81 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":271:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 566 565 567 81 (set (reg:SI 339)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":273:6 -1
     (nil))
(insn 567 566 568 81 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 339)
            (const_int 13 [0xd]))) "kbd.c":273:6 -1
     (nil))
(jump_insn 568 567 569 81 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 577)
            (pc))) "kbd.c":273:6 -1
     (nil)
 -> 577)
;;  succ:       82 (FALLTHRU)
;;              83

;; basic block 82, loop depth 0, maybe hot
;;  prev block 81, next block 83, flags: (NEW, REACHABLE, RTL)
;;  pred:       81 (FALLTHRU)
(note 569 568 570 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(insn 570 569 571 82 (set (reg/f:SI 340)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 -1
     (nil))
(insn 571 570 572 82 (set (reg:SI 164 [ kline.18_55 ])
        (mem/v/c:SI (reg/f:SI 340) [3 kline+0 S4 A32])) "kbd.c":274:10 -1
     (nil))
(insn 572 571 573 82 (set (reg:SI 165 [ _56 ])
        (plus:SI (reg:SI 164 [ kline.18_55 ])
            (const_int 1 [0x1]))) "kbd.c":274:10 -1
     (nil))
(insn 573 572 574 82 (set (reg/f:SI 341)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":274:10 -1
     (nil))
(insn 574 573 575 82 (set (mem/v/c:SI (reg/f:SI 341) [3 kline+0 S4 A32])
        (reg:SI 165 [ _56 ])) "kbd.c":274:10 -1
     (nil))
(insn 575 574 576 82 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":275:5 -1
     (nil))
(call_insn 576 575 577 82 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":275:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       83 (FALLTHRU)

;; basic block 83, loop depth 0, maybe hot
;;  prev block 82, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              10
;;              12
;;              14
;;              16
;;              25
;;              33
;;              37
;;              39
;;              41
;;              43
;;              47
;;              49
;;              51
;;              53
;;              55
;;              80
;;              81
;;              82 (FALLTHRU)
;;              32
(code_label 577 576 578 83 19 ("out") [19 uses])
(note 578 577 579 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(insn 579 578 580 83 (set (reg/f:SI 342)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":278:7 -1
     (nil))
(insn 580 579 581 83 (set (reg/f:SI 166 [ _57 ])
        (mem/v/f:SI (reg/f:SI 342) [2 kp_77->base+0 S4 A32])) "kbd.c":278:7 -1
     (nil))
(insn 581 580 582 83 (set (reg/f:SI 167 [ _58 ])
        (plus:SI (reg/f:SI 166 [ _57 ])
            (const_int 4 [0x4]))) "kbd.c":278:14 -1
     (nil))
(insn 582 581 583 83 (set (reg:SI 343)
        (const_int -1 [0xffffffffffffffff])) "kbd.c":278:23 -1
     (nil))
(insn 583 582 584 83 (set (reg:QI 344)
        (subreg:QI (reg:SI 343) 0)) "kbd.c":278:23 -1
     (nil))
(insn 584 583 585 83 (set (mem:QI (reg/f:SI 167 [ _58 ]) [0 *_58+0 S1 A8])
        (reg:QI 344)) "kbd.c":278:23 -1
     (nil))
(insn 585 584 586 83 (set (reg/f:SI 168 [ _59 ])
        (const_int 269746224 [0x10140030])) "kbd.c":279:3 -1
     (nil))
(insn 586 585 587 83 (set (reg:SI 345)
        (const_int 255 [0xff])) "kbd.c":279:13 -1
     (nil))
(insn 587 586 0 83 (set (mem/v:SI (reg/f:SI 168 [ _59 ]) [3 *_59+0 S4 A32])
        (reg:SI 345)) "kbd.c":279:13 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler2 (kbd_handler2, funcdef_no=6, decl_uid=4529, cgraph_uid=7, symbol_order=21)

void kbd_handler2 ()
{
  volatile struct KBD * kp;
  int i;
  u8 c;
  u8 scode;
  char * _1;
  char * _2;
  int release.19_3;
  int release.20_4;
  int release.21_5;
  int release.22_6;
  int release.23_7;
  int shifted.24_8;
  int _9;
  int _10;
  int control.25_11;
  int _12;
  int _13;
  struct pres * _14;
  char[32] * _15;
  int _16;
  struct pres * _17;
  unsigned int _18;
  struct pres * _19;
  unsigned int _20;
  int control.26_21;
  int _22;
  int control.27_23;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  volatile int * _34;
  int kline.28_35;
  int _36;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_48 = &kbd;
  _1 ={v} kp_48->base;
  _2 = _1 + 8;
  scode_50 = *_2;
  if (scode_50 == 240)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  release = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 4, loop depth 0
;;    pred:       2
  release.19_3 = release;
  if (release.19_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       5
;;                7

;;   basic block 5, loop depth 0
;;    pred:       4
  if (scode_50 != 18)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  release = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 7, loop depth 0
;;    pred:       4
;;                5
  release.20_4 = release;
  if (release.20_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       8
;;                10

;;   basic block 8, loop depth 0
;;    pred:       7
  if (scode_50 == 18)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  release = 0;
  shifted = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 10, loop depth 0
;;    pred:       7
;;                8
  release.21_5 = release;
  if (release.21_5 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  if (scode_50 == 18)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]
;;    succ:       12
;;                13

;;   basic block 12, loop depth 0
;;    pred:       11
  release = 0;
  shifted = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 13, loop depth 0
;;    pred:       10
;;                11
  release.22_6 = release;
  if (release.22_6 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       14
;;                16

;;   basic block 14, loop depth 0
;;    pred:       13
  if (scode_50 == 20)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  release = 0;
  control = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 16, loop depth 0
;;    pred:       13
;;                14
  release.23_7 = release;
  if (release.23_7 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]
;;    succ:       17
;;                19

;;   basic block 17, loop depth 0
;;    pred:       16
  if (scode_50 == 20)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]
;;    succ:       18
;;                19

;;   basic block 18, loop depth 0
;;    pred:       17
  release = 0;
  control = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 19, loop depth 0
;;    pred:       16
;;                17
  shifted.24_8 = shifted;
  if (shifted.24_8 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]
;;    succ:       20
;;                21

;;   basic block 20, loop depth 0
;;    pred:       19
  _9 = (int) scode_50;
  c_61 = ltab[_9];
  goto <bb 22>; [INV]
;;    succ:       22

;;   basic block 21, loop depth 0
;;    pred:       19
  _10 = (int) scode_50;
  c_60 = utab[_10];
;;    succ:       22

;;   basic block 22, loop depth 0
;;    pred:       20
;;                21
  # c_37 = PHI <c_61(20), c_60(21)>
  control.25_11 = control;
  if (control.25_11 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       23
;;                31

;;   basic block 23, loop depth 0
;;    pred:       22
  if (scode_50 == 33)
    goto <bb 24>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       24
;;                31

;;   basic block 24, loop depth 0
;;    pred:       23
  _12 = (int) scode_50;
  kprintf ("Control-C: scode=%x\n", _12);
  i_63 = 1;
  goto <bb 29>; [INV]
;;    succ:       29

;;   basic block 25, loop depth 1
;;    pred:       29
  _13 = proc[i_41].status;
  if (_13 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 28>; [INV]
;;    succ:       26
;;                28

;;   basic block 26, loop depth 1
;;    pred:       25
  _14 = proc[i_41].res;
  _15 = &_14->tty;
  _16 = strcmp (_15, "/dev/tty0");
  if (_16 == 0)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]
;;    succ:       27
;;                28

;;   basic block 27, loop depth 1
;;    pred:       26
  _17 = proc[i_41].res;
  _18 = _17->signal;
  _19 = proc[i_41].res;
  _20 = _18 | 4;
  _19->signal = _20;
;;    succ:       28

;;   basic block 28, loop depth 1
;;    pred:       25
;;                26
;;                27
  i_68 = i_41 + 1;
;;    succ:       29

;;   basic block 29, loop depth 1
;;    pred:       24
;;                28
  # i_41 = PHI <i_63(24), i_68(28)>
  if (i_41 <= 63)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]
;;    succ:       25
;;                30

;;   basic block 30, loop depth 0
;;    pred:       29
  kprintf ("\n");
  c_65 = 13;
  control = 0;
;;    succ:       31

;;   basic block 31, loop depth 0
;;    pred:       22
;;                23
;;                30
  # c_38 = PHI <c_37(22), c_37(23), c_65(30)>
  control.26_21 = control;
  if (control.26_21 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       32
;;                34

;;   basic block 32, loop depth 0
;;    pred:       31
  if (scode_50 == 35)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       33
;;                34

;;   basic block 33, loop depth 0
;;    pred:       32
  c_69 = 4;
  _22 = (int) c_69;
  kprintf ("Control-D: c = %x\n", _22);
  control = 0;
;;    succ:       34

;;   basic block 34, loop depth 0
;;    pred:       31
;;                32
;;                33
  # c_39 = PHI <c_38(31), c_38(32), c_69(33)>
  control.27_23 = control;
  if (control.27_23 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       35
;;                37

;;   basic block 35, loop depth 0
;;    pred:       34
  if (scode_50 == 35)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       36
;;                37

;;   basic block 36, loop depth 0
;;    pred:       35
  c_72 = 4;
  _24 = (int) c_72;
  kprintf ("Control-D: c = %x\n", _24);
;;    succ:       37

;;   basic block 37, loop depth 0
;;    pred:       34
;;                35
;;                36
  # c_40 = PHI <c_39(34), c_39(35), c_72(36)>
  _25 ={v} kp_48->head;
  _26 = _25;
  _27 = _26 + 1;
  kp_48->head ={v} _27;
  kp_48->buf[_26] ={v} c_40;
  _28 ={v} kp_48->head;
  _29 = _28 % 128;
  kp_48->head ={v} _29;
  _30 ={v} kp_48->data;
  _31 = _30 + 1;
  kp_48->data ={v} _31;
  _32 ={v} kp_48->room;
  _33 = _32 + -1;
  kp_48->room ={v} _33;
  _34 = &kp_48->data;
  kwakeup (_34);
  if (c_40 == 13)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  kline.28_35 ={v} kline;
  _36 = kline.28_35 + 1;
  kline ={v} _36;
  kwakeup (&kline);
;;    succ:       39

;;   basic block 39, loop depth 0
;;    pred:       3
;;                6
;;                9
;;                12
;;                15
;;                18
;;                37
;;                38
<L46>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (release.19_3 - 3 )
Partition 4 (release.20_4 - 4 )
Partition 5 (release.21_5 - 5 )
Partition 6 (release.22_6 - 6 )
Partition 7 (release.23_7 - 7 )
Partition 8 (shifted.24_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (control.25_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (_17 - 17 )
Partition 18 (_18 - 18 )
Partition 19 (_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (control.26_21 - 21 )
Partition 22 (_22 - 22 )
Partition 23 (control.27_23 - 23 )
Partition 24 (_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (_27 - 27 )
Partition 28 (_28 - 28 )
Partition 29 (_29 - 29 )
Partition 30 (_30 - 30 )
Partition 31 (_31 - 31 )
Partition 32 (_32 - 32 )
Partition 33 (_33 - 33 )
Partition 34 (_34 - 34 )
Partition 35 (kline.28_35 - 35 )
Partition 36 (_36 - 36 )
Partition 37 (c_37 - 37 )
Partition 38 (c_38 - 38 )
Partition 39 (c_39 - 39 )
Partition 40 (c_40 - 40 )
Partition 41 (i_41 - 41 )
Partition 48 (kp_48 - 48 )
Partition 50 (scode_50 - 50 )
Partition 60 (c_60 - 60 )
Partition 61 (c_61 - 61 )
Partition 63 (i_63 - 63 )
Partition 65 (c_65 - 65 )
Partition 68 (i_68 - 68 )
Partition 69 (c_69 - 69 )
Partition 72 (c_72 - 72 )


Coalescible Partition map 

Partition 0, base 0 (_25 - 25 26 )
Partition 2, base 1 (c_37 - 37 38 39 40 60 61 65 69 72 )
Partition 6, base 2 (i_41 - 41 63 68 )


Partition map 

Partition 0 (_25 - 25 )
Partition 1 (_26 - 26 )
Partition 2 (c_37 - 37 )
Partition 3 (c_38 - 38 )
Partition 4 (c_39 - 39 )
Partition 5 (c_40 - 40 )
Partition 6 (i_41 - 41 )
Partition 7 (c_60 - 60 )
Partition 8 (c_61 - 61 )
Partition 9 (i_63 - 63 )
Partition 10 (c_65 - 65 )
Partition 11 (i_68 - 68 )
Partition 12 (c_69 - 69 )
Partition 13 (c_72 - 72 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) c_37 <-> c_61
(2147483646, 0) c_37 <-> c_60
(2147483646, 0) i_41 <-> i_63
(2147483646, 0) i_41 <-> i_68
(2147483646, 0) c_37 <-> c_38
(2147483646, 0) c_37 <-> c_39
(2147483646, 0) c_37 <-> c_40
(2147483646, 0) c_37 <-> c_65
(2147483646, 0) c_37 <-> c_69
(2147483646, 0) c_37 <-> c_72
(40000, 0) c_38 <-> c_39
(40000, 0) c_39 <-> c_40
(10000, 0) c_38 <-> c_65
(10000, 0) c_39 <-> c_69
(10000, 0) c_40 <-> c_72
(10000, 0) _25 <-> _26

Partition map 

Partition 0 (_25 - 25 )
Partition 1 (_26 - 26 )
Partition 2 (c_37 - 37 )
Partition 3 (c_38 - 38 )
Partition 4 (c_39 - 39 )
Partition 5 (c_40 - 40 )
Partition 6 (i_41 - 41 )
Partition 7 (c_60 - 60 )
Partition 8 (c_61 - 61 )
Partition 9 (i_63 - 63 )
Partition 10 (c_65 - 65 )
Partition 11 (i_68 - 68 )
Partition 12 (c_69 - 69 )
Partition 13 (c_72 - 72 )

Coalesce list: (37)c_37 & (61)c_61 [map: 2, 8] : Success -> 2
Coalesce list: (37)c_37 & (60)c_60 [map: 2, 7] : Success -> 2
Coalesce list: (41)i_41 & (63)i_63 [map: 6, 9] : Success -> 6
Coalesce list: (41)i_41 & (68)i_68 [map: 6, 11] : Success -> 6
Coalesce list: (37)c_37 & (38)c_38 [map: 2, 3] : Success -> 2
Coalesce list: (37)c_37 & (39)c_39 [map: 2, 4] : Success -> 2
Coalesce list: (37)c_37 & (40)c_40 [map: 2, 5] : Success -> 2
Coalesce list: (37)c_37 & (65)c_65 [map: 2, 10] : Success -> 2
Coalesce list: (37)c_37 & (69)c_69 [map: 2, 12] : Success -> 2
Coalesce list: (37)c_37 & (72)c_72 [map: 2, 13] : Success -> 2
Coalesce list: (38)c_37 & (39)c_37: Already Coalesced.
Coalesce list: (39)c_37 & (40)c_37: Already Coalesced.
Coalesce list: (38)c_37 & (65)c_37: Already Coalesced.
Coalesce list: (39)c_37 & (69)c_37: Already Coalesced.
Coalesce list: (40)c_37 & (72)c_37: Already Coalesced.
Coalesce list: (25)_25 & (26)_26 [map: 0, 1] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (release.19_3 - 3 )
Partition 3 (release.20_4 - 4 )
Partition 4 (release.21_5 - 5 )
Partition 5 (release.22_6 - 6 )
Partition 6 (release.23_7 - 7 )
Partition 7 (shifted.24_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (control.25_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (_17 - 17 )
Partition 17 (_18 - 18 )
Partition 18 (_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (control.26_21 - 21 )
Partition 21 (_22 - 22 )
Partition 22 (control.27_23 - 23 )
Partition 23 (_24 - 24 )
Partition 24 (_25 - 25 26 )
Partition 25 (_27 - 27 )
Partition 26 (_28 - 28 )
Partition 27 (_29 - 29 )
Partition 28 (_30 - 30 )
Partition 29 (_31 - 31 )
Partition 30 (_32 - 32 )
Partition 31 (_33 - 33 )
Partition 32 (_34 - 34 )
Partition 33 (kline.28_35 - 35 )
Partition 34 (_36 - 36 )
Partition 35 (c_37 - 37 38 39 40 60 61 65 69 72 )
Partition 36 (i_41 - 41 63 68 )
Partition 37 (kp_48 - 48 )
Partition 38 (scode_50 - 50 )

void kbd_handler2 ()
{
  volatile struct KBD * kp;
  int i;
  u8 c;
  u8 scode;
  char * _1;
  char * _2;
  int release.19_3;
  int release.20_4;
  int release.21_5;
  int release.22_6;
  int release.23_7;
  int shifted.24_8;
  int _9;
  int _10;
  int control.25_11;
  int _12;
  int _13;
  struct pres * _14;
  char[32] * _15;
  int _16;
  struct pres * _17;
  unsigned int _18;
  struct pres * _19;
  unsigned int _20;
  int control.26_21;
  int _22;
  int control.27_23;
  int _24;
  int _25;
  int _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  volatile int * _34;
  int kline.28_35;
  int _36;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_48 = &kbd;
  _1 ={v} kp_48->base;
  _2 = _1 + 8;
  scode_50 = *_2;
  if (scode_50 == 240)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  release = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 4, loop depth 0
;;    pred:       2
  release.19_3 = release;
  if (release.19_3 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       5
;;                7

;;   basic block 5, loop depth 0
;;    pred:       4
  if (scode_50 != 18)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  release = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 7, loop depth 0
;;    pred:       4
;;                5
  release.20_4 = release;
  if (release.20_4 != 0)
    goto <bb 8>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       8
;;                10

;;   basic block 8, loop depth 0
;;    pred:       7
  if (scode_50 == 18)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  release = 0;
  shifted = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 10, loop depth 0
;;    pred:       7
;;                8
  release.21_5 = release;
  if (release.21_5 == 0)
    goto <bb 11>; [INV]
  else
    goto <bb 13>; [INV]
;;    succ:       11
;;                13

;;   basic block 11, loop depth 0
;;    pred:       10
  if (scode_50 == 18)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]
;;    succ:       12
;;                13

;;   basic block 12, loop depth 0
;;    pred:       11
  release = 0;
  shifted = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 13, loop depth 0
;;    pred:       10
;;                11
  release.22_6 = release;
  if (release.22_6 == 0)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       14
;;                16

;;   basic block 14, loop depth 0
;;    pred:       13
  if (scode_50 == 20)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  release = 0;
  control = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 16, loop depth 0
;;    pred:       13
;;                14
  release.23_7 = release;
  if (release.23_7 != 0)
    goto <bb 17>; [INV]
  else
    goto <bb 19>; [INV]
;;    succ:       17
;;                19

;;   basic block 17, loop depth 0
;;    pred:       16
  if (scode_50 == 20)
    goto <bb 18>; [INV]
  else
    goto <bb 19>; [INV]
;;    succ:       18
;;                19

;;   basic block 18, loop depth 0
;;    pred:       17
  release = 0;
  control = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 39>; [INV]
;;    succ:       39

;;   basic block 19, loop depth 0
;;    pred:       16
;;                17
  shifted.24_8 = shifted;
  if (shifted.24_8 == 0)
    goto <bb 20>; [INV]
  else
    goto <bb 21>; [INV]
;;    succ:       20
;;                21

;;   basic block 20, loop depth 0
;;    pred:       19
  _9 = (int) scode_50;
  c_61 = ltab[_9];
  goto <bb 22>; [INV]
;;    succ:       22

;;   basic block 21, loop depth 0
;;    pred:       19
  _10 = (int) scode_50;
  c_60 = utab[_10];
;;    succ:       22

;;   basic block 22, loop depth 0
;;    pred:       20
;;                21
  # c_37 = PHI <c_61(20), c_60(21)>
  control.25_11 = control;
  if (control.25_11 != 0)
    goto <bb 23>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       23
;;                31

;;   basic block 23, loop depth 0
;;    pred:       22
  if (scode_50 == 33)
    goto <bb 24>; [INV]
  else
    goto <bb 31>; [INV]
;;    succ:       24
;;                31

;;   basic block 24, loop depth 0
;;    pred:       23
  _12 = (int) scode_50;
  kprintf ("Control-C: scode=%x\n", _12);
  i_63 = 1;
  goto <bb 29>; [INV]
;;    succ:       29

;;   basic block 25, loop depth 1
;;    pred:       29
  _13 = proc[i_41].status;
  if (_13 != 0)
    goto <bb 26>; [INV]
  else
    goto <bb 28>; [INV]
;;    succ:       26
;;                28

;;   basic block 26, loop depth 1
;;    pred:       25
  _14 = proc[i_41].res;
  _15 = &_14->tty;
  _16 = strcmp (_15, "/dev/tty0");
  if (_16 == 0)
    goto <bb 27>; [INV]
  else
    goto <bb 28>; [INV]
;;    succ:       27
;;                28

;;   basic block 27, loop depth 1
;;    pred:       26
  _17 = proc[i_41].res;
  _18 = _17->signal;
  _19 = proc[i_41].res;
  _20 = _18 | 4;
  _19->signal = _20;
;;    succ:       28

;;   basic block 28, loop depth 1
;;    pred:       25
;;                26
;;                27
  i_68 = i_41 + 1;
;;    succ:       29

;;   basic block 29, loop depth 1
;;    pred:       24
;;                28
  # i_41 = PHI <i_63(24), i_68(28)>
  if (i_41 <= 63)
    goto <bb 25>; [INV]
  else
    goto <bb 30>; [INV]
;;    succ:       25
;;                30

;;   basic block 30, loop depth 0
;;    pred:       29
  kprintf ("\n");
  c_65 = 13;
  control = 0;
;;    succ:       31

;;   basic block 31, loop depth 0
;;    pred:       22
;;                23
;;                30
  # c_38 = PHI <c_37(22), c_37(23), c_65(30)>
  control.26_21 = control;
  if (control.26_21 != 0)
    goto <bb 32>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       32
;;                34

;;   basic block 32, loop depth 0
;;    pred:       31
  if (scode_50 == 35)
    goto <bb 33>; [INV]
  else
    goto <bb 34>; [INV]
;;    succ:       33
;;                34

;;   basic block 33, loop depth 0
;;    pred:       32
  c_69 = 4;
  _22 = (int) c_69;
  kprintf ("Control-D: c = %x\n", _22);
  control = 0;
;;    succ:       34

;;   basic block 34, loop depth 0
;;    pred:       31
;;                32
;;                33
  # c_39 = PHI <c_38(31), c_38(32), c_69(33)>
  control.27_23 = control;
  if (control.27_23 != 0)
    goto <bb 35>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       35
;;                37

;;   basic block 35, loop depth 0
;;    pred:       34
  if (scode_50 == 35)
    goto <bb 36>; [INV]
  else
    goto <bb 37>; [INV]
;;    succ:       36
;;                37

;;   basic block 36, loop depth 0
;;    pred:       35
  c_72 = 4;
  _24 = (int) c_72;
  kprintf ("Control-D: c = %x\n", _24);
;;    succ:       37

;;   basic block 37, loop depth 0
;;    pred:       34
;;                35
;;                36
  # c_40 = PHI <c_39(34), c_39(35), c_72(36)>
  _25 ={v} kp_48->head;
  _26 = _25;
  _27 = _26 + 1;
  kp_48->head ={v} _27;
  kp_48->buf[_26] ={v} c_40;
  _28 ={v} kp_48->head;
  _29 = _28 % 128;
  kp_48->head ={v} _29;
  _30 ={v} kp_48->data;
  _31 = _30 + 1;
  kp_48->data ={v} _31;
  _32 ={v} kp_48->room;
  _33 = _32 + -1;
  kp_48->room ={v} _33;
  _34 = &kp_48->data;
  kwakeup (_34);
  if (c_40 == 13)
    goto <bb 38>; [INV]
  else
    goto <bb 39>; [INV]
;;    succ:       38
;;                39

;;   basic block 38, loop depth 0
;;    pred:       37
  kline.28_35 ={v} kline;
  _36 = kline.28_35 + 1;
  kline ={v} _36;
  kwakeup (&kline);
;;    succ:       39

;;   basic block 39, loop depth 0
;;    pred:       3
;;                6
;;                9
;;                12
;;                15
;;                18
;;                37
;;                38
<L46>:
  return;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	kp_48
Partition 1: size 4 align 4
	i_41
Partition 3: size 1 align 1
	scode_50
Partition 0: size 1 align 1
	c_37

;; Generating RTL for gimple basic block 2

;; kp_48 = &kbd;

(insn 5 4 6 (set (reg/f:SI 148)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":321:8 -1
     (nil))

(insn 6 5 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 148)) "kbd.c":321:8 -1
     (nil))

;; _1 ={v} kp_48->base;

(insn 7 6 8 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":323:15 -1
     (nil))

(insn 8 7 0 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_48->base+0 S4 A32])) "kbd.c":323:15 -1
     (nil))

;; _2 = _1 + 8;

(insn 9 8 0 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":323:22 -1
     (nil))

;; scode_50 = *_2;

(insn 10 9 11 (set (reg:QI 150)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":323:9 -1
     (nil))

(insn 11 10 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8])
        (reg:QI 150)) "kbd.c":323:9 -1
     (nil))

;; if (scode_50 == 240)

(insn 12 11 13 (set (reg:SI 151)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":326:6 -1
     (nil))

(insn 13 12 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 151)
            (const_int 240 [0xf0]))) "kbd.c":326:6 -1
     (nil))

(jump_insn 14 13 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":326:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; release = 1;

(insn 16 15 17 (set (reg/f:SI 152)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":327:13 -1
     (nil))

(insn 17 16 18 (set (reg:SI 153)
        (const_int 1 [0x1])) "kbd.c":327:13 -1
     (nil))

(insn 18 17 0 (set (mem/c:SI (reg/f:SI 152) [3 release+0 S4 A32])
        (reg:SI 153)) "kbd.c":327:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 21 20 22 65 (nil) [0 uses])

(note 22 21 0 NOTE_INSN_BASIC_BLOCK)

;; release.19_3 = release;

(insn 23 22 24 (set (reg/f:SI 154)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":331:7 -1
     (nil))

(insn 24 23 0 (set (reg:SI 115 [ release.19_3 ])
        (mem/c:SI (reg/f:SI 154) [3 release+0 S4 A32])) "kbd.c":331:7 -1
     (nil))

;; if (release.19_3 != 0)

(insn 25 24 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ release.19_3 ])
            (const_int 0 [0]))) "kbd.c":331:6 -1
     (nil))

(jump_insn 26 25 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":331:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; if (scode_50 != 18)

(insn 28 27 29 (set (reg:SI 155)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":331:15 -1
     (nil))

(insn 29 28 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155)
            (const_int 18 [0x12]))) "kbd.c":331:15 -1
     (nil))

(jump_insn 30 29 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":331:15 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; release = 0;

(insn 32 31 33 (set (reg/f:SI 156)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":332:13 -1
     (nil))

(insn 33 32 34 (set (reg:SI 157)
        (const_int 0 [0])) "kbd.c":332:13 -1
     (nil))

(insn 34 33 0 (set (mem/c:SI (reg/f:SI 156) [3 release+0 S4 A32])
        (reg:SI 157)) "kbd.c":332:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 7

;; 

(code_label 37 36 38 67 (nil) [0 uses])

(note 38 37 0 NOTE_INSN_BASIC_BLOCK)

;; release.20_4 = release;

(insn 39 38 40 (set (reg/f:SI 158)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":336:7 -1
     (nil))

(insn 40 39 0 (set (reg:SI 116 [ release.20_4 ])
        (mem/c:SI (reg/f:SI 158) [3 release+0 S4 A32])) "kbd.c":336:7 -1
     (nil))

;; if (release.20_4 != 0)

(insn 41 40 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ release.20_4 ])
            (const_int 0 [0]))) "kbd.c":336:6 -1
     (nil))

(jump_insn 42 41 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":336:6 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; if (scode_50 == 18)

(insn 44 43 45 (set (reg:SI 159)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":336:15 -1
     (nil))

(insn 45 44 46 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 159)
            (const_int 18 [0x12]))) "kbd.c":336:15 -1
     (nil))

(jump_insn 46 45 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":336:15 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; release = 0;

(insn 48 47 49 (set (reg/f:SI 160)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":337:13 -1
     (nil))

(insn 49 48 50 (set (reg:SI 161)
        (const_int 0 [0])) "kbd.c":337:13 -1
     (nil))

(insn 50 49 0 (set (mem/c:SI (reg/f:SI 160) [3 release+0 S4 A32])
        (reg:SI 161)) "kbd.c":337:13 -1
     (nil))

;; shifted = 0;

(insn 51 50 52 (set (reg/f:SI 162)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":338:13 -1
     (nil))

(insn 52 51 53 (set (reg:SI 163)
        (const_int 0 [0])) "kbd.c":338:13 -1
     (nil))

(insn 53 52 0 (set (mem/c:SI (reg/f:SI 162) [3 shifted+0 S4 A32])
        (reg:SI 163)) "kbd.c":338:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 10

;; 

(code_label 56 55 57 68 (nil) [0 uses])

(note 57 56 0 NOTE_INSN_BASIC_BLOCK)

;; release.21_5 = release;

(insn 58 57 59 (set (reg/f:SI 164)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":342:7 -1
     (nil))

(insn 59 58 0 (set (reg:SI 117 [ release.21_5 ])
        (mem/c:SI (reg/f:SI 164) [3 release+0 S4 A32])) "kbd.c":342:7 -1
     (nil))

;; if (release.21_5 == 0)

(insn 60 59 61 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ release.21_5 ])
            (const_int 0 [0]))) "kbd.c":342:6 -1
     (nil))

(jump_insn 61 60 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":342:6 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; if (scode_50 == 18)

(insn 63 62 64 (set (reg:SI 165)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":342:16 -1
     (nil))

(insn 64 63 65 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 165)
            (const_int 18 [0x12]))) "kbd.c":342:16 -1
     (nil))

(jump_insn 65 64 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":342:16 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; release = 0;

(insn 67 66 68 (set (reg/f:SI 166)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":343:13 -1
     (nil))

(insn 68 67 69 (set (reg:SI 167)
        (const_int 0 [0])) "kbd.c":343:13 -1
     (nil))

(insn 69 68 0 (set (mem/c:SI (reg/f:SI 166) [3 release+0 S4 A32])
        (reg:SI 167)) "kbd.c":343:13 -1
     (nil))

;; shifted = 1;

(insn 70 69 71 (set (reg/f:SI 168)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":344:13 -1
     (nil))

(insn 71 70 72 (set (reg:SI 169)
        (const_int 1 [0x1])) "kbd.c":344:13 -1
     (nil))

(insn 72 71 0 (set (mem/c:SI (reg/f:SI 168) [3 shifted+0 S4 A32])
        (reg:SI 169)) "kbd.c":344:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 13

;; 

(code_label 75 74 76 69 (nil) [0 uses])

(note 76 75 0 NOTE_INSN_BASIC_BLOCK)

;; release.22_6 = release;

(insn 77 76 78 (set (reg/f:SI 170)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":348:7 -1
     (nil))

(insn 78 77 0 (set (reg:SI 118 [ release.22_6 ])
        (mem/c:SI (reg/f:SI 170) [3 release+0 S4 A32])) "kbd.c":348:7 -1
     (nil))

;; if (release.22_6 == 0)

(insn 79 78 80 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ release.22_6 ])
            (const_int 0 [0]))) "kbd.c":348:6 -1
     (nil))

(jump_insn 80 79 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":348:6 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; if (scode_50 == 20)

(insn 82 81 83 (set (reg:SI 171)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":348:16 -1
     (nil))

(insn 83 82 84 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 171)
            (const_int 20 [0x14]))) "kbd.c":348:16 -1
     (nil))

(jump_insn 84 83 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":348:16 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; release = 0;

(insn 86 85 87 (set (reg/f:SI 172)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":349:13 -1
     (nil))

(insn 87 86 88 (set (reg:SI 173)
        (const_int 0 [0])) "kbd.c":349:13 -1
     (nil))

(insn 88 87 0 (set (mem/c:SI (reg/f:SI 172) [3 release+0 S4 A32])
        (reg:SI 173)) "kbd.c":349:13 -1
     (nil))

;; control = 1;

(insn 89 88 90 (set (reg/f:SI 174)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":350:13 -1
     (nil))

(insn 90 89 91 (set (reg:SI 175)
        (const_int 1 [0x1])) "kbd.c":350:13 -1
     (nil))

(insn 91 90 0 (set (mem/c:SI (reg/f:SI 174) [3 control+0 S4 A32])
        (reg:SI 175)) "kbd.c":350:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 16

;; 

(code_label 94 93 95 70 (nil) [0 uses])

(note 95 94 0 NOTE_INSN_BASIC_BLOCK)

;; release.23_7 = release;

(insn 96 95 97 (set (reg/f:SI 176)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":354:7 -1
     (nil))

(insn 97 96 0 (set (reg:SI 119 [ release.23_7 ])
        (mem/c:SI (reg/f:SI 176) [3 release+0 S4 A32])) "kbd.c":354:7 -1
     (nil))

;; if (release.23_7 != 0)

(insn 98 97 99 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ release.23_7 ])
            (const_int 0 [0]))) "kbd.c":354:6 -1
     (nil))

(jump_insn 99 98 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":354:6 -1
     (nil))

;; Generating RTL for gimple basic block 17

;; if (scode_50 == 20)

(insn 101 100 102 (set (reg:SI 177)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":354:15 -1
     (nil))

(insn 102 101 103 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 177)
            (const_int 20 [0x14]))) "kbd.c":354:15 -1
     (nil))

(jump_insn 103 102 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":354:15 -1
     (nil))

;; Generating RTL for gimple basic block 18

;; release = 0;

(insn 105 104 106 (set (reg/f:SI 178)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":355:13 -1
     (nil))

(insn 106 105 107 (set (reg:SI 179)
        (const_int 0 [0])) "kbd.c":355:13 -1
     (nil))

(insn 107 106 0 (set (mem/c:SI (reg/f:SI 178) [3 release+0 S4 A32])
        (reg:SI 179)) "kbd.c":355:13 -1
     (nil))

;; control = 0;

(insn 108 107 109 (set (reg/f:SI 180)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":356:13 -1
     (nil))

(insn 109 108 110 (set (reg:SI 181)
        (const_int 0 [0])) "kbd.c":356:13 -1
     (nil))

(insn 110 109 0 (set (mem/c:SI (reg/f:SI 180) [3 control+0 S4 A32])
        (reg:SI 181)) "kbd.c":356:13 -1
     (nil))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 19

;; 

(code_label 113 112 114 71 (nil) [0 uses])

(note 114 113 0 NOTE_INSN_BASIC_BLOCK)

;; shifted.24_8 = shifted;

(insn 115 114 116 (set (reg/f:SI 182)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":360:7 -1
     (nil))

(insn 116 115 0 (set (reg:SI 120 [ shifted.24_8 ])
        (mem/c:SI (reg/f:SI 182) [3 shifted+0 S4 A32])) "kbd.c":360:7 -1
     (nil))

;; if (shifted.24_8 == 0)

(insn 117 116 118 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120 [ shifted.24_8 ])
            (const_int 0 [0]))) "kbd.c":360:6 -1
     (nil))

(jump_insn 118 117 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":360:6 -1
     (nil))

;; Generating RTL for gimple basic block 20

;; _9 = (int) scode_50;

(insn 120 119 0 (set (reg:SI 121 [ _9 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":361:14 -1
     (nil))

;; c_61 = ltab[_9];

(insn 121 120 122 (set (reg/f:SI 183)
        (symbol_ref:SI ("ltab") [flags 0x2]  <var_decl 0x7fcdc0b1a1b0 ltab>)) "kbd.c":361:8 -1
     (nil))

(insn 122 121 123 (set (reg:QI 184)
        (mem:QI (plus:SI (reg/f:SI 183)
                (reg:SI 121 [ _9 ])) [0 ltab[_9]+0 S1 A8])) "kbd.c":361:8 -1
     (nil))

(insn 123 122 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 184)) "kbd.c":361:8 -1
     (nil))

;; Generating RTL for gimple basic block 21

;; 

(code_label 126 125 127 72 (nil) [0 uses])

(note 127 126 0 NOTE_INSN_BASIC_BLOCK)

;; _10 = (int) scode_50;

(insn 128 127 0 (set (reg:SI 122 [ _10 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":363:14 -1
     (nil))

;; c_60 = utab[_10];

(insn 129 128 130 (set (reg/f:SI 185)
        (symbol_ref:SI ("utab") [flags 0x2]  <var_decl 0x7fcdc0b1a360 utab>)) "kbd.c":363:8 -1
     (nil))

(insn 130 129 131 (set (reg:QI 186)
        (mem:QI (plus:SI (reg/f:SI 185)
                (reg:SI 122 [ _10 ])) [0 utab[_10]+0 S1 A8])) "kbd.c":363:8 -1
     (nil))

(insn 131 130 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 186)) "kbd.c":363:8 -1
     (nil))

;; Generating RTL for gimple basic block 22

;; 

(code_label 132 131 133 73 (nil) [0 uses])

(note 133 132 0 NOTE_INSN_BASIC_BLOCK)

;; control.25_11 = control;

(insn 134 133 135 (set (reg/f:SI 187)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":366:7 -1
     (nil))

(insn 135 134 0 (set (reg:SI 123 [ control.25_11 ])
        (mem/c:SI (reg/f:SI 187) [3 control+0 S4 A32])) "kbd.c":366:7 -1
     (nil))

;; if (control.25_11 != 0)

(insn 136 135 137 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123 [ control.25_11 ])
            (const_int 0 [0]))) "kbd.c":366:6 -1
     (nil))

(jump_insn 137 136 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":366:6 -1
     (nil))

;; Generating RTL for gimple basic block 23

;; if (scode_50 == 33)

(insn 139 138 140 (set (reg:SI 188)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":366:15 -1
     (nil))

(insn 140 139 141 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 188)
            (const_int 33 [0x21]))) "kbd.c":366:15 -1
     (nil))

(jump_insn 141 140 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":366:15 -1
     (nil))

;; Generating RTL for gimple basic block 24

;; _12 = (int) scode_50;

(insn 143 142 0 (set (reg:SI 124 [ _12 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":368:5 -1
     (nil))

;; kprintf ("Control-C: scode=%x\n", _12);

(insn 144 143 145 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "kbd.c":368:5 -1
     (nil))

(insn 145 144 146 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7fcdc0b61cf0 *.LC5>)) "kbd.c":368:5 -1
     (nil))

(call_insn 146 145 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":368:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; i_63 = 1;

(insn 147 146 148 (set (reg:SI 189)
        (const_int 1 [0x1])) "kbd.c":369:11 -1
     (nil))

(insn 148 147 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 189)) "kbd.c":369:11 -1
     (nil))

;; Generating RTL for gimple basic block 25

;; _13 = proc[i_41].status;

(insn 152 151 153 (set (reg/f:SI 190)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:18 -1
     (nil))

(insn 153 152 154 (set (reg:SI 191)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:18 -1
     (nil))

(insn 154 153 155 (set (reg:SI 192)
        (reg:SI 191)) "kbd.c":370:18 -1
     (nil))

(insn 155 154 156 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 6 [0x6]))) "kbd.c":370:18 -1
     (nil))

(insn 156 155 157 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 65 [0x41]))
        (nil)))

(insn 157 156 158 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 1 [0x1]))) "kbd.c":370:18 -1
     (nil))

(insn 158 157 159 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 131 [0x83]))
        (nil)))

(insn 159 158 160 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 3 [0x3]))) "kbd.c":370:18 -1
     (nil))

(insn 160 159 161 (set (reg:SI 192)
        (minus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 1047 [0x417]))
        (nil)))

(insn 161 160 162 (set (reg:SI 193)
        (ashift:SI (reg:SI 192)
            (const_int 2 [0x2]))) "kbd.c":370:18 -1
     (nil))

(insn 162 161 163 (set (reg:SI 192)
        (reg:SI 193)) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 163 162 164 (set (reg:SI 194)
        (plus:SI (reg/f:SI 190)
            (reg:SI 192))) "kbd.c":370:18 -1
     (nil))

(insn 164 163 165 (set (reg/f:SI 195)
        (plus:SI (reg:SI 194)
            (const_int 28 [0x1c]))) "kbd.c":370:18 -1
     (nil))

(insn 165 164 0 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 195) [3 proc[i_41].status+0 S4 A32])) "kbd.c":370:18 -1
     (nil))

;; if (_13 != 0)

(insn 166 165 167 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "kbd.c":370:10 -1
     (nil))

(jump_insn 167 166 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":370:10 -1
     (nil))

;; Generating RTL for gimple basic block 26

;; _14 = proc[i_41].res;

(insn 169 168 170 (set (reg/f:SI 196)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:51 -1
     (nil))

(insn 170 169 171 (set (reg:SI 197)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:51 -1
     (nil))

(insn 171 170 172 (set (reg:SI 198)
        (reg:SI 197)) "kbd.c":370:51 -1
     (nil))

(insn 172 171 173 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 6 [0x6]))) "kbd.c":370:51 -1
     (nil))

(insn 173 172 174 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 65 [0x41]))
        (nil)))

(insn 174 173 175 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 1 [0x1]))) "kbd.c":370:51 -1
     (nil))

(insn 175 174 176 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 131 [0x83]))
        (nil)))

(insn 176 175 177 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 3 [0x3]))) "kbd.c":370:51 -1
     (nil))

(insn 177 176 178 (set (reg:SI 198)
        (minus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 1047 [0x417]))
        (nil)))

(insn 178 177 179 (set (reg:SI 199)
        (ashift:SI (reg:SI 198)
            (const_int 2 [0x2]))) "kbd.c":370:51 -1
     (nil))

(insn 179 178 180 (set (reg:SI 198)
        (reg:SI 199)) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 180 179 181 (set (reg:SI 200)
        (plus:SI (reg/f:SI 196)
            (reg:SI 198))) "kbd.c":370:51 -1
     (nil))

(insn 181 180 182 (set (reg/f:SI 201)
        (plus:SI (reg:SI 200)
            (const_int 84 [0x54]))) "kbd.c":370:51 -1
     (nil))

(insn 182 181 0 (set (reg/f:SI 126 [ _14 ])
        (mem/f:SI (reg/f:SI 201) [9 proc[i_41].res+0 S4 A32])) "kbd.c":370:51 -1
     (nil))

;; _15 = &_14->tty;

(insn 183 182 0 (set (reg/f:SI 127 [ _15 ])
        (plus:SI (reg/f:SI 126 [ _14 ])
            (const_int 60 [0x3c]))) "kbd.c":370:55 -1
     (nil))

;; _16 = strcmp (_15, "/dev/tty0");

(insn 184 183 185 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":370:37 -1
     (nil))

(insn 185 184 186 (set (reg:SI 0 r0)
        (reg/f:SI 127 [ _15 ])) "kbd.c":370:37 -1
     (nil))

(call_insn/i 186 185 187 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":370:37 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

(insn 187 186 0 (set (reg:SI 128 [ _16 ])
        (reg:SI 0 r0)) "kbd.c":370:37 -1
     (nil))

;; if (_16 == 0)

(insn 188 187 189 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 128 [ _16 ])
            (const_int 0 [0]))) "kbd.c":370:34 -1
     (nil))

(jump_insn 189 188 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":370:34 -1
     (nil))

;; Generating RTL for gimple basic block 27

;; _17 = proc[i_41].res;

(insn 191 190 192 (set (reg/f:SI 202)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 -1
     (nil))

(insn 192 191 193 (set (reg:SI 203)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 -1
     (nil))

(insn 193 192 194 (set (reg:SI 204)
        (reg:SI 203)) "kbd.c":371:9 -1
     (nil))

(insn 194 193 195 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 6 [0x6]))) "kbd.c":371:9 -1
     (nil))

(insn 195 194 196 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 65 [0x41]))
        (nil)))

(insn 196 195 197 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 1 [0x1]))) "kbd.c":371:9 -1
     (nil))

(insn 197 196 198 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 131 [0x83]))
        (nil)))

(insn 198 197 199 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 3 [0x3]))) "kbd.c":371:9 -1
     (nil))

(insn 199 198 200 (set (reg:SI 204)
        (minus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 1047 [0x417]))
        (nil)))

(insn 200 199 201 (set (reg:SI 205)
        (ashift:SI (reg:SI 204)
            (const_int 2 [0x2]))) "kbd.c":371:9 -1
     (nil))

(insn 201 200 202 (set (reg:SI 204)
        (reg:SI 205)) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 202 201 203 (set (reg:SI 206)
        (plus:SI (reg/f:SI 202)
            (reg:SI 204))) "kbd.c":371:9 -1
     (nil))

(insn 203 202 204 (set (reg/f:SI 207)
        (plus:SI (reg:SI 206)
            (const_int 84 [0x54]))) "kbd.c":371:9 -1
     (nil))

(insn 204 203 0 (set (reg/f:SI 129 [ _17 ])
        (mem/f:SI (reg/f:SI 207) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 -1
     (nil))

;; _18 = _17->signal;

(insn 205 204 0 (set (reg:SI 130 [ _18 ])
        (mem:SI (plus:SI (reg/f:SI 129 [ _17 ])
                (const_int 92 [0x5c])) [3 _17->signal+0 S4 A32])) "kbd.c":371:22 -1
     (nil))

;; _19 = proc[i_41].res;

(insn 206 205 207 (set (reg/f:SI 208)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 -1
     (nil))

(insn 207 206 208 (set (reg:SI 209)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 -1
     (nil))

(insn 208 207 209 (set (reg:SI 210)
        (reg:SI 209)) "kbd.c":371:9 -1
     (nil))

(insn 209 208 210 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 6 [0x6]))) "kbd.c":371:9 -1
     (nil))

(insn 210 209 211 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 65 [0x41]))
        (nil)))

(insn 211 210 212 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 1 [0x1]))) "kbd.c":371:9 -1
     (nil))

(insn 212 211 213 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 131 [0x83]))
        (nil)))

(insn 213 212 214 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 3 [0x3]))) "kbd.c":371:9 -1
     (nil))

(insn 214 213 215 (set (reg:SI 210)
        (minus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 1047 [0x417]))
        (nil)))

(insn 215 214 216 (set (reg:SI 211)
        (ashift:SI (reg:SI 210)
            (const_int 2 [0x2]))) "kbd.c":371:9 -1
     (nil))

(insn 216 215 217 (set (reg:SI 210)
        (reg:SI 211)) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 4188 [0x105c]))
        (nil)))

(insn 217 216 218 (set (reg:SI 212)
        (plus:SI (reg/f:SI 208)
            (reg:SI 210))) "kbd.c":371:9 -1
     (nil))

(insn 218 217 219 (set (reg/f:SI 213)
        (plus:SI (reg:SI 212)
            (const_int 84 [0x54]))) "kbd.c":371:9 -1
     (nil))

(insn 219 218 0 (set (reg/f:SI 131 [ _19 ])
        (mem/f:SI (reg/f:SI 213) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 -1
     (nil))

;; _20 = _18 | 4;

(insn 220 219 0 (set (reg:SI 132 [ _20 ])
        (ior:SI (reg:SI 130 [ _18 ])
            (const_int 4 [0x4]))) "kbd.c":371:22 -1
     (nil))

;; _19->signal = _20;

(insn 221 220 0 (set (mem:SI (plus:SI (reg/f:SI 131 [ _19 ])
                (const_int 92 [0x5c])) [3 _19->signal+0 S4 A32])
        (reg:SI 132 [ _20 ])) "kbd.c":371:22 -1
     (nil))

;; Generating RTL for gimple basic block 28

;; 

(code_label 222 221 223 76 (nil) [0 uses])

(note 223 222 0 NOTE_INSN_BASIC_BLOCK)

;; i_68 = i_41 + 1;

(insn 224 223 225 (set (reg:SI 215)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:25 -1
     (nil))

(insn 225 224 226 (set (reg:SI 214)
        (plus:SI (reg:SI 215)
            (const_int 1 [0x1]))) "kbd.c":369:25 -1
     (nil))

(insn 226 225 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 214)) "kbd.c":369:25 -1
     (nil))

;; Generating RTL for gimple basic block 29

;; 

(code_label 227 226 228 75 (nil) [0 uses])

(note 228 227 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_41 <= 63)

(insn 232 228 233 (set (reg:SI 216)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:16 -1
     (nil))

(insn 233 232 234 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 216)
            (const_int 63 [0x3f]))) "kbd.c":369:16 -1
     (nil))

(jump_insn 234 233 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 229)
            (pc))) "kbd.c":369:16 -1
     (nil))

;; Generating RTL for gimple basic block 30

;; kprintf ("\n");

(insn 236 235 237 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7fcdc0b61d80 *.LC6>)) "kbd.c":374:5 -1
     (nil))

(call_insn 237 236 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":374:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; c_65 = 13;

(insn 238 237 239 (set (reg:SI 217)
        (const_int 13 [0xd])) "kbd.c":375:7 -1
     (nil))

(insn 239 238 240 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) "kbd.c":375:7 -1
     (nil))

(insn 240 239 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 218)) "kbd.c":375:7 -1
     (nil))

;; control = 0;

(insn 241 240 242 (set (reg/f:SI 219)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":377:13 -1
     (nil))

(insn 242 241 243 (set (reg:SI 220)
        (const_int 0 [0])) "kbd.c":377:13 -1
     (nil))

(insn 243 242 0 (set (mem/c:SI (reg/f:SI 219) [3 control+0 S4 A32])
        (reg:SI 220)) "kbd.c":377:13 -1
     (nil))

;; Generating RTL for gimple basic block 31

;; 

(code_label 244 243 245 74 (nil) [0 uses])

(note 245 244 0 NOTE_INSN_BASIC_BLOCK)

;; control.26_21 = control;

(insn 246 245 247 (set (reg/f:SI 221)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":380:7 -1
     (nil))

(insn 247 246 0 (set (reg:SI 133 [ control.26_21 ])
        (mem/c:SI (reg/f:SI 221) [3 control+0 S4 A32])) "kbd.c":380:7 -1
     (nil))

;; if (control.26_21 != 0)

(insn 248 247 249 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133 [ control.26_21 ])
            (const_int 0 [0]))) "kbd.c":380:6 -1
     (nil))

(jump_insn 249 248 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":380:6 -1
     (nil))

;; Generating RTL for gimple basic block 32

;; if (scode_50 == 35)

(insn 251 250 252 (set (reg:SI 222)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":380:15 -1
     (nil))

(insn 252 251 253 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 222)
            (const_int 35 [0x23]))) "kbd.c":380:15 -1
     (nil))

(jump_insn 253 252 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":380:15 -1
     (nil))

;; Generating RTL for gimple basic block 33

;; c_69 = 4;

(insn 255 254 256 (set (reg:SI 223)
        (const_int 4 [0x4])) "kbd.c":381:7 -1
     (nil))

(insn 256 255 257 (set (reg:QI 224)
        (subreg:QI (reg:SI 223) 0)) "kbd.c":381:7 -1
     (nil))

(insn 257 256 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 224)) "kbd.c":381:7 -1
     (nil))

;; _22 = (int) c_69;

(insn 258 257 0 (set (reg:SI 134 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":382:5 -1
     (nil))

;; kprintf ("Control-D: c = %x\n", _22);

(insn 259 258 260 (set (reg:SI 1 r1)
        (reg:SI 134 [ _22 ])) "kbd.c":382:5 -1
     (nil))

(insn 260 259 261 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":382:5 -1
     (nil))

(call_insn 261 260 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":382:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; control = 0;

(insn 262 261 263 (set (reg/f:SI 225)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":383:13 -1
     (nil))

(insn 263 262 264 (set (reg:SI 226)
        (const_int 0 [0])) "kbd.c":383:13 -1
     (nil))

(insn 264 263 0 (set (mem/c:SI (reg/f:SI 225) [3 control+0 S4 A32])
        (reg:SI 226)) "kbd.c":383:13 -1
     (nil))

;; Generating RTL for gimple basic block 34

;; 

(code_label 265 264 266 78 (nil) [0 uses])

(note 266 265 0 NOTE_INSN_BASIC_BLOCK)

;; control.27_23 = control;

(insn 267 266 268 (set (reg/f:SI 227)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":386:7 -1
     (nil))

(insn 268 267 0 (set (reg:SI 135 [ control.27_23 ])
        (mem/c:SI (reg/f:SI 227) [3 control+0 S4 A32])) "kbd.c":386:7 -1
     (nil))

;; if (control.27_23 != 0)

(insn 269 268 270 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135 [ control.27_23 ])
            (const_int 0 [0]))) "kbd.c":386:6 -1
     (nil))

(jump_insn 270 269 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":386:6 -1
     (nil))

;; Generating RTL for gimple basic block 35

;; if (scode_50 == 35)

(insn 272 271 273 (set (reg:SI 228)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":386:15 -1
     (nil))

(insn 273 272 274 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 228)
            (const_int 35 [0x23]))) "kbd.c":386:15 -1
     (nil))

(jump_insn 274 273 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":386:15 -1
     (nil))

;; Generating RTL for gimple basic block 36

;; c_72 = 4;

(insn 276 275 277 (set (reg:SI 229)
        (const_int 4 [0x4])) "kbd.c":387:7 -1
     (nil))

(insn 277 276 278 (set (reg:QI 230)
        (subreg:QI (reg:SI 229) 0)) "kbd.c":387:7 -1
     (nil))

(insn 278 277 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 230)) "kbd.c":387:7 -1
     (nil))

;; _24 = (int) c_72;

(insn 279 278 0 (set (reg:SI 136 [ _24 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":388:5 -1
     (nil))

;; kprintf ("Control-D: c = %x\n", _24);

(insn 280 279 281 (set (reg:SI 1 r1)
        (reg:SI 136 [ _24 ])) "kbd.c":388:5 -1
     (nil))

(insn 281 280 282 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":388:5 -1
     (nil))

(call_insn 282 281 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":388:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; Generating RTL for gimple basic block 37

;; 

(code_label 283 282 284 79 (nil) [0 uses])

(note 284 283 0 NOTE_INSN_BASIC_BLOCK)

;; _25 ={v} kp_48->head;

(insn 285 284 286 (set (reg/f:SI 231)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:13 -1
     (nil))

(insn 286 285 0 (set (reg:SI 137 [ _25 ])
        (mem/v:SI (plus:SI (reg/f:SI 231)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":391:13 -1
     (nil))

;; _26 = _25;

(nil)

;; _27 = _26 + 1;

(insn 287 286 0 (set (reg:SI 138 [ _27 ])
        (plus:SI (reg:SI 137 [ _25 ])
            (const_int 1 [0x1]))) "kbd.c":391:19 -1
     (nil))

;; kp_48->head ={v} _27;

(insn 288 287 289 (set (reg/f:SI 232)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:19 -1
     (nil))

(insn 289 288 0 (set (mem/v:SI (plus:SI (reg/f:SI 232)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 138 [ _27 ])) "kbd.c":391:19 -1
     (nil))

;; kp_48->buf[_26] ={v} c_40;

(insn 290 289 291 (set (reg/f:SI 233)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:23 -1
     (nil))

(insn 291 290 292 (set (reg/f:SI 234)
        (plus:SI (reg/f:SI 233)
            (reg:SI 137 [ _25 ]))) "kbd.c":391:23 -1
     (nil))

(insn 292 291 293 (set (reg:QI 235)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":391:23 -1
     (nil))

(insn 293 292 0 (set (mem/v:QI (plus:SI (reg/f:SI 234)
                (const_int 4 [0x4])) [0 kp_48->buf[_26]+0 S1 A8])
        (reg:QI 235)) "kbd.c":391:23 -1
     (nil))

;; _28 ={v} kp_48->head;

(insn 294 293 295 (set (reg/f:SI 236)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 -1
     (nil))

(insn 295 294 0 (set (reg:SI 139 [ _28 ])
        (mem/v:SI (plus:SI (reg/f:SI 236)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":392:12 -1
     (nil))

;; _29 = _28 % 128;

(insn 296 295 297 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 139 [ _28 ]))
                    (const_int 0 [0])))
            (set (reg:SI 237)
                (minus:SI (const_int 0 [0])
                    (reg:SI 139 [ _28 ])))
        ]) "kbd.c":392:12 -1
     (nil))

(insn 297 296 298 (set (reg:SI 140 [ _29 ])
        (and:SI (reg:SI 139 [ _28 ])
            (const_int 127 [0x7f]))) "kbd.c":392:12 -1
     (nil))

(insn 298 297 299 (set (reg:SI 238)
        (and:SI (reg:SI 237)
            (const_int 127 [0x7f]))) "kbd.c":392:12 -1
     (nil))

(insn 299 298 0 (set (reg:SI 140 [ _29 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 238))
            (reg:SI 140 [ _29 ]))) "kbd.c":392:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 139 [ _28 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_48->head ={v} _29;

(insn 300 299 301 (set (reg/f:SI 239)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 -1
     (nil))

(insn 301 300 0 (set (mem/v:SI (plus:SI (reg/f:SI 239)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 140 [ _29 ])) "kbd.c":392:12 -1
     (nil))

;; _30 ={v} kp_48->data;

(insn 302 301 303 (set (reg/f:SI 240)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:5 -1
     (nil))

(insn 303 302 0 (set (reg:SI 141 [ _30 ])
        (mem/v:SI (plus:SI (reg/f:SI 240)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])) "kbd.c":393:5 -1
     (nil))

;; _31 = _30 + 1;

(insn 304 303 0 (set (reg:SI 142 [ _31 ])
        (plus:SI (reg:SI 141 [ _30 ])
            (const_int 1 [0x1]))) "kbd.c":393:11 -1
     (nil))

;; kp_48->data ={v} _31;

(insn 305 304 306 (set (reg/f:SI 241)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:11 -1
     (nil))

(insn 306 305 0 (set (mem/v:SI (plus:SI (reg/f:SI 241)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])
        (reg:SI 142 [ _31 ])) "kbd.c":393:11 -1
     (nil))

;; _32 ={v} kp_48->room;

(insn 307 306 308 (set (reg/f:SI 242)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:17 -1
     (nil))

(insn 308 307 0 (set (reg:SI 143 [ _32 ])
        (mem/v:SI (plus:SI (reg/f:SI 242)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])) "kbd.c":393:17 -1
     (nil))

;; _33 = _32 + -1;

(insn 309 308 0 (set (reg:SI 144 [ _33 ])
        (plus:SI (reg:SI 143 [ _32 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":393:23 -1
     (nil))

;; kp_48->room ={v} _33;

(insn 310 309 311 (set (reg/f:SI 243)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:23 -1
     (nil))

(insn 311 310 0 (set (mem/v:SI (plus:SI (reg/f:SI 243)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])
        (reg:SI 144 [ _33 ])) "kbd.c":393:23 -1
     (nil))

;; _34 = &kp_48->data;

(insn 312 311 313 (set (reg:SI 244)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":394:3 -1
     (nil))

(insn 313 312 0 (set (reg/f:SI 145 [ _34 ])
        (plus:SI (reg:SI 244)
            (const_int 140 [0x8c]))) "kbd.c":394:3 -1
     (nil))

;; kwakeup (_34);

(insn 314 313 315 (set (reg:SI 0 r0)
        (reg/f:SI 145 [ _34 ])) "kbd.c":394:3 -1
     (nil))

(call_insn 315 314 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":394:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; if (c_40 == 13)

(insn 316 315 317 (set (reg:SI 245)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":396:6 -1
     (nil))

(insn 317 316 318 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 245)
            (const_int 13 [0xd]))) "kbd.c":396:6 -1
     (nil))

(jump_insn 318 317 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":396:6 -1
     (nil))

;; Generating RTL for gimple basic block 38

;; kline.28_35 ={v} kline;

(insn 320 319 321 (set (reg/f:SI 246)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 -1
     (nil))

(insn 321 320 0 (set (reg:SI 146 [ kline.28_35 ])
        (mem/v/c:SI (reg/f:SI 246) [3 kline+0 S4 A32])) "kbd.c":397:10 -1
     (nil))

;; _36 = kline.28_35 + 1;

(insn 322 321 0 (set (reg:SI 147 [ _36 ])
        (plus:SI (reg:SI 146 [ kline.28_35 ])
            (const_int 1 [0x1]))) "kbd.c":397:10 -1
     (nil))

;; kline ={v} _36;

(insn 323 322 324 (set (reg/f:SI 247)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 -1
     (nil))

(insn 324 323 0 (set (mem/v/c:SI (reg/f:SI 247) [3 kline+0 S4 A32])
        (reg:SI 147 [ _36 ])) "kbd.c":397:10 -1
     (nil))

;; kwakeup (&kline);

(insn 325 324 326 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":398:5 -1
     (nil))

(call_insn 326 325 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":398:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 39

;; <L46>:

(code_label 327 326 328 66 (nil) [0 uses])

(note 328 327 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 19 from 40 to 41.
Redirecting jump 35 from 40 to 41.
Redirecting jump 54 from 40 to 41.
Redirecting jump 73 from 40 to 41.
Redirecting jump 92 from 40 to 41.
Redirecting jump 111 from 40 to 41.
Edge 38->40 redirected to 41
Merging block 40 into block 39...
Merged blocks 39 and 40.
Merged 39 and 40 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 148)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":321:8 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 148)) "kbd.c":321:8 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":323:15 -1
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 113 [ _1 ])
        (mem/v/f:SI (reg/f:SI 149) [2 kp_48->base+0 S4 A32])) "kbd.c":323:15 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 114 [ _2 ])
        (plus:SI (reg/f:SI 113 [ _1 ])
            (const_int 8 [0x8]))) "kbd.c":323:22 -1
     (nil))
(insn 10 9 11 2 (set (reg:QI 150)
        (mem:QI (reg/f:SI 114 [ _2 ]) [0 *_2+0 S1 A8])) "kbd.c":323:9 -1
     (nil))
(insn 11 10 12 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8])
        (reg:QI 150)) "kbd.c":323:9 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 151)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":326:6 -1
     (nil))
(insn 13 12 14 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 151)
            (const_int 240 [0xf0]))) "kbd.c":326:6 -1
     (nil))
(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":326:6 -1
     (nil)
 -> 21)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg/f:SI 152)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":327:13 -1
     (nil))
(insn 17 16 18 4 (set (reg:SI 153)
        (const_int 1 [0x1])) "kbd.c":327:13 -1
     (nil))
(insn 18 17 19 4 (set (mem/c:SI (reg/f:SI 152) [3 release+0 S4 A32])
        (reg:SI 153)) "kbd.c":327:13 -1
     (nil))
(jump_insn 19 18 20 4 (set (pc)
        (label_ref:SI 329)) "kbd.c":328:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 20 19 21)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 21 20 22 5 65 (nil) [1 uses])
(note 22 21 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg/f:SI 154)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":331:7 -1
     (nil))
(insn 24 23 25 5 (set (reg:SI 115 [ release.19_3 ])
        (mem/c:SI (reg/f:SI 154) [3 release+0 S4 A32])) "kbd.c":331:7 -1
     (nil))
(insn 25 24 26 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ release.19_3 ])
            (const_int 0 [0]))) "kbd.c":331:6 -1
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:6 -1
     (nil)
 -> 37)
;;  succ:       6 (FALLTHRU)
;;              8

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg:SI 155)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":331:15 -1
     (nil))
(insn 29 28 30 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 155)
            (const_int 18 [0x12]))) "kbd.c":331:15 -1
     (nil))
(jump_insn 30 29 31 6 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "kbd.c":331:15 -1
     (nil)
 -> 37)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
(note 31 30 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 7 (set (reg/f:SI 156)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":332:13 -1
     (nil))
(insn 33 32 34 7 (set (reg:SI 157)
        (const_int 0 [0])) "kbd.c":332:13 -1
     (nil))
(insn 34 33 35 7 (set (mem/c:SI (reg/f:SI 156) [3 release+0 S4 A32])
        (reg:SI 157)) "kbd.c":332:13 -1
     (nil))
(jump_insn 35 34 36 7 (set (pc)
        (label_ref:SI 329)) "kbd.c":333:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 36 35 37)
;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6
(code_label 37 36 38 8 67 (nil) [2 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 8 (set (reg/f:SI 158)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":336:7 -1
     (nil))
(insn 40 39 41 8 (set (reg:SI 116 [ release.20_4 ])
        (mem/c:SI (reg/f:SI 158) [3 release+0 S4 A32])) "kbd.c":336:7 -1
     (nil))
(insn 41 40 42 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ release.20_4 ])
            (const_int 0 [0]))) "kbd.c":336:6 -1
     (nil))
(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:6 -1
     (nil)
 -> 56)
;;  succ:       9 (FALLTHRU)
;;              11

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 9 (set (reg:SI 159)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":336:15 -1
     (nil))
(insn 45 44 46 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 159)
            (const_int 18 [0x12]))) "kbd.c":336:15 -1
     (nil))
(jump_insn 46 45 47 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) "kbd.c":336:15 -1
     (nil)
 -> 56)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 10 (set (reg/f:SI 160)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":337:13 -1
     (nil))
(insn 49 48 50 10 (set (reg:SI 161)
        (const_int 0 [0])) "kbd.c":337:13 -1
     (nil))
(insn 50 49 51 10 (set (mem/c:SI (reg/f:SI 160) [3 release+0 S4 A32])
        (reg:SI 161)) "kbd.c":337:13 -1
     (nil))
(insn 51 50 52 10 (set (reg/f:SI 162)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":338:13 -1
     (nil))
(insn 52 51 53 10 (set (reg:SI 163)
        (const_int 0 [0])) "kbd.c":338:13 -1
     (nil))
(insn 53 52 54 10 (set (mem/c:SI (reg/f:SI 162) [3 shifted+0 S4 A32])
        (reg:SI 163)) "kbd.c":338:13 -1
     (nil))
(jump_insn 54 53 55 10 (set (pc)
        (label_ref:SI 329)) "kbd.c":339:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 55 54 56)
;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9
(code_label 56 55 57 11 68 (nil) [2 uses])
(note 57 56 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 11 (set (reg/f:SI 164)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":342:7 -1
     (nil))
(insn 59 58 60 11 (set (reg:SI 117 [ release.21_5 ])
        (mem/c:SI (reg/f:SI 164) [3 release+0 S4 A32])) "kbd.c":342:7 -1
     (nil))
(insn 60 59 61 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 117 [ release.21_5 ])
            (const_int 0 [0]))) "kbd.c":342:6 -1
     (nil))
(jump_insn 61 60 62 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:6 -1
     (nil)
 -> 75)
;;  succ:       12 (FALLTHRU)
;;              14

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 62 61 63 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 63 62 64 12 (set (reg:SI 165)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":342:16 -1
     (nil))
(insn 64 63 65 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 165)
            (const_int 18 [0x12]))) "kbd.c":342:16 -1
     (nil))
(jump_insn 65 64 66 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 75)
            (pc))) "kbd.c":342:16 -1
     (nil)
 -> 75)
;;  succ:       13 (FALLTHRU)
;;              14

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       12 (FALLTHRU)
(note 66 65 67 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 67 66 68 13 (set (reg/f:SI 166)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":343:13 -1
     (nil))
(insn 68 67 69 13 (set (reg:SI 167)
        (const_int 0 [0])) "kbd.c":343:13 -1
     (nil))
(insn 69 68 70 13 (set (mem/c:SI (reg/f:SI 166) [3 release+0 S4 A32])
        (reg:SI 167)) "kbd.c":343:13 -1
     (nil))
(insn 70 69 71 13 (set (reg/f:SI 168)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":344:13 -1
     (nil))
(insn 71 70 72 13 (set (reg:SI 169)
        (const_int 1 [0x1])) "kbd.c":344:13 -1
     (nil))
(insn 72 71 73 13 (set (mem/c:SI (reg/f:SI 168) [3 shifted+0 S4 A32])
        (reg:SI 169)) "kbd.c":344:13 -1
     (nil))
(jump_insn 73 72 74 13 (set (pc)
        (label_ref:SI 329)) "kbd.c":345:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 74 73 75)
;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12
(code_label 75 74 76 14 69 (nil) [2 uses])
(note 76 75 77 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 77 76 78 14 (set (reg/f:SI 170)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":348:7 -1
     (nil))
(insn 78 77 79 14 (set (reg:SI 118 [ release.22_6 ])
        (mem/c:SI (reg/f:SI 170) [3 release+0 S4 A32])) "kbd.c":348:7 -1
     (nil))
(insn 79 78 80 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ release.22_6 ])
            (const_int 0 [0]))) "kbd.c":348:6 -1
     (nil))
(jump_insn 80 79 81 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:6 -1
     (nil)
 -> 94)
;;  succ:       15 (FALLTHRU)
;;              17

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
(note 81 80 82 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 82 81 83 15 (set (reg:SI 171)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":348:16 -1
     (nil))
(insn 83 82 84 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 171)
            (const_int 20 [0x14]))) "kbd.c":348:16 -1
     (nil))
(jump_insn 84 83 85 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) "kbd.c":348:16 -1
     (nil)
 -> 94)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
(note 85 84 86 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 86 85 87 16 (set (reg/f:SI 172)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":349:13 -1
     (nil))
(insn 87 86 88 16 (set (reg:SI 173)
        (const_int 0 [0])) "kbd.c":349:13 -1
     (nil))
(insn 88 87 89 16 (set (mem/c:SI (reg/f:SI 172) [3 release+0 S4 A32])
        (reg:SI 173)) "kbd.c":349:13 -1
     (nil))
(insn 89 88 90 16 (set (reg/f:SI 174)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":350:13 -1
     (nil))
(insn 90 89 91 16 (set (reg:SI 175)
        (const_int 1 [0x1])) "kbd.c":350:13 -1
     (nil))
(insn 91 90 92 16 (set (mem/c:SI (reg/f:SI 174) [3 control+0 S4 A32])
        (reg:SI 175)) "kbd.c":350:13 -1
     (nil))
(jump_insn 92 91 93 16 (set (pc)
        (label_ref:SI 329)) "kbd.c":351:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 93 92 94)
;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
;;              15
(code_label 94 93 95 17 70 (nil) [2 uses])
(note 95 94 96 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 96 95 97 17 (set (reg/f:SI 176)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":354:7 -1
     (nil))
(insn 97 96 98 17 (set (reg:SI 119 [ release.23_7 ])
        (mem/c:SI (reg/f:SI 176) [3 release+0 S4 A32])) "kbd.c":354:7 -1
     (nil))
(insn 98 97 99 17 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ release.23_7 ])
            (const_int 0 [0]))) "kbd.c":354:6 -1
     (nil))
(jump_insn 99 98 100 17 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:6 -1
     (nil)
 -> 113)
;;  succ:       18 (FALLTHRU)
;;              20

;; basic block 18, loop depth 0, maybe hot
;;  prev block 17, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       17 (FALLTHRU)
(note 100 99 101 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 18 (set (reg:SI 177)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":354:15 -1
     (nil))
(insn 102 101 103 18 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 177)
            (const_int 20 [0x14]))) "kbd.c":354:15 -1
     (nil))
(jump_insn 103 102 104 18 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "kbd.c":354:15 -1
     (nil)
 -> 113)
;;  succ:       19 (FALLTHRU)
;;              20

;; basic block 19, loop depth 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       18 (FALLTHRU)
(note 104 103 105 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 105 104 106 19 (set (reg/f:SI 178)
        (symbol_ref:SI ("release") [flags 0x2]  <var_decl 0x7fcdc0b1a6c0 release>)) "kbd.c":355:13 -1
     (nil))
(insn 106 105 107 19 (set (reg:SI 179)
        (const_int 0 [0])) "kbd.c":355:13 -1
     (nil))
(insn 107 106 108 19 (set (mem/c:SI (reg/f:SI 178) [3 release+0 S4 A32])
        (reg:SI 179)) "kbd.c":355:13 -1
     (nil))
(insn 108 107 109 19 (set (reg/f:SI 180)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":356:13 -1
     (nil))
(insn 109 108 110 19 (set (reg:SI 181)
        (const_int 0 [0])) "kbd.c":356:13 -1
     (nil))
(insn 110 109 111 19 (set (mem/c:SI (reg/f:SI 180) [3 control+0 S4 A32])
        (reg:SI 181)) "kbd.c":356:13 -1
     (nil))
(jump_insn 111 110 112 19 (set (pc)
        (label_ref:SI 329)) "kbd.c":357:5 284 {*arm_jump}
     (nil)
 -> 329)
;;  succ:       41 [always] 

(barrier 112 111 113)
;; basic block 20, loop depth 0, maybe hot
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, RTL)
;;  pred:       17
;;              18
(code_label 113 112 114 20 71 (nil) [2 uses])
(note 114 113 115 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 20 (set (reg/f:SI 182)
        (symbol_ref:SI ("shifted") [flags 0x2]  <var_decl 0x7fcdc0b1a630 shifted>)) "kbd.c":360:7 -1
     (nil))
(insn 116 115 117 20 (set (reg:SI 120 [ shifted.24_8 ])
        (mem/c:SI (reg/f:SI 182) [3 shifted+0 S4 A32])) "kbd.c":360:7 -1
     (nil))
(insn 117 116 118 20 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120 [ shifted.24_8 ])
            (const_int 0 [0]))) "kbd.c":360:6 -1
     (nil))
(jump_insn 118 117 119 20 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 126)
            (pc))) "kbd.c":360:6 -1
     (nil)
 -> 126)
;;  succ:       21 (FALLTHRU)
;;              22

;; basic block 21, loop depth 0, maybe hot
;;  prev block 20, next block 22, flags: (NEW, REACHABLE, RTL)
;;  pred:       20 (FALLTHRU)
(note 119 118 120 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 120 119 121 21 (set (reg:SI 121 [ _9 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":361:14 -1
     (nil))
(insn 121 120 122 21 (set (reg/f:SI 183)
        (symbol_ref:SI ("ltab") [flags 0x2]  <var_decl 0x7fcdc0b1a1b0 ltab>)) "kbd.c":361:8 -1
     (nil))
(insn 122 121 123 21 (set (reg:QI 184)
        (mem:QI (plus:SI (reg/f:SI 183)
                (reg:SI 121 [ _9 ])) [0 ltab[_9]+0 S1 A8])) "kbd.c":361:8 -1
     (nil))
(insn 123 122 124 21 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 184)) "kbd.c":361:8 -1
     (nil))
(jump_insn 124 123 125 21 (set (pc)
        (label_ref 132)) -1
     (nil)
 -> 132)
;;  succ:       23

(barrier 125 124 126)
;; basic block 22, loop depth 0, maybe hot
;;  prev block 21, next block 23, flags: (NEW, REACHABLE, RTL)
;;  pred:       20
(code_label 126 125 127 22 72 (nil) [1 uses])
(note 127 126 128 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 128 127 129 22 (set (reg:SI 122 [ _10 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":363:14 -1
     (nil))
(insn 129 128 130 22 (set (reg/f:SI 185)
        (symbol_ref:SI ("utab") [flags 0x2]  <var_decl 0x7fcdc0b1a360 utab>)) "kbd.c":363:8 -1
     (nil))
(insn 130 129 131 22 (set (reg:QI 186)
        (mem:QI (plus:SI (reg/f:SI 185)
                (reg:SI 122 [ _10 ])) [0 utab[_10]+0 S1 A8])) "kbd.c":363:8 -1
     (nil))
(insn 131 130 132 22 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 186)) "kbd.c":363:8 -1
     (nil))
;;  succ:       23 (FALLTHRU)

;; basic block 23, loop depth 0, maybe hot
;;  prev block 22, next block 24, flags: (NEW, REACHABLE, RTL)
;;  pred:       21
;;              22 (FALLTHRU)
(code_label 132 131 133 23 73 (nil) [1 uses])
(note 133 132 134 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 23 (set (reg/f:SI 187)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":366:7 -1
     (nil))
(insn 135 134 136 23 (set (reg:SI 123 [ control.25_11 ])
        (mem/c:SI (reg/f:SI 187) [3 control+0 S4 A32])) "kbd.c":366:7 -1
     (nil))
(insn 136 135 137 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 123 [ control.25_11 ])
            (const_int 0 [0]))) "kbd.c":366:6 -1
     (nil))
(jump_insn 137 136 138 23 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:6 -1
     (nil)
 -> 244)
;;  succ:       24 (FALLTHRU)
;;              32

;; basic block 24, loop depth 0, maybe hot
;;  prev block 23, next block 25, flags: (NEW, REACHABLE, RTL)
;;  pred:       23 (FALLTHRU)
(note 138 137 139 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 24 (set (reg:SI 188)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":366:15 -1
     (nil))
(insn 140 139 141 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 188)
            (const_int 33 [0x21]))) "kbd.c":366:15 -1
     (nil))
(jump_insn 141 140 142 24 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 244)
            (pc))) "kbd.c":366:15 -1
     (nil)
 -> 244)
;;  succ:       25 (FALLTHRU)
;;              32

;; basic block 25, loop depth 0, maybe hot
;;  prev block 24, next block 26, flags: (NEW, REACHABLE, RTL)
;;  pred:       24 (FALLTHRU)
(note 142 141 143 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 143 142 144 25 (set (reg:SI 124 [ _12 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":368:5 -1
     (nil))
(insn 144 143 145 25 (set (reg:SI 1 r1)
        (reg:SI 124 [ _12 ])) "kbd.c":368:5 -1
     (nil))
(insn 145 144 146 25 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x7fcdc0b61cf0 *.LC5>)) "kbd.c":368:5 -1
     (nil))
(call_insn 146 145 147 25 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":368:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 147 146 148 25 (set (reg:SI 189)
        (const_int 1 [0x1])) "kbd.c":369:11 -1
     (nil))
(insn 148 147 149 25 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 189)) "kbd.c":369:11 -1
     (nil))
(jump_insn 149 148 150 25 (set (pc)
        (label_ref 227)) "kbd.c":369:5 -1
     (nil)
 -> 227)
;;  succ:       30

(barrier 150 149 229)
;; basic block 26, loop depth 1, maybe hot
;;  prev block 25, next block 27, flags: (NEW, REACHABLE, RTL)
;;  pred:       30
(code_label 229 150 151 26 77 (nil) [1 uses])
(note 151 229 152 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 152 151 153 26 (set (reg/f:SI 190)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:18 -1
     (nil))
(insn 153 152 154 26 (set (reg:SI 191)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:18 -1
     (nil))
(insn 154 153 155 26 (set (reg:SI 192)
        (reg:SI 191)) "kbd.c":370:18 -1
     (nil))
(insn 155 154 156 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 6 [0x6]))) "kbd.c":370:18 -1
     (nil))
(insn 156 155 157 26 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 65 [0x41]))
        (nil)))
(insn 157 156 158 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 1 [0x1]))) "kbd.c":370:18 -1
     (nil))
(insn 158 157 159 26 (set (reg:SI 192)
        (plus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 131 [0x83]))
        (nil)))
(insn 159 158 160 26 (set (reg:SI 192)
        (ashift:SI (reg:SI 192)
            (const_int 3 [0x3]))) "kbd.c":370:18 -1
     (nil))
(insn 160 159 161 26 (set (reg:SI 192)
        (minus:SI (reg:SI 192)
            (reg:SI 191))) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 1047 [0x417]))
        (nil)))
(insn 161 160 162 26 (set (reg:SI 193)
        (ashift:SI (reg:SI 192)
            (const_int 2 [0x2]))) "kbd.c":370:18 -1
     (nil))
(insn 162 161 163 26 (set (reg:SI 192)
        (reg:SI 193)) "kbd.c":370:18 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 191)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 163 162 164 26 (set (reg:SI 194)
        (plus:SI (reg/f:SI 190)
            (reg:SI 192))) "kbd.c":370:18 -1
     (nil))
(insn 164 163 165 26 (set (reg/f:SI 195)
        (plus:SI (reg:SI 194)
            (const_int 28 [0x1c]))) "kbd.c":370:18 -1
     (nil))
(insn 165 164 166 26 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 195) [3 proc[i_41].status+0 S4 A32])) "kbd.c":370:18 -1
     (nil))
(insn 166 165 167 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 125 [ _13 ])
            (const_int 0 [0]))) "kbd.c":370:10 -1
     (nil))
(jump_insn 167 166 168 26 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:10 -1
     (nil)
 -> 222)
;;  succ:       27 (FALLTHRU)
;;              29

;; basic block 27, loop depth 1, maybe hot
;;  prev block 26, next block 28, flags: (NEW, REACHABLE, RTL)
;;  pred:       26 (FALLTHRU)
(note 168 167 169 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 169 168 170 27 (set (reg/f:SI 196)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":370:51 -1
     (nil))
(insn 170 169 171 27 (set (reg:SI 197)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":370:51 -1
     (nil))
(insn 171 170 172 27 (set (reg:SI 198)
        (reg:SI 197)) "kbd.c":370:51 -1
     (nil))
(insn 172 171 173 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 6 [0x6]))) "kbd.c":370:51 -1
     (nil))
(insn 173 172 174 27 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 65 [0x41]))
        (nil)))
(insn 174 173 175 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 1 [0x1]))) "kbd.c":370:51 -1
     (nil))
(insn 175 174 176 27 (set (reg:SI 198)
        (plus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 131 [0x83]))
        (nil)))
(insn 176 175 177 27 (set (reg:SI 198)
        (ashift:SI (reg:SI 198)
            (const_int 3 [0x3]))) "kbd.c":370:51 -1
     (nil))
(insn 177 176 178 27 (set (reg:SI 198)
        (minus:SI (reg:SI 198)
            (reg:SI 197))) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 1047 [0x417]))
        (nil)))
(insn 178 177 179 27 (set (reg:SI 199)
        (ashift:SI (reg:SI 198)
            (const_int 2 [0x2]))) "kbd.c":370:51 -1
     (nil))
(insn 179 178 180 27 (set (reg:SI 198)
        (reg:SI 199)) "kbd.c":370:51 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 197)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 180 179 181 27 (set (reg:SI 200)
        (plus:SI (reg/f:SI 196)
            (reg:SI 198))) "kbd.c":370:51 -1
     (nil))
(insn 181 180 182 27 (set (reg/f:SI 201)
        (plus:SI (reg:SI 200)
            (const_int 84 [0x54]))) "kbd.c":370:51 -1
     (nil))
(insn 182 181 183 27 (set (reg/f:SI 126 [ _14 ])
        (mem/f:SI (reg/f:SI 201) [9 proc[i_41].res+0 S4 A32])) "kbd.c":370:51 -1
     (nil))
(insn 183 182 184 27 (set (reg/f:SI 127 [ _15 ])
        (plus:SI (reg/f:SI 126 [ _14 ])
            (const_int 60 [0x3c]))) "kbd.c":370:55 -1
     (nil))
(insn 184 183 185 27 (set (reg:SI 1 r1)
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x7fcdc0b61c60 *.LC4>)) "kbd.c":370:37 -1
     (nil))
(insn 185 184 186 27 (set (reg:SI 0 r0)
        (reg/f:SI 127 [ _15 ])) "kbd.c":370:37 -1
     (nil))
(call_insn/i 186 185 187 27 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strcmp") [flags 0x41]  <function_decl 0x7fcdc0d93700 strcmp>) [0 __builtin_strcmp S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":370:37 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 187 186 188 27 (set (reg:SI 128 [ _16 ])
        (reg:SI 0 r0)) "kbd.c":370:37 -1
     (nil))
(insn 188 187 189 27 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 128 [ _16 ])
            (const_int 0 [0]))) "kbd.c":370:34 -1
     (nil))
(jump_insn 189 188 190 27 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 222)
            (pc))) "kbd.c":370:34 -1
     (nil)
 -> 222)
;;  succ:       28 (FALLTHRU)
;;              29

;; basic block 28, loop depth 1, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL)
;;  pred:       27 (FALLTHRU)
(note 190 189 191 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 191 190 192 28 (set (reg/f:SI 202)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 -1
     (nil))
(insn 192 191 193 28 (set (reg:SI 203)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 -1
     (nil))
(insn 193 192 194 28 (set (reg:SI 204)
        (reg:SI 203)) "kbd.c":371:9 -1
     (nil))
(insn 194 193 195 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 6 [0x6]))) "kbd.c":371:9 -1
     (nil))
(insn 195 194 196 28 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 65 [0x41]))
        (nil)))
(insn 196 195 197 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 1 [0x1]))) "kbd.c":371:9 -1
     (nil))
(insn 197 196 198 28 (set (reg:SI 204)
        (plus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 131 [0x83]))
        (nil)))
(insn 198 197 199 28 (set (reg:SI 204)
        (ashift:SI (reg:SI 204)
            (const_int 3 [0x3]))) "kbd.c":371:9 -1
     (nil))
(insn 199 198 200 28 (set (reg:SI 204)
        (minus:SI (reg:SI 204)
            (reg:SI 203))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 1047 [0x417]))
        (nil)))
(insn 200 199 201 28 (set (reg:SI 205)
        (ashift:SI (reg:SI 204)
            (const_int 2 [0x2]))) "kbd.c":371:9 -1
     (nil))
(insn 201 200 202 28 (set (reg:SI 204)
        (reg:SI 205)) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 203)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 202 201 203 28 (set (reg:SI 206)
        (plus:SI (reg/f:SI 202)
            (reg:SI 204))) "kbd.c":371:9 -1
     (nil))
(insn 203 202 204 28 (set (reg/f:SI 207)
        (plus:SI (reg:SI 206)
            (const_int 84 [0x54]))) "kbd.c":371:9 -1
     (nil))
(insn 204 203 205 28 (set (reg/f:SI 129 [ _17 ])
        (mem/f:SI (reg/f:SI 207) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 -1
     (nil))
(insn 205 204 206 28 (set (reg:SI 130 [ _18 ])
        (mem:SI (plus:SI (reg/f:SI 129 [ _17 ])
                (const_int 92 [0x5c])) [3 _17->signal+0 S4 A32])) "kbd.c":371:22 -1
     (nil))
(insn 206 205 207 28 (set (reg/f:SI 208)
        (symbol_ref:SI ("proc") [flags 0x40]  <var_decl 0x7fcdc17fe5a0 proc>)) "kbd.c":371:9 -1
     (nil))
(insn 207 206 208 28 (set (reg:SI 209)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":371:9 -1
     (nil))
(insn 208 207 209 28 (set (reg:SI 210)
        (reg:SI 209)) "kbd.c":371:9 -1
     (nil))
(insn 209 208 210 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 6 [0x6]))) "kbd.c":371:9 -1
     (nil))
(insn 210 209 211 28 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 65 [0x41]))
        (nil)))
(insn 211 210 212 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 1 [0x1]))) "kbd.c":371:9 -1
     (nil))
(insn 212 211 213 28 (set (reg:SI 210)
        (plus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 131 [0x83]))
        (nil)))
(insn 213 212 214 28 (set (reg:SI 210)
        (ashift:SI (reg:SI 210)
            (const_int 3 [0x3]))) "kbd.c":371:9 -1
     (nil))
(insn 214 213 215 28 (set (reg:SI 210)
        (minus:SI (reg:SI 210)
            (reg:SI 209))) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 1047 [0x417]))
        (nil)))
(insn 215 214 216 28 (set (reg:SI 211)
        (ashift:SI (reg:SI 210)
            (const_int 2 [0x2]))) "kbd.c":371:9 -1
     (nil))
(insn 216 215 217 28 (set (reg:SI 210)
        (reg:SI 211)) "kbd.c":371:9 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 209)
            (const_int 4188 [0x105c]))
        (nil)))
(insn 217 216 218 28 (set (reg:SI 212)
        (plus:SI (reg/f:SI 208)
            (reg:SI 210))) "kbd.c":371:9 -1
     (nil))
(insn 218 217 219 28 (set (reg/f:SI 213)
        (plus:SI (reg:SI 212)
            (const_int 84 [0x54]))) "kbd.c":371:9 -1
     (nil))
(insn 219 218 220 28 (set (reg/f:SI 131 [ _19 ])
        (mem/f:SI (reg/f:SI 213) [9 proc[i_41].res+0 S4 A32])) "kbd.c":371:9 -1
     (nil))
(insn 220 219 221 28 (set (reg:SI 132 [ _20 ])
        (ior:SI (reg:SI 130 [ _18 ])
            (const_int 4 [0x4]))) "kbd.c":371:22 -1
     (nil))
(insn 221 220 222 28 (set (mem:SI (plus:SI (reg/f:SI 131 [ _19 ])
                (const_int 92 [0x5c])) [3 _19->signal+0 S4 A32])
        (reg:SI 132 [ _20 ])) "kbd.c":371:22 -1
     (nil))
;;  succ:       29 (FALLTHRU)

;; basic block 29, loop depth 1, maybe hot
;;  prev block 28, next block 30, flags: (NEW, REACHABLE, RTL)
;;  pred:       26
;;              27
;;              28 (FALLTHRU)
(code_label 222 221 223 29 76 (nil) [2 uses])
(note 223 222 224 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 224 223 225 29 (set (reg:SI 215)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:25 -1
     (nil))
(insn 225 224 226 29 (set (reg:SI 214)
        (plus:SI (reg:SI 215)
            (const_int 1 [0x1]))) "kbd.c":369:25 -1
     (nil))
(insn 226 225 227 29 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])
        (reg:SI 214)) "kbd.c":369:25 -1
     (nil))
;;  succ:       30 (FALLTHRU,DFS_BACK)

;; basic block 30, loop depth 1, maybe hot
;;  prev block 29, next block 31, flags: (NEW, REACHABLE, RTL)
;;  pred:       25
;;              29 (FALLTHRU,DFS_BACK)
(code_label 227 226 228 30 75 (nil) [1 uses])
(note 228 227 232 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 232 228 233 30 (set (reg:SI 216)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 i+0 S4 A64])) "kbd.c":369:16 -1
     (nil))
(insn 233 232 234 30 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 216)
            (const_int 63 [0x3f]))) "kbd.c":369:16 -1
     (nil))
(jump_insn 234 233 235 30 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 229)
            (pc))) "kbd.c":369:16 -1
     (nil)
 -> 229)
;;  succ:       26
;;              31 (FALLTHRU)

;; basic block 31, loop depth 0, maybe hot
;;  prev block 30, next block 32, flags: (NEW, REACHABLE, RTL)
;;  pred:       30 (FALLTHRU)
(note 235 234 236 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 236 235 237 31 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x7fcdc0b61d80 *.LC6>)) "kbd.c":374:5 -1
     (nil))
(call_insn 237 236 238 31 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":374:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 238 237 239 31 (set (reg:SI 217)
        (const_int 13 [0xd])) "kbd.c":375:7 -1
     (nil))
(insn 239 238 240 31 (set (reg:QI 218)
        (subreg:QI (reg:SI 217) 0)) "kbd.c":375:7 -1
     (nil))
(insn 240 239 241 31 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 218)) "kbd.c":375:7 -1
     (nil))
(insn 241 240 242 31 (set (reg/f:SI 219)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":377:13 -1
     (nil))
(insn 242 241 243 31 (set (reg:SI 220)
        (const_int 0 [0])) "kbd.c":377:13 -1
     (nil))
(insn 243 242 244 31 (set (mem/c:SI (reg/f:SI 219) [3 control+0 S4 A32])
        (reg:SI 220)) "kbd.c":377:13 -1
     (nil))
;;  succ:       32 (FALLTHRU)

;; basic block 32, loop depth 0, maybe hot
;;  prev block 31, next block 33, flags: (NEW, REACHABLE, RTL)
;;  pred:       23
;;              24
;;              31 (FALLTHRU)
(code_label 244 243 245 32 74 (nil) [2 uses])
(note 245 244 246 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 246 245 247 32 (set (reg/f:SI 221)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":380:7 -1
     (nil))
(insn 247 246 248 32 (set (reg:SI 133 [ control.26_21 ])
        (mem/c:SI (reg/f:SI 221) [3 control+0 S4 A32])) "kbd.c":380:7 -1
     (nil))
(insn 248 247 249 32 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133 [ control.26_21 ])
            (const_int 0 [0]))) "kbd.c":380:6 -1
     (nil))
(jump_insn 249 248 250 32 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:6 -1
     (nil)
 -> 265)
;;  succ:       33 (FALLTHRU)
;;              35

;; basic block 33, loop depth 0, maybe hot
;;  prev block 32, next block 34, flags: (NEW, REACHABLE, RTL)
;;  pred:       32 (FALLTHRU)
(note 250 249 251 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn 251 250 252 33 (set (reg:SI 222)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":380:15 -1
     (nil))
(insn 252 251 253 33 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 222)
            (const_int 35 [0x23]))) "kbd.c":380:15 -1
     (nil))
(jump_insn 253 252 254 33 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 265)
            (pc))) "kbd.c":380:15 -1
     (nil)
 -> 265)
;;  succ:       34 (FALLTHRU)
;;              35

;; basic block 34, loop depth 0, maybe hot
;;  prev block 33, next block 35, flags: (NEW, REACHABLE, RTL)
;;  pred:       33 (FALLTHRU)
(note 254 253 255 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn 255 254 256 34 (set (reg:SI 223)
        (const_int 4 [0x4])) "kbd.c":381:7 -1
     (nil))
(insn 256 255 257 34 (set (reg:QI 224)
        (subreg:QI (reg:SI 223) 0)) "kbd.c":381:7 -1
     (nil))
(insn 257 256 258 34 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 224)) "kbd.c":381:7 -1
     (nil))
(insn 258 257 259 34 (set (reg:SI 134 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":382:5 -1
     (nil))
(insn 259 258 260 34 (set (reg:SI 1 r1)
        (reg:SI 134 [ _22 ])) "kbd.c":382:5 -1
     (nil))
(insn 260 259 261 34 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":382:5 -1
     (nil))
(call_insn 261 260 262 34 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":382:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 262 261 263 34 (set (reg/f:SI 225)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":383:13 -1
     (nil))
(insn 263 262 264 34 (set (reg:SI 226)
        (const_int 0 [0])) "kbd.c":383:13 -1
     (nil))
(insn 264 263 265 34 (set (mem/c:SI (reg/f:SI 225) [3 control+0 S4 A32])
        (reg:SI 226)) "kbd.c":383:13 -1
     (nil))
;;  succ:       35 (FALLTHRU)

;; basic block 35, loop depth 0, maybe hot
;;  prev block 34, next block 36, flags: (NEW, REACHABLE, RTL)
;;  pred:       32
;;              33
;;              34 (FALLTHRU)
(code_label 265 264 266 35 78 (nil) [2 uses])
(note 266 265 267 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(insn 267 266 268 35 (set (reg/f:SI 227)
        (symbol_ref:SI ("control") [flags 0x2]  <var_decl 0x7fcdc0b1a750 control>)) "kbd.c":386:7 -1
     (nil))
(insn 268 267 269 35 (set (reg:SI 135 [ control.27_23 ])
        (mem/c:SI (reg/f:SI 227) [3 control+0 S4 A32])) "kbd.c":386:7 -1
     (nil))
(insn 269 268 270 35 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 135 [ control.27_23 ])
            (const_int 0 [0]))) "kbd.c":386:6 -1
     (nil))
(jump_insn 270 269 271 35 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:6 -1
     (nil)
 -> 283)
;;  succ:       36 (FALLTHRU)
;;              38

;; basic block 36, loop depth 0, maybe hot
;;  prev block 35, next block 37, flags: (NEW, REACHABLE, RTL)
;;  pred:       35 (FALLTHRU)
(note 271 270 272 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(insn 272 271 273 36 (set (reg:SI 228)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 scode+0 S1 A8]))) "kbd.c":386:15 -1
     (nil))
(insn 273 272 274 36 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 228)
            (const_int 35 [0x23]))) "kbd.c":386:15 -1
     (nil))
(jump_insn 274 273 275 36 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 283)
            (pc))) "kbd.c":386:15 -1
     (nil)
 -> 283)
;;  succ:       37 (FALLTHRU)
;;              38

;; basic block 37, loop depth 0, maybe hot
;;  prev block 36, next block 38, flags: (NEW, REACHABLE, RTL)
;;  pred:       36 (FALLTHRU)
(note 275 274 276 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(insn 276 275 277 37 (set (reg:SI 229)
        (const_int 4 [0x4])) "kbd.c":387:7 -1
     (nil))
(insn 277 276 278 37 (set (reg:QI 230)
        (subreg:QI (reg:SI 229) 0)) "kbd.c":387:7 -1
     (nil))
(insn 278 277 279 37 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])
        (reg:QI 230)) "kbd.c":387:7 -1
     (nil))
(insn 279 278 280 37 (set (reg:SI 136 [ _24 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":388:5 -1
     (nil))
(insn 280 279 281 37 (set (reg:SI 1 r1)
        (reg:SI 136 [ _24 ])) "kbd.c":388:5 -1
     (nil))
(insn 281 280 282 37 (set (reg:SI 0 r0)
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x7fcdc0b61e10 *.LC7>)) "kbd.c":388:5 -1
     (nil))
(call_insn 282 281 283 37 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintf") [flags 0x41]  <function_decl 0x7fcdc0b13a00 kprintf>) [0 kprintf S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":388:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       38 (FALLTHRU)

;; basic block 38, loop depth 0, maybe hot
;;  prev block 37, next block 39, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       35
;;              36
;;              37 (FALLTHRU)
(code_label 283 282 284 38 79 (nil) [2 uses])
(note 284 283 285 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn 285 284 286 38 (set (reg/f:SI 231)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:13 -1
     (nil))
(insn 286 285 287 38 (set (reg:SI 137 [ _25 ])
        (mem/v:SI (plus:SI (reg/f:SI 231)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":391:13 -1
     (nil))
(insn 287 286 288 38 (set (reg:SI 138 [ _27 ])
        (plus:SI (reg:SI 137 [ _25 ])
            (const_int 1 [0x1]))) "kbd.c":391:19 -1
     (nil))
(insn 288 287 289 38 (set (reg/f:SI 232)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:19 -1
     (nil))
(insn 289 288 290 38 (set (mem/v:SI (plus:SI (reg/f:SI 232)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 138 [ _27 ])) "kbd.c":391:19 -1
     (nil))
(insn 290 289 291 38 (set (reg/f:SI 233)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":391:23 -1
     (nil))
(insn 291 290 292 38 (set (reg/f:SI 234)
        (plus:SI (reg/f:SI 233)
            (reg:SI 137 [ _25 ]))) "kbd.c":391:23 -1
     (nil))
(insn 292 291 293 38 (set (reg:QI 235)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16])) "kbd.c":391:23 -1
     (nil))
(insn 293 292 294 38 (set (mem/v:QI (plus:SI (reg/f:SI 234)
                (const_int 4 [0x4])) [0 kp_48->buf[_26]+0 S1 A8])
        (reg:QI 235)) "kbd.c":391:23 -1
     (nil))
(insn 294 293 295 38 (set (reg/f:SI 236)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 -1
     (nil))
(insn 295 294 296 38 (set (reg:SI 139 [ _28 ])
        (mem/v:SI (plus:SI (reg/f:SI 236)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])) "kbd.c":392:12 -1
     (nil))
(insn 296 295 297 38 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 139 [ _28 ]))
                    (const_int 0 [0])))
            (set (reg:SI 237)
                (minus:SI (const_int 0 [0])
                    (reg:SI 139 [ _28 ])))
        ]) "kbd.c":392:12 -1
     (nil))
(insn 297 296 298 38 (set (reg:SI 140 [ _29 ])
        (and:SI (reg:SI 139 [ _28 ])
            (const_int 127 [0x7f]))) "kbd.c":392:12 -1
     (nil))
(insn 298 297 299 38 (set (reg:SI 238)
        (and:SI (reg:SI 237)
            (const_int 127 [0x7f]))) "kbd.c":392:12 -1
     (nil))
(insn 299 298 300 38 (set (reg:SI 140 [ _29 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 238))
            (reg:SI 140 [ _29 ]))) "kbd.c":392:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 139 [ _28 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 300 299 301 38 (set (reg/f:SI 239)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":392:12 -1
     (nil))
(insn 301 300 302 38 (set (mem/v:SI (plus:SI (reg/f:SI 239)
                (const_int 132 [0x84])) [3 kp_48->head+0 S4 A32])
        (reg:SI 140 [ _29 ])) "kbd.c":392:12 -1
     (nil))
(insn 302 301 303 38 (set (reg/f:SI 240)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:5 -1
     (nil))
(insn 303 302 304 38 (set (reg:SI 141 [ _30 ])
        (mem/v:SI (plus:SI (reg/f:SI 240)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])) "kbd.c":393:5 -1
     (nil))
(insn 304 303 305 38 (set (reg:SI 142 [ _31 ])
        (plus:SI (reg:SI 141 [ _30 ])
            (const_int 1 [0x1]))) "kbd.c":393:11 -1
     (nil))
(insn 305 304 306 38 (set (reg/f:SI 241)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:11 -1
     (nil))
(insn 306 305 307 38 (set (mem/v:SI (plus:SI (reg/f:SI 241)
                (const_int 140 [0x8c])) [3 kp_48->data+0 S4 A32])
        (reg:SI 142 [ _31 ])) "kbd.c":393:11 -1
     (nil))
(insn 307 306 308 38 (set (reg/f:SI 242)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:17 -1
     (nil))
(insn 308 307 309 38 (set (reg:SI 143 [ _32 ])
        (mem/v:SI (plus:SI (reg/f:SI 242)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])) "kbd.c":393:17 -1
     (nil))
(insn 309 308 310 38 (set (reg:SI 144 [ _33 ])
        (plus:SI (reg:SI 143 [ _32 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":393:23 -1
     (nil))
(insn 310 309 311 38 (set (reg/f:SI 243)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":393:23 -1
     (nil))
(insn 311 310 312 38 (set (mem/v:SI (plus:SI (reg/f:SI 243)
                (const_int 144 [0x90])) [3 kp_48->room+0 S4 A32])
        (reg:SI 144 [ _33 ])) "kbd.c":393:23 -1
     (nil))
(insn 312 311 313 38 (set (reg:SI 244)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":394:3 -1
     (nil))
(insn 313 312 314 38 (set (reg/f:SI 145 [ _34 ])
        (plus:SI (reg:SI 244)
            (const_int 140 [0x8c]))) "kbd.c":394:3 -1
     (nil))
(insn 314 313 315 38 (set (reg:SI 0 r0)
        (reg/f:SI 145 [ _34 ])) "kbd.c":394:3 -1
     (nil))
(call_insn 315 314 316 38 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":394:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 316 315 317 38 (set (reg:SI 245)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -10 [0xfffffffffffffff6])) [0 c+0 S1 A16]))) "kbd.c":396:6 -1
     (nil))
(insn 317 316 318 38 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 245)
            (const_int 13 [0xd]))) "kbd.c":396:6 -1
     (nil))
(jump_insn 318 317 319 38 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 329)
            (pc))) "kbd.c":396:6 273 {arm_cond_branch}
     (nil)
 -> 329)
;;  succ:       39 (FALLTHRU)
;;              41

;; basic block 39, loop depth 0, maybe hot
;;  prev block 38, next block 41, flags: (NEW, REACHABLE, RTL)
;;  pred:       38 (FALLTHRU)
(note 319 318 320 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(insn 320 319 321 39 (set (reg/f:SI 246)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 -1
     (nil))
(insn 321 320 322 39 (set (reg:SI 146 [ kline.28_35 ])
        (mem/v/c:SI (reg/f:SI 246) [3 kline+0 S4 A32])) "kbd.c":397:10 -1
     (nil))
(insn 322 321 323 39 (set (reg:SI 147 [ _36 ])
        (plus:SI (reg:SI 146 [ kline.28_35 ])
            (const_int 1 [0x1]))) "kbd.c":397:10 -1
     (nil))
(insn 323 322 324 39 (set (reg/f:SI 247)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":397:10 -1
     (nil))
(insn 324 323 325 39 (set (mem/v/c:SI (reg/f:SI 247) [3 kline+0 S4 A32])
        (reg:SI 147 [ _36 ])) "kbd.c":397:10 -1
     (nil))
(insn 325 324 326 39 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":398:5 -1
     (nil))
(call_insn 326 325 329 39 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kwakeup") [flags 0x41]  <function_decl 0x7fcdc0b26900 kwakeup>) [0 kwakeup S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":398:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       41 (FALLTHRU)

;; basic block 41, loop depth 0, maybe hot
;;  prev block 39, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       39 (FALLTHRU)
;;              4 [always] 
;;              7 [always] 
;;              10 [always] 
;;              13 [always] 
;;              16 [always] 
;;              19 [always] 
;;              38
(code_label 329 326 330 41 64 (nil) [7 uses])
(note 330 329 0 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kbd_handler (kbd_handler, funcdef_no=7, decl_uid=4544, cgraph_uid=8, symbol_order=22)

void kbd_handler ()
{
  int keyset.29_1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  keyset.29_1 ={v} keyset;
  if (keyset.29_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kbd_handler1 ();
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  kbd_handler2 ();
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (keyset.29_1 - 1 )


Coalescible Partition map 


After Coalescing:

Partition map 

Partition 0 (keyset.29_1 - 1 )

void kbd_handler ()
{
  int keyset.29_1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  keyset.29_1 ={v} keyset;
  if (keyset.29_1 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kbd_handler1 ();
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  kbd_handler2 ();
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; keyset.29_1 ={v} keyset;

(insn 5 4 6 (set (reg/f:SI 114)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":404:14 -1
     (nil))

(insn 6 5 0 (set (reg:SI 113 [ keyset.29_1 ])
        (mem/v/c:SI (reg/f:SI 114) [3 keyset+0 S4 A32])) "kbd.c":404:14 -1
     (nil))

;; if (keyset.29_1 == 1)

(insn 7 6 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ keyset.29_1 ])
            (const_int 1 [0x1]))) "kbd.c":404:6 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":404:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; kbd_handler1 ();

(call_insn 10 9 0 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler1") [flags 0x3]  <function_decl 0x7fcdc0b26700 kbd_handler1>) [0 kbd_handler1 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":405:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 83 (nil) [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; kbd_handler2 ();

(call_insn 15 14 0 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler2") [flags 0x3]  <function_decl 0x7fcdc0b26d00 kbd_handler2>) [0 kbd_handler2 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":407:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 5

;; 

(code_label 16 15 17 84 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Redirecting jump 11 from 6 to 7.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 114)
        (symbol_ref:SI ("keyset") [flags 0x2]  <var_decl 0x7fcdc0b1a870 keyset>)) "kbd.c":404:14 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ keyset.29_1 ])
        (mem/v/c:SI (reg/f:SI 114) [3 keyset+0 S4 A32])) "kbd.c":404:14 -1
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ keyset.29_1 ])
            (const_int 1 [0x1]))) "kbd.c":404:6 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 13)
            (pc))) "kbd.c":404:6 -1
     (nil)
 -> 13)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 10 9 11 4 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler1") [flags 0x3]  <function_decl 0x7fcdc0b26700 kbd_handler1>) [0 kbd_handler1 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":405:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 11 10 12 4 (set (pc)
        (label_ref:SI 18)) 284 {*arm_jump}
     (nil)
 -> 18)
;;  succ:       7 [always] 

(barrier 12 11 13)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 13 12 14 5 83 (nil) [1 uses])
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 18 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("kbd_handler2") [flags 0x3]  <function_decl 0x7fcdc0b26d00 kbd_handler2>) [0 kbd_handler2 S4 A32])
                (const_int 0 [0]))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":407:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
;;              4 [always] 
(code_label 18 15 19 7 82 (nil) [1 uses])
(note 19 18 0 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgetc (kgetc, funcdef_no=8, decl_uid=4546, cgraph_uid=9, symbol_order=23)

int kgetc ()
{
  volatile struct KBD * kp;
  char c;
  int D.4731;
  volatile int * _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int _22;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_13 = &kbd;
  lock ();
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  unlock ();
  _1 = &kp_13->data;
  ksleep (_1);
  lock ();
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  _2 ={v} kp_13->data;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _3 ={v} kp_13->tail;
  _4 = _3;
  _5 = _4 + 1;
  kp_13->tail ={v} _5;
  c_17 ={v} kp_13->buf[_4];
  _6 ={v} kp_13->tail;
  _7 = _6 % 128;
  kp_13->tail ={v} _7;
  _8 ={v} kp_13->data;
  _9 = _8 + -1;
  kp_13->data ={v} _9;
  _10 ={v} kp_13->room;
  _11 = _10 + 1;
  kp_13->room ={v} _11;
  unlock ();
  _22 = (int) c_17;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _22;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 13 (kp_13 - 13 )
Partition 17 (c_17 - 17 )
Partition 22 (_22 - 22 )
Partition 26 (_26(D) - 26 )


Coalescible Partition map 

Partition 0, base 0 (_3 - 3 4 )
Partition 2, base 1 (_26(D) - 26 )


Partition map 

Partition 0 (_3 - 3 )
Partition 1 (_4 - 4 )
Partition 2 (_26(D) - 26 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(10000, 0) _3 <-> _4

Partition map 

Partition 0 (_3 - 3 )
Partition 1 (_4 - 4 )
Partition 2 (_26(D) - 26 )

Coalesce list: (3)_3 & (4)_4 [map: 0, 1] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 4 )
Partition 3 (_5 - 5 )
Partition 4 (_6 - 6 )
Partition 5 (_7 - 7 )
Partition 6 (_8 - 8 )
Partition 7 (_9 - 9 )
Partition 8 (_10 - 10 )
Partition 9 (_11 - 11 )
Partition 10 (kp_13 - 13 )
Partition 11 (c_17 - 17 )
Partition 12 (_22 - 22 )
Partition 13 (_26(D) - 26 )

int kgetc ()
{
  volatile struct KBD * kp;
  char c;
  int D.4731;
  volatile int * _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int _22;
  int _26(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_13 = &kbd;
  lock ();
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  unlock ();
  _1 = &kp_13->data;
  ksleep (_1);
  lock ();
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  _2 ={v} kp_13->data;
  if (_2 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  _3 ={v} kp_13->tail;
  _4 = _3;
  _5 = _4 + 1;
  kp_13->tail ={v} _5;
  c_17 ={v} kp_13->buf[_4];
  _6 ={v} kp_13->tail;
  _7 = _6 % 128;
  kp_13->tail ={v} _7;
  _8 ={v} kp_13->data;
  _9 = _8 + -1;
  kp_13->data ={v} _9;
  _10 ={v} kp_13->room;
  _11 = _10 + 1;
  kp_13->room ={v} _11;
  unlock ();
  _22 = (int) c_17;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       5
<L3>:
  return _22;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	kp_13
Partition 1: size 1 align 1
	c_17

;; Generating RTL for gimple basic block 2

;; kp_13 = &kbd;

(insn 5 4 6 (set (reg/f:SI 125)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":414:8 -1
     (nil))

(insn 6 5 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 125)) "kbd.c":414:8 -1
     (nil))

;; lock ();

(call_insn 7 6 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":416:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 3

;; unlock ();

(call_insn 11 10 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":419:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; _1 = &kp_13->data;

(insn 12 11 13 (set (reg:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":420:5 -1
     (nil))

(insn 13 12 0 (set (reg/f:SI 113 [ _1 ])
        (plus:SI (reg:SI 126)
            (const_int 140 [0x8c]))) "kbd.c":420:5 -1
     (nil))

;; ksleep (_1);

(insn 14 13 15 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ _1 ])) "kbd.c":420:5 -1
     (nil))

(call_insn 15 14 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":420:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; lock ();

(call_insn 16 15 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":421:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 4

;; 

(code_label 17 16 18 89 (nil) [0 uses])

(note 18 17 0 NOTE_INSN_BASIC_BLOCK)

;; _2 ={v} kp_13->data;

(insn 19 18 20 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":418:11 -1
     (nil))

(insn 20 19 0 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":418:11 -1
     (nil))

;; if (_2 == 0)

(insn 22 20 23 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "kbd.c":418:18 -1
     (nil))

(jump_insn 23 22 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":418:18 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _3 ={v} kp_13->tail;

(insn 25 24 26 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:17 -1
     (nil))

(insn 26 25 0 (set (reg:SI 115 [ _3 ])
        (mem/v:SI (plus:SI (reg/f:SI 128)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":424:17 -1
     (nil))

;; _4 = _3;

(nil)

;; _5 = _4 + 1;

(insn 27 26 0 (set (reg:SI 116 [ _5 ])
        (plus:SI (reg:SI 115 [ _3 ])
            (const_int 1 [0x1]))) "kbd.c":424:23 -1
     (nil))

;; kp_13->tail ={v} _5;

(insn 28 27 29 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:23 -1
     (nil))

(insn 29 28 0 (set (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 116 [ _5 ])) "kbd.c":424:23 -1
     (nil))

;; c_17 ={v} kp_13->buf[_4];

(insn 30 29 31 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:5 -1
     (nil))

(insn 31 30 32 (set (reg/f:SI 131)
        (plus:SI (reg/f:SI 130)
            (reg:SI 115 [ _3 ]))) "kbd.c":424:5 -1
     (nil))

(insn 32 31 33 (set (reg:QI 132)
        (mem/v:QI (plus:SI (reg/f:SI 131)
                (const_int 4 [0x4])) [0 kp_13->buf[_4]+0 S1 A8])) "kbd.c":424:5 -1
     (nil))

(insn 33 32 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 132)) "kbd.c":424:5 -1
     (nil))

;; _6 ={v} kp_13->tail;

(insn 34 33 35 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 -1
     (nil))

(insn 35 34 0 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 133)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":425:12 -1
     (nil))

;; _7 = _6 % 128;

(insn 36 35 37 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 134)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":425:12 -1
     (nil))

(insn 37 36 38 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":425:12 -1
     (nil))

(insn 38 37 39 (set (reg:SI 135)
        (and:SI (reg:SI 134)
            (const_int 127 [0x7f]))) "kbd.c":425:12 -1
     (nil))

(insn 39 38 0 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 135))
            (reg:SI 118 [ _7 ]))) "kbd.c":425:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_13->tail ={v} _7;

(insn 40 39 41 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 -1
     (nil))

(insn 41 40 0 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":425:12 -1
     (nil))

;; _8 ={v} kp_13->data;

(insn 42 41 43 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:5 -1
     (nil))

(insn 43 42 0 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":426:5 -1
     (nil))

;; _9 = _8 + -1;

(insn 44 43 0 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":426:11 -1
     (nil))

;; kp_13->data ={v} _9;

(insn 45 44 46 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:11 -1
     (nil))

(insn 46 45 0 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":426:11 -1
     (nil))

;; _10 ={v} kp_13->room;

(insn 47 46 48 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:17 -1
     (nil))

(insn 48 47 0 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])) "kbd.c":426:17 -1
     (nil))

;; _11 = _10 + 1;

(insn 49 48 0 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":426:23 -1
     (nil))

;; kp_13->room ={v} _11;

(insn 50 49 51 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:23 -1
     (nil))

(insn 51 50 0 (set (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":426:23 -1
     (nil))

;; unlock ();

(call_insn 52 51 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":427:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; _22 = (int) c_17;

(insn 53 52 0 (set (reg:SI 123 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":428:10 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; <L3>:

(code_label 54 53 55 91 (nil) [0 uses])

(note 55 54 0 NOTE_INSN_BASIC_BLOCK)

;; return _22;

(insn 56 55 57 (set (reg:SI 124 [ <retval> ])
        (reg:SI 123 [ _22 ])) "kbd.c":428:10 -1
     (nil))

(jump_insn 57 56 58 (set (pc)
        (label_ref 0)) "kbd.c":428:10 -1
     (nil))

(barrier 58 57 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.
Removing jump 57.
Merging block 8 into block 6...
Merged blocks 6 and 8.
Merged 6 and 8 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 125)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":414:8 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 125)) "kbd.c":414:8 -1
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":416:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 17)) "kbd.c":418:8 -1
     (nil)
 -> 17)
;;  succ:       5

(barrier 9 8 21)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 21 9 10 4 90 (nil) [1 uses])
(note 10 21 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 11 10 12 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":419:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 12 11 13 4 (set (reg:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":420:5 -1
     (nil))
(insn 13 12 14 4 (set (reg/f:SI 113 [ _1 ])
        (plus:SI (reg:SI 126)
            (const_int 140 [0x8c]))) "kbd.c":420:5 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 0 r0)
        (reg/f:SI 113 [ _1 ])) "kbd.c":420:5 -1
     (nil))
(call_insn 15 14 16 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":420:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(call_insn 16 15 17 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":421:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 17 16 18 5 89 (nil) [1 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":418:11 -1
     (nil))
(insn 20 19 22 5 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":418:11 -1
     (nil))
(insn 22 20 23 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "kbd.c":418:18 -1
     (nil))
(jump_insn 23 22 24 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "kbd.c":418:18 -1
     (nil)
 -> 21)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 6 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:17 -1
     (nil))
(insn 26 25 27 6 (set (reg:SI 115 [ _3 ])
        (mem/v:SI (plus:SI (reg/f:SI 128)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":424:17 -1
     (nil))
(insn 27 26 28 6 (set (reg:SI 116 [ _5 ])
        (plus:SI (reg:SI 115 [ _3 ])
            (const_int 1 [0x1]))) "kbd.c":424:23 -1
     (nil))
(insn 28 27 29 6 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:23 -1
     (nil))
(insn 29 28 30 6 (set (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 116 [ _5 ])) "kbd.c":424:23 -1
     (nil))
(insn 30 29 31 6 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":424:5 -1
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 131)
        (plus:SI (reg/f:SI 130)
            (reg:SI 115 [ _3 ]))) "kbd.c":424:5 -1
     (nil))
(insn 32 31 33 6 (set (reg:QI 132)
        (mem/v:QI (plus:SI (reg/f:SI 131)
                (const_int 4 [0x4])) [0 kp_13->buf[_4]+0 S1 A8])) "kbd.c":424:5 -1
     (nil))
(insn 33 32 34 6 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 132)) "kbd.c":424:5 -1
     (nil))
(insn 34 33 35 6 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 -1
     (nil))
(insn 35 34 36 6 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 133)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])) "kbd.c":425:12 -1
     (nil))
(insn 36 35 37 6 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 134)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":425:12 -1
     (nil))
(insn 37 36 38 6 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":425:12 -1
     (nil))
(insn 38 37 39 6 (set (reg:SI 135)
        (and:SI (reg:SI 134)
            (const_int 127 [0x7f]))) "kbd.c":425:12 -1
     (nil))
(insn 39 38 40 6 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 135))
            (reg:SI 118 [ _7 ]))) "kbd.c":425:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 40 39 41 6 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":425:12 -1
     (nil))
(insn 41 40 42 6 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_13->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":425:12 -1
     (nil))
(insn 42 41 43 6 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:5 -1
     (nil))
(insn 43 42 44 6 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])) "kbd.c":426:5 -1
     (nil))
(insn 44 43 45 6 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":426:11 -1
     (nil))
(insn 45 44 46 6 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:11 -1
     (nil))
(insn 46 45 47 6 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 140 [0x8c])) [3 kp_13->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":426:11 -1
     (nil))
(insn 47 46 48 6 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:17 -1
     (nil))
(insn 48 47 49 6 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])) "kbd.c":426:17 -1
     (nil))
(insn 49 48 50 6 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":426:23 -1
     (nil))
(insn 50 49 51 6 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":426:23 -1
     (nil))
(insn 51 50 52 6 (set (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 144 [0x90])) [3 kp_13->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":426:23 -1
     (nil))
(call_insn 52 51 53 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":427:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 53 52 56 6 (set (reg:SI 123 [ _22 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":428:10 -1
     (nil))
(insn 56 53 60 6 (set (reg:SI 124 [ <retval> ])
        (reg:SI 123 [ _22 ])) "kbd.c":428:10 -1
     (nil))
(insn 60 56 61 6 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "kbd.c":429:1 -1
     (nil))
(insn 61 60 0 6 (use (reg/i:SI 0 r0)) "kbd.c":429:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgets (kgets, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=24)

__attribute__((access ("^0[ ]", )))
int kgets (char * s)
{
  char c;
  int D.4735;
  char * s.30_1;
  int _2;
  unsigned int _3;
  int _11;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 3, loop depth 1
;;    pred:       6
  if (c_9 == 8)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 1
;;    pred:       3
  s_14 = s_4 + 4294967295;
  // predicted unlikely by continue predictor.
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 5, loop depth 1
;;    pred:       3
  s.30_1 = s_4;
  s_12 = s.30_1 + 1;
  *s.30_1 = c_9;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       2
;;                4
;;                5
  # s_4 = PHI <s_6(D)(2), s_14(4), s_12(5)>
  _2 = kgetc ();
  c_9 = (char) _2;
  if (c_9 != 13)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       3
;;                7

;;   basic block 7, loop depth 0
;;    pred:       6
  *s_4 = 0;
  _3 = strlen (s_4);
  _11 = (int) _3;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       7
<L5>:
  return _11;
;;    succ:       EXIT

}



Partition map 

Partition 1 (s.30_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (s_4 - 4 )
Partition 6 (s_6(D) - 6 )
Partition 9 (c_9 - 9 )
Partition 11 (_11 - 11 )
Partition 12 (s_12 - 12 )
Partition 14 (s_14 - 14 )
Partition 15 (_15(D) - 15 )


Coalescible Partition map 

Partition 0, base 0 (s_4 - 4 6 12 14 )
Partition 4, base 1 (_15(D) - 15 )


Partition map 

Partition 0 (s_4 - 4 )
Partition 1 (s_6(D) - 6 )
Partition 2 (s_12 - 12 )
Partition 3 (s_14 - 14 )
Partition 4 (_15(D) - 15 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_4 <-> s_6(D)
(2147483647, 0) s_4 <-> s_14
(2147483647, 0) s_4 <-> s_12

Partition map 

Partition 0 (s_4 - 4 )
Partition 1 (s_6(D) - 6 )
Partition 2 (s_12 - 12 )
Partition 3 (s_14 - 14 )
Partition 4 (_15(D) - 15 )

Coalesce list: (4)s_4 & (6)s_6(D) [map: 0, 1] : Success -> 0
Coalesce list: (4)s_4 & (14)s_14 [map: 0, 3] : Success -> 0
Coalesce list: (4)s_4 & (12)s_12 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (s.30_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (s_4 - 4 6 12 14 )
Partition 4 (c_9 - 9 )
Partition 5 (_11 - 11 )
Partition 6 (_15(D) - 15 )

__attribute__((access ("^0[ ]", )))
int kgets (char * s)
{
  char c;
  int D.4735;
  char * s.30_1;
  int _2;
  unsigned int _3;
  int _11;
  int _15(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 3, loop depth 1
;;    pred:       6
  if (c_9 == 8)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       4
;;                5

;;   basic block 4, loop depth 1
;;    pred:       3
  s_14 = s_4 + 4294967295;
  // predicted unlikely by continue predictor.
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 5, loop depth 1
;;    pred:       3
  s.30_1 = s_4;
  s_12 = s.30_1 + 1;
  *s.30_1 = c_9;
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       2
;;                4
;;                5
  # s_4 = PHI <s_6(D)(2), s_14(4), s_12(5)>
  _2 = kgetc ();
  c_9 = (char) _2;
  if (c_9 != 13)
    goto <bb 3>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       3
;;                7

;;   basic block 7, loop depth 0
;;    pred:       6
  *s_4 = 0;
  _3 = strlen (s_4);
  _11 = (int) _3;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       7
<L5>:
  return _11;
;;    succ:       EXIT

}


Partition 0: size 1 align 1
	c_9

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; if (c_9 == 8)

(insn 9 8 10 (set (reg:SI 118)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":435:8 -1
     (nil))

(insn 10 9 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 8 [0x8]))) "kbd.c":435:8 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":435:8 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; s_14 = s_4 + 4294967295;

(insn 13 12 14 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":436:8 -1
     (nil))

(insn 14 13 15 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":436:8 -1
     (nil))

(insn 15 14 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 119)) "kbd.c":436:8 -1
     (nil))

;; // predicted unlikely by continue predictor.

(nil)

;; Generating RTL for gimple basic block 5

;; 

(code_label 18 17 19 96 (nil) [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; s.30_1 = s_4;

(insn 20 19 0 (set (reg/f:SI 113 [ s.30_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":439:7 -1
     (nil))

;; s_12 = s.30_1 + 1;

(insn 21 20 22 (set (reg:SI 121)
        (plus:SI (reg/f:SI 113 [ s.30_1 ])
            (const_int 1 [0x1]))) "kbd.c":439:7 -1
     (nil))

(insn 22 21 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 121)) "kbd.c":439:7 -1
     (nil))

;; *s.30_1 = c_9;

(insn 23 22 24 (set (reg:QI 122)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "kbd.c":439:10 -1
     (nil))

(insn 24 23 0 (set (mem:QI (reg/f:SI 113 [ s.30_1 ]) [0 *s.30_1+0 S1 A8])
        (reg:QI 122)) "kbd.c":439:10 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 25 24 26 95 (nil) [0 uses])

(note 26 25 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = kgetc ();

(call_insn 27 26 28 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x3]  <function_decl 0x7fcdc0b31600 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":434:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

(insn 28 27 0 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "kbd.c":434:15 -1
     (nil))

;; c_9 = (char) _2;

(insn 29 28 30 (set (reg:QI 123)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "kbd.c":434:13 -1
     (nil))

(insn 30 29 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 123)) "kbd.c":434:13 -1
     (nil))

;; if (c_9 != 13)

(insn 32 30 33 (set (reg:SI 124)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":434:24 -1
     (nil))

(insn 33 32 34 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124)
            (const_int 13 [0xd]))) "kbd.c":434:24 -1
     (nil))

(jump_insn 34 33 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "kbd.c":434:24 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; *s_4 = 0;

(insn 36 35 37 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":441:6 -1
     (nil))

(insn 37 36 38 (set (reg:SI 126)
        (const_int 0 [0])) "kbd.c":441:6 -1
     (nil))

(insn 38 37 39 (set (reg:QI 127)
        (subreg:QI (reg:SI 126) 0)) "kbd.c":441:6 -1
     (nil))

(insn 39 38 0 (set (mem:QI (reg/f:SI 125) [0 *s_4+0 S1 A8])
        (reg:QI 127)) "kbd.c":441:6 -1
     (nil))

;; _3 = strlen (s_4);

(insn 40 39 41 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":442:10 -1
     (nil))

(call_insn/i 41 40 42 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7fcdc0d96100 strlen>) [0 __builtin_strlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":442:10 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

(insn 42 41 0 (set (reg:SI 115 [ _3 ])
        (reg:SI 0 r0)) "kbd.c":442:10 -1
     (nil))

;; _11 = (int) _3;

(insn 43 42 0 (set (reg:SI 116 [ _11 ])
        (reg:SI 115 [ _3 ])) "kbd.c":442:10 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; <L5>:

(code_label 44 43 45 98 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; return _11;

(insn 46 45 47 (set (reg:SI 117 [ <retval> ])
        (reg:SI 116 [ _11 ])) "kbd.c":442:10 -1
     (nil))

(jump_insn 47 46 48 (set (pc)
        (label_ref 0)) "kbd.c":442:10 -1
     (nil))

(barrier 48 47 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 9 into block 8...
Merged blocks 8 and 9.
Merged 8 and 9 without moving.
Removing jump 47.
Merging block 10 into block 8...
Merged blocks 8 and 10.
Merged 8 and 10 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":432:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 6 3 7 2 (set (pc)
        (label_ref 25)) "kbd.c":434:8 -1
     (nil)
 -> 25)
;;  succ:       7

(barrier 7 6 31)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 31 7 8 4 97 (nil) [1 uses])
(note 8 31 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg:SI 118)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":435:8 -1
     (nil))
(insn 10 9 11 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 8 [0x8]))) "kbd.c":435:8 -1
     (nil))
(jump_insn 11 10 12 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "kbd.c":435:8 -1
     (nil)
 -> 18)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 5 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":436:8 -1
     (nil))
(insn 14 13 15 5 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":436:8 -1
     (nil))
(insn 15 14 16 5 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 119)) "kbd.c":436:8 -1
     (nil))
(jump_insn 16 15 17 5 (set (pc)
        (label_ref 25)) "kbd.c":437:7 -1
     (nil)
 -> 25)
;;  succ:       7 (DFS_BACK)

(barrier 17 16 18)
;; basic block 6, loop depth 1, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 18 17 19 6 96 (nil) [1 uses])
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg/f:SI 113 [ s.30_1 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":439:7 -1
     (nil))
(insn 21 20 22 6 (set (reg:SI 121)
        (plus:SI (reg/f:SI 113 [ s.30_1 ])
            (const_int 1 [0x1]))) "kbd.c":439:7 -1
     (nil))
(insn 22 21 23 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 121)) "kbd.c":439:7 -1
     (nil))
(insn 23 22 24 6 (set (reg:QI 122)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "kbd.c":439:10 -1
     (nil))
(insn 24 23 25 6 (set (mem:QI (reg/f:SI 113 [ s.30_1 ]) [0 *s.30_1+0 S1 A8])
        (reg:QI 122)) "kbd.c":439:10 -1
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              5 (DFS_BACK)
;;              6 (FALLTHRU,DFS_BACK)
(code_label 25 24 26 7 95 (nil) [2 uses])
(note 26 25 27 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 27 26 28 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x3]  <function_decl 0x7fcdc0b31600 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":434:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 28 27 29 7 (set (reg:SI 114 [ _2 ])
        (reg:SI 0 r0)) "kbd.c":434:15 -1
     (nil))
(insn 29 28 30 7 (set (reg:QI 123)
        (subreg:QI (reg:SI 114 [ _2 ]) 0)) "kbd.c":434:13 -1
     (nil))
(insn 30 29 32 7 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 123)) "kbd.c":434:13 -1
     (nil))
(insn 32 30 33 7 (set (reg:SI 124)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "kbd.c":434:24 -1
     (nil))
(insn 33 32 34 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124)
            (const_int 13 [0xd]))) "kbd.c":434:24 -1
     (nil))
(jump_insn 34 33 35 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "kbd.c":434:24 -1
     (nil)
 -> 31)
;;  succ:       4
;;              8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 8 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":441:6 -1
     (nil))
(insn 37 36 38 8 (set (reg:SI 126)
        (const_int 0 [0])) "kbd.c":441:6 -1
     (nil))
(insn 38 37 39 8 (set (reg:QI 127)
        (subreg:QI (reg:SI 126) 0)) "kbd.c":441:6 -1
     (nil))
(insn 39 38 40 8 (set (mem:QI (reg/f:SI 125) [0 *s_4+0 S1 A8])
        (reg:QI 127)) "kbd.c":441:6 -1
     (nil))
(insn 40 39 41 8 (set (reg:SI 0 r0)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":442:10 -1
     (nil))
(call_insn/i 41 40 42 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7fcdc0d96100 strlen>) [0 __builtin_strlen S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":442:10 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 42 41 43 8 (set (reg:SI 115 [ _3 ])
        (reg:SI 0 r0)) "kbd.c":442:10 -1
     (nil))
(insn 43 42 46 8 (set (reg:SI 116 [ _11 ])
        (reg:SI 115 [ _3 ])) "kbd.c":442:10 -1
     (nil))
(insn 46 43 50 8 (set (reg:SI 117 [ <retval> ])
        (reg:SI 116 [ _11 ])) "kbd.c":442:10 -1
     (nil))
(insn 50 46 51 8 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "kbd.c":443:1 -1
     (nil))
(insn 51 50 0 8 (use (reg/i:SI 0 r0)) "kbd.c":443:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function mgetc (mgetc, funcdef_no=10, decl_uid=4568, cgraph_uid=11, symbol_order=25)

int mgetc ()
{
  volatile struct KBD * kp;
  char c;
  int D.4737;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _21;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_11 = &kbd;
  unlock ();
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       2
;;                3
  _1 ={v} kp_11->data;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 4, loop depth 0
;;    pred:       3
  lock ();
  _2 ={v} kp_11->tail;
  _3 = _2;
  _4 = _3 + 1;
  kp_11->tail ={v} _4;
  c_16 ={v} kp_11->buf[_3];
  _5 ={v} kp_11->tail;
  _6 = _5 % 128;
  kp_11->tail ={v} _6;
  _7 ={v} kp_11->data;
  _8 = _7 + -1;
  kp_11->data ={v} _8;
  _9 ={v} kp_11->room;
  _10 = _9 + 1;
  kp_11->room ={v} _10;
  unlock ();
  _21 = (int) c_16;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       4
<L3>:
  return _21;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (kp_11 - 11 )
Partition 16 (c_16 - 16 )
Partition 21 (_21 - 21 )
Partition 22 (_22(D) - 22 )


Coalescible Partition map 

Partition 0, base 0 (_2 - 2 3 )
Partition 2, base 1 (_22(D) - 22 )


Partition map 

Partition 0 (_2 - 2 )
Partition 1 (_3 - 3 )
Partition 2 (_22(D) - 22 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(10000, 0) _2 <-> _3

Partition map 

Partition 0 (_2 - 2 )
Partition 1 (_3 - 3 )
Partition 2 (_22(D) - 22 )

Coalesce list: (2)_2 & (3)_3 [map: 0, 1] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 3 )
Partition 2 (_4 - 4 )
Partition 3 (_5 - 5 )
Partition 4 (_6 - 6 )
Partition 5 (_7 - 7 )
Partition 6 (_8 - 8 )
Partition 7 (_9 - 9 )
Partition 8 (_10 - 10 )
Partition 9 (kp_11 - 11 )
Partition 10 (c_16 - 16 )
Partition 11 (_21 - 21 )
Partition 12 (_22(D) - 22 )

int mgetc ()
{
  volatile struct KBD * kp;
  char c;
  int D.4737;
  int _1;
  int _2;
  int _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _21;
  int _22(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_11 = &kbd;
  unlock ();
;;    succ:       3

;;   basic block 3, loop depth 1
;;    pred:       2
;;                3
  _1 ={v} kp_11->data;
  if (_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 4, loop depth 0
;;    pred:       3
  lock ();
  _2 ={v} kp_11->tail;
  _3 = _2;
  _4 = _3 + 1;
  kp_11->tail ={v} _4;
  c_16 ={v} kp_11->buf[_3];
  _5 ={v} kp_11->tail;
  _6 = _5 % 128;
  kp_11->tail ={v} _6;
  _7 ={v} kp_11->data;
  _8 = _7 + -1;
  kp_11->data ={v} _8;
  _9 ={v} kp_11->room;
  _10 = _9 + 1;
  kp_11->room ={v} _10;
  unlock ();
  _21 = (int) c_16;
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       4
<L3>:
  return _21;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	kp_11
Partition 1: size 1 align 1
	c_16

;; Generating RTL for gimple basic block 2

;; kp_11 = &kbd;

(insn 5 4 6 (set (reg/f:SI 124)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":464:8 -1
     (nil))

(insn 6 5 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 124)) "kbd.c":464:8 -1
     (nil))

;; unlock ();

(call_insn 7 6 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":466:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 3

;; _1 ={v} kp_11->data;

(insn 9 8 10 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":467:11 -1
     (nil))

(insn 10 9 0 (set (reg:SI 113 [ _1 ])
        (mem/v:SI (plus:SI (reg/f:SI 125)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":467:11 -1
     (nil))

;; if (_1 == 0)

(insn 12 10 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 0 [0]))) "kbd.c":467:18 -1
     (nil))

(jump_insn 13 12 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "kbd.c":467:18 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; lock ();

(call_insn 15 14 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":469:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; _2 ={v} kp_11->tail;

(insn 16 15 17 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:17 -1
     (nil))

(insn 17 16 0 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 126)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":470:17 -1
     (nil))

;; _3 = _2;

(nil)

;; _4 = _3 + 1;

(insn 18 17 0 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":470:23 -1
     (nil))

;; kp_11->tail ={v} _4;

(insn 19 18 20 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:23 -1
     (nil))

(insn 20 19 0 (set (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":470:23 -1
     (nil))

;; c_16 ={v} kp_11->buf[_3];

(insn 21 20 22 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:5 -1
     (nil))

(insn 22 21 23 (set (reg/f:SI 129)
        (plus:SI (reg/f:SI 128)
            (reg:SI 114 [ _2 ]))) "kbd.c":470:5 -1
     (nil))

(insn 23 22 24 (set (reg:QI 130)
        (mem/v:QI (plus:SI (reg/f:SI 129)
                (const_int 4 [0x4])) [0 kp_11->buf[_3]+0 S1 A8])) "kbd.c":470:5 -1
     (nil))

(insn 24 23 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 130)) "kbd.c":470:5 -1
     (nil))

;; _5 ={v} kp_11->tail;

(insn 25 24 26 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 -1
     (nil))

(insn 26 25 0 (set (reg:SI 116 [ _5 ])
        (mem/v:SI (plus:SI (reg/f:SI 131)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":471:12 -1
     (nil))

;; _6 = _5 % 128;

(insn 27 26 28 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 116 [ _5 ]))
                    (const_int 0 [0])))
            (set (reg:SI 132)
                (minus:SI (const_int 0 [0])
                    (reg:SI 116 [ _5 ])))
        ]) "kbd.c":471:12 -1
     (nil))

(insn 28 27 29 (set (reg:SI 117 [ _6 ])
        (and:SI (reg:SI 116 [ _5 ])
            (const_int 127 [0x7f]))) "kbd.c":471:12 -1
     (nil))

(insn 29 28 30 (set (reg:SI 133)
        (and:SI (reg:SI 132)
            (const_int 127 [0x7f]))) "kbd.c":471:12 -1
     (nil))

(insn 30 29 0 (set (reg:SI 117 [ _6 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 133))
            (reg:SI 117 [ _6 ]))) "kbd.c":471:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 116 [ _5 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_11->tail ={v} _6;

(insn 31 30 32 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 -1
     (nil))

(insn 32 31 0 (set (mem/v:SI (plus:SI (reg/f:SI 134)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 117 [ _6 ])) "kbd.c":471:12 -1
     (nil))

;; _7 ={v} kp_11->data;

(insn 33 32 34 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:5 -1
     (nil))

(insn 34 33 0 (set (reg:SI 118 [ _7 ])
        (mem/v:SI (plus:SI (reg/f:SI 135)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":472:5 -1
     (nil))

;; _8 = _7 + -1;

(insn 35 34 0 (set (reg:SI 119 [ _8 ])
        (plus:SI (reg:SI 118 [ _7 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":472:11 -1
     (nil))

;; kp_11->data ={v} _8;

(insn 36 35 37 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:11 -1
     (nil))

(insn 37 36 0 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])
        (reg:SI 119 [ _8 ])) "kbd.c":472:11 -1
     (nil))

;; _9 ={v} kp_11->room;

(insn 38 37 39 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:17 -1
     (nil))

(insn 39 38 0 (set (reg:SI 120 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])) "kbd.c":472:17 -1
     (nil))

;; _10 = _9 + 1;

(insn 40 39 0 (set (reg:SI 121 [ _10 ])
        (plus:SI (reg:SI 120 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":472:23 -1
     (nil))

;; kp_11->room ={v} _10;

(insn 41 40 42 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:23 -1
     (nil))

(insn 42 41 0 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])
        (reg:SI 121 [ _10 ])) "kbd.c":472:23 -1
     (nil))

;; unlock ();

(call_insn 43 42 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":473:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; _21 = (int) c_16;

(insn 44 43 0 (set (reg:SI 122 [ _21 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":474:10 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; <L3>:

(code_label 45 44 46 101 (nil) [0 uses])

(note 46 45 0 NOTE_INSN_BASIC_BLOCK)

;; return _21;

(insn 47 46 48 (set (reg:SI 123 [ <retval> ])
        (reg:SI 122 [ _21 ])) "kbd.c":474:10 -1
     (nil))

(jump_insn 48 47 49 (set (pc)
        (label_ref 0)) "kbd.c":474:10 -1
     (nil))

(barrier 49 48 0)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.
Removing jump 48.
Merging block 7 into block 5...
Merged blocks 5 and 7.
Merged 5 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":464:8 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 124)) "kbd.c":464:8 -1
     (nil))
(call_insn 7 6 11 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":466:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
;;              4 (DFS_BACK)
(code_label 11 7 8 4 100 (nil) [1 uses])
(note 8 11 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg/f:SI 125)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":467:11 -1
     (nil))
(insn 10 9 12 4 (set (reg:SI 113 [ _1 ])
        (mem/v:SI (plus:SI (reg/f:SI 125)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":467:11 -1
     (nil))
(insn 12 10 13 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 0 [0]))) "kbd.c":467:18 -1
     (nil))
(jump_insn 13 12 14 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 11)
            (pc))) "kbd.c":467:18 -1
     (nil)
 -> 11)
;;  succ:       4 (DFS_BACK)
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 15 14 16 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":469:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 16 15 17 5 (set (reg/f:SI 126)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:17 -1
     (nil))
(insn 17 16 18 5 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 126)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":470:17 -1
     (nil))
(insn 18 17 19 5 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":470:23 -1
     (nil))
(insn 19 18 20 5 (set (reg/f:SI 127)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:23 -1
     (nil))
(insn 20 19 21 5 (set (mem/v:SI (plus:SI (reg/f:SI 127)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":470:23 -1
     (nil))
(insn 21 20 22 5 (set (reg/f:SI 128)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":470:5 -1
     (nil))
(insn 22 21 23 5 (set (reg/f:SI 129)
        (plus:SI (reg/f:SI 128)
            (reg:SI 114 [ _2 ]))) "kbd.c":470:5 -1
     (nil))
(insn 23 22 24 5 (set (reg:QI 130)
        (mem/v:QI (plus:SI (reg/f:SI 129)
                (const_int 4 [0x4])) [0 kp_11->buf[_3]+0 S1 A8])) "kbd.c":470:5 -1
     (nil))
(insn 24 23 25 5 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 130)) "kbd.c":470:5 -1
     (nil))
(insn 25 24 26 5 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 -1
     (nil))
(insn 26 25 27 5 (set (reg:SI 116 [ _5 ])
        (mem/v:SI (plus:SI (reg/f:SI 131)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])) "kbd.c":471:12 -1
     (nil))
(insn 27 26 28 5 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 116 [ _5 ]))
                    (const_int 0 [0])))
            (set (reg:SI 132)
                (minus:SI (const_int 0 [0])
                    (reg:SI 116 [ _5 ])))
        ]) "kbd.c":471:12 -1
     (nil))
(insn 28 27 29 5 (set (reg:SI 117 [ _6 ])
        (and:SI (reg:SI 116 [ _5 ])
            (const_int 127 [0x7f]))) "kbd.c":471:12 -1
     (nil))
(insn 29 28 30 5 (set (reg:SI 133)
        (and:SI (reg:SI 132)
            (const_int 127 [0x7f]))) "kbd.c":471:12 -1
     (nil))
(insn 30 29 31 5 (set (reg:SI 117 [ _6 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 133))
            (reg:SI 117 [ _6 ]))) "kbd.c":471:12 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 116 [ _5 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 31 30 32 5 (set (reg/f:SI 134)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":471:12 -1
     (nil))
(insn 32 31 33 5 (set (mem/v:SI (plus:SI (reg/f:SI 134)
                (const_int 136 [0x88])) [3 kp_11->tail+0 S4 A32])
        (reg:SI 117 [ _6 ])) "kbd.c":471:12 -1
     (nil))
(insn 33 32 34 5 (set (reg/f:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:5 -1
     (nil))
(insn 34 33 35 5 (set (reg:SI 118 [ _7 ])
        (mem/v:SI (plus:SI (reg/f:SI 135)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])) "kbd.c":472:5 -1
     (nil))
(insn 35 34 36 5 (set (reg:SI 119 [ _8 ])
        (plus:SI (reg:SI 118 [ _7 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":472:11 -1
     (nil))
(insn 36 35 37 5 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:11 -1
     (nil))
(insn 37 36 38 5 (set (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 140 [0x8c])) [3 kp_11->data+0 S4 A32])
        (reg:SI 119 [ _8 ])) "kbd.c":472:11 -1
     (nil))
(insn 38 37 39 5 (set (reg/f:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:17 -1
     (nil))
(insn 39 38 40 5 (set (reg:SI 120 [ _9 ])
        (mem/v:SI (plus:SI (reg/f:SI 137)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])) "kbd.c":472:17 -1
     (nil))
(insn 40 39 41 5 (set (reg:SI 121 [ _10 ])
        (plus:SI (reg:SI 120 [ _9 ])
            (const_int 1 [0x1]))) "kbd.c":472:23 -1
     (nil))
(insn 41 40 42 5 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":472:23 -1
     (nil))
(insn 42 41 43 5 (set (mem/v:SI (plus:SI (reg/f:SI 138)
                (const_int 144 [0x90])) [3 kp_11->room+0 S4 A32])
        (reg:SI 121 [ _10 ])) "kbd.c":472:23 -1
     (nil))
(call_insn 43 42 44 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":473:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 44 43 47 5 (set (reg:SI 122 [ _21 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":474:10 -1
     (nil))
(insn 47 44 51 5 (set (reg:SI 123 [ <retval> ])
        (reg:SI 122 [ _21 ])) "kbd.c":474:10 -1
     (nil))
(insn 51 47 52 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "kbd.c":475:1 -1
     (nil))
(insn 52 51 0 5 (use (reg/i:SI 0 r0)) "kbd.c":475:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kgetline (kgetline, funcdef_no=11, decl_uid=4578, cgraph_uid=12, symbol_order=26)

__attribute__((access ("^0[ ]", )))
int kgetline (char * s)
{
  volatile struct KBD * kp;
  char c;
  int kline.31_1;
  int _2;
  int _3;
  int _4;
  char * s.32_5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  char * _12;
  int kline.33_13;
  int _14;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_18 = &kbd;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  ksleep (&kline);
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  kline.31_1 ={v} kline;
  if (kline.31_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  lock ();
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       5
;;                8
  # s_15 = PHI <s_21(D)(5), s_24(8)>
  _2 ={v} kp_18->tail;
  _3 = _2;
  _4 = _3 + 1;
  kp_18->tail ={v} _4;
  c_23 ={v} kp_18->buf[_3];
  s.32_5 = s_15;
  s_24 = s.32_5 + 1;
  *s.32_5 = c_23;
  _6 ={v} kp_18->tail;
  _7 = _6 % 128;
  kp_18->tail ={v} _7;
  _8 ={v} kp_18->data;
  _9 = _8 + -1;
  kp_18->data ={v} _9;
  _10 ={v} kp_18->room;
  _11 = _10 + 1;
  kp_18->room ={v} _11;
  if (c_23 == 13)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 8, loop depth 1
;;    pred:       6
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 9, loop depth 0
;;    pred:       7
  _12 = s_24 + 4294967295;
  *_12 = 0;
  kline.33_13 ={v} kline;
  _14 = kline.33_13 + -1;
  kline ={v} _14;
  unlock ();
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (kline.31_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (s.32_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (kline.33_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (s_15 - 15 )
Partition 18 (kp_18 - 18 )
Partition 21 (s_21(D) - 21 )
Partition 23 (c_23 - 23 )
Partition 24 (s_24 - 24 )
Partition 33 (_33(D) - 33 )


Coalescible Partition map 

Partition 0, base 0 (_2 - 2 3 )
Partition 2, base 1 (s_15 - 15 21 24 )
Partition 5, base 2 (_33(D) - 33 )


Partition map 

Partition 0 (_2 - 2 )
Partition 1 (_3 - 3 )
Partition 2 (s_15 - 15 )
Partition 3 (s_21(D) - 21 )
Partition 4 (s_24 - 24 )
Partition 5 (_33(D) - 33 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_15 <-> s_21(D)
(2147483647, 0) s_15 <-> s_24
(10000, 0) _2 <-> _3

Partition map 

Partition 0 (_2 - 2 )
Partition 1 (_3 - 3 )
Partition 2 (s_15 - 15 )
Partition 3 (s_21(D) - 21 )
Partition 4 (s_24 - 24 )
Partition 5 (_33(D) - 33 )

Coalesce list: (15)s_15 & (21)s_21(D) [map: 2, 3] : Success -> 2
Coalesce list: (15)s_15 & (24)s_24 [map: 2, 4] : Success -> 2
Coalesce list: (2)_2 & (3)_3 [map: 0, 1] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (kline.31_1 - 1 )
Partition 1 (_2 - 2 3 )
Partition 2 (_4 - 4 )
Partition 3 (s.32_5 - 5 )
Partition 4 (_6 - 6 )
Partition 5 (_7 - 7 )
Partition 6 (_8 - 8 )
Partition 7 (_9 - 9 )
Partition 8 (_10 - 10 )
Partition 9 (_11 - 11 )
Partition 10 (_12 - 12 )
Partition 11 (kline.33_13 - 13 )
Partition 12 (_14 - 14 )
Partition 13 (s_15 - 15 21 24 )
Partition 14 (kp_18 - 18 )
Partition 15 (c_23 - 23 )
Partition 16 (_33(D) - 33 )

__attribute__((access ("^0[ ]", )))
int kgetline (char * s)
{
  volatile struct KBD * kp;
  char c;
  int kline.31_1;
  int _2;
  int _3;
  int _4;
  char * s.32_5;
  int _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  char * _12;
  int kline.33_13;
  int _14;
  int _33(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kp_18 = &kbd;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  ksleep (&kline);
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  kline.31_1 ={v} kline;
  if (kline.31_1 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  lock ();
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       5
;;                8
  # s_15 = PHI <s_21(D)(5), s_24(8)>
  _2 ={v} kp_18->tail;
  _3 = _2;
  _4 = _3 + 1;
  kp_18->tail ={v} _4;
  c_23 ={v} kp_18->buf[_3];
  s.32_5 = s_15;
  s_24 = s.32_5 + 1;
  *s.32_5 = c_23;
  _6 ={v} kp_18->tail;
  _7 = _6 % 128;
  kp_18->tail ={v} _7;
  _8 ={v} kp_18->data;
  _9 = _8 + -1;
  kp_18->data ={v} _9;
  _10 ={v} kp_18->room;
  _11 = _10 + 1;
  kp_18->room ={v} _11;
  if (c_23 == 13)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 8, loop depth 1
;;    pred:       6
  goto <bb 6>; [INV]
;;    succ:       6

;;   basic block 9, loop depth 0
;;    pred:       7
  _12 = s_24 + 4294967295;
  *_12 = 0;
  kline.33_13 ={v} kline;
  _14 = kline.33_13 + -1;
  kline ={v} _14;
  unlock ();
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	kp_18
Partition 1: size 1 align 1
	c_23

;; Generating RTL for gimple basic block 2

;; kp_18 = &kbd;

(insn 6 5 7 (set (reg/f:SI 127)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":480:8 -1
     (nil))

(insn 7 6 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 127)) "kbd.c":480:8 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; ksleep (&kline);

(insn 11 10 12 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":483:5 -1
     (nil))

(call_insn 12 11 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":483:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 13 12 14 105 (nil) [0 uses])

(note 14 13 0 NOTE_INSN_BASIC_BLOCK)

;; kline.31_1 ={v} kline;

(insn 15 14 16 (set (reg/f:SI 128)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":482:15 -1
     (nil))

(insn 16 15 0 (set (reg:SI 113 [ kline.31_1 ])
        (mem/v/c:SI (reg/f:SI 128) [3 kline+0 S4 A32])) "kbd.c":482:15 -1
     (nil))

;; if (kline.31_1 == 0)

(insn 18 16 19 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ kline.31_1 ])
            (const_int 0 [0]))) "kbd.c":482:15 -1
     (nil))

(jump_insn 19 18 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kbd.c":482:15 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; lock ();

(call_insn 21 20 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":486:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 6

;; _2 ={v} kp_18->tail;

(insn 23 22 24 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:21 -1
     (nil))

(insn 24 23 0 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":488:21 -1
     (nil))

;; _3 = _2;

(nil)

;; _4 = _3 + 1;

(insn 25 24 0 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":488:27 -1
     (nil))

;; kp_18->tail ={v} _4;

(insn 26 25 27 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:27 -1
     (nil))

(insn 27 26 0 (set (mem/v:SI (plus:SI (reg/f:SI 130)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":488:27 -1
     (nil))

;; c_23 ={v} kp_18->buf[_3];

(insn 28 27 29 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:9 -1
     (nil))

(insn 29 28 30 (set (reg/f:SI 132)
        (plus:SI (reg/f:SI 131)
            (reg:SI 114 [ _2 ]))) "kbd.c":488:9 -1
     (nil))

(insn 30 29 31 (set (reg:QI 133)
        (mem/v:QI (plus:SI (reg/f:SI 132)
                (const_int 4 [0x4])) [0 kp_18->buf[_3]+0 S1 A8])) "kbd.c":488:9 -1
     (nil))

(insn 31 30 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 133)) "kbd.c":488:9 -1
     (nil))

;; s.32_5 = s_15;

(insn 32 31 0 (set (reg/f:SI 116 [ s.32_5 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":489:9 -1
     (nil))

;; s_24 = s.32_5 + 1;

(insn 33 32 34 (set (reg:SI 134)
        (plus:SI (reg/f:SI 116 [ s.32_5 ])
            (const_int 1 [0x1]))) "kbd.c":489:9 -1
     (nil))

(insn 34 33 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 134)) "kbd.c":489:9 -1
     (nil))

;; *s.32_5 = c_23;

(insn 35 34 36 (set (reg:QI 135)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "kbd.c":489:12 -1
     (nil))

(insn 36 35 0 (set (mem:QI (reg/f:SI 116 [ s.32_5 ]) [0 *s.32_5+0 S1 A8])
        (reg:QI 135)) "kbd.c":489:12 -1
     (nil))

;; _6 ={v} kp_18->tail;

(insn 37 36 38 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 -1
     (nil))

(insn 38 37 0 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":490:16 -1
     (nil))

;; _7 = _6 % 128;

(insn 39 38 40 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 137)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":490:16 -1
     (nil))

(insn 40 39 41 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":490:16 -1
     (nil))

(insn 41 40 42 (set (reg:SI 138)
        (and:SI (reg:SI 137)
            (const_int 127 [0x7f]))) "kbd.c":490:16 -1
     (nil))

(insn 42 41 0 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 138))
            (reg:SI 118 [ _7 ]))) "kbd.c":490:16 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))

;; kp_18->tail ={v} _7;

(insn 43 42 44 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 -1
     (nil))

(insn 44 43 0 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":490:16 -1
     (nil))

;; _8 ={v} kp_18->data;

(insn 45 44 46 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:9 -1
     (nil))

(insn 46 45 0 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])) "kbd.c":491:9 -1
     (nil))

;; _9 = _8 + -1;

(insn 47 46 0 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":491:15 -1
     (nil))

;; kp_18->data ={v} _9;

(insn 48 47 49 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:15 -1
     (nil))

(insn 49 48 0 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":491:15 -1
     (nil))

;; _10 ={v} kp_18->room;

(insn 50 49 51 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:21 -1
     (nil))

(insn 51 50 0 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 142)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])) "kbd.c":491:21 -1
     (nil))

;; _11 = _10 + 1;

(insn 52 51 0 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":491:27 -1
     (nil))

;; kp_18->room ={v} _11;

(insn 53 52 54 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:27 -1
     (nil))

(insn 54 53 0 (set (mem/v:SI (plus:SI (reg/f:SI 143)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":491:27 -1
     (nil))

;; if (c_23 == 13)

(insn 55 54 56 (set (reg:SI 144)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":492:10 -1
     (nil))

(insn 56 55 57 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144)
            (const_int 13 [0xd]))) "kbd.c":492:10 -1
     (nil))

(jump_insn 57 56 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "kbd.c":492:10 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; Generating RTL for gimple basic block 8

;; 

(code_label 61 60 62 107 (nil) [0 uses])

(note 62 61 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 9

;; 

(code_label 66 65 67 108 (nil) [0 uses])

(note 67 66 0 NOTE_INSN_BASIC_BLOCK)

;; _12 = s_24 + 4294967295;

(insn 68 67 69 (set (reg:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":495:6 -1
     (nil))

(insn 69 68 0 (set (reg/f:SI 123 [ _12 ])
        (plus:SI (reg:SI 145)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":495:6 -1
     (nil))

;; *_12 = 0;

(insn 70 69 71 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":495:10 -1
     (nil))

(insn 71 70 72 (set (reg:QI 147)
        (subreg:QI (reg:SI 146) 0)) "kbd.c":495:10 -1
     (nil))

(insn 72 71 0 (set (mem:QI (reg/f:SI 123 [ _12 ]) [0 *_12+0 S1 A8])
        (reg:QI 147)) "kbd.c":495:10 -1
     (nil))

;; kline.33_13 ={v} kline;

(insn 73 72 74 (set (reg/f:SI 148)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 -1
     (nil))

(insn 74 73 0 (set (reg:SI 124 [ kline.33_13 ])
        (mem/v/c:SI (reg/f:SI 148) [3 kline+0 S4 A32])) "kbd.c":496:8 -1
     (nil))

;; _14 = kline.33_13 + -1;

(insn 75 74 0 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ kline.33_13 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":496:8 -1
     (nil))

;; kline ={v} _14;

(insn 76 75 77 (set (reg/f:SI 149)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 -1
     (nil))

(insn 77 76 0 (set (mem/v/c:SI (reg/f:SI 149) [3 kline+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":496:8 -1
     (nil))

;; unlock ();

(call_insn 78 77 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":497:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 7->8 to 10 failed.
Merging block 11 into block 10...
Merged blocks 10 and 11.
Merged 10 and 11 without moving.


try_optimize_cfg iteration 2

Forwarding edge 7->8 to 10 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "kbd.c":478:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("kbd") [flags 0x2]  <var_decl 0x7fcdc0b1a5a0 kbd>)) "kbd.c":480:8 -1
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])
        (reg/f:SI 127)) "kbd.c":480:8 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (label_ref 13)) "kbd.c":482:9 -1
     (nil)
 -> 13)
;;  succ:       5

(barrier 9 8 17)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 17 9 10 4 106 (nil) [1 uses])
(note 10 17 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg:SI 0 r0)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":483:5 -1
     (nil))
(call_insn 12 11 13 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ksleep") [flags 0x41]  <function_decl 0x7fcdc0b31a00 ksleep>) [0 ksleep S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":483:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 13 12 14 5 105 (nil) [1 uses])
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 5 (set (reg/f:SI 128)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":482:15 -1
     (nil))
(insn 16 15 18 5 (set (reg:SI 113 [ kline.31_1 ])
        (mem/v/c:SI (reg/f:SI 128) [3 kline+0 S4 A32])) "kbd.c":482:15 -1
     (nil))
(insn 18 16 19 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ kline.31_1 ])
            (const_int 0 [0]))) "kbd.c":482:15 -1
     (nil))
(jump_insn 19 18 20 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) "kbd.c":482:15 -1
     (nil)
 -> 17)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 20 19 21 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 21 20 63 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("lock") [flags 0x41]  <function_decl 0x7fcdc0b31800 lock>) [0 lock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":486:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
;;              9 (DFS_BACK)
(code_label 63 21 22 7 109 (nil) [1 uses])
(note 22 63 23 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 7 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:21 -1
     (nil))
(insn 24 23 25 7 (set (reg:SI 114 [ _2 ])
        (mem/v:SI (plus:SI (reg/f:SI 129)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":488:21 -1
     (nil))
(insn 25 24 26 7 (set (reg:SI 115 [ _4 ])
        (plus:SI (reg:SI 114 [ _2 ])
            (const_int 1 [0x1]))) "kbd.c":488:27 -1
     (nil))
(insn 26 25 27 7 (set (reg/f:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:27 -1
     (nil))
(insn 27 26 28 7 (set (mem/v:SI (plus:SI (reg/f:SI 130)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 115 [ _4 ])) "kbd.c":488:27 -1
     (nil))
(insn 28 27 29 7 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":488:9 -1
     (nil))
(insn 29 28 30 7 (set (reg/f:SI 132)
        (plus:SI (reg/f:SI 131)
            (reg:SI 114 [ _2 ]))) "kbd.c":488:9 -1
     (nil))
(insn 30 29 31 7 (set (reg:QI 133)
        (mem/v:QI (plus:SI (reg/f:SI 132)
                (const_int 4 [0x4])) [0 kp_18->buf[_3]+0 S1 A8])) "kbd.c":488:9 -1
     (nil))
(insn 31 30 32 7 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])
        (reg:QI 133)) "kbd.c":488:9 -1
     (nil))
(insn 32 31 33 7 (set (reg/f:SI 116 [ s.32_5 ])
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":489:9 -1
     (nil))
(insn 33 32 34 7 (set (reg:SI 134)
        (plus:SI (reg/f:SI 116 [ s.32_5 ])
            (const_int 1 [0x1]))) "kbd.c":489:9 -1
     (nil))
(insn 34 33 35 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])
        (reg:SI 134)) "kbd.c":489:9 -1
     (nil))
(insn 35 34 36 7 (set (reg:QI 135)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8])) "kbd.c":489:12 -1
     (nil))
(insn 36 35 37 7 (set (mem:QI (reg/f:SI 116 [ s.32_5 ]) [0 *s.32_5+0 S1 A8])
        (reg:QI 135)) "kbd.c":489:12 -1
     (nil))
(insn 37 36 38 7 (set (reg/f:SI 136)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 -1
     (nil))
(insn 38 37 39 7 (set (reg:SI 117 [ _6 ])
        (mem/v:SI (plus:SI (reg/f:SI 136)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])) "kbd.c":490:16 -1
     (nil))
(insn 39 38 40 7 (parallel [
            (set (reg:CC_NZ 100 cc)
                (compare:CC_NZ (minus:SI (const_int 0 [0])
                        (reg:SI 117 [ _6 ]))
                    (const_int 0 [0])))
            (set (reg:SI 137)
                (minus:SI (const_int 0 [0])
                    (reg:SI 117 [ _6 ])))
        ]) "kbd.c":490:16 -1
     (nil))
(insn 40 39 41 7 (set (reg:SI 118 [ _7 ])
        (and:SI (reg:SI 117 [ _6 ])
            (const_int 127 [0x7f]))) "kbd.c":490:16 -1
     (nil))
(insn 41 40 42 7 (set (reg:SI 138)
        (and:SI (reg:SI 137)
            (const_int 127 [0x7f]))) "kbd.c":490:16 -1
     (nil))
(insn 42 41 43 7 (set (reg:SI 118 [ _7 ])
        (if_then_else:SI (ge:SI (reg:CC_NZ 100 cc)
                (const_int 0 [0]))
            (neg:SI (reg:SI 138))
            (reg:SI 118 [ _7 ]))) "kbd.c":490:16 -1
     (expr_list:REG_EQUAL (mod:SI (reg:SI 117 [ _6 ])
            (const_int 128 [0x80]))
        (nil)))
(insn 43 42 44 7 (set (reg/f:SI 139)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":490:16 -1
     (nil))
(insn 44 43 45 7 (set (mem/v:SI (plus:SI (reg/f:SI 139)
                (const_int 136 [0x88])) [3 kp_18->tail+0 S4 A32])
        (reg:SI 118 [ _7 ])) "kbd.c":490:16 -1
     (nil))
(insn 45 44 46 7 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:9 -1
     (nil))
(insn 46 45 47 7 (set (reg:SI 119 [ _8 ])
        (mem/v:SI (plus:SI (reg/f:SI 140)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])) "kbd.c":491:9 -1
     (nil))
(insn 47 46 48 7 (set (reg:SI 120 [ _9 ])
        (plus:SI (reg:SI 119 [ _8 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":491:15 -1
     (nil))
(insn 48 47 49 7 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:15 -1
     (nil))
(insn 49 48 50 7 (set (mem/v:SI (plus:SI (reg/f:SI 141)
                (const_int 140 [0x8c])) [3 kp_18->data+0 S4 A32])
        (reg:SI 120 [ _9 ])) "kbd.c":491:15 -1
     (nil))
(insn 50 49 51 7 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:21 -1
     (nil))
(insn 51 50 52 7 (set (reg:SI 121 [ _10 ])
        (mem/v:SI (plus:SI (reg/f:SI 142)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])) "kbd.c":491:21 -1
     (nil))
(insn 52 51 53 7 (set (reg:SI 122 [ _11 ])
        (plus:SI (reg:SI 121 [ _10 ])
            (const_int 1 [0x1]))) "kbd.c":491:27 -1
     (nil))
(insn 53 52 54 7 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [4 kp+0 S4 A32])) "kbd.c":491:27 -1
     (nil))
(insn 54 53 55 7 (set (mem/v:SI (plus:SI (reg/f:SI 143)
                (const_int 144 [0x90])) [3 kp_18->room+0 S4 A32])
        (reg:SI 122 [ _11 ])) "kbd.c":491:27 -1
     (nil))
(insn 55 54 56 7 (set (reg:SI 144)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -5 [0xfffffffffffffffb])) [0 c+0 S1 A8]))) "kbd.c":492:10 -1
     (nil))
(insn 56 55 57 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144)
            (const_int 13 [0xd]))) "kbd.c":492:10 -1
     (nil))
(jump_insn 57 56 58 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) "kbd.c":492:10 -1
     (nil)
 -> 61)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 59 58 60 8 (set (pc)
        (label_ref 66)) "kbd.c":493:2 -1
     (nil)
 -> 66)
;;  succ:       10

(barrier 60 59 61)
;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 61 60 62 9 107 (nil) [1 uses])
(note 62 61 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(jump_insn 64 62 65 9 (set (pc)
        (label_ref 63)) "kbd.c":488:9 -1
     (nil)
 -> 63)
;;  succ:       7 (DFS_BACK)

(barrier 65 64 66)
;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8
(code_label 66 65 67 10 108 (nil) [1 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg:SI 145)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [2 s+0 S4 A32])) "kbd.c":495:6 -1
     (nil))
(insn 69 68 70 10 (set (reg/f:SI 123 [ _12 ])
        (plus:SI (reg:SI 145)
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":495:6 -1
     (nil))
(insn 70 69 71 10 (set (reg:SI 146)
        (const_int 0 [0])) "kbd.c":495:10 -1
     (nil))
(insn 71 70 72 10 (set (reg:QI 147)
        (subreg:QI (reg:SI 146) 0)) "kbd.c":495:10 -1
     (nil))
(insn 72 71 73 10 (set (mem:QI (reg/f:SI 123 [ _12 ]) [0 *_12+0 S1 A8])
        (reg:QI 147)) "kbd.c":495:10 -1
     (nil))
(insn 73 72 74 10 (set (reg/f:SI 148)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 -1
     (nil))
(insn 74 73 75 10 (set (reg:SI 124 [ kline.33_13 ])
        (mem/v/c:SI (reg/f:SI 148) [3 kline+0 S4 A32])) "kbd.c":496:8 -1
     (nil))
(insn 75 74 76 10 (set (reg:SI 125 [ _14 ])
        (plus:SI (reg:SI 124 [ kline.33_13 ])
            (const_int -1 [0xffffffffffffffff]))) "kbd.c":496:8 -1
     (nil))
(insn 76 75 77 10 (set (reg/f:SI 149)
        (symbol_ref:SI ("kline") [flags 0x2]  <var_decl 0x7fcdc0b1a7e0 kline>)) "kbd.c":496:8 -1
     (nil))
(insn 77 76 78 10 (set (mem/v/c:SI (reg/f:SI 149) [3 kline+0 S4 A32])
        (reg:SI 125 [ _14 ])) "kbd.c":496:8 -1
     (nil))
(call_insn 78 77 81 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unlock") [flags 0x41]  <function_decl 0x7fcdc0b31900 unlock>) [0 unlock S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "kbd.c":497:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 81 78 82 10 (clobber (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (nil))
(insn 82 81 85 10 (clobber (reg:SI 126 [ <retval> ])) "kbd.c":498:1 -1
     (nil))
(insn 85 82 80 10 (const_int 0 [0]) "kbd.c":498:1 -1
     (nil))
(insn 80 85 83 10 (set (reg/i:SI 0 r0)
        (reg:SI 126 [ <retval> ])) "kbd.c":498:1 -1
     (nil))
(insn 83 80 0 10 (use (reg/i:SI 0 r0)) "kbd.c":498:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

