
;; Function fbuf_init (fbuf_init, funcdef_no=0, decl_uid=4480, cgraph_uid=1, symbol_order=6)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 125)
        (const_int 3145728 [0x300000])) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])
        (reg:SI 125)) "vid.c":53:6 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("fonts0") [flags 0x2]  <var_decl 0x7fd417ce45a0 fonts0>)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (reg/f:SI 126) [2 font+0 S4 A32])
        (reg/f:SI 127)) "vid.c":54:8 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ _1 ])
        (const_int 268435484 [0x1000001c])) "vid.c":58:3 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 128)
        (const_int 11383 [0x2c77])) "vid.c":58:42 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (mem/v:SI (reg/f:SI 113 [ _1 ]) [3 *_1+0 S4 A32])
        (reg:SI 128)) "vid.c":58:42 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 114 [ _2 ])
        (const_int 269615104 [0x10120000])) "vid.c":59:3 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 129)
        (const_int 1059012508 [0x3f1f3f9c])) "vid.c":59:42 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (mem/v:SI (reg/f:SI 114 [ _2 ]) [3 *_2+0 S4 A32])
        (reg:SI 129)) "vid.c":59:42 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 115 [ _3 ])
        (const_int 269615108 [0x10120004])) "vid.c":60:3 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 130)
        (const_int 151740895 [0x90b61df])) "vid.c":60:42 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (mem/v:SI (reg/f:SI 115 [ _3 ]) [3 *_3+0 S4 A32])
        (reg:SI 130)) "vid.c":60:42 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 116 [ _4 ])
        (const_int 269615112 [0x10120008])) "vid.c":61:3 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 2 (set (reg:SI 131)
        (const_int 108992512 [0x67f1800])) "vid.c":61:42 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 2 (set (mem/v:SI (reg/f:SI 116 [ _4 ]) [3 *_4+0 S4 A32])
        (reg:SI 131)) "vid.c":61:42 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 2 (set (reg/f:SI 117 [ _5 ])
        (const_int 269615120 [0x10120010])) "vid.c":65:3 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 2 (set (reg:SI 132)
        (const_int 3145728 [0x300000])) "vid.c":65:42 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 132)) "vid.c":65:42 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 27 2 (set (reg/f:SI 118 [ _6 ])
        (const_int 269615128 [0x10120018])) "vid.c":66:3 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 2 (set (reg:SI 133)
        (const_int 2091 [0x82b])) "vid.c":66:42 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 133)) "vid.c":66:42 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 2 (set (reg:SI 134)
        (const_int 0 [0])) "vid.c":89:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 46 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 134)) "vid.c":89:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 46 30 33 3 3 (nil) [1 uses])
(note 33 46 34 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 3 (set (reg/f:SI 135)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 35 34 36 3 (set (reg/f:SI 119 [ fb.0_7 ])
        (mem/f/c:SI (reg/f:SI 135) [1 fb+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 36 35 37 3 (set (reg:SI 120 [ x.1_8 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":90:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 3 (set (reg:SI 121 [ _9 ])
        (ashift:SI (reg:SI 120 [ x.1_8 ])
            (const_int 2 [0x2]))) "vid.c":90:7 147 {*arm_shiftsi3}
     (nil))
(insn 38 37 39 3 (set (reg/f:SI 122 [ _10 ])
        (plus:SI (reg/f:SI 119 [ fb.0_7 ])
            (reg:SI 121 [ _9 ]))) "vid.c":90:7 7 {*arm_addsi3}
     (nil))
(insn 39 38 40 3 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":90:11 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 3 (set (mem/v:SI (reg/f:SI 122 [ _10 ]) [3 *_10+0 S4 A32])
        (reg:SI 136)) "vid.c":90:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 3 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:25 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 3 (set (reg:SI 137)
        (plus:SI (reg:SI 138)
            (const_int 1 [0x1]))) "vid.c":89:25 7 {*arm_addsi3}
     (nil))
(insn 43 42 44 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 137)) "vid.c":89:25 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 44 43 45 4 2 (nil) [0 uses])
(note 45 44 49 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 49 45 50 4 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:14 253 {*arm_movsi_insn}
     (nil))
(insn 50 49 51 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139)
            (const_int 307200 [0x4b000]))) "vid.c":89:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 51 50 52 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "vid.c":89:14 273 {arm_cond_branch}
     (nil)
 -> 46)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 52 51 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 5 (set (reg/f:SI 140)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 54 53 55 5 (set (reg:SI 141)
        (const_int 127 [0x7f])) "vid.c":91:10 253 {*arm_movsi_insn}
     (nil))
(insn 55 54 56 5 (set (reg:QI 142)
        (subreg:QI (reg:SI 141) 0)) "vid.c":91:10 263 {*arm_movqi_insn}
     (nil))
(insn 56 55 59 5 (set (mem/c:QI (reg/f:SI 140) [0 cursor+0 S1 A8])
        (reg:QI 142)) "vid.c":91:10 263 {*arm_movqi_insn}
     (nil))
(insn 59 56 60 5 (clobber (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
(insn 60 59 63 5 (clobber (reg:SI 123 [ <retval> ])) "vid.c":92:1 -1
     (nil))
(insn 63 60 58 5 (const_int 0 [0]) "vid.c":92:1 311 {nop}
     (nil))
(insn 58 63 61 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":92:1 253 {*arm_movsi_insn}
     (nil))
(insn 61 58 0 5 (use (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function clrpix (clrpix, funcdef_no=1, decl_uid=4490, cgraph_uid=2, symbol_order=7)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":95:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 120)
        (reg:SI 119)) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 120)
        (ashift:SI (reg:SI 120)
            (const_int 2 [0x2]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 120)
        (plus:SI (reg:SI 120)
            (reg:SI 119))) "vid.c":96:14 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 120)
            (const_int 7 [0x7]))) "vid.c":96:14 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (reg:SI 120)
        (reg:SI 121)) "vid.c":96:14 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 640 [0x280]))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 120)) "vid.c":96:14 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 123)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":96:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 122)
        (plus:SI (reg:SI 123)
            (reg:SI 113 [ _1 ]))) "vid.c":96:7 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 122)) "vid.c":96:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 114 [ fb.2_2 ])
        (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 115 [ pix.3_3 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":97:5 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 2 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ pix.3_3 ])
            (const_int 2 [0x2]))) "vid.c":97:5 147 {*arm_shiftsi3}
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 114 [ fb.2_2 ])
            (reg:SI 116 [ _4 ]))) "vid.c":97:5 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 2 (set (reg:SI 125)
        (const_int 0 [0])) "vid.c":97:11 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 125)) "vid.c":97:11 253 {*arm_movsi_insn}
     (nil))
(insn 26 23 27 2 (clobber (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
(insn 27 26 30 2 (clobber (reg:SI 118 [ <retval> ])) "vid.c":98:1 -1
     (nil))
(insn 30 27 25 2 (const_int 0 [0]) "vid.c":98:1 311 {nop}
     (nil))
(insn 25 30 28 2 (set (reg/i:SI 0 r0)
        (reg:SI 118 [ <retval> ])) "vid.c":98:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 0 2 (use (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function setpix (setpix, funcdef_no=2, decl_uid=4495, cgraph_uid=3, symbol_order=8)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":101:1 253 {*arm_movsi_insn}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 151)
        (reg:SI 150)) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (nil))
(insn 10 9 11 2 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "vid.c":102:14 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 12 2 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 7 [0x7]))) "vid.c":102:14 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (reg:SI 151)
        (reg:SI 152)) "vid.c":102:14 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 640 [0x280]))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 151)) "vid.c":102:14 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 154)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":102:7 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 153)
        (plus:SI (reg:SI 154)
            (reg:SI 113 [ _1 ]))) "vid.c":102:7 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 153)) "vid.c":102:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 155)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":103:12 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 114 [ color.4_2 ])
        (mem/c:SI (reg/f:SI 155) [3 color+0 S4 A32])) "vid.c":103:12 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ color.4_2 ])
            (const_int 6 [0x6]))) "vid.c":103:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "vid.c":103:6 273 {arm_cond_branch}
     (nil)
 -> 29)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg/f:SI 156)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg/f:SI 115 [ fb.5_3 ])
        (mem/f/c:SI (reg/f:SI 156) [1 fb+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 116 [ pix.6_4 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":104:8 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 3 (set (reg:SI 117 [ _5 ])
        (ashift:SI (reg:SI 116 [ pix.6_4 ])
            (const_int 2 [0x2]))) "vid.c":104:8 147 {*arm_shiftsi3}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 115 [ fb.5_3 ])
            (reg:SI 117 [ _5 ]))) "vid.c":104:8 7 {*arm_addsi3}
     (nil))
(insn 27 26 28 3 (set (reg:SI 157)
        (const_int 255 [0xff])) "vid.c":104:14 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 157)) "vid.c":104:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 29 28 30 4 10 (nil) [1 uses])
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 4 (set (reg/f:SI 158)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":105:12 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 119 [ color.7_7 ])
        (mem/c:SI (reg/f:SI 158) [3 color+0 S4 A32])) "vid.c":105:12 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ color.7_7 ])
            (const_int 0 [0]))) "vid.c":105:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "vid.c":105:6 273 {arm_cond_branch}
     (nil)
 -> 43)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 35 34 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 5 (set (reg/f:SI 159)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 37 36 38 5 (set (reg/f:SI 120 [ fb.8_8 ])
        (mem/f/c:SI (reg/f:SI 159) [1 fb+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 5 (set (reg:SI 121 [ pix.9_9 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":106:7 253 {*arm_movsi_insn}
     (nil))
(insn 39 38 40 5 (set (reg:SI 122 [ _10 ])
        (ashift:SI (reg:SI 121 [ pix.9_9 ])
            (const_int 2 [0x2]))) "vid.c":106:7 147 {*arm_shiftsi3}
     (nil))
(insn 40 39 41 5 (set (reg/f:SI 123 [ _11 ])
        (plus:SI (reg/f:SI 120 [ fb.8_8 ])
            (reg:SI 122 [ _10 ]))) "vid.c":106:7 7 {*arm_addsi3}
     (nil))
(insn 41 40 42 5 (set (reg:SI 160)
        (const_int 16777215 [0xffffff])) "vid.c":106:13 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 5 (set (mem/v:SI (reg/f:SI 123 [ _11 ]) [3 *_11+0 S4 A32])
        (reg:SI 160)) "vid.c":106:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 43 42 44 6 11 (nil) [1 uses])
(note 44 43 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 6 (set (reg/f:SI 161)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":107:12 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 6 (set (reg:SI 124 [ color.10_12 ])
        (mem/c:SI (reg/f:SI 161) [3 color+0 S4 A32])) "vid.c":107:12 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124 [ color.10_12 ])
            (const_int 1 [0x1]))) "vid.c":107:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 48 47 49 6 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "vid.c":107:6 273 {arm_cond_branch}
     (nil)
 -> 57)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg/f:SI 162)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 7 (set (reg/f:SI 125 [ fb.11_13 ])
        (mem/f/c:SI (reg/f:SI 162) [1 fb+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 7 (set (reg:SI 126 [ pix.12_14 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":108:8 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:SI 127 [ _15 ])
        (ashift:SI (reg:SI 126 [ pix.12_14 ])
            (const_int 2 [0x2]))) "vid.c":108:8 147 {*arm_shiftsi3}
     (nil))
(insn 54 53 55 7 (set (reg/f:SI 128 [ _16 ])
        (plus:SI (reg/f:SI 125 [ fb.11_13 ])
            (reg:SI 127 [ _15 ]))) "vid.c":108:8 7 {*arm_addsi3}
     (nil))
(insn 55 54 56 7 (set (reg:SI 163)
        (const_int 65280 [0xff00])) "vid.c":108:14 253 {*arm_movsi_insn}
     (nil))
(insn 56 55 57 7 (set (mem/v:SI (reg/f:SI 128 [ _16 ]) [3 *_16+0 S4 A32])
        (reg:SI 163)) "vid.c":108:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              7 (FALLTHRU)
(code_label 57 56 58 8 12 (nil) [1 uses])
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 8 (set (reg/f:SI 164)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":109:12 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 8 (set (reg:SI 129 [ color.13_17 ])
        (mem/c:SI (reg/f:SI 164) [3 color+0 S4 A32])) "vid.c":109:12 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ color.13_17 ])
            (const_int 2 [0x2]))) "vid.c":109:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 62 61 63 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "vid.c":109:6 273 {arm_cond_branch}
     (nil)
 -> 71)
;;  succ:       9 (FALLTHRU)
;;              10

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 9 (set (reg/f:SI 165)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 65 64 66 9 (set (reg/f:SI 130 [ fb.14_18 ])
        (mem/f/c:SI (reg/f:SI 165) [1 fb+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 9 (set (reg:SI 131 [ pix.15_19 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":110:8 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 9 (set (reg:SI 132 [ _20 ])
        (ashift:SI (reg:SI 131 [ pix.15_19 ])
            (const_int 2 [0x2]))) "vid.c":110:8 147 {*arm_shiftsi3}
     (nil))
(insn 68 67 69 9 (set (reg/f:SI 133 [ _21 ])
        (plus:SI (reg/f:SI 130 [ fb.14_18 ])
            (reg:SI 132 [ _20 ]))) "vid.c":110:8 7 {*arm_addsi3}
     (nil))
(insn 69 68 70 9 (set (reg:SI 166)
        (const_int 16776960 [0xffff00])) "vid.c":110:14 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 9 (set (mem/v:SI (reg/f:SI 133 [ _21 ]) [3 *_21+0 S4 A32])
        (reg:SI 166)) "vid.c":110:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       10 (FALLTHRU)

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
;;              9 (FALLTHRU)
(code_label 71 70 72 10 13 (nil) [1 uses])
(note 72 71 73 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 10 (set (reg/f:SI 167)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 74 73 75 10 (set (reg:SI 134 [ color.16_22 ])
        (mem/c:SI (reg/f:SI 167) [3 color+0 S4 A32])) "vid.c":111:12 253 {*arm_movsi_insn}
     (nil))
(insn 75 74 76 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134 [ color.16_22 ])
            (const_int 4 [0x4]))) "vid.c":111:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 76 75 77 10 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "vid.c":111:6 273 {arm_cond_branch}
     (nil)
 -> 85)
;;  succ:       11 (FALLTHRU)
;;              12

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 (FALLTHRU)
(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 11 (set (reg/f:SI 168)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 11 (set (reg/f:SI 135 [ fb.17_23 ])
        (mem/f/c:SI (reg/f:SI 168) [1 fb+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 80 79 81 11 (set (reg:SI 136 [ pix.18_24 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":112:8 253 {*arm_movsi_insn}
     (nil))
(insn 81 80 82 11 (set (reg:SI 137 [ _25 ])
        (ashift:SI (reg:SI 136 [ pix.18_24 ])
            (const_int 2 [0x2]))) "vid.c":112:8 147 {*arm_shiftsi3}
     (nil))
(insn 82 81 83 11 (set (reg/f:SI 138 [ _26 ])
        (plus:SI (reg/f:SI 135 [ fb.17_23 ])
            (reg:SI 137 [ _25 ]))) "vid.c":112:8 7 {*arm_addsi3}
     (nil))
(insn 83 82 84 11 (set (reg:SI 169)
        (const_int 16711935 [0xff00ff])) "vid.c":112:14 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (mem/v:SI (reg/f:SI 138 [ _26 ]) [3 *_26+0 S4 A32])
        (reg:SI 169)) "vid.c":112:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       12 (FALLTHRU)

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
;;              11 (FALLTHRU)
(code_label 85 84 86 12 14 (nil) [1 uses])
(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 12 (set (reg/f:SI 170)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":113:12 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 12 (set (reg:SI 139 [ color.19_27 ])
        (mem/c:SI (reg/f:SI 170) [3 color+0 S4 A32])) "vid.c":113:12 253 {*arm_movsi_insn}
     (nil))
(insn 89 88 90 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139 [ color.19_27 ])
            (const_int 3 [0x3]))) "vid.c":113:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 90 89 91 12 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "vid.c":113:6 273 {arm_cond_branch}
     (nil)
 -> 99)
;;  succ:       13 (FALLTHRU)
;;              14

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 (FALLTHRU)
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg/f:SI 171)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg/f:SI 140 [ fb.20_28 ])
        (mem/f/c:SI (reg/f:SI 171) [1 fb+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 13 (set (reg:SI 141 [ pix.21_29 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":114:8 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 13 (set (reg:SI 142 [ _30 ])
        (ashift:SI (reg:SI 141 [ pix.21_29 ])
            (const_int 2 [0x2]))) "vid.c":114:8 147 {*arm_shiftsi3}
     (nil))
(insn 96 95 97 13 (set (reg/f:SI 143 [ _31 ])
        (plus:SI (reg/f:SI 140 [ fb.20_28 ])
            (reg:SI 142 [ _30 ]))) "vid.c":114:8 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 13 (set (reg:SI 172)
        (const_int 65535 [0xffff])) "vid.c":114:14 253 {*arm_movsi_insn}
     (nil))
(insn 98 97 99 13 (set (mem/v:SI (reg/f:SI 143 [ _31 ]) [3 *_31+0 S4 A32])
        (reg:SI 172)) "vid.c":114:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       12
;;              13 (FALLTHRU)
(code_label 99 98 100 14 15 (nil) [1 uses])
(note 100 99 101 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 14 (set (reg/f:SI 173)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 102 101 103 14 (set (reg:SI 144 [ color.22_32 ])
        (mem/c:SI (reg/f:SI 173) [3 color+0 S4 A32])) "vid.c":115:12 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144 [ color.22_32 ])
            (const_int 5 [0x5]))) "vid.c":115:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "vid.c":115:6 273 {arm_cond_branch}
     (nil)
 -> 113)
;;  succ:       15 (FALLTHRU)
;;              16

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
(note 105 104 106 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 15 (set (reg/f:SI 174)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 15 (set (reg/f:SI 145 [ fb.23_33 ])
        (mem/f/c:SI (reg/f:SI 174) [1 fb+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 108 107 109 15 (set (reg:SI 146 [ pix.24_34 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":116:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 15 (set (reg:SI 147 [ _35 ])
        (ashift:SI (reg:SI 146 [ pix.24_34 ])
            (const_int 2 [0x2]))) "vid.c":116:8 147 {*arm_shiftsi3}
     (nil))
(insn 110 109 111 15 (set (reg/f:SI 148 [ _36 ])
        (plus:SI (reg/f:SI 145 [ fb.23_33 ])
            (reg:SI 147 [ _35 ]))) "vid.c":116:8 7 {*arm_addsi3}
     (nil))
(insn 111 110 112 15 (set (reg:SI 175)
        (const_int 16777215 [0xffffff])) "vid.c":116:14 253 {*arm_movsi_insn}
     (nil))
(insn 112 111 113 15 (set (mem/v:SI (reg/f:SI 148 [ _36 ]) [3 *_36+0 S4 A32])
        (reg:SI 175)) "vid.c":116:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       16 (FALLTHRU)

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              15 (FALLTHRU)
(code_label 113 112 114 16 16 (nil) [1 uses])
(note 114 113 117 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 117 114 118 16 (clobber (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
(insn 118 117 121 16 (clobber (reg:SI 149 [ <retval> ])) "vid.c":117:1 -1
     (nil))
(insn 121 118 116 16 (const_int 0 [0]) "vid.c":117:1 311 {nop}
     (nil))
(insn 116 121 119 16 (set (reg/i:SI 0 r0)
        (reg:SI 149 [ <retval> ])) "vid.c":117:1 253 {*arm_movsi_insn}
     (nil))
(insn 119 116 0 16 (use (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dchar (dchar, funcdef_no=3, decl_uid=4501, cgraph_uid=4, symbol_order=9)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":120:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":120:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":120:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":124:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.25_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":124:19 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":124:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":124:22 147 {*arm_shiftsi3}
     (nil))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":124:22 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.25_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":124:12 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":124:12 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":127:9 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 67 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 129)) "vid.c":127:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 67 18 21 3 24 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 117 [ r.26_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":128:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ r.26_5 ]))) "vid.c":128:23 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":128:10 263 {*arm_movqi_insn}
     (nil))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":128:10 263 {*arm_movqi_insn}
     (nil))
(insn 27 26 28 3 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":130:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 55 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":130:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)

;; basic block 4, loop depth 2, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 55 28 31 4 23 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":131:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":131:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":131:11 147 {*arm_shiftsi3}
     (nil))
(insn 35 34 36 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":131:11 90 {*arm_andsi3_insn}
     (nil))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":131:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":131:10 273 {arm_cond_branch}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":132:4 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 5 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":132:4 7 {*arm_addsi3}
     (nil))
(insn 45 44 46 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 5 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":132:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 47 46 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setpix") [flags 0x3]  <function_decl 0x7fd417ce1b00 setpix>) [0 setpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":132:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 2, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 48 47 49 6 22 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":130:27 7 {*arm_addsi3}
     (nil))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":130:27 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)

;; basic block 7, loop depth 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       3 [always]  (FALLTHRU)
;;              6 (FALLTHRU,DFS_BACK)
(code_label 53 52 54 7 21 (nil) [0 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":130:20 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":130:20 273 {arm_cond_branch}
     (nil)
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:20 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":127:20 7 {*arm_addsi3}
     (nil))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 141)) "vid.c":127:20 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              8 (FALLTHRU,DFS_BACK)
(code_label 65 64 66 9 20 (nil) [0 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:14 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":127:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":127:14 273 {arm_cond_branch}
     (nil)
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
(insn 77 76 80 10 (clobber (reg:SI 124 [ <retval> ])) "vid.c":135:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":135:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":135:1 253 {*arm_movsi_insn}
     (nil))
(insn 78 75 0 10 (use (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function undchar (undchar, funcdef_no=4, decl_uid=4518, cgraph_uid=5, symbol_order=10)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":138:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":138:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":138:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":142:19 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.27_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":142:19 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":142:22 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":142:22 147 {*arm_shiftsi3}
     (nil))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":142:22 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.27_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":142:12 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":142:12 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":145:11 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 67 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 129)) "vid.c":145:11 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 67 18 21 3 32 (nil) [1 uses])
(note 21 67 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:SI 117 [ row.28_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":146:23 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ row.28_5 ]))) "vid.c":146:23 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":146:10 263 {*arm_movqi_insn}
     (nil))
(insn 26 25 27 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":146:10 263 {*arm_movqi_insn}
     (nil))
(insn 27 26 28 3 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":148:13 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 55 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":148:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)

;; basic block 4, loop depth 2, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 55 28 31 4 31 (nil) [1 uses])
(note 31 55 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 4 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":149:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 33 32 34 4 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":149:11 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 35 4 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":149:11 147 {*arm_shiftsi3}
     (nil))
(insn 35 34 36 4 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":149:11 90 {*arm_andsi3_insn}
     (nil))
(insn 36 35 37 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":149:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":149:10 273 {arm_cond_branch}
     (nil)
 -> 48)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 5 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 5 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":150:4 7 {*arm_addsi3}
     (nil))
(insn 42 41 43 5 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 5 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 44 43 45 5 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":150:4 7 {*arm_addsi3}
     (nil))
(insn 45 44 46 5 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(insn 46 45 47 5 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":150:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 47 46 48 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":150:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 2, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 48 47 49 6 30 (nil) [1 uses])
(note 49 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 6 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 6 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":148:27 7 {*arm_addsi3}
     (nil))
(insn 52 51 53 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":148:27 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)

;; basic block 7, loop depth 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       3 [always]  (FALLTHRU)
;;              6 (FALLTHRU,DFS_BACK)
(code_label 53 52 54 7 29 (nil) [0 uses])
(note 54 53 58 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 7 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:20 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 60 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":148:20 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 60 59 61 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":148:20 273 {arm_cond_branch}
     (nil)
 -> 55)
;;  succ:       4
;;              8 (FALLTHRU)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 61 60 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 8 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:26 253 {*arm_movsi_insn}
     (nil))
(insn 63 62 64 8 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":145:26 7 {*arm_addsi3}
     (nil))
(insn 64 63 65 8 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 141)) "vid.c":145:26 253 {*arm_movsi_insn}
     (nil))
;;  succ:       9 (FALLTHRU,DFS_BACK)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              8 (FALLTHRU,DFS_BACK)
(code_label 65 64 66 9 28 (nil) [0 uses])
(note 66 65 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 9 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:18 253 {*arm_movsi_insn}
     (nil))
(insn 71 70 72 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":145:18 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 72 71 73 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":145:18 273 {arm_cond_branch}
     (nil)
 -> 67)
;;  succ:       3
;;              10 (FALLTHRU)

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 10 (clobber (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
(insn 77 76 80 10 (clobber (reg:SI 124 [ <retval> ])) "vid.c":153:1 -1
     (nil))
(insn 80 77 75 10 (const_int 0 [0]) "vid.c":153:1 311 {nop}
     (nil))
(insn 75 80 78 10 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":153:1 253 {*arm_movsi_insn}
     (nil))
(insn 78 75 0 10 (use (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dstring (dstring, funcdef_no=5, decl_uid=4535, cgraph_uid=6, symbol_order=11)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":156:1 253 {*arm_movsi_insn}
     (nil))
(note 5 4 27 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 27 5 10 3 37 (nil) [1 uses])
(note 10 27 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":158:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 3 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":158:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 17 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":158:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 17 16 18 3 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 8 [0x8]))) "vid.c":159:6 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 117)) "vid.c":159:6 253 {*arm_movsi_insn}
     (nil))
(insn 20 19 21 3 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":160:6 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int 1 [0x1]))) "vid.c":160:6 7 {*arm_addsi3}
     (nil))
(insn 22 21 23 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 119)) "vid.c":160:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 23 22 24 4 36 (nil) [0 uses])
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 4 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":157:9 253 {*arm_movsi_insn}
     (nil))
(insn 26 25 28 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 121) [0 *s_3+0 S1 A8]))) "vid.c":157:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 28 26 29 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":157:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "vid.c":157:9 273 {arm_cond_branch}
     (nil)
 -> 27)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 30 34 5 (clobber (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
(insn 34 33 37 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":162:1 -1
     (nil))
(insn 37 34 32 5 (const_int 0 [0]) "vid.c":162:1 311 {nop}
     (nil))
(insn 32 37 35 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":162:1 253 {*arm_movsi_insn}
     (nil))
(insn 35 32 0 5 (use (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function scroll (scroll, funcdef_no=6, decl_uid=4540, cgraph_uid=7, symbol_order=12)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 124)
        (const_int 0 [0])) "vid.c":167:9 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 28 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 124)) "vid.c":167:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 28 6 9 3 40 (nil) [1 uses])
(note 9 28 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:SI 125)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 3 (set (reg/f:SI 113 [ fb.29_1 ])
        (mem/f/c:SI (reg/f:SI 125) [1 fb+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 114 [ i.30_2 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ i.30_2 ])
            (const_int 10240 [0x2800]))) "vid.c":168:15 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 3 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ _3 ])
            (const_int 2 [0x2]))) "vid.c":168:15 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 113 [ fb.29_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":168:15 7 {*arm_addsi3}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 126)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg/f:SI 118 [ fb.31_6 ])
        (mem/f/c:SI (reg/f:SI 126) [1 fb+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (set (reg:SI 119 [ i.32_7 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:7 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 3 (set (reg:SI 120 [ _8 ])
        (ashift:SI (reg:SI 119 [ i.32_7 ])
            (const_int 2 [0x2]))) "vid.c":168:7 147 {*arm_shiftsi3}
     (nil))
(insn 20 19 21 3 (set (reg/f:SI 121 [ _9 ])
        (plus:SI (reg/f:SI 118 [ fb.31_6 ])
            (reg:SI 120 [ _8 ]))) "vid.c":168:7 7 {*arm_addsi3}
     (nil))
(insn 21 20 22 3 (set (reg:SI 122 [ _10 ])
        (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])) "vid.c":168:15 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (mem/v:SI (reg/f:SI 121 [ _9 ]) [3 *_9+0 S4 A32])
        (reg:SI 122 [ _10 ])) "vid.c":168:11 253 {*arm_movsi_insn}
     (nil))
(insn 23 22 24 3 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:32 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 3 (set (reg:SI 127)
        (plus:SI (reg:SI 128)
            (const_int 1 [0x1]))) "vid.c":167:32 7 {*arm_addsi3}
     (nil))
(insn 25 24 26 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 127)) "vid.c":167:32 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 26 25 27 4 39 (nil) [0 uses])
(note 27 26 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 27 32 4 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 4 (set (reg:SI 130)
        (const_int 296960 [0x48800])) "vid.c":167:14 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129)
            (reg:SI 130))) "vid.c":167:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 34 33 35 4 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":167:14 273 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 35 34 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 5 (clobber (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
(insn 39 38 42 5 (clobber (reg:SI 123 [ <retval> ])) "vid.c":170:1 -1
     (nil))
(insn 42 39 37 5 (const_int 0 [0]) "vid.c":170:1 311 {nop}
     (nil))
(insn 37 42 40 5 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":170:1 253 {*arm_movsi_insn}
     (nil))
(insn 40 37 0 5 (use (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kpchar (kpchar, funcdef_no=7, decl_uid=4550, cgraph_uid=8, symbol_order=13)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":173:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":173:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":173:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":175:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":175:6 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":175:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":176:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":176:6 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":176:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":178:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":178:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":178:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":180:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":180:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":180:1 253 {*arm_movsi_insn}
     (nil))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function unkpchar (unkpchar, funcdef_no=8, decl_uid=4557, cgraph_uid=9, symbol_order=14)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":183:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":183:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":183:1 263 {*arm_movqi_insn}
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":185:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":185:6 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":185:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":186:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":186:6 147 {*arm_shiftsi3}
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":186:6 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":188:4 175 {*arm_zero_extendqisi2}
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":188:4 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("undchar") [flags 0x3]  <function_decl 0x7fd417ce1f00 undchar>) [0 undchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":188:4 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":189:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":189:1 311 {nop}
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":189:1 253 {*arm_movsi_insn}
     (nil))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function erasechar (erasechar, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=15)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":197:10 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ col.33_1 ])
        (mem/c:SI (reg/f:SI 118) [3 col+0 S4 A32])) "vid.c":197:10 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 119)
        (ashift:SI (reg:SI 113 [ col.33_1 ])
            (const_int 3 [0x3]))) "vid.c":197:5 147 {*arm_shiftsi3}
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 119)) "vid.c":197:5 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 120)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":198:10 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ row.34_2 ])
        (mem/c:SI (reg/f:SI 120) [3 row+0 S4 A32])) "vid.c":198:10 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 114 [ row.34_2 ])
            (const_int 4 [0x4]))) "vid.c":198:5 147 {*arm_shiftsi3}
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 121)) "vid.c":198:5 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 2 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":202:9 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 49 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 122)) "vid.c":202:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
(code_label 49 14 17 3 49 (nil) [1 uses])
(note 17 49 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 3 (set (reg:SI 123)
        (const_int 0 [0])) "vid.c":203:14 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 37 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 123)) "vid.c":203:14 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 [always]  (FALLTHRU)

;; basic block 4, loop depth 2, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 37 19 22 4 48 (nil) [1 uses])
(note 22 37 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 4 (set (reg:SI 124)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 24 23 25 4 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 25 24 26 4 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 124)
            (reg:SI 125))) "vid.c":204:9 7 {*arm_addsi3}
     (nil))
(insn 26 25 27 4 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 4 (set (reg:SI 127)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 4 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 126)
            (reg:SI 127))) "vid.c":204:9 7 {*arm_addsi3}
     (nil))
(insn 29 28 30 4 (set (reg:SI 1 r1)
        (reg:SI 116 [ _4 ])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 4 (set (reg:SI 0 r0)
        (reg:SI 115 [ _3 ])) "vid.c":204:9 253 {*arm_movsi_insn}
     (nil))
(call_insn 31 30 32 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":204:9 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 32 31 33 4 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:28 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 4 (set (reg:SI 128)
        (plus:SI (reg:SI 129)
            (const_int 1 [0x1]))) "vid.c":203:28 7 {*arm_addsi3}
     (nil))
(insn 34 33 35 4 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 128)) "vid.c":203:28 253 {*arm_movsi_insn}
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       3 [always]  (FALLTHRU)
;;              4 (FALLTHRU,DFS_BACK)
(code_label 35 34 36 5 47 (nil) [0 uses])
(note 36 35 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 36 41 5 (set (reg:SI 130)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:21 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (const_int 7 [0x7]))) "vid.c":203:21 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 42 41 43 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "vid.c":203:21 273 {arm_cond_branch}
     (nil)
 -> 37)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 1, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 6 (set (reg:SI 132)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:20 253 {*arm_movsi_insn}
     (nil))
(insn 45 44 46 6 (set (reg:SI 131)
        (plus:SI (reg:SI 132)
            (const_int 1 [0x1]))) "vid.c":202:20 7 {*arm_addsi3}
     (nil))
(insn 46 45 47 6 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 131)) "vid.c":202:20 253 {*arm_movsi_insn}
     (nil))
;;  succ:       7 (FALLTHRU,DFS_BACK)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              6 (FALLTHRU,DFS_BACK)
(code_label 47 46 48 7 46 (nil) [0 uses])
(note 48 47 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 52 48 53 7 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:14 253 {*arm_movsi_insn}
     (nil))
(insn 53 52 54 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133)
            (const_int 15 [0xf]))) "vid.c":202:14 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "vid.c":202:14 273 {arm_cond_branch}
     (nil)
 -> 49)
;;  succ:       3
;;              8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       7 (FALLTHRU)
(note 55 54 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 55 59 8 (clobber (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
(insn 59 58 62 8 (clobber (reg:SI 117 [ <retval> ])) "vid.c":207:1 -1
     (nil))
(insn 62 59 57 8 (const_int 0 [0]) "vid.c":207:1 311 {nop}
     (nil))
(insn 57 62 60 8 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":207:1 253 {*arm_movsi_insn}
     (nil))
(insn 60 57 0 8 (use (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function clrcursor (clrcursor, funcdef_no=10, decl_uid=4577, cgraph_uid=11, symbol_order=16)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ row.35_1 ])
        (mem/c:SI (reg/f:SI 116) [3 row+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 117)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 8 7 9 2 (set (reg:SI 114 [ col.36_2 ])
        (mem/c:SI (reg/f:SI 117) [3 col+0 S4 A32])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.36_2 ])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.35_1 ])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (const_int 127 [0x7f])) "vid.c":211:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x3]  <function_decl 0x7fd417cfe700 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":211:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":212:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "vid.c":212:1 311 {nop}
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":212:1 253 {*arm_movsi_insn}
     (nil))
(insn 17 14 0 2 (use (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function putcursor (putcursor, funcdef_no=11, decl_uid=4580, cgraph_uid=12, symbol_order=17)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 116)
        (reg:SI 0 r0 [ c ])) "vid.c":215:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (reg:QI 117)
        (subreg:QI (reg:SI 116) 0)) "vid.c":215:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 117)) "vid.c":215:1 263 {*arm_movqi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ row.37_1 ])
        (mem/c:SI (reg/f:SI 118) [3 row+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 119)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:SI 114 [ col.38_2 ])
        (mem/c:SI (reg/f:SI 119) [3 col+0 S4 A32])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 12 11 13 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":216:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.38_2 ])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.37_1 ])) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":216:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 16 15 19 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":216:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 19 16 20 2 (clobber (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
(insn 20 19 23 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":217:1 -1
     (nil))
(insn 23 20 18 2 (const_int 0 [0]) "vid.c":217:1 311 {nop}
     (nil))
(insn 18 23 21 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":217:1 253 {*arm_movsi_insn}
     (nil))
(insn 21 18 0 2 (use (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kputc (kputc, funcdef_no=12, decl_uid=4583, cgraph_uid=13, symbol_order=18)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 132)
        (reg:SI 0 r0 [ c ])) "vid.c":220:1 253 {*arm_movsi_insn}
     (nil))
(insn 3 2 4 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "vid.c":220:1 263 {*arm_movqi_insn}
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 133)) "vid.c":220:1 263 {*arm_movqi_insn}
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 9 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrcursor") [flags 0x3]  <function_decl 0x7fd417cfeb00 clrcursor>) [0 clrcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":221:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 134)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":222:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134)
            (const_int 13 [0xd]))) "vid.c":222:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "vid.c":222:6 273 {arm_cond_branch}
     (nil)
 -> 22)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:SI 135)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (mem/c:SI (reg/f:SI 135) [3 col+0 S4 A32])
        (reg:SI 136)) "vid.c":223:8 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg/f:SI 137)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":225:5 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 113 [ cursor.39_1 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 137) [0 cursor+0 S1 A8]))) "vid.c":225:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 18 17 19 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ cursor.39_1 ])) "vid.c":225:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 19 18 22 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":225:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       15 [always]  (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 22 19 23 4 59 (nil) [1 uses])
(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 4 (set (reg:SI 138)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":228:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 25 24 26 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 138)
            (const_int 10 [0xa]))) "vid.c":228:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 26 25 27 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "vid.c":228:6 273 {arm_cond_branch}
     (nil)
 -> 52)
;;  succ:       5 (FALLTHRU)
;;              8

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 27 26 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 5 (set (reg/f:SI 139)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 29 28 30 5 (set (reg:SI 114 [ row.40_2 ])
        (mem/c:SI (reg/f:SI 139) [3 row+0 S4 A32])) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 5 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ row.40_2 ])
            (const_int 1 [0x1]))) "vid.c":229:8 7 {*arm_addsi3}
     (nil))
(insn 31 30 32 5 (set (reg/f:SI 140)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 32 31 33 5 (set (mem/c:SI (reg/f:SI 140) [3 row+0 S4 A32])
        (reg:SI 115 [ _3 ])) "vid.c":229:8 253 {*arm_movsi_insn}
     (nil))
(insn 33 32 34 5 (set (reg/f:SI 141)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":230:12 253 {*arm_movsi_insn}
     (nil))
(insn 34 33 37 5 (set (reg:SI 116 [ row.41_4 ])
        (mem/c:SI (reg/f:SI 141) [3 row+0 S4 A32])) "vid.c":230:12 253 {*arm_movsi_insn}
     (nil))
(insn 37 34 38 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ row.41_4 ])
            (const_int 24 [0x18]))) "vid.c":230:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 38 37 39 5 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "vid.c":230:8 273 {arm_cond_branch}
     (nil)
 -> 44)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 39 38 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 6 (set (reg/f:SI 142)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 6 (set (reg:SI 143)
        (const_int 24 [0x18])) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(insn 42 41 43 6 (set (mem/c:SI (reg/f:SI 142) [3 row+0 S4 A32])
        (reg:SI 143)) "vid.c":231:11 253 {*arm_movsi_insn}
     (nil))
(call_insn 43 42 44 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":232:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 44 43 45 7 62 (nil) [1 uses])
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 7 (set (reg/f:SI 144)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":235:5 253 {*arm_movsi_insn}
     (nil))
(insn 47 46 48 7 (set (reg:SI 117 [ cursor.42_5 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 144) [0 cursor+0 S1 A8]))) "vid.c":235:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 48 47 49 7 (set (reg:SI 0 r0)
        (reg:SI 117 [ cursor.42_5 ])) "vid.c":235:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 49 48 52 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":235:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       15 [always]  (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 52 49 53 8 61 (nil) [1 uses])
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 8 (set (reg:SI 145)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":238:6 175 {*arm_zero_extendqisi2}
     (nil))
(insn 55 54 56 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145)
            (const_int 8 [0x8]))) "vid.c":238:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 56 55 57 8 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "vid.c":238:6 273 {arm_cond_branch}
     (nil)
 -> 79)
;;  succ:       9 (FALLTHRU)
;;              11

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 9 (set (reg/f:SI 146)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 59 58 62 9 (set (reg:SI 118 [ col.43_6 ])
        (mem/c:SI (reg/f:SI 146) [3 col+0 S4 A32])) "vid.c":239:12 253 {*arm_movsi_insn}
     (nil))
(insn 62 59 63 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ col.43_6 ])
            (const_int 0 [0]))) "vid.c":239:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 63 62 64 9 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 127)
            (pc))) "vid.c":239:8 273 {arm_cond_branch}
     (nil)
 -> 127)
;;  succ:       10 (FALLTHRU)
;;              15

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 64 63 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 10 (set (reg/f:SI 147)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 66 65 67 10 (set (reg:SI 119 [ col.44_7 ])
        (mem/c:SI (reg/f:SI 147) [3 col+0 S4 A32])) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 67 66 68 10 (set (reg:SI 120 [ _8 ])
        (plus:SI (reg:SI 119 [ col.44_7 ])
            (const_int -1 [0xffffffffffffffff]))) "vid.c":240:10 7 {*arm_addsi3}
     (nil))
(insn 68 67 69 10 (set (reg/f:SI 148)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (mem/c:SI (reg/f:SI 148) [3 col+0 S4 A32])
        (reg:SI 120 [ _8 ])) "vid.c":240:10 253 {*arm_movsi_insn}
     (nil))
(call_insn 70 69 71 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("erasechar") [flags 0x3]  <function_decl 0x7fd417cfe900 erasechar>) [0 erasechar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":241:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 71 70 72 10 (set (reg/f:SI 149)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":242:7 253 {*arm_movsi_insn}
     (nil))
(insn 72 71 73 10 (set (reg:SI 121 [ cursor.45_9 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 149) [0 cursor+0 S1 A8]))) "vid.c":242:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 73 72 74 10 (set (reg:SI 0 r0)
        (reg:SI 121 [ cursor.45_9 ])) "vid.c":242:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 74 73 79 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":242:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       15 [always]  (FALLTHRU)

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 79 74 80 11 63 (nil) [1 uses])
(note 80 79 81 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 11 (set (reg/f:SI 150)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 82 81 83 11 (set (reg:SI 122 [ row.46_10 ])
        (mem/c:SI (reg/f:SI 150) [3 row+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 83 82 84 11 (set (reg/f:SI 151)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 84 83 85 11 (set (reg:SI 123 [ col.47_11 ])
        (mem/c:SI (reg/f:SI 151) [3 col+0 S4 A32])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 85 84 86 11 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":247:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 86 85 87 11 (set (reg:SI 2 r2)
        (reg:SI 123 [ col.47_11 ])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 11 (set (reg:SI 1 r1)
        (reg:SI 122 [ row.46_10 ])) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 11 (set (reg:SI 0 r0)
        (reg:SI 152)) "vid.c":247:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 89 88 90 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":247:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 90 89 91 11 (set (reg/f:SI 153)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 91 90 92 11 (set (reg:SI 124 [ col.48_12 ])
        (mem/c:SI (reg/f:SI 153) [3 col+0 S4 A32])) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 92 91 93 11 (set (reg:SI 125 [ _13 ])
        (plus:SI (reg:SI 124 [ col.48_12 ])
            (const_int 1 [0x1]))) "vid.c":248:6 7 {*arm_addsi3}
     (nil))
(insn 93 92 94 11 (set (reg/f:SI 154)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 94 93 95 11 (set (mem/c:SI (reg/f:SI 154) [3 col+0 S4 A32])
        (reg:SI 125 [ _13 ])) "vid.c":248:6 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 11 (set (reg/f:SI 155)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":249:10 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 99 11 (set (reg:SI 126 [ col.49_14 ])
        (mem/c:SI (reg/f:SI 155) [3 col+0 S4 A32])) "vid.c":249:10 253 {*arm_movsi_insn}
     (nil))
(insn 99 96 100 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 126 [ col.49_14 ])
            (const_int 79 [0x4f]))) "vid.c":249:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 100 99 101 11 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":249:6 273 {arm_cond_branch}
     (nil)
 -> 121)
;;  succ:       12 (FALLTHRU)
;;              14

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 101 100 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 12 (set (reg/f:SI 156)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 103 102 104 12 (set (reg:SI 157)
        (const_int 0 [0])) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 104 103 105 12 (set (mem/c:SI (reg/f:SI 156) [3 col+0 S4 A32])
        (reg:SI 157)) "vid.c":250:9 253 {*arm_movsi_insn}
     (nil))
(insn 105 104 106 12 (set (reg/f:SI 158)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 106 105 107 12 (set (reg:SI 127 [ row.50_15 ])
        (mem/c:SI (reg/f:SI 158) [3 row+0 S4 A32])) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 107 106 108 12 (set (reg:SI 128 [ _16 ])
        (plus:SI (reg:SI 127 [ row.50_15 ])
            (const_int 1 [0x1]))) "vid.c":251:8 7 {*arm_addsi3}
     (nil))
(insn 108 107 109 12 (set (reg/f:SI 159)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 109 108 110 12 (set (mem/c:SI (reg/f:SI 159) [3 row+0 S4 A32])
        (reg:SI 128 [ _16 ])) "vid.c":251:8 253 {*arm_movsi_insn}
     (nil))
(insn 110 109 111 12 (set (reg/f:SI 160)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":252:13 253 {*arm_movsi_insn}
     (nil))
(insn 111 110 114 12 (set (reg:SI 129 [ row.51_17 ])
        (mem/c:SI (reg/f:SI 160) [3 row+0 S4 A32])) "vid.c":252:13 253 {*arm_movsi_insn}
     (nil))
(insn 114 111 115 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ row.51_17 ])
            (const_int 24 [0x18]))) "vid.c":252:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 115 114 116 12 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":252:8 273 {arm_cond_branch}
     (nil)
 -> 121)
;;  succ:       13 (FALLTHRU)
;;              14

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 (FALLTHRU)
(note 116 115 117 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 13 (set (reg/f:SI 161)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 118 117 119 13 (set (reg:SI 162)
        (const_int 24 [0x18])) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(insn 119 118 120 13 (set (mem/c:SI (reg/f:SI 161) [3 row+0 S4 A32])
        (reg:SI 162)) "vid.c":253:11 253 {*arm_movsi_insn}
     (nil))
(call_insn 120 119 121 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":254:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12
;;              13 (FALLTHRU)
(code_label 121 120 122 14 65 (nil) [2 uses])
(note 122 121 123 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 14 (set (reg/f:SI 163)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":257:3 253 {*arm_movsi_insn}
     (nil))
(insn 124 123 125 14 (set (reg:SI 130 [ cursor.52_18 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 163) [0 cursor+0 S1 A8]))) "vid.c":257:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 125 124 126 14 (set (reg:SI 0 r0)
        (reg:SI 130 [ cursor.52_18 ])) "vid.c":257:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 126 125 127 14 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":257:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       15 (FALLTHRU)

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [always]  (FALLTHRU)
;;              7 [always]  (FALLTHRU)
;;              10 [always]  (FALLTHRU)
;;              14 (FALLTHRU)
;;              9
(code_label 127 126 128 15 60 (nil) [1 uses])
(note 128 127 131 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 131 128 132 15 (clobber (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
(insn 132 131 130 15 (clobber (reg:SI 131 [ <retval> ])) "vid.c":259:1 -1
     (nil))
(insn 130 132 133 15 (set (reg/i:SI 0 r0)
        (reg:SI 131 [ <retval> ])) "vid.c":259:1 253 {*arm_movsi_insn}
     (nil))
(insn 133 130 0 15 (use (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprints (kprints, funcdef_no=13, decl_uid=4586, cgraph_uid=14, symbol_order=19)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":262:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 20 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 20 3 8 3 71 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":264:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":264:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":264:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":264:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":265:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":265:6 7 {*arm_addsi3}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":265:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 16 15 17 4 70 (nil) [0 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":263:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":263:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":263:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":263:9 273 {arm_cond_branch}
     (nil)
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
(insn 27 26 30 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":267:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":267:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":267:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 0 5 (use (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function prints (prints, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=20)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":269:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 20 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 20 3 8 3 74 (nil) [1 uses])
(note 8 20 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":271:5 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":271:5 175 {*arm_zero_extendqisi2}
     (nil))
(insn 11 10 12 3 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":271:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 12 11 13 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":271:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":272:6 253 {*arm_movsi_insn}
     (nil))
(insn 14 13 15 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":272:6 7 {*arm_addsi3}
     (nil))
(insn 15 14 16 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":272:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 16 15 17 4 73 (nil) [0 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":270:9 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 21 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":270:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 21 19 22 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":270:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":270:9 273 {arm_cond_branch}
     (nil)
 -> 20)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 23 22 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
(insn 27 26 30 5 (clobber (reg:SI 115 [ <retval> ])) "vid.c":274:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":274:1 311 {nop}
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":274:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 0 5 (use (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function krpx (krpx, funcdef_no=15, decl_uid=4598, cgraph_uid=16, symbol_order=21)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":277:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":279:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":279:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "vid.c":279:6 273 {arm_cond_branch}
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              3

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 8 13 3 76 (nil) [1 uses])
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":281:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 113 [ tab.53_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":281:10 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":281:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 114 [ _2 ])
        (and:SI (reg:SI 120)
            (const_int 15 [0xf]))) "vid.c":281:13 90 {*arm_andsi3_insn}
     (nil))
(insn 18 17 19 3 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.53_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":281:10 7 {*arm_addsi3}
     (nil))
(insn 19 18 20 3 (set (reg:QI 121)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":281:5 263 {*arm_movqi_insn}
     (nil))
(insn 20 19 21 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 121)) "vid.c":281:5 263 {*arm_movqi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 122)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":282:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 3 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 122)
            (const_int 4 [0x4]))) "vid.c":282:3 147 {*arm_shiftsi3}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 122)
            (const_int 16 [0x10]))
        (nil)))
(insn 23 22 24 3 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":282:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 24 23 25 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":282:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 3 (set (reg:SI 123)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":283:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 26 25 27 3 (set (reg:SI 0 r0)
        (reg:SI 123)) "vid.c":283:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":283:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              3 (FALLTHRU)
(code_label 28 27 29 4 77 (nil) [0 uses])
(note 29 28 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 29 33 4 (clobber (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
(insn 33 32 31 4 (clobber (reg:SI 117 [ <retval> ])) "vid.c":284:1 -1
     (nil))
(insn 31 33 34 4 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":284:1 253 {*arm_movsi_insn}
     (nil))
(insn 34 31 0 4 (use (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintx (kprintx, funcdef_no=16, decl_uid=4602, cgraph_uid=17, symbol_order=22)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":287:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":288:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (const_int 120 [0x78])) "vid.c":288:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":289:6 253 {*arm_movsi_insn}
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":289:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "vid.c":289:6 273 {arm_cond_branch}
     (nil)
 -> 18)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":290:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 18 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":290:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 18 15 19 4 82 (nil) [1 uses])
(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":292:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 22 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":292:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [always]  (FALLTHRU)
;;              4 (FALLTHRU)
(code_label 22 21 23 5 83 (nil) [0 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":293:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 25 24 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":293:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 28 25 29 5 (clobber (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
(insn 29 28 32 5 (clobber (reg:SI 113 [ <retval> ])) "vid.c":294:1 -1
     (nil))
(insn 32 29 27 5 (const_int 0 [0]) "vid.c":294:1 311 {nop}
     (nil))
(insn 27 32 30 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":294:1 253 {*arm_movsi_insn}
     (nil))
(insn 30 27 0 5 (use (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function krpu (krpu, funcdef_no=17, decl_uid=4605, cgraph_uid=18, symbol_order=23)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":297:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":299:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":299:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "vid.c":299:6 273 {arm_cond_branch}
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              3

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 8 13 3 85 (nil) [1 uses])
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 3 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":301:10 253 {*arm_movsi_insn}
     (nil))
(insn 15 14 16 3 (set (reg/f:SI 113 [ tab.54_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":301:10 253 {*arm_movsi_insn}
     (nil))
(insn 16 15 17 3 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 122)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 3 (parallel [
            (set (reg:SI 121)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 120))
                            (zero_extend:DI (reg:SI 122)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":301:13 72 {*umull_high}
     (nil))
(insn 19 18 20 3 (set (reg:SI 114 [ _2 ])
        (lshiftrt:SI (reg:SI 121)
            (const_int 3 [0x3]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 120)
            (const_int 10 [0xa]))
        (nil)))
(insn 20 19 21 3 (set (reg:SI 123)
        (reg:SI 114 [ _2 ])) "vid.c":301:13 253 {*arm_movsi_insn}
     (nil))
(insn 21 20 22 3 (set (reg:SI 123)
        (ashift:SI (reg:SI 123)
            (const_int 2 [0x2]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (nil))
(insn 22 21 23 3 (set (reg:SI 123)
        (plus:SI (reg:SI 123)
            (reg:SI 114 [ _2 ]))) "vid.c":301:13 7 {*arm_addsi3}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 5 [0x5]))
        (nil)))
(insn 23 22 24 3 (set (reg:SI 124)
        (ashift:SI (reg:SI 123)
            (const_int 1 [0x1]))) "vid.c":301:13 147 {*arm_shiftsi3}
     (nil))
(insn 24 23 25 3 (set (reg:SI 123)
        (reg:SI 124)) "vid.c":301:13 253 {*arm_movsi_insn}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 10 [0xa]))
        (nil)))
(insn 25 24 26 3 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 120)
            (reg:SI 123))) "vid.c":301:13 45 {*arm_subsi3_insn}
     (nil))
(insn 26 25 27 3 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.54_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":301:10 7 {*arm_addsi3}
     (nil))
(insn 27 26 28 3 (set (reg:QI 125)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":301:5 263 {*arm_movqi_insn}
     (nil))
(insn 28 27 29 3 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 125)) "vid.c":301:5 263 {*arm_movqi_insn}
     (nil))
(insn 29 28 30 3 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 30 29 31 3 (set (reg:SI 128)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 3 (parallel [
            (set (reg:SI 127)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 126))
                            (zero_extend:DI (reg:SI 128)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":302:3 72 {*umull_high}
     (nil))
(insn 32 31 33 3 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 127)
            (const_int 3 [0x3]))) "vid.c":302:3 147 {*arm_shiftsi3}
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 126)
            (const_int 10 [0xa]))
        (nil)))
(insn 33 32 34 3 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":302:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 34 33 35 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":302:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 35 34 36 3 (set (reg:SI 129)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":303:3 175 {*arm_zero_extendqisi2}
     (nil))
(insn 36 35 37 3 (set (reg:SI 0 r0)
        (reg:SI 129)) "vid.c":303:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 37 36 38 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":303:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;;              3 (FALLTHRU)
(code_label 38 37 39 4 86 (nil) [0 uses])
(note 39 38 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 42 39 43 4 (clobber (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
(insn 43 42 41 4 (clobber (reg:SI 117 [ <retval> ])) "vid.c":304:1 -1
     (nil))
(insn 41 43 44 4 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":304:1 253 {*arm_movsi_insn}
     (nil))
(insn 44 41 0 4 (use (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintu (kprintu, funcdef_no=18, decl_uid=4609, cgraph_uid=19, symbol_order=24)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":307:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":308:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":308:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "vid.c":308:6 273 {arm_cond_branch}
     (nil)
 -> 14)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":309:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 11 10 14 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":309:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 [always]  (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 14 11 15 4 91 (nil) [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":312:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":312:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       3 [always]  (FALLTHRU)
;;              4 (FALLTHRU)
(code_label 18 17 19 5 92 (nil) [0 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":313:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 21 20 24 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":313:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 24 21 25 5 (clobber (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
(insn 25 24 28 5 (clobber (reg:SI 113 [ <retval> ])) "vid.c":314:1 -1
     (nil))
(insn 28 25 23 5 (const_int 0 [0]) "vid.c":314:1 311 {nop}
     (nil))
(insn 23 28 26 5 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":314:1 253 {*arm_movsi_insn}
     (nil))
(insn 26 23 0 5 (use (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprinti (kprinti, funcdef_no=19, decl_uid=4612, cgraph_uid=20, symbol_order=25)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":317:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":318:6 253 {*arm_movsi_insn}
     (nil))
(insn 9 8 10 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115)
            (const_int 0 [0]))) "vid.c":318:6 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "vid.c":318:6 273 {arm_cond_branch}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4

;; basic block 3, loop depth 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":319:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 13 12 14 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":319:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 14 13 15 3 (set (reg:SI 0 r0)
        (const_int 45 [0x2d])) "vid.c":320:5 253 {*arm_movsi_insn}
     (nil))
(call_insn 15 14 16 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":320:5 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 16 15 17 3 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":321:7 253 {*arm_movsi_insn}
     (nil))
(insn 17 16 18 3 (set (reg:SI 116)
        (neg:SI (reg:SI 117))) "vid.c":321:7 164 {*arm_negsi2}
     (nil))
(insn 18 17 19 3 (set (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 116)) "vid.c":321:7 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU)

;; basic block 4, loop depth 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              3 (FALLTHRU)
(code_label 19 18 20 4 94 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg:SI 113 [ x.55_1 ])
        (mem/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":323:3 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ x.55_1 ])) "vid.c":323:3 253 {*arm_movsi_insn}
     (nil))
(call_insn 23 22 26 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":323:3 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 26 23 27 4 (clobber (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
(insn 27 26 30 4 (clobber (reg:SI 114 [ <retval> ])) "vid.c":324:1 -1
     (nil))
(insn 30 27 25 4 (const_int 0 [0]) "vid.c":324:1 311 {nop}
     (nil))
(insn 25 30 28 4 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":324:1 253 {*arm_movsi_insn}
     (nil))
(insn 28 25 0 4 (use (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintf (kprintf, funcdef_no=20, decl_uid=4615, cgraph_uid=21, symbol_order=26)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 129)
        (mem/f/c:SI (plus:SI (reg/f:SI 103 afp)
                (const_int 4 [0x4])) [5 fmt+0 S4 A64])) "vid.c":330:6 253 {*arm_movsi_insn}
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg/f:SI 129)) "vid.c":330:6 253 {*arm_movsi_insn}
     (nil))
(insn 7 6 8 2 (set (reg:SI 130)
        (plus:SI (reg/f:SI 103 afp)
            (const_int 8 [0x8]))) "vid.c":331:6 7 {*arm_addsi3}
     (nil))
(insn 8 7 102 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 130)) "vid.c":331:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       14
(code_label 102 8 11 3 106 (nil) [1 uses])
(note 11 102 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 3 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":334:9 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_17+0 S1 A8]))) "vid.c":334:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 14 13 15 3 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "vid.c":334:8 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "vid.c":334:8 273 {arm_cond_branch}
     (nil)
 -> 35)
;;  succ:       4 (FALLTHRU)
;;              7

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       3 (FALLTHRU)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 4 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":335:7 253 {*arm_movsi_insn}
     (nil))
(insn 18 17 19 4 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 132) [0 *cp_17+0 S1 A8]))) "vid.c":335:7 175 {*arm_zero_extendqisi2}
     (nil))
(insn 19 18 20 4 (set (reg:SI 0 r0)
        (reg:SI 114 [ _2 ])) "vid.c":335:7 253 {*arm_movsi_insn}
     (nil))
(call_insn 20 19 21 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":335:7 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 21 20 22 4 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":336:11 253 {*arm_movsi_insn}
     (nil))
(insn 22 21 23 4 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 133) [0 *cp_17+0 S1 A8]))) "vid.c":336:11 175 {*arm_zero_extendqisi2}
     (nil))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "vid.c":336:10 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":336:10 273 {arm_cond_branch}
     (nil)
 -> 28)
;;  succ:       5 (FALLTHRU)
;;              6

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg:SI 0 r0)
        (const_int 13 [0xd])) "vid.c":337:2 253 {*arm_movsi_insn}
     (nil))
(call_insn 27 26 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":337:2 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 1, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 28 27 29 6 98 (nil) [1 uses])
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 6 (set (reg:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":338:9 253 {*arm_movsi_insn}
     (nil))
(insn 31 30 32 6 (set (reg:SI 134)
        (plus:SI (reg:SI 135)
            (const_int 1 [0x1]))) "vid.c":338:9 7 {*arm_addsi3}
     (nil))
(insn 32 31 35 6 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 134)) "vid.c":338:9 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 [always]  (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       3
(code_label 35 32 36 7 97 (nil) [1 uses])
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 7 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":341:7 253 {*arm_movsi_insn}
     (nil))
(insn 38 37 39 7 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 1 [0x1]))) "vid.c":341:7 7 {*arm_addsi3}
     (nil))
(insn 39 38 40 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 136)) "vid.c":341:7 253 {*arm_movsi_insn}
     (nil))
(insn 40 39 41 7 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":342:12 253 {*arm_movsi_insn}
     (nil))
(insn 41 40 42 7 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 138) [0 *cp_24+0 S1 A8]))) "vid.c":342:12 175 {*arm_zero_extendqisi2}
     (nil))
(insn 42 41 43 7 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "vid.c":342:12 253 {*arm_movsi_insn}
     (nil))
(insn 43 42 44 7 (set (reg:SI 139)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "vid.c":342:5 7 {*arm_addsi3}
     (nil))
(jump_insn 44 43 48 7 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 139)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 139)
                                (const_int 4 [0x4]))
                            (label_ref:SI 45)) [0  S4 A32])
                    (label_ref:SI 90)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 45))
        ]) "vid.c":342:5 308 {*arm_casesi_internal}
     (insn_list:REG_LABEL_TARGET 90 (nil))
 -> 45)
;;  succ:       13 [63.0% (adjusted)] 
;;              8 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [7.4% (adjusted)] 
(code_label 48 44 49 8 105 (nil) [1 uses])
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":343:27 253 {*arm_movsi_insn}
     (nil))
(insn 51 50 52 8 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 140) [3 *ip_16+0 S4 A32])) "vid.c":343:27 253 {*arm_movsi_insn}
     (nil))
(insn 52 51 53 8 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "vid.c":343:15 90 {*arm_andsi3_insn}
     (nil))
(insn 53 52 54 8 (set (reg:SI 0 r0)
        (reg:SI 119 [ _7 ])) "vid.c":343:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 54 53 57 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":343:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       13 [always]  (FALLTHRU)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [7.4% (adjusted)] 
(code_label 57 54 58 9 103 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":344:31 253 {*arm_movsi_insn}
     (nil))
(insn 60 59 61 9 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 141) [3 *ip_16+0 S4 A32])) "vid.c":344:31 253 {*arm_movsi_insn}
     (nil))
(insn 61 60 62 9 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "vid.c":344:15 253 {*arm_movsi_insn}
     (nil))
(insn 62 61 63 9 (set (reg:SI 0 r0)
        (reg/f:SI 121 [ _9 ])) "vid.c":344:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 63 62 66 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprints") [flags 0x3]  <function_decl 0x7fd417d04100 kprints>) [0 kprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":344:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       13 [always]  (FALLTHRU)

;; basic block 10, loop depth 1, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [7.4% (adjusted)] 
(code_label 66 63 67 10 104 (nil) [1 uses])
(note 67 66 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 10 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(insn 69 68 70 10 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 142) [3 *ip_16+0 S4 A32])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(insn 70 69 71 10 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":345:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 71 70 74 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprinti") [flags 0x3]  <function_decl 0x7fd417d04d00 kprinti>) [0 kprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":345:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       13 [always]  (FALLTHRU)

;; basic block 11, loop depth 1, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [7.4% (adjusted)] 
(code_label 74 71 75 11 102 (nil) [1 uses])
(note 75 74 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 11 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":346:23 253 {*arm_movsi_insn}
     (nil))
(insn 77 76 78 11 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 143) [3 *ip_16+0 S4 A32])) "vid.c":346:23 253 {*arm_movsi_insn}
     (nil))
(insn 78 77 79 11 (set (reg:SI 124 [ _12 ])
        (reg:SI 123 [ _11 ])) "vid.c":346:15 253 {*arm_movsi_insn}
     (nil))
(insn 79 78 80 11 (set (reg:SI 0 r0)
        (reg:SI 124 [ _12 ])) "vid.c":346:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 80 79 83 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":346:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       13 [always]  (FALLTHRU)

;; basic block 12, loop depth 1, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [7.4% (adjusted)] 
(code_label 83 80 84 12 100 (nil) [1 uses])
(note 84 83 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 12 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":347:23 253 {*arm_movsi_insn}
     (nil))
(insn 86 85 87 12 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 144) [3 *ip_16+0 S4 A32])) "vid.c":347:23 253 {*arm_movsi_insn}
     (nil))
(insn 87 86 88 12 (set (reg:SI 126 [ _14 ])
        (reg:SI 125 [ _13 ])) "vid.c":347:15 253 {*arm_movsi_insn}
     (nil))
(insn 88 87 89 12 (set (reg:SI 0 r0)
        (reg:SI 126 [ _14 ])) "vid.c":347:15 253 {*arm_movsi_insn}
     (nil))
(call_insn 89 88 90 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintx") [flags 0x3]  <function_decl 0x7fd417d04700 kprintx>) [0 kprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":347:15 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 1, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 [63.0% (adjusted)] 
;;              8 [always]  (FALLTHRU)
;;              9 [always]  (FALLTHRU)
;;              10 [always]  (FALLTHRU)
;;              11 [always]  (FALLTHRU)
;;              12 (FALLTHRU)
(code_label 90 89 91 13 99 (nil) [18 uses])
(note 91 90 92 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 13 (set (reg:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":349:7 253 {*arm_movsi_insn}
     (nil))
(insn 93 92 94 13 (set (reg:SI 145)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) "vid.c":349:7 7 {*arm_addsi3}
     (nil))
(insn 94 93 95 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 145)) "vid.c":349:7 253 {*arm_movsi_insn}
     (nil))
(insn 95 94 96 13 (set (reg:SI 148)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":349:13 253 {*arm_movsi_insn}
     (nil))
(insn 96 95 97 13 (set (reg:SI 147)
        (plus:SI (reg:SI 148)
            (const_int 4 [0x4]))) "vid.c":349:13 7 {*arm_addsi3}
     (nil))
(insn 97 96 98 13 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 147)) "vid.c":349:13 253 {*arm_movsi_insn}
     (nil))
;;  succ:       14 (FALLTHRU,DFS_BACK)

;; basic block 14, loop depth 1, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              6 [always]  (FALLTHRU)
;;              13 (FALLTHRU,DFS_BACK)
(code_label 98 97 99 14 96 (nil) [0 uses])
(note 99 98 100 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 14 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":333:9 253 {*arm_movsi_insn}
     (nil))
(insn 101 100 103 14 (set (reg:SI 127 [ _15 ])
        (zero_extend:SI (mem:QI (reg/f:SI 149) [0 *cp_17+0 S1 A8]))) "vid.c":333:9 175 {*arm_zero_extendqisi2}
     (nil))
(insn 103 101 104 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 127 [ _15 ])
            (const_int 0 [0]))) "vid.c":333:9 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 104 103 105 14 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "vid.c":333:9 273 {arm_cond_branch}
     (nil)
 -> 102)
;;  succ:       3
;;              15 (FALLTHRU)

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       14 (FALLTHRU)
(note 105 104 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 108 105 109 15 (clobber (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
(insn 109 108 112 15 (clobber (reg:SI 128 [ <retval> ])) "vid.c":351:1 -1
     (nil))
(insn 112 109 107 15 (const_int 0 [0]) "vid.c":351:1 311 {nop}
     (nil))
(insn 107 112 110 15 (set (reg/i:SI 0 r0)
        (reg:SI 128 [ <retval> ])) "vid.c":351:1 253 {*arm_movsi_insn}
     (nil))
(insn 110 107 0 15 (use (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function stestring (stestring, funcdef_no=21, decl_uid=4629, cgraph_uid=22, symbol_order=27)

;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":354:1 253 {*arm_movsi_insn}
     (nil))
(note 3 2 21 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       4 [always]  (FALLTHRU)

;; basic block 3, loop depth 1, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 21 3 8 3 109 (nil) [1 uses])
(note 8 21 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:SI 115)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":357:8 253 {*arm_movsi_insn}
     (nil))
(insn 10 9 11 3 (set (reg:QI 116)
        (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "vid.c":357:8 263 {*arm_movqi_insn}
     (nil))
(insn 11 10 12 3 (set (mem:QI (reg/f:SI 115) [0 *s_2+0 S1 A8])
        (reg:QI 116)) "vid.c":357:8 263 {*arm_movqi_insn}
     (nil))
(insn 12 11 13 3 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":358:6 253 {*arm_movsi_insn}
     (nil))
(insn 13 12 14 3 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":358:6 7 {*arm_addsi3}
     (nil))
(insn 14 13 15 3 (set (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":358:6 253 {*arm_movsi_insn}
     (nil))
;;  succ:       4 (FALLTHRU,DFS_BACK)

;; basic block 4, loop depth 1, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 [always]  (FALLTHRU)
;;              3 (FALLTHRU,DFS_BACK)
(code_label 15 14 16 4 108 (nil) [0 uses])
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x41]  <function_decl 0x7fd417d0a300 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":356:12 291 {*call_value_symbol}
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 18 17 19 4 (set (reg:SI 113 [ _1 ])
        (reg:SI 0 r0)) "vid.c":356:12 253 {*arm_movsi_insn}
     (nil))
(insn 19 18 20 4 (set (reg:QI 119)
        (subreg:QI (reg:SI 113 [ _1 ]) 0)) "vid.c":356:11 263 {*arm_movqi_insn}
     (nil))
(insn 20 19 22 4 (set (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 119)) "vid.c":356:11 263 {*arm_movqi_insn}
     (nil))
(insn 22 20 23 4 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 102 sfp)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":356:21 175 {*arm_zero_extendqisi2}
     (nil))
(insn 23 22 24 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "vid.c":356:21 268 {*arm_cmpsi_insn}
     (nil))
(jump_insn 24 23 25 4 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "vid.c":356:21 273 {arm_cond_branch}
     (nil)
 -> 21)
;;  succ:       3
;;              5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 25 24 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 5 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 102 sfp)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 27 26 28 5 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":360:6 253 {*arm_movsi_insn}
     (nil))
(insn 28 27 29 5 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "vid.c":360:6 263 {*arm_movqi_insn}
     (nil))
(insn 29 28 32 5 (set (mem:QI (reg/f:SI 121) [0 *s_2+0 S1 A8])
        (reg:QI 123)) "vid.c":360:6 263 {*arm_movqi_insn}
     (nil))
(insn 32 29 33 5 (clobber (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
(insn 33 32 36 5 (clobber (reg:SI 114 [ <retval> ])) "vid.c":361:1 -1
     (nil))
(insn 36 33 31 5 (const_int 0 [0]) "vid.c":361:1 311 {nop}
     (nil))
(insn 31 36 34 5 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":361:1 253 {*arm_movsi_insn}
     (nil))
(insn 34 31 0 5 (use (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

