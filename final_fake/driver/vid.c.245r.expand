
;; Function fbuf_init (fbuf_init, funcdef_no=0, decl_uid=4480, cgraph_uid=1, symbol_order=6)

int fbuf_init ()
{
  int i;
  int x;
  volatile unsigned int * _1;
  volatile unsigned int * _2;
  volatile unsigned int * _3;
  volatile unsigned int * _4;
  volatile unsigned int * _5;
  volatile unsigned int * _6;
  volatile int * fb.0_7;
  unsigned int x.1_8;
  unsigned int _9;
  volatile int * _10;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  fb = 3145728B;
  font = &fonts0;
  _1 = 268435484B;
  *_1 ={v} 11383;
  _2 = 269615104B;
  *_2 ={v} 1059012508;
  _3 = 269615108B;
  *_3 ={v} 151740895;
  _4 = 269615112B;
  *_4 ={v} 108992512;
  _5 = 269615120B;
  *_5 ={v} 3145728;
  _6 = 269615128B;
  *_6 ={v} 2091;
  x_22 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  fb.0_7 = fb;
  x.1_8 = (unsigned int) x_11;
  _9 = x.1_8 * 4;
  _10 = fb.0_7 + _9;
  *_10 ={v} 0;
  x_25 = x_11 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # x_11 = PHI <x_22(2), x_25(3)>
  if (x_11 <= 307199)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  cursor = 127;
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (fb.0_7 - 7 )
Partition 8 (x.1_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (x_11 - 11 )
Partition 22 (x_22 - 22 )
Partition 25 (x_25 - 25 )
Partition 26 (_26(D) - 26 )


Coalescible Partition map 

Partition 0, base 0 (x_11 - 11 22 25 )
Partition 3, base 1 (_26(D) - 26 )


Partition map 

Partition 0 (x_11 - 11 )
Partition 1 (x_22 - 22 )
Partition 2 (x_25 - 25 )
Partition 3 (_26(D) - 26 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) x_11 <-> x_22
(2147483646, 0) x_11 <-> x_25

Partition map 

Partition 0 (x_11 - 11 )
Partition 1 (x_22 - 22 )
Partition 2 (x_25 - 25 )
Partition 3 (_26(D) - 26 )

Coalesce list: (11)x_11 & (22)x_22 [map: 0, 1] : Success -> 0
Coalesce list: (11)x_11 & (25)x_25 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (fb.0_7 - 7 )
Partition 7 (x.1_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (x_11 - 11 22 25 )
Partition 11 (_26(D) - 26 )

int fbuf_init ()
{
  int i;
  int x;
  volatile unsigned int * _1;
  volatile unsigned int * _2;
  volatile unsigned int * _3;
  volatile unsigned int * _4;
  volatile unsigned int * _5;
  volatile unsigned int * _6;
  volatile int * fb.0_7;
  unsigned int x.1_8;
  unsigned int _9;
  volatile int * _10;
  int _26(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  fb = 3145728B;
  font = &fonts0;
  _1 = 268435484B;
  *_1 ={v} 11383;
  _2 = 269615104B;
  *_2 ={v} 1059012508;
  _3 = 269615108B;
  *_3 ={v} 151740895;
  _4 = 269615112B;
  *_4 ={v} 108992512;
  _5 = 269615120B;
  *_5 ={v} 3145728;
  _6 = 269615128B;
  *_6 ={v} 2091;
  x_22 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  fb.0_7 = fb;
  x.1_8 = (unsigned int) x_11;
  _9 = x.1_8 * 4;
  _10 = fb.0_7 + _9;
  *_10 ={v} 0;
  x_25 = x_11 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # x_11 = PHI <x_22(2), x_25(3)>
  if (x_11 <= 307199)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  cursor = 127;
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	x_11

;; Generating RTL for gimple basic block 2

;; fb = 3145728B;

(insn 5 4 6 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":53:6 -1
     (nil))

(insn 6 5 7 (set (reg:SI 125)
        (const_int 3145728 [0x300000])) "vid.c":53:6 -1
     (nil))

(insn 7 6 0 (set (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])
        (reg:SI 125)) "vid.c":53:6 -1
     (nil))

;; font = &fonts0;

(insn 8 7 9 (set (reg/f:SI 126)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":54:8 -1
     (nil))

(insn 9 8 10 (set (reg/f:SI 127)
        (symbol_ref:SI ("fonts0") [flags 0x2]  <var_decl 0x7fd417ce45a0 fonts0>)) "vid.c":54:8 -1
     (nil))

(insn 10 9 0 (set (mem/f/c:SI (reg/f:SI 126) [2 font+0 S4 A32])
        (reg/f:SI 127)) "vid.c":54:8 -1
     (nil))

;; _1 = 268435484B;

(insn 11 10 0 (set (reg/f:SI 113 [ _1 ])
        (const_int 268435484 [0x1000001c])) "vid.c":58:3 -1
     (nil))

;; *_1 ={v} 11383;

(insn 12 11 13 (set (reg:SI 128)
        (const_int 11383 [0x2c77])) "vid.c":58:42 -1
     (nil))

(insn 13 12 0 (set (mem/v:SI (reg/f:SI 113 [ _1 ]) [3 *_1+0 S4 A32])
        (reg:SI 128)) "vid.c":58:42 -1
     (nil))

;; _2 = 269615104B;

(insn 14 13 0 (set (reg/f:SI 114 [ _2 ])
        (const_int 269615104 [0x10120000])) "vid.c":59:3 -1
     (nil))

;; *_2 ={v} 1059012508;

(insn 15 14 16 (set (reg:SI 129)
        (const_int 1059012508 [0x3f1f3f9c])) "vid.c":59:42 -1
     (nil))

(insn 16 15 0 (set (mem/v:SI (reg/f:SI 114 [ _2 ]) [3 *_2+0 S4 A32])
        (reg:SI 129)) "vid.c":59:42 -1
     (nil))

;; _3 = 269615108B;

(insn 17 16 0 (set (reg/f:SI 115 [ _3 ])
        (const_int 269615108 [0x10120004])) "vid.c":60:3 -1
     (nil))

;; *_3 ={v} 151740895;

(insn 18 17 19 (set (reg:SI 130)
        (const_int 151740895 [0x90b61df])) "vid.c":60:42 -1
     (nil))

(insn 19 18 0 (set (mem/v:SI (reg/f:SI 115 [ _3 ]) [3 *_3+0 S4 A32])
        (reg:SI 130)) "vid.c":60:42 -1
     (nil))

;; _4 = 269615112B;

(insn 20 19 0 (set (reg/f:SI 116 [ _4 ])
        (const_int 269615112 [0x10120008])) "vid.c":61:3 -1
     (nil))

;; *_4 ={v} 108992512;

(insn 21 20 22 (set (reg:SI 131)
        (const_int 108992512 [0x67f1800])) "vid.c":61:42 -1
     (nil))

(insn 22 21 0 (set (mem/v:SI (reg/f:SI 116 [ _4 ]) [3 *_4+0 S4 A32])
        (reg:SI 131)) "vid.c":61:42 -1
     (nil))

;; _5 = 269615120B;

(insn 23 22 0 (set (reg/f:SI 117 [ _5 ])
        (const_int 269615120 [0x10120010])) "vid.c":65:3 -1
     (nil))

;; *_5 ={v} 3145728;

(insn 24 23 25 (set (reg:SI 132)
        (const_int 3145728 [0x300000])) "vid.c":65:42 -1
     (nil))

(insn 25 24 0 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 132)) "vid.c":65:42 -1
     (nil))

;; _6 = 269615128B;

(insn 26 25 0 (set (reg/f:SI 118 [ _6 ])
        (const_int 269615128 [0x10120018])) "vid.c":66:3 -1
     (nil))

;; *_6 ={v} 2091;

(insn 27 26 28 (set (reg:SI 133)
        (const_int 2091 [0x82b])) "vid.c":66:42 -1
     (nil))

(insn 28 27 0 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 133)) "vid.c":66:42 -1
     (nil))

;; x_22 = 0;

(insn 29 28 30 (set (reg:SI 134)
        (const_int 0 [0])) "vid.c":89:9 -1
     (nil))

(insn 30 29 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 134)) "vid.c":89:9 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; fb.0_7 = fb;

(insn 34 33 35 (set (reg/f:SI 135)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":90:7 -1
     (nil))

(insn 35 34 0 (set (reg/f:SI 119 [ fb.0_7 ])
        (mem/f/c:SI (reg/f:SI 135) [1 fb+0 S4 A32])) "vid.c":90:7 -1
     (nil))

;; x.1_8 = (unsigned int) x_11;

(insn 36 35 0 (set (reg:SI 120 [ x.1_8 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":90:7 -1
     (nil))

;; _9 = x.1_8 * 4;

(insn 37 36 0 (set (reg:SI 121 [ _9 ])
        (ashift:SI (reg:SI 120 [ x.1_8 ])
            (const_int 2 [0x2]))) "vid.c":90:7 -1
     (nil))

;; _10 = fb.0_7 + _9;

(insn 38 37 0 (set (reg/f:SI 122 [ _10 ])
        (plus:SI (reg/f:SI 119 [ fb.0_7 ])
            (reg:SI 121 [ _9 ]))) "vid.c":90:7 -1
     (nil))

;; *_10 ={v} 0;

(insn 39 38 40 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":90:11 -1
     (nil))

(insn 40 39 0 (set (mem/v:SI (reg/f:SI 122 [ _10 ]) [3 *_10+0 S4 A32])
        (reg:SI 136)) "vid.c":90:11 -1
     (nil))

;; x_25 = x_11 + 1;

(insn 41 40 42 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:25 -1
     (nil))

(insn 42 41 43 (set (reg:SI 137)
        (plus:SI (reg:SI 138)
            (const_int 1 [0x1]))) "vid.c":89:25 -1
     (nil))

(insn 43 42 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 137)) "vid.c":89:25 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 44 43 45 2 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; if (x_11 <= 307199)

(insn 49 45 50 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:14 -1
     (nil))

(insn 50 49 51 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139)
            (const_int 307200 [0x4b000]))) "vid.c":89:14 -1
     (nil))

(jump_insn 51 50 0 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "vid.c":89:14 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; cursor = 127;

(insn 53 52 54 (set (reg/f:SI 140)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":91:10 -1
     (nil))

(insn 54 53 55 (set (reg:SI 141)
        (const_int 127 [0x7f])) "vid.c":91:10 -1
     (nil))

(insn 55 54 56 (set (reg:QI 142)
        (subreg:QI (reg:SI 141) 0)) "vid.c":91:10 -1
     (nil))

(insn 56 55 0 (set (mem/c:QI (reg/f:SI 140) [0 cursor+0 S1 A8])
        (reg:QI 142)) "vid.c":91:10 -1
     (nil))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":53:6 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 125)
        (const_int 3145728 [0x300000])) "vid.c":53:6 -1
     (nil))
(insn 7 6 8 2 (set (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])
        (reg:SI 125)) "vid.c":53:6 -1
     (nil))
(insn 8 7 9 2 (set (reg/f:SI 126)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":54:8 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("fonts0") [flags 0x2]  <var_decl 0x7fd417ce45a0 fonts0>)) "vid.c":54:8 -1
     (nil))
(insn 10 9 11 2 (set (mem/f/c:SI (reg/f:SI 126) [2 font+0 S4 A32])
        (reg/f:SI 127)) "vid.c":54:8 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ _1 ])
        (const_int 268435484 [0x1000001c])) "vid.c":58:3 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 128)
        (const_int 11383 [0x2c77])) "vid.c":58:42 -1
     (nil))
(insn 13 12 14 2 (set (mem/v:SI (reg/f:SI 113 [ _1 ]) [3 *_1+0 S4 A32])
        (reg:SI 128)) "vid.c":58:42 -1
     (nil))
(insn 14 13 15 2 (set (reg/f:SI 114 [ _2 ])
        (const_int 269615104 [0x10120000])) "vid.c":59:3 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 129)
        (const_int 1059012508 [0x3f1f3f9c])) "vid.c":59:42 -1
     (nil))
(insn 16 15 17 2 (set (mem/v:SI (reg/f:SI 114 [ _2 ]) [3 *_2+0 S4 A32])
        (reg:SI 129)) "vid.c":59:42 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 115 [ _3 ])
        (const_int 269615108 [0x10120004])) "vid.c":60:3 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 130)
        (const_int 151740895 [0x90b61df])) "vid.c":60:42 -1
     (nil))
(insn 19 18 20 2 (set (mem/v:SI (reg/f:SI 115 [ _3 ]) [3 *_3+0 S4 A32])
        (reg:SI 130)) "vid.c":60:42 -1
     (nil))
(insn 20 19 21 2 (set (reg/f:SI 116 [ _4 ])
        (const_int 269615112 [0x10120008])) "vid.c":61:3 -1
     (nil))
(insn 21 20 22 2 (set (reg:SI 131)
        (const_int 108992512 [0x67f1800])) "vid.c":61:42 -1
     (nil))
(insn 22 21 23 2 (set (mem/v:SI (reg/f:SI 116 [ _4 ]) [3 *_4+0 S4 A32])
        (reg:SI 131)) "vid.c":61:42 -1
     (nil))
(insn 23 22 24 2 (set (reg/f:SI 117 [ _5 ])
        (const_int 269615120 [0x10120010])) "vid.c":65:3 -1
     (nil))
(insn 24 23 25 2 (set (reg:SI 132)
        (const_int 3145728 [0x300000])) "vid.c":65:42 -1
     (nil))
(insn 25 24 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 132)) "vid.c":65:42 -1
     (nil))
(insn 26 25 27 2 (set (reg/f:SI 118 [ _6 ])
        (const_int 269615128 [0x10120018])) "vid.c":66:3 -1
     (nil))
(insn 27 26 28 2 (set (reg:SI 133)
        (const_int 2091 [0x82b])) "vid.c":66:42 -1
     (nil))
(insn 28 27 29 2 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 133)) "vid.c":66:42 -1
     (nil))
(insn 29 28 30 2 (set (reg:SI 134)
        (const_int 0 [0])) "vid.c":89:9 -1
     (nil))
(insn 30 29 31 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 134)) "vid.c":89:9 -1
     (nil))
(jump_insn 31 30 32 2 (set (pc)
        (label_ref 44)) "vid.c":89:3 -1
     (nil)
 -> 44)
;;  succ:       5

(barrier 32 31 46)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 46 32 33 4 3 (nil) [1 uses])
(note 33 46 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/f:SI 135)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":90:7 -1
     (nil))
(insn 35 34 36 4 (set (reg/f:SI 119 [ fb.0_7 ])
        (mem/f/c:SI (reg/f:SI 135) [1 fb+0 S4 A32])) "vid.c":90:7 -1
     (nil))
(insn 36 35 37 4 (set (reg:SI 120 [ x.1_8 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":90:7 -1
     (nil))
(insn 37 36 38 4 (set (reg:SI 121 [ _9 ])
        (ashift:SI (reg:SI 120 [ x.1_8 ])
            (const_int 2 [0x2]))) "vid.c":90:7 -1
     (nil))
(insn 38 37 39 4 (set (reg/f:SI 122 [ _10 ])
        (plus:SI (reg/f:SI 119 [ fb.0_7 ])
            (reg:SI 121 [ _9 ]))) "vid.c":90:7 -1
     (nil))
(insn 39 38 40 4 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":90:11 -1
     (nil))
(insn 40 39 41 4 (set (mem/v:SI (reg/f:SI 122 [ _10 ]) [3 *_10+0 S4 A32])
        (reg:SI 136)) "vid.c":90:11 -1
     (nil))
(insn 41 40 42 4 (set (reg:SI 138)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:25 -1
     (nil))
(insn 42 41 43 4 (set (reg:SI 137)
        (plus:SI (reg:SI 138)
            (const_int 1 [0x1]))) "vid.c":89:25 -1
     (nil))
(insn 43 42 44 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 137)) "vid.c":89:25 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 44 43 45 5 2 (nil) [1 uses])
(note 45 44 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 49 45 50 5 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":89:14 -1
     (nil))
(insn 50 49 51 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139)
            (const_int 307200 [0x4b000]))) "vid.c":89:14 -1
     (nil))
(jump_insn 51 50 52 5 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) "vid.c":89:14 -1
     (nil)
 -> 46)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 52 51 53 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 6 (set (reg/f:SI 140)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":91:10 -1
     (nil))
(insn 54 53 55 6 (set (reg:SI 141)
        (const_int 127 [0x7f])) "vid.c":91:10 -1
     (nil))
(insn 55 54 56 6 (set (reg:QI 142)
        (subreg:QI (reg:SI 141) 0)) "vid.c":91:10 -1
     (nil))
(insn 56 55 59 6 (set (mem/c:QI (reg/f:SI 140) [0 cursor+0 S1 A8])
        (reg:QI 142)) "vid.c":91:10 -1
     (nil))
(insn 59 56 60 6 (clobber (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
(insn 60 59 63 6 (clobber (reg:SI 123 [ <retval> ])) "vid.c":92:1 -1
     (nil))
(insn 63 60 58 6 (const_int 0 [0]) "vid.c":92:1 -1
     (nil))
(insn 58 63 61 6 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":92:1 -1
     (nil))
(insn 61 58 0 6 (use (reg/i:SI 0 r0)) "vid.c":92:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function clrpix (clrpix, funcdef_no=1, decl_uid=4490, cgraph_uid=2, symbol_order=7)

int clrpix (int x, int y)
{
  int pix;
  int _1;
  volatile int * fb.2_2;
  unsigned int pix.3_3;
  unsigned int _4;
  volatile int * _5;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = y_6(D) * 640;
  pix_8 = x_7(D) + _1;
  fb.2_2 = fb;
  pix.3_3 = (unsigned int) pix_8;
  _4 = pix.3_3 * 4;
  _5 = fb.2_2 + _4;
  *_5 ={v} 0;
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (fb.2_2 - 2 )
Partition 3 (pix.3_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (y_6(D) - 6 )
Partition 7 (x_7(D) - 7 )
Partition 8 (pix_8 - 8 )
Partition 11 (_11(D) - 11 )


Coalescible Partition map 

Partition 0, base 0 (y_6(D) - 6 )
Partition 1, base 1 (x_7(D) - 7 )
Partition 2, base 2 (_11(D) - 11 )


Partition map 

Partition 0 (y_6(D) - 6 )
Partition 1 (x_7(D) - 7 )
Partition 2 (_11(D) - 11 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (y_6(D) - 6 )
Partition 1 (x_7(D) - 7 )
Partition 2 (_11(D) - 11 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (fb.2_2 - 2 )
Partition 2 (pix.3_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (y_6(D) - 6 )
Partition 6 (x_7(D) - 7 )
Partition 7 (pix_8 - 8 )
Partition 8 (_11(D) - 11 )

int clrpix (int x, int y)
{
  int pix;
  int _1;
  volatile int * fb.2_2;
  unsigned int pix.3_3;
  unsigned int _4;
  volatile int * _5;
  int _11(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = y_6(D) * 640;
  pix_8 = x_7(D) + _1;
  fb.2_2 = fb;
  pix.3_3 = (unsigned int) pix_8;
  _4 = pix.3_3 * 4;
  _5 = fb.2_2 + _4;
  *_5 ={v} 0;
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	pix_8

;; Generating RTL for gimple basic block 2

;; _1 = y_6(D) * 640;

(insn 7 6 8 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":96:14 -1
     (nil))

(insn 8 7 9 (set (reg:SI 120)
        (reg:SI 119)) "vid.c":96:14 -1
     (nil))

(insn 9 8 10 (set (reg:SI 120)
        (ashift:SI (reg:SI 120)
            (const_int 2 [0x2]))) "vid.c":96:14 -1
     (nil))

(insn 10 9 11 (set (reg:SI 120)
        (plus:SI (reg:SI 120)
            (reg:SI 119))) "vid.c":96:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 5 [0x5]))
        (nil)))

(insn 11 10 12 (set (reg:SI 121)
        (ashift:SI (reg:SI 120)
            (const_int 7 [0x7]))) "vid.c":96:14 -1
     (nil))

(insn 12 11 13 (set (reg:SI 120)
        (reg:SI 121)) "vid.c":96:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 640 [0x280]))
        (nil)))

(insn 13 12 0 (set (reg:SI 113 [ _1 ])
        (reg:SI 120)) "vid.c":96:14 -1
     (nil))

;; pix_8 = x_7(D) + _1;

(insn 14 13 15 (set (reg:SI 123)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":96:7 -1
     (nil))

(insn 15 14 16 (set (reg:SI 122)
        (plus:SI (reg:SI 123)
            (reg:SI 113 [ _1 ]))) "vid.c":96:7 -1
     (nil))

(insn 16 15 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 122)) "vid.c":96:7 -1
     (nil))

;; fb.2_2 = fb;

(insn 17 16 18 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":97:5 -1
     (nil))

(insn 18 17 0 (set (reg/f:SI 114 [ fb.2_2 ])
        (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])) "vid.c":97:5 -1
     (nil))

;; pix.3_3 = (unsigned int) pix_8;

(insn 19 18 0 (set (reg:SI 115 [ pix.3_3 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":97:5 -1
     (nil))

;; _4 = pix.3_3 * 4;

(insn 20 19 0 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ pix.3_3 ])
            (const_int 2 [0x2]))) "vid.c":97:5 -1
     (nil))

;; _5 = fb.2_2 + _4;

(insn 21 20 0 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 114 [ fb.2_2 ])
            (reg:SI 116 [ _4 ]))) "vid.c":97:5 -1
     (nil))

;; *_5 ={v} 0;

(insn 22 21 23 (set (reg:SI 125)
        (const_int 0 [0])) "vid.c":97:11 -1
     (nil))

(insn 23 22 0 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 125)) "vid.c":97:11 -1
     (nil))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":95:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":95:1 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":96:14 -1
     (nil))
(insn 8 7 9 2 (set (reg:SI 120)
        (reg:SI 119)) "vid.c":96:14 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 120)
        (ashift:SI (reg:SI 120)
            (const_int 2 [0x2]))) "vid.c":96:14 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 120)
        (plus:SI (reg:SI 120)
            (reg:SI 119))) "vid.c":96:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 120)
            (const_int 7 [0x7]))) "vid.c":96:14 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 120)
        (reg:SI 121)) "vid.c":96:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 119)
            (const_int 640 [0x280]))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 120)) "vid.c":96:14 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 123)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":96:7 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 122)
        (plus:SI (reg:SI 123)
            (reg:SI 113 [ _1 ]))) "vid.c":96:7 -1
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 122)) "vid.c":96:7 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 124)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":97:5 -1
     (nil))
(insn 18 17 19 2 (set (reg/f:SI 114 [ fb.2_2 ])
        (mem/f/c:SI (reg/f:SI 124) [1 fb+0 S4 A32])) "vid.c":97:5 -1
     (nil))
(insn 19 18 20 2 (set (reg:SI 115 [ pix.3_3 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":97:5 -1
     (nil))
(insn 20 19 21 2 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ pix.3_3 ])
            (const_int 2 [0x2]))) "vid.c":97:5 -1
     (nil))
(insn 21 20 22 2 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 114 [ fb.2_2 ])
            (reg:SI 116 [ _4 ]))) "vid.c":97:5 -1
     (nil))
(insn 22 21 23 2 (set (reg:SI 125)
        (const_int 0 [0])) "vid.c":97:11 -1
     (nil))
(insn 23 22 26 2 (set (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])
        (reg:SI 125)) "vid.c":97:11 -1
     (nil))
(insn 26 23 27 2 (clobber (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
(insn 27 26 30 2 (clobber (reg:SI 118 [ <retval> ])) "vid.c":98:1 -1
     (nil))
(insn 30 27 25 2 (const_int 0 [0]) "vid.c":98:1 -1
     (nil))
(insn 25 30 28 2 (set (reg/i:SI 0 r0)
        (reg:SI 118 [ <retval> ])) "vid.c":98:1 -1
     (nil))
(insn 28 25 0 2 (use (reg/i:SI 0 r0)) "vid.c":98:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function setpix (setpix, funcdef_no=2, decl_uid=4495, cgraph_uid=3, symbol_order=8)

int setpix (int x, int y)
{
  int pix;
  int _1;
  int color.4_2;
  volatile int * fb.5_3;
  unsigned int pix.6_4;
  unsigned int _5;
  volatile int * _6;
  int color.7_7;
  volatile int * fb.8_8;
  unsigned int pix.9_9;
  unsigned int _10;
  volatile int * _11;
  int color.10_12;
  volatile int * fb.11_13;
  unsigned int pix.12_14;
  unsigned int _15;
  volatile int * _16;
  int color.13_17;
  volatile int * fb.14_18;
  unsigned int pix.15_19;
  unsigned int _20;
  volatile int * _21;
  int color.16_22;
  volatile int * fb.17_23;
  unsigned int pix.18_24;
  unsigned int _25;
  volatile int * _26;
  int color.19_27;
  volatile int * fb.20_28;
  unsigned int pix.21_29;
  unsigned int _30;
  volatile int * _31;
  int color.22_32;
  volatile int * fb.23_33;
  unsigned int pix.24_34;
  unsigned int _35;
  volatile int * _36;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = y_44(D) * 640;
  pix_46 = x_45(D) + _1;
  color.4_2 = color;
  if (color.4_2 == 6)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  fb.5_3 = fb;
  pix.6_4 = (unsigned int) pix_46;
  _5 = pix.6_4 * 4;
  _6 = fb.5_3 + _5;
  *_6 ={v} 255;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  color.7_7 = color;
  if (color.7_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  fb.8_8 = fb;
  pix.9_9 = (unsigned int) pix_46;
  _10 = pix.9_9 * 4;
  _11 = fb.8_8 + _10;
  *_11 ={v} 16777215;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  color.10_12 = color;
  if (color.10_12 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  fb.11_13 = fb;
  pix.12_14 = (unsigned int) pix_46;
  _15 = pix.12_14 * 4;
  _16 = fb.11_13 + _15;
  *_16 ={v} 65280;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       6
;;                7
  color.13_17 = color;
  if (color.13_17 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  fb.14_18 = fb;
  pix.15_19 = (unsigned int) pix_46;
  _20 = pix.15_19 * 4;
  _21 = fb.14_18 + _20;
  *_21 ={v} 16776960;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       8
;;                9
  color.16_22 = color;
  if (color.16_22 == 4)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  fb.17_23 = fb;
  pix.18_24 = (unsigned int) pix_46;
  _25 = pix.18_24 * 4;
  _26 = fb.17_23 + _25;
  *_26 ={v} 16711935;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       10
;;                11
  color.19_27 = color;
  if (color.19_27 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  fb.20_28 = fb;
  pix.21_29 = (unsigned int) pix_46;
  _30 = pix.21_29 * 4;
  _31 = fb.20_28 + _30;
  *_31 ={v} 65535;
;;    succ:       14

;;   basic block 14, loop depth 0
;;    pred:       12
;;                13
  color.22_32 = color;
  if (color.22_32 == 5)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  fb.23_33 = fb;
  pix.24_34 = (unsigned int) pix_46;
  _35 = pix.24_34 * 4;
  _36 = fb.23_33 + _35;
  *_36 ={v} 16777215;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       14
;;                15
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (color.4_2 - 2 )
Partition 3 (fb.5_3 - 3 )
Partition 4 (pix.6_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (color.7_7 - 7 )
Partition 8 (fb.8_8 - 8 )
Partition 9 (pix.9_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (color.10_12 - 12 )
Partition 13 (fb.11_13 - 13 )
Partition 14 (pix.12_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (color.13_17 - 17 )
Partition 18 (fb.14_18 - 18 )
Partition 19 (pix.15_19 - 19 )
Partition 20 (_20 - 20 )
Partition 21 (_21 - 21 )
Partition 22 (color.16_22 - 22 )
Partition 23 (fb.17_23 - 23 )
Partition 24 (pix.18_24 - 24 )
Partition 25 (_25 - 25 )
Partition 26 (_26 - 26 )
Partition 27 (color.19_27 - 27 )
Partition 28 (fb.20_28 - 28 )
Partition 29 (pix.21_29 - 29 )
Partition 30 (_30 - 30 )
Partition 31 (_31 - 31 )
Partition 32 (color.22_32 - 32 )
Partition 33 (fb.23_33 - 33 )
Partition 34 (pix.24_34 - 34 )
Partition 35 (_35 - 35 )
Partition 36 (_36 - 36 )
Partition 44 (y_44(D) - 44 )
Partition 45 (x_45(D) - 45 )
Partition 46 (pix_46 - 46 )
Partition 55 (_55(D) - 55 )


Coalescible Partition map 

Partition 0, base 0 (y_44(D) - 44 )
Partition 1, base 1 (x_45(D) - 45 )
Partition 2, base 2 (_55(D) - 55 )


Partition map 

Partition 0 (y_44(D) - 44 )
Partition 1 (x_45(D) - 45 )
Partition 2 (_55(D) - 55 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (y_44(D) - 44 )
Partition 1 (x_45(D) - 45 )
Partition 2 (_55(D) - 55 )

After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (color.4_2 - 2 )
Partition 2 (fb.5_3 - 3 )
Partition 3 (pix.6_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (color.7_7 - 7 )
Partition 7 (fb.8_8 - 8 )
Partition 8 (pix.9_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (color.10_12 - 12 )
Partition 12 (fb.11_13 - 13 )
Partition 13 (pix.12_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (color.13_17 - 17 )
Partition 17 (fb.14_18 - 18 )
Partition 18 (pix.15_19 - 19 )
Partition 19 (_20 - 20 )
Partition 20 (_21 - 21 )
Partition 21 (color.16_22 - 22 )
Partition 22 (fb.17_23 - 23 )
Partition 23 (pix.18_24 - 24 )
Partition 24 (_25 - 25 )
Partition 25 (_26 - 26 )
Partition 26 (color.19_27 - 27 )
Partition 27 (fb.20_28 - 28 )
Partition 28 (pix.21_29 - 29 )
Partition 29 (_30 - 30 )
Partition 30 (_31 - 31 )
Partition 31 (color.22_32 - 32 )
Partition 32 (fb.23_33 - 33 )
Partition 33 (pix.24_34 - 34 )
Partition 34 (_35 - 35 )
Partition 35 (_36 - 36 )
Partition 36 (y_44(D) - 44 )
Partition 37 (x_45(D) - 45 )
Partition 38 (pix_46 - 46 )
Partition 39 (_55(D) - 55 )

int setpix (int x, int y)
{
  int pix;
  int _1;
  int color.4_2;
  volatile int * fb.5_3;
  unsigned int pix.6_4;
  unsigned int _5;
  volatile int * _6;
  int color.7_7;
  volatile int * fb.8_8;
  unsigned int pix.9_9;
  unsigned int _10;
  volatile int * _11;
  int color.10_12;
  volatile int * fb.11_13;
  unsigned int pix.12_14;
  unsigned int _15;
  volatile int * _16;
  int color.13_17;
  volatile int * fb.14_18;
  unsigned int pix.15_19;
  unsigned int _20;
  volatile int * _21;
  int color.16_22;
  volatile int * fb.17_23;
  unsigned int pix.18_24;
  unsigned int _25;
  volatile int * _26;
  int color.19_27;
  volatile int * fb.20_28;
  unsigned int pix.21_29;
  unsigned int _30;
  volatile int * _31;
  int color.22_32;
  volatile int * fb.23_33;
  unsigned int pix.24_34;
  unsigned int _35;
  volatile int * _36;
  int _55(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  _1 = y_44(D) * 640;
  pix_46 = x_45(D) + _1;
  color.4_2 = color;
  if (color.4_2 == 6)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  fb.5_3 = fb;
  pix.6_4 = (unsigned int) pix_46;
  _5 = pix.6_4 * 4;
  _6 = fb.5_3 + _5;
  *_6 ={v} 255;
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  color.7_7 = color;
  if (color.7_7 == 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 0
;;    pred:       4
  fb.8_8 = fb;
  pix.9_9 = (unsigned int) pix_46;
  _10 = pix.9_9 * 4;
  _11 = fb.8_8 + _10;
  *_11 ={v} 16777215;
;;    succ:       6

;;   basic block 6, loop depth 0
;;    pred:       4
;;                5
  color.10_12 = color;
  if (color.10_12 == 1)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       7
;;                8

;;   basic block 7, loop depth 0
;;    pred:       6
  fb.11_13 = fb;
  pix.12_14 = (unsigned int) pix_46;
  _15 = pix.12_14 * 4;
  _16 = fb.11_13 + _15;
  *_16 ={v} 65280;
;;    succ:       8

;;   basic block 8, loop depth 0
;;    pred:       6
;;                7
  color.13_17 = color;
  if (color.13_17 == 2)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       9
;;                10

;;   basic block 9, loop depth 0
;;    pred:       8
  fb.14_18 = fb;
  pix.15_19 = (unsigned int) pix_46;
  _20 = pix.15_19 * 4;
  _21 = fb.14_18 + _20;
  *_21 ={v} 16776960;
;;    succ:       10

;;   basic block 10, loop depth 0
;;    pred:       8
;;                9
  color.16_22 = color;
  if (color.16_22 == 4)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       11
;;                12

;;   basic block 11, loop depth 0
;;    pred:       10
  fb.17_23 = fb;
  pix.18_24 = (unsigned int) pix_46;
  _25 = pix.18_24 * 4;
  _26 = fb.17_23 + _25;
  *_26 ={v} 16711935;
;;    succ:       12

;;   basic block 12, loop depth 0
;;    pred:       10
;;                11
  color.19_27 = color;
  if (color.19_27 == 3)
    goto <bb 13>; [INV]
  else
    goto <bb 14>; [INV]
;;    succ:       13
;;                14

;;   basic block 13, loop depth 0
;;    pred:       12
  fb.20_28 = fb;
  pix.21_29 = (unsigned int) pix_46;
  _30 = pix.21_29 * 4;
  _31 = fb.20_28 + _30;
  *_31 ={v} 65535;
;;    succ:       14

;;   basic block 14, loop depth 0
;;    pred:       12
;;                13
  color.22_32 = color;
  if (color.22_32 == 5)
    goto <bb 15>; [INV]
  else
    goto <bb 16>; [INV]
;;    succ:       15
;;                16

;;   basic block 15, loop depth 0
;;    pred:       14
  fb.23_33 = fb;
  pix.24_34 = (unsigned int) pix_46;
  _35 = pix.24_34 * 4;
  _36 = fb.23_33 + _35;
  *_36 ={v} 16777215;
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       14
;;                15
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	pix_46

;; Generating RTL for gimple basic block 2

;; _1 = y_44(D) * 640;

(insn 7 6 8 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":102:14 -1
     (nil))

(insn 8 7 9 (set (reg:SI 151)
        (reg:SI 150)) "vid.c":102:14 -1
     (nil))

(insn 9 8 10 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "vid.c":102:14 -1
     (nil))

(insn 10 9 11 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "vid.c":102:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 5 [0x5]))
        (nil)))

(insn 11 10 12 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 7 [0x7]))) "vid.c":102:14 -1
     (nil))

(insn 12 11 13 (set (reg:SI 151)
        (reg:SI 152)) "vid.c":102:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 640 [0x280]))
        (nil)))

(insn 13 12 0 (set (reg:SI 113 [ _1 ])
        (reg:SI 151)) "vid.c":102:14 -1
     (nil))

;; pix_46 = x_45(D) + _1;

(insn 14 13 15 (set (reg:SI 154)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":102:7 -1
     (nil))

(insn 15 14 16 (set (reg:SI 153)
        (plus:SI (reg:SI 154)
            (reg:SI 113 [ _1 ]))) "vid.c":102:7 -1
     (nil))

(insn 16 15 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 153)) "vid.c":102:7 -1
     (nil))

;; color.4_2 = color;

(insn 17 16 18 (set (reg/f:SI 155)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":103:12 -1
     (nil))

(insn 18 17 0 (set (reg:SI 114 [ color.4_2 ])
        (mem/c:SI (reg/f:SI 155) [3 color+0 S4 A32])) "vid.c":103:12 -1
     (nil))

;; if (color.4_2 == 6)

(insn 19 18 20 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ color.4_2 ])
            (const_int 6 [0x6]))) "vid.c":103:6 -1
     (nil))

(jump_insn 20 19 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":103:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; fb.5_3 = fb;

(insn 22 21 23 (set (reg/f:SI 156)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":104:8 -1
     (nil))

(insn 23 22 0 (set (reg/f:SI 115 [ fb.5_3 ])
        (mem/f/c:SI (reg/f:SI 156) [1 fb+0 S4 A32])) "vid.c":104:8 -1
     (nil))

;; pix.6_4 = (unsigned int) pix_46;

(insn 24 23 0 (set (reg:SI 116 [ pix.6_4 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":104:8 -1
     (nil))

;; _5 = pix.6_4 * 4;

(insn 25 24 0 (set (reg:SI 117 [ _5 ])
        (ashift:SI (reg:SI 116 [ pix.6_4 ])
            (const_int 2 [0x2]))) "vid.c":104:8 -1
     (nil))

;; _6 = fb.5_3 + _5;

(insn 26 25 0 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 115 [ fb.5_3 ])
            (reg:SI 117 [ _5 ]))) "vid.c":104:8 -1
     (nil))

;; *_6 ={v} 255;

(insn 27 26 28 (set (reg:SI 157)
        (const_int 255 [0xff])) "vid.c":104:14 -1
     (nil))

(insn 28 27 0 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 157)) "vid.c":104:14 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 29 28 30 10 (nil) [0 uses])

(note 30 29 0 NOTE_INSN_BASIC_BLOCK)

;; color.7_7 = color;

(insn 31 30 32 (set (reg/f:SI 158)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":105:12 -1
     (nil))

(insn 32 31 0 (set (reg:SI 119 [ color.7_7 ])
        (mem/c:SI (reg/f:SI 158) [3 color+0 S4 A32])) "vid.c":105:12 -1
     (nil))

;; if (color.7_7 == 0)

(insn 33 32 34 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ color.7_7 ])
            (const_int 0 [0]))) "vid.c":105:6 -1
     (nil))

(jump_insn 34 33 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":105:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; fb.8_8 = fb;

(insn 36 35 37 (set (reg/f:SI 159)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":106:7 -1
     (nil))

(insn 37 36 0 (set (reg/f:SI 120 [ fb.8_8 ])
        (mem/f/c:SI (reg/f:SI 159) [1 fb+0 S4 A32])) "vid.c":106:7 -1
     (nil))

;; pix.9_9 = (unsigned int) pix_46;

(insn 38 37 0 (set (reg:SI 121 [ pix.9_9 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":106:7 -1
     (nil))

;; _10 = pix.9_9 * 4;

(insn 39 38 0 (set (reg:SI 122 [ _10 ])
        (ashift:SI (reg:SI 121 [ pix.9_9 ])
            (const_int 2 [0x2]))) "vid.c":106:7 -1
     (nil))

;; _11 = fb.8_8 + _10;

(insn 40 39 0 (set (reg/f:SI 123 [ _11 ])
        (plus:SI (reg/f:SI 120 [ fb.8_8 ])
            (reg:SI 122 [ _10 ]))) "vid.c":106:7 -1
     (nil))

;; *_11 ={v} 16777215;

(insn 41 40 42 (set (reg:SI 160)
        (const_int 16777215 [0xffffff])) "vid.c":106:13 -1
     (nil))

(insn 42 41 0 (set (mem/v:SI (reg/f:SI 123 [ _11 ]) [3 *_11+0 S4 A32])
        (reg:SI 160)) "vid.c":106:13 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 43 42 44 11 (nil) [0 uses])

(note 44 43 0 NOTE_INSN_BASIC_BLOCK)

;; color.10_12 = color;

(insn 45 44 46 (set (reg/f:SI 161)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":107:12 -1
     (nil))

(insn 46 45 0 (set (reg:SI 124 [ color.10_12 ])
        (mem/c:SI (reg/f:SI 161) [3 color+0 S4 A32])) "vid.c":107:12 -1
     (nil))

;; if (color.10_12 == 1)

(insn 47 46 48 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124 [ color.10_12 ])
            (const_int 1 [0x1]))) "vid.c":107:6 -1
     (nil))

(jump_insn 48 47 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":107:6 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; fb.11_13 = fb;

(insn 50 49 51 (set (reg/f:SI 162)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":108:8 -1
     (nil))

(insn 51 50 0 (set (reg/f:SI 125 [ fb.11_13 ])
        (mem/f/c:SI (reg/f:SI 162) [1 fb+0 S4 A32])) "vid.c":108:8 -1
     (nil))

;; pix.12_14 = (unsigned int) pix_46;

(insn 52 51 0 (set (reg:SI 126 [ pix.12_14 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":108:8 -1
     (nil))

;; _15 = pix.12_14 * 4;

(insn 53 52 0 (set (reg:SI 127 [ _15 ])
        (ashift:SI (reg:SI 126 [ pix.12_14 ])
            (const_int 2 [0x2]))) "vid.c":108:8 -1
     (nil))

;; _16 = fb.11_13 + _15;

(insn 54 53 0 (set (reg/f:SI 128 [ _16 ])
        (plus:SI (reg/f:SI 125 [ fb.11_13 ])
            (reg:SI 127 [ _15 ]))) "vid.c":108:8 -1
     (nil))

;; *_16 ={v} 65280;

(insn 55 54 56 (set (reg:SI 163)
        (const_int 65280 [0xff00])) "vid.c":108:14 -1
     (nil))

(insn 56 55 0 (set (mem/v:SI (reg/f:SI 128 [ _16 ]) [3 *_16+0 S4 A32])
        (reg:SI 163)) "vid.c":108:14 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 57 56 58 12 (nil) [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; color.13_17 = color;

(insn 59 58 60 (set (reg/f:SI 164)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":109:12 -1
     (nil))

(insn 60 59 0 (set (reg:SI 129 [ color.13_17 ])
        (mem/c:SI (reg/f:SI 164) [3 color+0 S4 A32])) "vid.c":109:12 -1
     (nil))

;; if (color.13_17 == 2)

(insn 61 60 62 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ color.13_17 ])
            (const_int 2 [0x2]))) "vid.c":109:6 -1
     (nil))

(jump_insn 62 61 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":109:6 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; fb.14_18 = fb;

(insn 64 63 65 (set (reg/f:SI 165)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":110:8 -1
     (nil))

(insn 65 64 0 (set (reg/f:SI 130 [ fb.14_18 ])
        (mem/f/c:SI (reg/f:SI 165) [1 fb+0 S4 A32])) "vid.c":110:8 -1
     (nil))

;; pix.15_19 = (unsigned int) pix_46;

(insn 66 65 0 (set (reg:SI 131 [ pix.15_19 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":110:8 -1
     (nil))

;; _20 = pix.15_19 * 4;

(insn 67 66 0 (set (reg:SI 132 [ _20 ])
        (ashift:SI (reg:SI 131 [ pix.15_19 ])
            (const_int 2 [0x2]))) "vid.c":110:8 -1
     (nil))

;; _21 = fb.14_18 + _20;

(insn 68 67 0 (set (reg/f:SI 133 [ _21 ])
        (plus:SI (reg/f:SI 130 [ fb.14_18 ])
            (reg:SI 132 [ _20 ]))) "vid.c":110:8 -1
     (nil))

;; *_21 ={v} 16776960;

(insn 69 68 70 (set (reg:SI 166)
        (const_int 16776960 [0xffff00])) "vid.c":110:14 -1
     (nil))

(insn 70 69 0 (set (mem/v:SI (reg/f:SI 133 [ _21 ]) [3 *_21+0 S4 A32])
        (reg:SI 166)) "vid.c":110:14 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; 

(code_label 71 70 72 13 (nil) [0 uses])

(note 72 71 0 NOTE_INSN_BASIC_BLOCK)

;; color.16_22 = color;

(insn 73 72 74 (set (reg/f:SI 167)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":111:12 -1
     (nil))

(insn 74 73 0 (set (reg:SI 134 [ color.16_22 ])
        (mem/c:SI (reg/f:SI 167) [3 color+0 S4 A32])) "vid.c":111:12 -1
     (nil))

;; if (color.16_22 == 4)

(insn 75 74 76 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134 [ color.16_22 ])
            (const_int 4 [0x4]))) "vid.c":111:6 -1
     (nil))

(jump_insn 76 75 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":111:6 -1
     (nil))

;; Generating RTL for gimple basic block 11

;; fb.17_23 = fb;

(insn 78 77 79 (set (reg/f:SI 168)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":112:8 -1
     (nil))

(insn 79 78 0 (set (reg/f:SI 135 [ fb.17_23 ])
        (mem/f/c:SI (reg/f:SI 168) [1 fb+0 S4 A32])) "vid.c":112:8 -1
     (nil))

;; pix.18_24 = (unsigned int) pix_46;

(insn 80 79 0 (set (reg:SI 136 [ pix.18_24 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":112:8 -1
     (nil))

;; _25 = pix.18_24 * 4;

(insn 81 80 0 (set (reg:SI 137 [ _25 ])
        (ashift:SI (reg:SI 136 [ pix.18_24 ])
            (const_int 2 [0x2]))) "vid.c":112:8 -1
     (nil))

;; _26 = fb.17_23 + _25;

(insn 82 81 0 (set (reg/f:SI 138 [ _26 ])
        (plus:SI (reg/f:SI 135 [ fb.17_23 ])
            (reg:SI 137 [ _25 ]))) "vid.c":112:8 -1
     (nil))

;; *_26 ={v} 16711935;

(insn 83 82 84 (set (reg:SI 169)
        (const_int 16711935 [0xff00ff])) "vid.c":112:14 -1
     (nil))

(insn 84 83 0 (set (mem/v:SI (reg/f:SI 138 [ _26 ]) [3 *_26+0 S4 A32])
        (reg:SI 169)) "vid.c":112:14 -1
     (nil))

;; Generating RTL for gimple basic block 12

;; 

(code_label 85 84 86 14 (nil) [0 uses])

(note 86 85 0 NOTE_INSN_BASIC_BLOCK)

;; color.19_27 = color;

(insn 87 86 88 (set (reg/f:SI 170)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":113:12 -1
     (nil))

(insn 88 87 0 (set (reg:SI 139 [ color.19_27 ])
        (mem/c:SI (reg/f:SI 170) [3 color+0 S4 A32])) "vid.c":113:12 -1
     (nil))

;; if (color.19_27 == 3)

(insn 89 88 90 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139 [ color.19_27 ])
            (const_int 3 [0x3]))) "vid.c":113:6 -1
     (nil))

(jump_insn 90 89 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":113:6 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; fb.20_28 = fb;

(insn 92 91 93 (set (reg/f:SI 171)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":114:8 -1
     (nil))

(insn 93 92 0 (set (reg/f:SI 140 [ fb.20_28 ])
        (mem/f/c:SI (reg/f:SI 171) [1 fb+0 S4 A32])) "vid.c":114:8 -1
     (nil))

;; pix.21_29 = (unsigned int) pix_46;

(insn 94 93 0 (set (reg:SI 141 [ pix.21_29 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":114:8 -1
     (nil))

;; _30 = pix.21_29 * 4;

(insn 95 94 0 (set (reg:SI 142 [ _30 ])
        (ashift:SI (reg:SI 141 [ pix.21_29 ])
            (const_int 2 [0x2]))) "vid.c":114:8 -1
     (nil))

;; _31 = fb.20_28 + _30;

(insn 96 95 0 (set (reg/f:SI 143 [ _31 ])
        (plus:SI (reg/f:SI 140 [ fb.20_28 ])
            (reg:SI 142 [ _30 ]))) "vid.c":114:8 -1
     (nil))

;; *_31 ={v} 65535;

(insn 97 96 98 (set (reg:SI 172)
        (const_int 65535 [0xffff])) "vid.c":114:14 -1
     (nil))

(insn 98 97 0 (set (mem/v:SI (reg/f:SI 143 [ _31 ]) [3 *_31+0 S4 A32])
        (reg:SI 172)) "vid.c":114:14 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; 

(code_label 99 98 100 15 (nil) [0 uses])

(note 100 99 0 NOTE_INSN_BASIC_BLOCK)

;; color.22_32 = color;

(insn 101 100 102 (set (reg/f:SI 173)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":115:12 -1
     (nil))

(insn 102 101 0 (set (reg:SI 144 [ color.22_32 ])
        (mem/c:SI (reg/f:SI 173) [3 color+0 S4 A32])) "vid.c":115:12 -1
     (nil))

;; if (color.22_32 == 5)

(insn 103 102 104 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144 [ color.22_32 ])
            (const_int 5 [0x5]))) "vid.c":115:6 -1
     (nil))

(jump_insn 104 103 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":115:6 -1
     (nil))

;; Generating RTL for gimple basic block 15

;; fb.23_33 = fb;

(insn 106 105 107 (set (reg/f:SI 174)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":116:8 -1
     (nil))

(insn 107 106 0 (set (reg/f:SI 145 [ fb.23_33 ])
        (mem/f/c:SI (reg/f:SI 174) [1 fb+0 S4 A32])) "vid.c":116:8 -1
     (nil))

;; pix.24_34 = (unsigned int) pix_46;

(insn 108 107 0 (set (reg:SI 146 [ pix.24_34 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":116:8 -1
     (nil))

;; _35 = pix.24_34 * 4;

(insn 109 108 0 (set (reg:SI 147 [ _35 ])
        (ashift:SI (reg:SI 146 [ pix.24_34 ])
            (const_int 2 [0x2]))) "vid.c":116:8 -1
     (nil))

;; _36 = fb.23_33 + _35;

(insn 110 109 0 (set (reg/f:SI 148 [ _36 ])
        (plus:SI (reg/f:SI 145 [ fb.23_33 ])
            (reg:SI 147 [ _35 ]))) "vid.c":116:8 -1
     (nil))

;; *_36 ={v} 16777215;

(insn 111 110 112 (set (reg:SI 175)
        (const_int 16777215 [0xffffff])) "vid.c":116:14 -1
     (nil))

(insn 112 111 0 (set (mem/v:SI (reg/f:SI 148 [ _36 ]) [3 *_36+0 S4 A32])
        (reg:SI 175)) "vid.c":116:14 -1
     (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 113 112 114 16 (nil) [0 uses])

(note 114 113 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 18 into block 17...
Merged blocks 17 and 18.
Merged 17 and 18 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":101:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])
        (reg:SI 1 r1 [ y ])) "vid.c":101:1 -1
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:SI 150)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 y+0 S4 A32])) "vid.c":102:14 -1
     (nil))
(insn 8 7 9 2 (set (reg:SI 151)
        (reg:SI 150)) "vid.c":102:14 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 151)
        (ashift:SI (reg:SI 151)
            (const_int 2 [0x2]))) "vid.c":102:14 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 151)
        (plus:SI (reg:SI 151)
            (reg:SI 150))) "vid.c":102:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 5 [0x5]))
        (nil)))
(insn 11 10 12 2 (set (reg:SI 152)
        (ashift:SI (reg:SI 151)
            (const_int 7 [0x7]))) "vid.c":102:14 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 151)
        (reg:SI 152)) "vid.c":102:14 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 150)
            (const_int 640 [0x280]))
        (nil)))
(insn 13 12 14 2 (set (reg:SI 113 [ _1 ])
        (reg:SI 151)) "vid.c":102:14 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 154)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":102:7 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 153)
        (plus:SI (reg:SI 154)
            (reg:SI 113 [ _1 ]))) "vid.c":102:7 -1
     (nil))
(insn 16 15 17 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])
        (reg:SI 153)) "vid.c":102:7 -1
     (nil))
(insn 17 16 18 2 (set (reg/f:SI 155)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":103:12 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 114 [ color.4_2 ])
        (mem/c:SI (reg/f:SI 155) [3 color+0 S4 A32])) "vid.c":103:12 -1
     (nil))
(insn 19 18 20 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ color.4_2 ])
            (const_int 6 [0x6]))) "vid.c":103:6 -1
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) "vid.c":103:6 -1
     (nil)
 -> 29)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg/f:SI 156)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":104:8 -1
     (nil))
(insn 23 22 24 4 (set (reg/f:SI 115 [ fb.5_3 ])
        (mem/f/c:SI (reg/f:SI 156) [1 fb+0 S4 A32])) "vid.c":104:8 -1
     (nil))
(insn 24 23 25 4 (set (reg:SI 116 [ pix.6_4 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":104:8 -1
     (nil))
(insn 25 24 26 4 (set (reg:SI 117 [ _5 ])
        (ashift:SI (reg:SI 116 [ pix.6_4 ])
            (const_int 2 [0x2]))) "vid.c":104:8 -1
     (nil))
(insn 26 25 27 4 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg/f:SI 115 [ fb.5_3 ])
            (reg:SI 117 [ _5 ]))) "vid.c":104:8 -1
     (nil))
(insn 27 26 28 4 (set (reg:SI 157)
        (const_int 255 [0xff])) "vid.c":104:14 -1
     (nil))
(insn 28 27 29 4 (set (mem/v:SI (reg/f:SI 118 [ _6 ]) [3 *_6+0 S4 A32])
        (reg:SI 157)) "vid.c":104:14 -1
     (nil))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU)
(code_label 29 28 30 5 10 (nil) [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 32 5 (set (reg/f:SI 158)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":105:12 -1
     (nil))
(insn 32 31 33 5 (set (reg:SI 119 [ color.7_7 ])
        (mem/c:SI (reg/f:SI 158) [3 color+0 S4 A32])) "vid.c":105:12 -1
     (nil))
(insn 33 32 34 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 119 [ color.7_7 ])
            (const_int 0 [0]))) "vid.c":105:6 -1
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) "vid.c":105:6 -1
     (nil)
 -> 43)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 35 34 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 36 35 37 6 (set (reg/f:SI 159)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":106:7 -1
     (nil))
(insn 37 36 38 6 (set (reg/f:SI 120 [ fb.8_8 ])
        (mem/f/c:SI (reg/f:SI 159) [1 fb+0 S4 A32])) "vid.c":106:7 -1
     (nil))
(insn 38 37 39 6 (set (reg:SI 121 [ pix.9_9 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":106:7 -1
     (nil))
(insn 39 38 40 6 (set (reg:SI 122 [ _10 ])
        (ashift:SI (reg:SI 121 [ pix.9_9 ])
            (const_int 2 [0x2]))) "vid.c":106:7 -1
     (nil))
(insn 40 39 41 6 (set (reg/f:SI 123 [ _11 ])
        (plus:SI (reg/f:SI 120 [ fb.8_8 ])
            (reg:SI 122 [ _10 ]))) "vid.c":106:7 -1
     (nil))
(insn 41 40 42 6 (set (reg:SI 160)
        (const_int 16777215 [0xffffff])) "vid.c":106:13 -1
     (nil))
(insn 42 41 43 6 (set (mem/v:SI (reg/f:SI 123 [ _11 ]) [3 *_11+0 S4 A32])
        (reg:SI 160)) "vid.c":106:13 -1
     (nil))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 43 42 44 7 11 (nil) [1 uses])
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 7 (set (reg/f:SI 161)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":107:12 -1
     (nil))
(insn 46 45 47 7 (set (reg:SI 124 [ color.10_12 ])
        (mem/c:SI (reg/f:SI 161) [3 color+0 S4 A32])) "vid.c":107:12 -1
     (nil))
(insn 47 46 48 7 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 124 [ color.10_12 ])
            (const_int 1 [0x1]))) "vid.c":107:6 -1
     (nil))
(jump_insn 48 47 49 7 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) "vid.c":107:6 -1
     (nil)
 -> 57)
;;  succ:       8 (FALLTHRU)
;;              9

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       7 (FALLTHRU)
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 8 (set (reg/f:SI 162)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":108:8 -1
     (nil))
(insn 51 50 52 8 (set (reg/f:SI 125 [ fb.11_13 ])
        (mem/f/c:SI (reg/f:SI 162) [1 fb+0 S4 A32])) "vid.c":108:8 -1
     (nil))
(insn 52 51 53 8 (set (reg:SI 126 [ pix.12_14 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":108:8 -1
     (nil))
(insn 53 52 54 8 (set (reg:SI 127 [ _15 ])
        (ashift:SI (reg:SI 126 [ pix.12_14 ])
            (const_int 2 [0x2]))) "vid.c":108:8 -1
     (nil))
(insn 54 53 55 8 (set (reg/f:SI 128 [ _16 ])
        (plus:SI (reg/f:SI 125 [ fb.11_13 ])
            (reg:SI 127 [ _15 ]))) "vid.c":108:8 -1
     (nil))
(insn 55 54 56 8 (set (reg:SI 163)
        (const_int 65280 [0xff00])) "vid.c":108:14 -1
     (nil))
(insn 56 55 57 8 (set (mem/v:SI (reg/f:SI 128 [ _16 ]) [3 *_16+0 S4 A32])
        (reg:SI 163)) "vid.c":108:14 -1
     (nil))
;;  succ:       9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       7
;;              8 (FALLTHRU)
(code_label 57 56 58 9 12 (nil) [1 uses])
(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 9 (set (reg/f:SI 164)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":109:12 -1
     (nil))
(insn 60 59 61 9 (set (reg:SI 129 [ color.13_17 ])
        (mem/c:SI (reg/f:SI 164) [3 color+0 S4 A32])) "vid.c":109:12 -1
     (nil))
(insn 61 60 62 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ color.13_17 ])
            (const_int 2 [0x2]))) "vid.c":109:6 -1
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 71)
            (pc))) "vid.c":109:6 -1
     (nil)
 -> 71)
;;  succ:       10 (FALLTHRU)
;;              11

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       9 (FALLTHRU)
(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 64 63 65 10 (set (reg/f:SI 165)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":110:8 -1
     (nil))
(insn 65 64 66 10 (set (reg/f:SI 130 [ fb.14_18 ])
        (mem/f/c:SI (reg/f:SI 165) [1 fb+0 S4 A32])) "vid.c":110:8 -1
     (nil))
(insn 66 65 67 10 (set (reg:SI 131 [ pix.15_19 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":110:8 -1
     (nil))
(insn 67 66 68 10 (set (reg:SI 132 [ _20 ])
        (ashift:SI (reg:SI 131 [ pix.15_19 ])
            (const_int 2 [0x2]))) "vid.c":110:8 -1
     (nil))
(insn 68 67 69 10 (set (reg/f:SI 133 [ _21 ])
        (plus:SI (reg/f:SI 130 [ fb.14_18 ])
            (reg:SI 132 [ _20 ]))) "vid.c":110:8 -1
     (nil))
(insn 69 68 70 10 (set (reg:SI 166)
        (const_int 16776960 [0xffff00])) "vid.c":110:14 -1
     (nil))
(insn 70 69 71 10 (set (mem/v:SI (reg/f:SI 133 [ _21 ]) [3 *_21+0 S4 A32])
        (reg:SI 166)) "vid.c":110:14 -1
     (nil))
;;  succ:       11 (FALLTHRU)

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
;;              10 (FALLTHRU)
(code_label 71 70 72 11 13 (nil) [1 uses])
(note 72 71 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 74 11 (set (reg/f:SI 167)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":111:12 -1
     (nil))
(insn 74 73 75 11 (set (reg:SI 134 [ color.16_22 ])
        (mem/c:SI (reg/f:SI 167) [3 color+0 S4 A32])) "vid.c":111:12 -1
     (nil))
(insn 75 74 76 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134 [ color.16_22 ])
            (const_int 4 [0x4]))) "vid.c":111:6 -1
     (nil))
(jump_insn 76 75 77 11 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) "vid.c":111:6 -1
     (nil)
 -> 85)
;;  succ:       12 (FALLTHRU)
;;              13

;; basic block 12, loop depth 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       11 (FALLTHRU)
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 78 77 79 12 (set (reg/f:SI 168)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":112:8 -1
     (nil))
(insn 79 78 80 12 (set (reg/f:SI 135 [ fb.17_23 ])
        (mem/f/c:SI (reg/f:SI 168) [1 fb+0 S4 A32])) "vid.c":112:8 -1
     (nil))
(insn 80 79 81 12 (set (reg:SI 136 [ pix.18_24 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":112:8 -1
     (nil))
(insn 81 80 82 12 (set (reg:SI 137 [ _25 ])
        (ashift:SI (reg:SI 136 [ pix.18_24 ])
            (const_int 2 [0x2]))) "vid.c":112:8 -1
     (nil))
(insn 82 81 83 12 (set (reg/f:SI 138 [ _26 ])
        (plus:SI (reg/f:SI 135 [ fb.17_23 ])
            (reg:SI 137 [ _25 ]))) "vid.c":112:8 -1
     (nil))
(insn 83 82 84 12 (set (reg:SI 169)
        (const_int 16711935 [0xff00ff])) "vid.c":112:14 -1
     (nil))
(insn 84 83 85 12 (set (mem/v:SI (reg/f:SI 138 [ _26 ]) [3 *_26+0 S4 A32])
        (reg:SI 169)) "vid.c":112:14 -1
     (nil))
;;  succ:       13 (FALLTHRU)

;; basic block 13, loop depth 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              12 (FALLTHRU)
(code_label 85 84 86 13 14 (nil) [1 uses])
(note 86 85 87 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 87 86 88 13 (set (reg/f:SI 170)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":113:12 -1
     (nil))
(insn 88 87 89 13 (set (reg:SI 139 [ color.19_27 ])
        (mem/c:SI (reg/f:SI 170) [3 color+0 S4 A32])) "vid.c":113:12 -1
     (nil))
(insn 89 88 90 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 139 [ color.19_27 ])
            (const_int 3 [0x3]))) "vid.c":113:6 -1
     (nil))
(jump_insn 90 89 91 13 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 99)
            (pc))) "vid.c":113:6 -1
     (nil)
 -> 99)
;;  succ:       14 (FALLTHRU)
;;              15

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 (FALLTHRU)
(note 91 90 92 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 14 (set (reg/f:SI 171)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":114:8 -1
     (nil))
(insn 93 92 94 14 (set (reg/f:SI 140 [ fb.20_28 ])
        (mem/f/c:SI (reg/f:SI 171) [1 fb+0 S4 A32])) "vid.c":114:8 -1
     (nil))
(insn 94 93 95 14 (set (reg:SI 141 [ pix.21_29 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":114:8 -1
     (nil))
(insn 95 94 96 14 (set (reg:SI 142 [ _30 ])
        (ashift:SI (reg:SI 141 [ pix.21_29 ])
            (const_int 2 [0x2]))) "vid.c":114:8 -1
     (nil))
(insn 96 95 97 14 (set (reg/f:SI 143 [ _31 ])
        (plus:SI (reg/f:SI 140 [ fb.20_28 ])
            (reg:SI 142 [ _30 ]))) "vid.c":114:8 -1
     (nil))
(insn 97 96 98 14 (set (reg:SI 172)
        (const_int 65535 [0xffff])) "vid.c":114:14 -1
     (nil))
(insn 98 97 99 14 (set (mem/v:SI (reg/f:SI 143 [ _31 ]) [3 *_31+0 S4 A32])
        (reg:SI 172)) "vid.c":114:14 -1
     (nil))
;;  succ:       15 (FALLTHRU)

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       13
;;              14 (FALLTHRU)
(code_label 99 98 100 15 15 (nil) [1 uses])
(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 102 15 (set (reg/f:SI 173)
        (symbol_ref:SI ("color") [flags 0x40]  <var_decl 0x7fd4189cc480 color>)) "vid.c":115:12 -1
     (nil))
(insn 102 101 103 15 (set (reg:SI 144 [ color.22_32 ])
        (mem/c:SI (reg/f:SI 173) [3 color+0 S4 A32])) "vid.c":115:12 -1
     (nil))
(insn 103 102 104 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 144 [ color.22_32 ])
            (const_int 5 [0x5]))) "vid.c":115:6 -1
     (nil))
(jump_insn 104 103 105 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 113)
            (pc))) "vid.c":115:6 -1
     (nil)
 -> 113)
;;  succ:       16 (FALLTHRU)
;;              17

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       15 (FALLTHRU)
(note 105 104 106 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 106 105 107 16 (set (reg/f:SI 174)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":116:8 -1
     (nil))
(insn 107 106 108 16 (set (reg/f:SI 145 [ fb.23_33 ])
        (mem/f/c:SI (reg/f:SI 174) [1 fb+0 S4 A32])) "vid.c":116:8 -1
     (nil))
(insn 108 107 109 16 (set (reg:SI 146 [ pix.24_34 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 pix+0 S4 A32])) "vid.c":116:8 -1
     (nil))
(insn 109 108 110 16 (set (reg:SI 147 [ _35 ])
        (ashift:SI (reg:SI 146 [ pix.24_34 ])
            (const_int 2 [0x2]))) "vid.c":116:8 -1
     (nil))
(insn 110 109 111 16 (set (reg/f:SI 148 [ _36 ])
        (plus:SI (reg/f:SI 145 [ fb.23_33 ])
            (reg:SI 147 [ _35 ]))) "vid.c":116:8 -1
     (nil))
(insn 111 110 112 16 (set (reg:SI 175)
        (const_int 16777215 [0xffffff])) "vid.c":116:14 -1
     (nil))
(insn 112 111 113 16 (set (mem/v:SI (reg/f:SI 148 [ _36 ]) [3 *_36+0 S4 A32])
        (reg:SI 175)) "vid.c":116:14 -1
     (nil))
;;  succ:       17 (FALLTHRU)

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15
;;              16 (FALLTHRU)
(code_label 113 112 114 17 16 (nil) [1 uses])
(note 114 113 117 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 117 114 118 17 (clobber (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
(insn 118 117 121 17 (clobber (reg:SI 149 [ <retval> ])) "vid.c":117:1 -1
     (nil))
(insn 121 118 116 17 (const_int 0 [0]) "vid.c":117:1 -1
     (nil))
(insn 116 121 119 17 (set (reg/i:SI 0 r0)
        (reg:SI 149 [ <retval> ])) "vid.c":117:1 -1
     (nil))
(insn 119 116 0 17 (use (reg/i:SI 0 r0)) "vid.c":117:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dchar (dchar, funcdef_no=3, decl_uid=4501, cgraph_uid=4, symbol_order=9)

int dchar (unsigned char c, int x, int y)
{
  unsigned char byte;
  unsigned char * caddress;
  int bit;
  int r;
  unsigned char * font.25_1;
  int _2;
  int _3;
  sizetype _4;
  sizetype r.26_5;
  unsigned char * _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  font.25_1 = font;
  _2 = (int) c_18(D);
  _3 = _2 * 16;
  _4 = (sizetype) _3;
  caddress_19 = font.25_1 + _4;
  r_20 = 0;
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 3, loop depth 1
;;    pred:       9
  r.26_5 = (sizetype) r_12;
  _6 = caddress_19 + r.26_5;
  byte_21 = *_6;
  bit_22 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 2
;;    pred:       7
  _7 = (int) byte_21;
  _8 = _7 >> bit_13;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 2
;;    pred:       4
  _10 = x_24(D) + bit_13;
  _11 = y_25(D) + r_12;
  setpix (_10, _11);
;;    succ:       6

;;   basic block 6, loop depth 2
;;    pred:       4
;;                5
  bit_27 = bit_13 + 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       3
;;                6
  # bit_13 = PHI <bit_22(3), bit_27(6)>
  if (bit_13 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       4
;;                8

;;   basic block 8, loop depth 1
;;    pred:       7
  r_23 = r_12 + 1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       2
;;                8
  # r_12 = PHI <r_20(2), r_23(8)>
  if (r_12 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       3
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (font.25_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (r.26_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (r_12 - 12 )
Partition 13 (bit_13 - 13 )
Partition 18 (c_18(D) - 18 )
Partition 19 (caddress_19 - 19 )
Partition 20 (r_20 - 20 )
Partition 21 (byte_21 - 21 )
Partition 22 (bit_22 - 22 )
Partition 23 (r_23 - 23 )
Partition 24 (x_24(D) - 24 )
Partition 25 (y_25(D) - 25 )
Partition 27 (bit_27 - 27 )
Partition 28 (_28(D) - 28 )


Coalescible Partition map 

Partition 0, base 0 (r_12 - 12 20 23 )
Partition 1, base 1 (bit_13 - 13 22 27 )
Partition 2, base 2 (c_18(D) - 18 )
Partition 6, base 3 (x_24(D) - 24 )
Partition 7, base 4 (y_25(D) - 25 )
Partition 9, base 5 (_28(D) - 28 )


Partition map 

Partition 0 (r_12 - 12 )
Partition 1 (bit_13 - 13 )
Partition 2 (c_18(D) - 18 )
Partition 3 (r_20 - 20 )
Partition 4 (bit_22 - 22 )
Partition 5 (r_23 - 23 )
Partition 6 (x_24(D) - 24 )
Partition 7 (y_25(D) - 25 )
Partition 8 (bit_27 - 27 )
Partition 9 (_28(D) - 28 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) bit_13 <-> bit_22
(2147483646, 0) bit_13 <-> bit_27
(2147483646, 0) r_12 <-> r_20
(2147483646, 0) r_12 <-> r_23

Partition map 

Partition 0 (r_12 - 12 )
Partition 1 (bit_13 - 13 )
Partition 2 (c_18(D) - 18 )
Partition 3 (r_20 - 20 )
Partition 4 (bit_22 - 22 )
Partition 5 (r_23 - 23 )
Partition 6 (x_24(D) - 24 )
Partition 7 (y_25(D) - 25 )
Partition 8 (bit_27 - 27 )
Partition 9 (_28(D) - 28 )

Coalesce list: (13)bit_13 & (22)bit_22 [map: 1, 4] : Success -> 1
Coalesce list: (13)bit_13 & (27)bit_27 [map: 1, 8] : Success -> 1
Coalesce list: (12)r_12 & (20)r_20 [map: 0, 3] : Success -> 0
Coalesce list: (12)r_12 & (23)r_23 [map: 0, 5] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (font.25_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (r.26_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (r_12 - 12 20 23 )
Partition 12 (bit_13 - 13 22 27 )
Partition 13 (c_18(D) - 18 )
Partition 14 (caddress_19 - 19 )
Partition 15 (byte_21 - 21 )
Partition 16 (x_24(D) - 24 )
Partition 17 (y_25(D) - 25 )
Partition 18 (_28(D) - 28 )

int dchar (unsigned char c, int x, int y)
{
  unsigned char byte;
  unsigned char * caddress;
  int bit;
  int r;
  unsigned char * font.25_1;
  int _2;
  int _3;
  sizetype _4;
  sizetype r.26_5;
  unsigned char * _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int _28(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  font.25_1 = font;
  _2 = (int) c_18(D);
  _3 = _2 * 16;
  _4 = (sizetype) _3;
  caddress_19 = font.25_1 + _4;
  r_20 = 0;
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 3, loop depth 1
;;    pred:       9
  r.26_5 = (sizetype) r_12;
  _6 = caddress_19 + r.26_5;
  byte_21 = *_6;
  bit_22 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 2
;;    pred:       7
  _7 = (int) byte_21;
  _8 = _7 >> bit_13;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 2
;;    pred:       4
  _10 = x_24(D) + bit_13;
  _11 = y_25(D) + r_12;
  setpix (_10, _11);
;;    succ:       6

;;   basic block 6, loop depth 2
;;    pred:       4
;;                5
  bit_27 = bit_13 + 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       3
;;                6
  # bit_13 = PHI <bit_22(3), bit_27(6)>
  if (bit_13 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       4
;;                8

;;   basic block 8, loop depth 1
;;    pred:       7
  r_23 = r_12 + 1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       2
;;                8
  # r_12 = PHI <r_20(2), r_23(8)>
  if (r_12 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       3
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  return;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	caddress_19
Partition 1: size 4 align 4
	bit_13
Partition 0: size 4 align 4
	r_12
Partition 3: size 1 align 1
	byte_21

;; Generating RTL for gimple basic block 2

;; font.25_1 = font;

(insn 10 9 11 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":124:19 -1
     (nil))

(insn 11 10 0 (set (reg/f:SI 113 [ font.25_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":124:19 -1
     (nil))

;; _2 = (int) c_18(D);

(insn 12 11 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":124:22 -1
     (nil))

;; _3 = _2 * 16;

(insn 13 12 0 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":124:22 -1
     (nil))

;; _4 = (sizetype) _3;

(insn 14 13 0 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":124:22 -1
     (nil))

;; caddress_19 = font.25_1 + _4;

(insn 15 14 16 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.25_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":124:12 -1
     (nil))

(insn 16 15 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":124:12 -1
     (nil))

;; r_20 = 0;

(insn 17 16 18 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":127:9 -1
     (nil))

(insn 18 17 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 129)) "vid.c":127:9 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; r.26_5 = (sizetype) r_12;

(insn 22 21 0 (set (reg:SI 117 [ r.26_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":128:23 -1
     (nil))

;; _6 = caddress_19 + r.26_5;

(insn 23 22 24 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":128:23 -1
     (nil))

(insn 24 23 0 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ r.26_5 ]))) "vid.c":128:23 -1
     (nil))

;; byte_21 = *_6;

(insn 25 24 26 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":128:10 -1
     (nil))

(insn 26 25 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":128:10 -1
     (nil))

;; bit_22 = 0;

(insn 27 26 28 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":130:13 -1
     (nil))

(insn 28 27 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":130:13 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _7 = (int) byte_21;

(insn 32 31 0 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":131:11 -1
     (nil))

;; _8 = _7 >> bit_13;

(insn 33 32 34 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":131:11 -1
     (nil))

(insn 34 33 0 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":131:11 -1
     (nil))

;; _9 = _8 & 1;

(insn 35 34 0 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":131:11 -1
     (nil))

;; if (_9 != 0)

(insn 36 35 37 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":131:10 -1
     (nil))

(jump_insn 37 36 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":131:10 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _10 = x_24(D) + bit_13;

(insn 39 38 40 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":132:4 -1
     (nil))

(insn 40 39 41 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":132:4 -1
     (nil))

(insn 41 40 0 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":132:4 -1
     (nil))

;; _11 = y_25(D) + r_12;

(insn 42 41 43 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":132:4 -1
     (nil))

(insn 43 42 44 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":132:4 -1
     (nil))

(insn 44 43 0 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":132:4 -1
     (nil))

;; setpix (_10, _11);

(insn 45 44 46 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":132:4 -1
     (nil))

(insn 46 45 47 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":132:4 -1
     (nil))

(call_insn 47 46 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setpix") [flags 0x3]  <function_decl 0x7fd417ce1b00 setpix>) [0 setpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":132:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 48 47 49 22 (nil) [0 uses])

(note 49 48 0 NOTE_INSN_BASIC_BLOCK)

;; bit_27 = bit_13 + 1;

(insn 50 49 51 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:27 -1
     (nil))

(insn 51 50 52 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":130:27 -1
     (nil))

(insn 52 51 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":130:27 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 53 52 54 21 (nil) [0 uses])

(note 54 53 0 NOTE_INSN_BASIC_BLOCK)

;; if (bit_13 <= 7)

(insn 58 54 59 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:20 -1
     (nil))

(insn 59 58 60 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":130:20 -1
     (nil))

(jump_insn 60 59 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":130:20 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; r_23 = r_12 + 1;

(insn 62 61 63 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:20 -1
     (nil))

(insn 63 62 64 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":127:20 -1
     (nil))

(insn 64 63 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 141)) "vid.c":127:20 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 65 64 66 20 (nil) [0 uses])

(note 66 65 0 NOTE_INSN_BASIC_BLOCK)

;; if (r_12 <= 15)

(insn 70 66 71 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:14 -1
     (nil))

(insn 71 70 72 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":127:14 -1
     (nil))

(jump_insn 72 71 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":127:14 -1
     (nil))

;; Generating RTL for gimple basic block 10


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":120:1 -1
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":120:1 -1
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":120:1 -1
     (nil))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":120:1 -1
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":120:1 -1
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":124:19 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.25_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":124:19 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":124:22 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":124:22 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":124:22 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.25_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":124:12 -1
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":124:12 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":127:9 -1
     (nil))
(insn 18 17 19 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 129)) "vid.c":127:9 -1
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (label_ref 65)) "vid.c":127:3 -1
     (nil)
 -> 65)
;;  succ:       10

(barrier 20 19 67)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 67 20 21 4 24 (nil) [1 uses])
(note 21 67 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 117 [ r.26_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":128:23 -1
     (nil))
(insn 23 22 24 4 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":128:23 -1
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ r.26_5 ]))) "vid.c":128:23 -1
     (nil))
(insn 25 24 26 4 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":128:10 -1
     (nil))
(insn 26 25 27 4 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":128:10 -1
     (nil))
(insn 27 26 28 4 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":130:13 -1
     (nil))
(insn 28 27 29 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":130:13 -1
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (label_ref 53)) "vid.c":130:5 -1
     (nil)
 -> 53)
;;  succ:       8

(barrier 30 29 55)
;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 55 30 31 5 23 (nil) [1 uses])
(note 31 55 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":131:11 -1
     (nil))
(insn 33 32 34 5 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":131:11 -1
     (nil))
(insn 34 33 35 5 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":131:11 -1
     (nil))
(insn 35 34 36 5 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":131:11 -1
     (nil))
(insn 36 35 37 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":131:10 -1
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":131:10 -1
     (nil)
 -> 48)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 2, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":132:4 -1
     (nil))
(insn 40 39 41 6 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":132:4 -1
     (nil))
(insn 41 40 42 6 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":132:4 -1
     (nil))
(insn 42 41 43 6 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":132:4 -1
     (nil))
(insn 43 42 44 6 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":132:4 -1
     (nil))
(insn 44 43 45 6 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":132:4 -1
     (nil))
(insn 45 44 46 6 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":132:4 -1
     (nil))
(insn 46 45 47 6 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":132:4 -1
     (nil))
(call_insn 47 46 48 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("setpix") [flags 0x3]  <function_decl 0x7fd417ce1b00 setpix>) [0 setpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":132:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 48 47 49 7 22 (nil) [1 uses])
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:27 -1
     (nil))
(insn 51 50 52 7 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":130:27 -1
     (nil))
(insn 52 51 53 7 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":130:27 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 2, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              7 (FALLTHRU,DFS_BACK)
(code_label 53 52 54 8 21 (nil) [1 uses])
(note 54 53 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 8 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":130:20 -1
     (nil))
(insn 59 58 60 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":130:20 -1
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":130:20 -1
     (nil)
 -> 55)
;;  succ:       5
;;              9 (FALLTHRU)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:20 -1
     (nil))
(insn 63 62 64 9 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":127:20 -1
     (nil))
(insn 64 63 65 9 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])
        (reg:SI 141)) "vid.c":127:20 -1
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)

;; basic block 10, loop depth 1, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              9 (FALLTHRU,DFS_BACK)
(code_label 65 64 66 10 20 (nil) [1 uses])
(note 66 65 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 10 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 r+0 S4 A32])) "vid.c":127:14 -1
     (nil))
(insn 71 70 72 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":127:14 -1
     (nil))
(jump_insn 72 71 73 10 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":127:14 -1
     (nil)
 -> 67)
;;  succ:       4
;;              11 (FALLTHRU)

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
(note 73 72 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 11 (clobber (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
(insn 77 76 80 11 (clobber (reg:SI 124 [ <retval> ])) "vid.c":135:1 -1
     (nil))
(insn 80 77 75 11 (const_int 0 [0]) "vid.c":135:1 -1
     (nil))
(insn 75 80 78 11 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":135:1 -1
     (nil))
(insn 78 75 0 11 (use (reg/i:SI 0 r0)) "vid.c":135:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function undchar (undchar, funcdef_no=4, decl_uid=4518, cgraph_uid=5, symbol_order=10)

int undchar (unsigned char c, int x, int y)
{
  unsigned char byte;
  unsigned char * caddress;
  int bit;
  int row;
  unsigned char * font.27_1;
  int _2;
  int _3;
  sizetype _4;
  sizetype row.28_5;
  unsigned char * _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  font.27_1 = font;
  _2 = (int) c_18(D);
  _3 = _2 * 16;
  _4 = (sizetype) _3;
  caddress_19 = font.27_1 + _4;
  row_20 = 0;
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 3, loop depth 1
;;    pred:       9
  row.28_5 = (sizetype) row_12;
  _6 = caddress_19 + row.28_5;
  byte_21 = *_6;
  bit_22 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 2
;;    pred:       7
  _7 = (int) byte_21;
  _8 = _7 >> bit_13;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 2
;;    pred:       4
  _10 = x_24(D) + bit_13;
  _11 = y_25(D) + row_12;
  clrpix (_10, _11);
;;    succ:       6

;;   basic block 6, loop depth 2
;;    pred:       4
;;                5
  bit_27 = bit_13 + 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       3
;;                6
  # bit_13 = PHI <bit_22(3), bit_27(6)>
  if (bit_13 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       4
;;                8

;;   basic block 8, loop depth 1
;;    pred:       7
  row_23 = row_12 + 1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       2
;;                8
  # row_12 = PHI <row_20(2), row_23(8)>
  if (row_12 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       3
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (font.27_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (row.28_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (row_12 - 12 )
Partition 13 (bit_13 - 13 )
Partition 18 (c_18(D) - 18 )
Partition 19 (caddress_19 - 19 )
Partition 20 (row_20 - 20 )
Partition 21 (byte_21 - 21 )
Partition 22 (bit_22 - 22 )
Partition 23 (row_23 - 23 )
Partition 24 (x_24(D) - 24 )
Partition 25 (y_25(D) - 25 )
Partition 27 (bit_27 - 27 )
Partition 28 (_28(D) - 28 )


Coalescible Partition map 

Partition 0, base 0 (row_12 - 12 20 23 )
Partition 1, base 1 (bit_13 - 13 22 27 )
Partition 2, base 2 (c_18(D) - 18 )
Partition 6, base 3 (x_24(D) - 24 )
Partition 7, base 4 (y_25(D) - 25 )
Partition 9, base 5 (_28(D) - 28 )


Partition map 

Partition 0 (row_12 - 12 )
Partition 1 (bit_13 - 13 )
Partition 2 (c_18(D) - 18 )
Partition 3 (row_20 - 20 )
Partition 4 (bit_22 - 22 )
Partition 5 (row_23 - 23 )
Partition 6 (x_24(D) - 24 )
Partition 7 (y_25(D) - 25 )
Partition 8 (bit_27 - 27 )
Partition 9 (_28(D) - 28 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) bit_13 <-> bit_22
(2147483646, 0) bit_13 <-> bit_27
(2147483646, 0) row_12 <-> row_20
(2147483646, 0) row_12 <-> row_23

Partition map 

Partition 0 (row_12 - 12 )
Partition 1 (bit_13 - 13 )
Partition 2 (c_18(D) - 18 )
Partition 3 (row_20 - 20 )
Partition 4 (bit_22 - 22 )
Partition 5 (row_23 - 23 )
Partition 6 (x_24(D) - 24 )
Partition 7 (y_25(D) - 25 )
Partition 8 (bit_27 - 27 )
Partition 9 (_28(D) - 28 )

Coalesce list: (13)bit_13 & (22)bit_22 [map: 1, 4] : Success -> 1
Coalesce list: (13)bit_13 & (27)bit_27 [map: 1, 8] : Success -> 1
Coalesce list: (12)row_12 & (20)row_20 [map: 0, 3] : Success -> 0
Coalesce list: (12)row_12 & (23)row_23 [map: 0, 5] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (font.27_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (row.28_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (row_12 - 12 20 23 )
Partition 12 (bit_13 - 13 22 27 )
Partition 13 (c_18(D) - 18 )
Partition 14 (caddress_19 - 19 )
Partition 15 (byte_21 - 21 )
Partition 16 (x_24(D) - 24 )
Partition 17 (y_25(D) - 25 )
Partition 18 (_28(D) - 28 )

int undchar (unsigned char c, int x, int y)
{
  unsigned char byte;
  unsigned char * caddress;
  int bit;
  int row;
  unsigned char * font.27_1;
  int _2;
  int _3;
  sizetype _4;
  sizetype row.28_5;
  unsigned char * _6;
  int _7;
  int _8;
  int _9;
  int _10;
  int _11;
  int _28(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  font.27_1 = font;
  _2 = (int) c_18(D);
  _3 = _2 * 16;
  _4 = (sizetype) _3;
  caddress_19 = font.27_1 + _4;
  row_20 = 0;
  goto <bb 9>; [INV]
;;    succ:       9

;;   basic block 3, loop depth 1
;;    pred:       9
  row.28_5 = (sizetype) row_12;
  _6 = caddress_19 + row.28_5;
  byte_21 = *_6;
  bit_22 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 4, loop depth 2
;;    pred:       7
  _7 = (int) byte_21;
  _8 = _7 >> bit_13;
  _9 = _8 & 1;
  if (_9 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 2
;;    pred:       4
  _10 = x_24(D) + bit_13;
  _11 = y_25(D) + row_12;
  clrpix (_10, _11);
;;    succ:       6

;;   basic block 6, loop depth 2
;;    pred:       4
;;                5
  bit_27 = bit_13 + 1;
;;    succ:       7

;;   basic block 7, loop depth 2
;;    pred:       3
;;                6
  # bit_13 = PHI <bit_22(3), bit_27(6)>
  if (bit_13 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       4
;;                8

;;   basic block 8, loop depth 1
;;    pred:       7
  row_23 = row_12 + 1;
;;    succ:       9

;;   basic block 9, loop depth 1
;;    pred:       2
;;                8
  # row_12 = PHI <row_20(2), row_23(8)>
  if (row_12 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 10>; [INV]
;;    succ:       3
;;                10

;;   basic block 10, loop depth 0
;;    pred:       9
  return;
;;    succ:       EXIT

}


Partition 2: size 4 align 4
	caddress_19
Partition 1: size 4 align 4
	bit_13
Partition 0: size 4 align 4
	row_12
Partition 3: size 1 align 1
	byte_21

;; Generating RTL for gimple basic block 2

;; font.27_1 = font;

(insn 10 9 11 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":142:19 -1
     (nil))

(insn 11 10 0 (set (reg/f:SI 113 [ font.27_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":142:19 -1
     (nil))

;; _2 = (int) c_18(D);

(insn 12 11 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":142:22 -1
     (nil))

;; _3 = _2 * 16;

(insn 13 12 0 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":142:22 -1
     (nil))

;; _4 = (sizetype) _3;

(insn 14 13 0 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":142:22 -1
     (nil))

;; caddress_19 = font.27_1 + _4;

(insn 15 14 16 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.27_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":142:12 -1
     (nil))

(insn 16 15 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":142:12 -1
     (nil))

;; row_20 = 0;

(insn 17 16 18 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":145:11 -1
     (nil))

(insn 18 17 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 129)) "vid.c":145:11 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; row.28_5 = (sizetype) row_12;

(insn 22 21 0 (set (reg:SI 117 [ row.28_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":146:23 -1
     (nil))

;; _6 = caddress_19 + row.28_5;

(insn 23 22 24 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":146:23 -1
     (nil))

(insn 24 23 0 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ row.28_5 ]))) "vid.c":146:23 -1
     (nil))

;; byte_21 = *_6;

(insn 25 24 26 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":146:10 -1
     (nil))

(insn 26 25 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":146:10 -1
     (nil))

;; bit_22 = 0;

(insn 27 26 28 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":148:13 -1
     (nil))

(insn 28 27 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":148:13 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _7 = (int) byte_21;

(insn 32 31 0 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":149:11 -1
     (nil))

;; _8 = _7 >> bit_13;

(insn 33 32 34 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":149:11 -1
     (nil))

(insn 34 33 0 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":149:11 -1
     (nil))

;; _9 = _8 & 1;

(insn 35 34 0 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":149:11 -1
     (nil))

;; if (_9 != 0)

(insn 36 35 37 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":149:10 -1
     (nil))

(jump_insn 37 36 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":149:10 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; _10 = x_24(D) + bit_13;

(insn 39 38 40 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":150:4 -1
     (nil))

(insn 40 39 41 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":150:4 -1
     (nil))

(insn 41 40 0 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":150:4 -1
     (nil))

;; _11 = y_25(D) + row_12;

(insn 42 41 43 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":150:4 -1
     (nil))

(insn 43 42 44 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":150:4 -1
     (nil))

(insn 44 43 0 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":150:4 -1
     (nil))

;; clrpix (_10, _11);

(insn 45 44 46 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":150:4 -1
     (nil))

(insn 46 45 47 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":150:4 -1
     (nil))

(call_insn 47 46 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":150:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 48 47 49 30 (nil) [0 uses])

(note 49 48 0 NOTE_INSN_BASIC_BLOCK)

;; bit_27 = bit_13 + 1;

(insn 50 49 51 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:27 -1
     (nil))

(insn 51 50 52 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":148:27 -1
     (nil))

(insn 52 51 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":148:27 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 53 52 54 29 (nil) [0 uses])

(note 54 53 0 NOTE_INSN_BASIC_BLOCK)

;; if (bit_13 <= 7)

(insn 58 54 59 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:20 -1
     (nil))

(insn 59 58 60 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":148:20 -1
     (nil))

(jump_insn 60 59 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":148:20 -1
     (nil))

;; Generating RTL for gimple basic block 8

;; row_23 = row_12 + 1;

(insn 62 61 63 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:26 -1
     (nil))

(insn 63 62 64 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":145:26 -1
     (nil))

(insn 64 63 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 141)) "vid.c":145:26 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; 

(code_label 65 64 66 28 (nil) [0 uses])

(note 66 65 0 NOTE_INSN_BASIC_BLOCK)

;; if (row_12 <= 15)

(insn 70 66 71 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:18 -1
     (nil))

(insn 71 70 72 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":145:18 -1
     (nil))

(jump_insn 72 71 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":145:18 -1
     (nil))

;; Generating RTL for gimple basic block 10


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 125)
        (reg:SI 0 r0 [ c ])) "vid.c":138:1 -1
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":138:1 -1
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":138:1 -1
     (nil))
(insn 3 6 4 2 (set (reg:QI 126)
        (subreg:QI (reg:SI 125) 0)) "vid.c":138:1 -1
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8])
        (reg:QI 126)) "vid.c":138:1 -1
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg/f:SI 127)
        (symbol_ref:SI ("font") [flags 0x2]  <var_decl 0x7fd4189cccf0 font>)) "vid.c":142:19 -1
     (nil))
(insn 11 10 12 2 (set (reg/f:SI 113 [ font.27_1 ])
        (mem/f/c:SI (reg/f:SI 127) [2 font+0 S4 A32])) "vid.c":142:19 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -17 [0xffffffffffffffef])) [0 c+0 S1 A8]))) "vid.c":142:22 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 115 [ _3 ])
        (ashift:SI (reg:SI 114 [ _2 ])
            (const_int 4 [0x4]))) "vid.c":142:22 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 116 [ _4 ])
        (reg:SI 115 [ _3 ])) "vid.c":142:22 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 128)
        (plus:SI (reg/f:SI 113 [ font.27_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":142:12 -1
     (nil))
(insn 16 15 17 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])
        (reg:SI 128)) "vid.c":142:12 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 129)
        (const_int 0 [0])) "vid.c":145:11 -1
     (nil))
(insn 18 17 19 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 129)) "vid.c":145:11 -1
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (label_ref 65)) "vid.c":145:3 -1
     (nil)
 -> 65)
;;  succ:       10

(barrier 20 19 67)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       10
(code_label 67 20 21 4 32 (nil) [1 uses])
(note 21 67 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 4 (set (reg:SI 117 [ row.28_5 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":146:23 -1
     (nil))
(insn 23 22 24 4 (set (reg:SI 130)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [2 caddress+0 S4 A32])) "vid.c":146:23 -1
     (nil))
(insn 24 23 25 4 (set (reg/f:SI 118 [ _6 ])
        (plus:SI (reg:SI 130)
            (reg:SI 117 [ row.28_5 ]))) "vid.c":146:23 -1
     (nil))
(insn 25 24 26 4 (set (reg:QI 131)
        (mem:QI (reg/f:SI 118 [ _6 ]) [0 *_6+0 S1 A8])) "vid.c":146:10 -1
     (nil))
(insn 26 25 27 4 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8])
        (reg:QI 131)) "vid.c":146:10 -1
     (nil))
(insn 27 26 28 4 (set (reg:SI 132)
        (const_int 0 [0])) "vid.c":148:13 -1
     (nil))
(insn 28 27 29 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 132)) "vid.c":148:13 -1
     (nil))
(jump_insn 29 28 30 4 (set (pc)
        (label_ref 53)) "vid.c":148:5 -1
     (nil)
 -> 53)
;;  succ:       8

(barrier 30 29 55)
;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 55 30 31 5 31 (nil) [1 uses])
(note 31 55 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:SI 119 [ _7 ])
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -13 [0xfffffffffffffff3])) [0 byte+0 S1 A8]))) "vid.c":149:11 -1
     (nil))
(insn 33 32 34 5 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":149:11 -1
     (nil))
(insn 34 33 35 5 (set (reg:SI 120 [ _8 ])
        (ashiftrt:SI (reg:SI 119 [ _7 ])
            (reg:SI 133))) "vid.c":149:11 -1
     (nil))
(insn 35 34 36 5 (set (reg:SI 121 [ _9 ])
        (and:SI (reg:SI 120 [ _8 ])
            (const_int 1 [0x1]))) "vid.c":149:11 -1
     (nil))
(insn 36 35 37 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 121 [ _9 ])
            (const_int 0 [0]))) "vid.c":149:10 -1
     (nil))
(jump_insn 37 36 38 5 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "vid.c":149:10 -1
     (nil)
 -> 48)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 2, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 38 37 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (set (reg:SI 134)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -24 [0xffffffffffffffe8])) [3 x+0 S4 A32])) "vid.c":150:4 -1
     (nil))
(insn 40 39 41 6 (set (reg:SI 135)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":150:4 -1
     (nil))
(insn 41 40 42 6 (set (reg:SI 122 [ _10 ])
        (plus:SI (reg:SI 134)
            (reg:SI 135))) "vid.c":150:4 -1
     (nil))
(insn 42 41 43 6 (set (reg:SI 136)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [3 y+0 S4 A32])) "vid.c":150:4 -1
     (nil))
(insn 43 42 44 6 (set (reg:SI 137)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":150:4 -1
     (nil))
(insn 44 43 45 6 (set (reg:SI 123 [ _11 ])
        (plus:SI (reg:SI 136)
            (reg:SI 137))) "vid.c":150:4 -1
     (nil))
(insn 45 44 46 6 (set (reg:SI 1 r1)
        (reg:SI 123 [ _11 ])) "vid.c":150:4 -1
     (nil))
(insn 46 45 47 6 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":150:4 -1
     (nil))
(call_insn 47 46 48 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":150:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 2, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 48 47 49 7 30 (nil) [1 uses])
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 7 (set (reg:SI 139)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:27 -1
     (nil))
(insn 51 50 52 7 (set (reg:SI 138)
        (plus:SI (reg:SI 139)
            (const_int 1 [0x1]))) "vid.c":148:27 -1
     (nil))
(insn 52 51 53 7 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])
        (reg:SI 138)) "vid.c":148:27 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 2, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              7 (FALLTHRU,DFS_BACK)
(code_label 53 52 54 8 29 (nil) [1 uses])
(note 54 53 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 54 59 8 (set (reg:SI 140)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 bit+0 S4 A64])) "vid.c":148:20 -1
     (nil))
(insn 59 58 60 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 140)
            (const_int 7 [0x7]))) "vid.c":148:20 -1
     (nil))
(jump_insn 60 59 61 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) "vid.c":148:20 -1
     (nil)
 -> 55)
;;  succ:       5
;;              9 (FALLTHRU)

;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 (FALLTHRU)
(note 61 60 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 9 (set (reg:SI 142)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:26 -1
     (nil))
(insn 63 62 64 9 (set (reg:SI 141)
        (plus:SI (reg:SI 142)
            (const_int 1 [0x1]))) "vid.c":145:26 -1
     (nil))
(insn 64 63 65 9 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])
        (reg:SI 141)) "vid.c":145:26 -1
     (nil))
;;  succ:       10 (FALLTHRU,DFS_BACK)

;; basic block 10, loop depth 1, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              9 (FALLTHRU,DFS_BACK)
(code_label 65 64 66 10 28 (nil) [1 uses])
(note 66 65 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 70 66 71 10 (set (reg:SI 143)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 row+0 S4 A32])) "vid.c":145:18 -1
     (nil))
(insn 71 70 72 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 143)
            (const_int 15 [0xf]))) "vid.c":145:18 -1
     (nil))
(jump_insn 72 71 73 10 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 67)
            (pc))) "vid.c":145:18 -1
     (nil)
 -> 67)
;;  succ:       4
;;              11 (FALLTHRU)

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       10 (FALLTHRU)
(note 73 72 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 73 77 11 (clobber (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
(insn 77 76 80 11 (clobber (reg:SI 124 [ <retval> ])) "vid.c":153:1 -1
     (nil))
(insn 80 77 75 11 (const_int 0 [0]) "vid.c":153:1 -1
     (nil))
(insn 75 80 78 11 (set (reg/i:SI 0 r0)
        (reg:SI 124 [ <retval> ])) "vid.c":153:1 -1
     (nil))
(insn 78 75 0 11 (use (reg/i:SI 0 r0)) "vid.c":153:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function dstring (dstring, funcdef_no=5, decl_uid=4535, cgraph_uid=6, symbol_order=11)

int dstring (char * s, int x, int y)
{
  char _1;
  char _2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  dchar (_1, x_4, y_9(D));
  x_11 = x_4 + 8;
  s_12 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_6(D)(2), s_12(3)>
  # x_4 = PHI <x_7(D)(2), x_11(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (s_3 - 3 )
Partition 4 (x_4 - 4 )
Partition 6 (s_6(D) - 6 )
Partition 7 (x_7(D) - 7 )
Partition 9 (y_9(D) - 9 )
Partition 11 (x_11 - 11 )
Partition 12 (s_12 - 12 )
Partition 13 (_13(D) - 13 )


Coalescible Partition map 

Partition 0, base 0 (s_3 - 3 6 12 )
Partition 1, base 1 (x_4 - 4 7 11 )
Partition 4, base 2 (y_9(D) - 9 )
Partition 7, base 3 (_13(D) - 13 )


Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (x_4 - 4 )
Partition 2 (s_6(D) - 6 )
Partition 3 (x_7(D) - 7 )
Partition 4 (y_9(D) - 9 )
Partition 5 (x_11 - 11 )
Partition 6 (s_12 - 12 )
Partition 7 (_13(D) - 13 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_3 <-> s_6(D)
(2147483647, 0) s_3 <-> s_12
(2147483647, 0) x_4 <-> x_7(D)
(2147483647, 0) x_4 <-> x_11

Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (x_4 - 4 )
Partition 2 (s_6(D) - 6 )
Partition 3 (x_7(D) - 7 )
Partition 4 (y_9(D) - 9 )
Partition 5 (x_11 - 11 )
Partition 6 (s_12 - 12 )
Partition 7 (_13(D) - 13 )

Coalesce list: (3)s_3 & (6)s_6(D) [map: 0, 2] : Success -> 0
Coalesce list: (3)s_3 & (12)s_12 [map: 0, 6] : Success -> 0
Coalesce list: (4)x_4 & (7)x_7(D) [map: 1, 3] : Success -> 1
Coalesce list: (4)x_4 & (11)x_11 [map: 1, 5] : Success -> 1
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (s_3 - 3 6 12 )
Partition 3 (x_4 - 4 7 11 )
Partition 4 (y_9(D) - 9 )
Partition 5 (_13(D) - 13 )

int dstring (char * s, int x, int y)
{
  char _1;
  char _2;
  int _13(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  dchar (_1, x_4, y_9(D));
  x_11 = x_4 + 8;
  s_12 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_6(D)(2), s_12(3)>
  # x_4 = PHI <x_7(D)(2), x_11(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; _1 = *s_3;

(insn 11 10 12 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":158:5 -1
     (nil))

(insn 12 11 0 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":158:5 -1
     (nil))

;; dchar (_1, x_4, y_9(D));

(insn 13 12 14 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])) "vid.c":158:5 -1
     (nil))

(insn 14 13 15 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":158:5 -1
     (nil))

(insn 15 14 16 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":158:5 -1
     (nil))

(call_insn 16 15 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":158:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))

;; x_11 = x_4 + 8;

(insn 17 16 18 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":159:6 -1
     (nil))

(insn 18 17 19 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 8 [0x8]))) "vid.c":159:6 -1
     (nil))

(insn 19 18 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 117)) "vid.c":159:6 -1
     (nil))

;; s_12 = s_3 + 1;

(insn 20 19 21 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":160:6 -1
     (nil))

(insn 21 20 22 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int 1 [0x1]))) "vid.c":160:6 -1
     (nil))

(insn 22 21 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 119)) "vid.c":160:6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 23 22 24 36 (nil) [0 uses])

(note 24 23 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = *s_3;

(insn 25 24 26 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":157:9 -1
     (nil))

(insn 26 25 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 121) [0 *s_3+0 S1 A8]))) "vid.c":157:9 -1
     (nil))

;; if (_2 != 0)

(insn 28 26 29 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":157:9 -1
     (nil))

(jump_insn 29 28 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "vid.c":157:9 -1
     (nil))

;; Generating RTL for gimple basic block 5


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":156:1 -1
     (nil))
(insn 3 2 4 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 1 r1 [ x ])) "vid.c":156:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])
        (reg:SI 2 r2 [ y ])) "vid.c":156:1 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 8 5 9 2 (set (pc)
        (label_ref 23)) "vid.c":157:8 -1
     (nil)
 -> 23)
;;  succ:       5

(barrier 9 8 27)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 27 9 10 4 37 (nil) [1 uses])
(note 10 27 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 12 4 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":158:5 -1
     (nil))
(insn 12 11 13 4 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":158:5 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 y+0 S4 A32])) "vid.c":158:5 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":158:5 -1
     (nil))
(insn 15 14 16 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":158:5 -1
     (nil))
(call_insn 16 15 17 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":158:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 17 16 18 4 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])) "vid.c":159:6 -1
     (nil))
(insn 18 17 19 4 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 8 [0x8]))) "vid.c":159:6 -1
     (nil))
(insn 19 18 20 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A32])
        (reg:SI 117)) "vid.c":159:6 -1
     (nil))
(insn 20 19 21 4 (set (reg:SI 120)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":160:6 -1
     (nil))
(insn 21 20 22 4 (set (reg:SI 119)
        (plus:SI (reg:SI 120)
            (const_int 1 [0x1]))) "vid.c":160:6 -1
     (nil))
(insn 22 21 23 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 119)) "vid.c":160:6 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 23 22 24 5 36 (nil) [1 uses])
(note 24 23 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 5 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":157:9 -1
     (nil))
(insn 26 25 28 5 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 121) [0 *s_3+0 S1 A8]))) "vid.c":157:9 -1
     (nil))
(insn 28 26 29 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":157:9 -1
     (nil))
(jump_insn 29 28 30 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 27)
            (pc))) "vid.c":157:9 -1
     (nil)
 -> 27)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 30 29 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 33 30 34 6 (clobber (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
(insn 34 33 37 6 (clobber (reg:SI 115 [ <retval> ])) "vid.c":162:1 -1
     (nil))
(insn 37 34 32 6 (const_int 0 [0]) "vid.c":162:1 -1
     (nil))
(insn 32 37 35 6 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":162:1 -1
     (nil))
(insn 35 32 0 6 (use (reg/i:SI 0 r0)) "vid.c":162:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function scroll (scroll, funcdef_no=6, decl_uid=4540, cgraph_uid=7, symbol_order=12)

int scroll ()
{
  int i;
  volatile int * fb.29_1;
  sizetype i.30_2;
  sizetype _3;
  sizetype _4;
  volatile int * _5;
  volatile int * fb.31_6;
  unsigned int i.32_7;
  unsigned int _8;
  volatile int * _9;
  int _10;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  i_13 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  fb.29_1 = fb;
  i.30_2 = (sizetype) i_11;
  _3 = i.30_2 + 10240;
  _4 = _3 * 4;
  _5 = fb.29_1 + _4;
  fb.31_6 = fb;
  i.32_7 = (unsigned int) i_11;
  _8 = i.32_7 * 4;
  _9 = fb.31_6 + _8;
  _10 ={v} *_5;
  *_9 ={v} _10;
  i_16 = i_11 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # i_11 = PHI <i_13(2), i_16(3)>
  if (i_11 <= 296959)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (fb.29_1 - 1 )
Partition 2 (i.30_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (fb.31_6 - 6 )
Partition 7 (i.32_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (i_11 - 11 )
Partition 13 (i_13 - 13 )
Partition 16 (i_16 - 16 )
Partition 17 (_17(D) - 17 )


Coalescible Partition map 

Partition 0, base 0 (i_11 - 11 13 16 )
Partition 3, base 1 (_17(D) - 17 )


Partition map 

Partition 0 (i_11 - 11 )
Partition 1 (i_13 - 13 )
Partition 2 (i_16 - 16 )
Partition 3 (_17(D) - 17 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) i_11 <-> i_13
(2147483646, 0) i_11 <-> i_16

Partition map 

Partition 0 (i_11 - 11 )
Partition 1 (i_13 - 13 )
Partition 2 (i_16 - 16 )
Partition 3 (_17(D) - 17 )

Coalesce list: (11)i_11 & (13)i_13 [map: 0, 1] : Success -> 0
Coalesce list: (11)i_11 & (16)i_16 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (fb.29_1 - 1 )
Partition 1 (i.30_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (fb.31_6 - 6 )
Partition 6 (i.32_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (i_11 - 11 13 16 )
Partition 11 (_17(D) - 17 )

int scroll ()
{
  int i;
  volatile int * fb.29_1;
  sizetype i.30_2;
  sizetype _3;
  sizetype _4;
  volatile int * _5;
  volatile int * fb.31_6;
  unsigned int i.32_7;
  unsigned int _8;
  volatile int * _9;
  int _10;
  int _17(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  i_13 = 0;
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  fb.29_1 = fb;
  i.30_2 = (sizetype) i_11;
  _3 = i.30_2 + 10240;
  _4 = _3 * 4;
  _5 = fb.29_1 + _4;
  fb.31_6 = fb;
  i.32_7 = (unsigned int) i_11;
  _8 = i.32_7 * 4;
  _9 = fb.31_6 + _8;
  _10 ={v} *_5;
  *_9 ={v} _10;
  i_16 = i_11 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # i_11 = PHI <i_13(2), i_16(3)>
  if (i_11 <= 296959)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}


Partition 0: size 4 align 4
	i_11

;; Generating RTL for gimple basic block 2

;; i_13 = 0;

(insn 5 4 6 (set (reg:SI 124)
        (const_int 0 [0])) "vid.c":167:9 -1
     (nil))

(insn 6 5 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 124)) "vid.c":167:9 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; fb.29_1 = fb;

(insn 10 9 11 (set (reg/f:SI 125)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:15 -1
     (nil))

(insn 11 10 0 (set (reg/f:SI 113 [ fb.29_1 ])
        (mem/f/c:SI (reg/f:SI 125) [1 fb+0 S4 A32])) "vid.c":168:15 -1
     (nil))

;; i.30_2 = (sizetype) i_11;

(insn 12 11 0 (set (reg:SI 114 [ i.30_2 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:15 -1
     (nil))

;; _3 = i.30_2 + 10240;

(insn 13 12 0 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ i.30_2 ])
            (const_int 10240 [0x2800]))) "vid.c":168:15 -1
     (nil))

;; _4 = _3 * 4;

(insn 14 13 0 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ _3 ])
            (const_int 2 [0x2]))) "vid.c":168:15 -1
     (nil))

;; _5 = fb.29_1 + _4;

(insn 15 14 0 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 113 [ fb.29_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":168:15 -1
     (nil))

;; fb.31_6 = fb;

(insn 16 15 17 (set (reg/f:SI 126)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:7 -1
     (nil))

(insn 17 16 0 (set (reg/f:SI 118 [ fb.31_6 ])
        (mem/f/c:SI (reg/f:SI 126) [1 fb+0 S4 A32])) "vid.c":168:7 -1
     (nil))

;; i.32_7 = (unsigned int) i_11;

(insn 18 17 0 (set (reg:SI 119 [ i.32_7 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:7 -1
     (nil))

;; _8 = i.32_7 * 4;

(insn 19 18 0 (set (reg:SI 120 [ _8 ])
        (ashift:SI (reg:SI 119 [ i.32_7 ])
            (const_int 2 [0x2]))) "vid.c":168:7 -1
     (nil))

;; _9 = fb.31_6 + _8;

(insn 20 19 0 (set (reg/f:SI 121 [ _9 ])
        (plus:SI (reg/f:SI 118 [ fb.31_6 ])
            (reg:SI 120 [ _8 ]))) "vid.c":168:7 -1
     (nil))

;; _10 ={v} *_5;

(insn 21 20 0 (set (reg:SI 122 [ _10 ])
        (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])) "vid.c":168:15 -1
     (nil))

;; *_9 ={v} _10;

(insn 22 21 0 (set (mem/v:SI (reg/f:SI 121 [ _9 ]) [3 *_9+0 S4 A32])
        (reg:SI 122 [ _10 ])) "vid.c":168:11 -1
     (nil))

;; i_16 = i_11 + 1;

(insn 23 22 24 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:32 -1
     (nil))

(insn 24 23 25 (set (reg:SI 127)
        (plus:SI (reg:SI 128)
            (const_int 1 [0x1]))) "vid.c":167:32 -1
     (nil))

(insn 25 24 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 127)) "vid.c":167:32 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 26 25 27 39 (nil) [0 uses])

(note 27 26 0 NOTE_INSN_BASIC_BLOCK)

;; if (i_11 <= 296959)

(insn 31 27 32 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:14 -1
     (nil))

(insn 32 31 33 (set (reg:SI 130)
        (const_int 296960 [0x48800])) "vid.c":167:14 -1
     (nil))

(insn 33 32 34 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129)
            (reg:SI 130))) "vid.c":167:14 -1
     (nil))

(jump_insn 34 33 0 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":167:14 -1
     (nil))

;; Generating RTL for gimple basic block 5


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:SI 124)
        (const_int 0 [0])) "vid.c":167:9 -1
     (nil))
(insn 6 5 7 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 124)) "vid.c":167:9 -1
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (label_ref 26)) "vid.c":167:3 -1
     (nil)
 -> 26)
;;  succ:       5

(barrier 8 7 28)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 28 8 9 4 40 (nil) [1 uses])
(note 9 28 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg/f:SI 125)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:15 -1
     (nil))
(insn 11 10 12 4 (set (reg/f:SI 113 [ fb.29_1 ])
        (mem/f/c:SI (reg/f:SI 125) [1 fb+0 S4 A32])) "vid.c":168:15 -1
     (nil))
(insn 12 11 13 4 (set (reg:SI 114 [ i.30_2 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:15 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ i.30_2 ])
            (const_int 10240 [0x2800]))) "vid.c":168:15 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 116 [ _4 ])
        (ashift:SI (reg:SI 115 [ _3 ])
            (const_int 2 [0x2]))) "vid.c":168:15 -1
     (nil))
(insn 15 14 16 4 (set (reg/f:SI 117 [ _5 ])
        (plus:SI (reg/f:SI 113 [ fb.29_1 ])
            (reg:SI 116 [ _4 ]))) "vid.c":168:15 -1
     (nil))
(insn 16 15 17 4 (set (reg/f:SI 126)
        (symbol_ref:SI ("fb") [flags 0x2]  <var_decl 0x7fd4189ccc60 fb>)) "vid.c":168:7 -1
     (nil))
(insn 17 16 18 4 (set (reg/f:SI 118 [ fb.31_6 ])
        (mem/f/c:SI (reg/f:SI 126) [1 fb+0 S4 A32])) "vid.c":168:7 -1
     (nil))
(insn 18 17 19 4 (set (reg:SI 119 [ i.32_7 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":168:7 -1
     (nil))
(insn 19 18 20 4 (set (reg:SI 120 [ _8 ])
        (ashift:SI (reg:SI 119 [ i.32_7 ])
            (const_int 2 [0x2]))) "vid.c":168:7 -1
     (nil))
(insn 20 19 21 4 (set (reg/f:SI 121 [ _9 ])
        (plus:SI (reg/f:SI 118 [ fb.31_6 ])
            (reg:SI 120 [ _8 ]))) "vid.c":168:7 -1
     (nil))
(insn 21 20 22 4 (set (reg:SI 122 [ _10 ])
        (mem/v:SI (reg/f:SI 117 [ _5 ]) [3 *_5+0 S4 A32])) "vid.c":168:15 -1
     (nil))
(insn 22 21 23 4 (set (mem/v:SI (reg/f:SI 121 [ _9 ]) [3 *_9+0 S4 A32])
        (reg:SI 122 [ _10 ])) "vid.c":168:11 -1
     (nil))
(insn 23 22 24 4 (set (reg:SI 128)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:32 -1
     (nil))
(insn 24 23 25 4 (set (reg:SI 127)
        (plus:SI (reg:SI 128)
            (const_int 1 [0x1]))) "vid.c":167:32 -1
     (nil))
(insn 25 24 26 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])
        (reg:SI 127)) "vid.c":167:32 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 26 25 27 5 39 (nil) [1 uses])
(note 27 26 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 31 27 32 5 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 i+0 S4 A32])) "vid.c":167:14 -1
     (nil))
(insn 32 31 33 5 (set (reg:SI 130)
        (const_int 296960 [0x48800])) "vid.c":167:14 -1
     (nil))
(insn 33 32 34 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129)
            (reg:SI 130))) "vid.c":167:14 -1
     (nil))
(jump_insn 34 33 35 5 (set (pc)
        (if_then_else (lt (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":167:14 -1
     (nil)
 -> 28)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 35 34 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 38 35 39 6 (clobber (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
(insn 39 38 42 6 (clobber (reg:SI 123 [ <retval> ])) "vid.c":170:1 -1
     (nil))
(insn 42 39 37 6 (const_int 0 [0]) "vid.c":170:1 -1
     (nil))
(insn 37 42 40 6 (set (reg/i:SI 0 r0)
        (reg:SI 123 [ <retval> ])) "vid.c":170:1 -1
     (nil))
(insn 40 37 0 6 (use (reg/i:SI 0 r0)) "vid.c":170:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kpchar (kpchar, funcdef_no=7, decl_uid=4550, cgraph_uid=8, symbol_order=13)

int kpchar (char c, int ro, int co)
{
  int y;
  int x;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_2 = co_1(D) * 8;
  y_4 = ro_3(D) * 16;
  dchar (c_6(D), x_2, y_4);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (co_1(D) - 1 )
Partition 2 (x_2 - 2 )
Partition 3 (ro_3(D) - 3 )
Partition 4 (y_4 - 4 )
Partition 6 (c_6(D) - 6 )
Partition 8 (_8(D) - 8 )


Coalescible Partition map 

Partition 0, base 0 (co_1(D) - 1 )
Partition 1, base 1 (ro_3(D) - 3 )
Partition 2, base 2 (c_6(D) - 6 )
Partition 3, base 3 (_8(D) - 8 )


Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (ro_3(D) - 3 )
Partition 2 (c_6(D) - 6 )
Partition 3 (_8(D) - 8 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (ro_3(D) - 3 )
Partition 2 (c_6(D) - 6 )
Partition 3 (_8(D) - 8 )

After Coalescing:

Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (x_2 - 2 )
Partition 2 (ro_3(D) - 3 )
Partition 3 (y_4 - 4 )
Partition 4 (c_6(D) - 6 )
Partition 5 (_8(D) - 8 )

int kpchar (char c, int ro, int co)
{
  int y;
  int x;
  int _8(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_2 = co_1(D) * 8;
  y_4 = ro_3(D) * 16;
  dchar (c_6(D), x_2, y_4);
  return;
;;    succ:       EXIT

}


Partition 1: size 4 align 4
	y_4
Partition 0: size 4 align 4
	x_2

;; Generating RTL for gimple basic block 2

;; x_2 = co_1(D) * 8;

(insn 10 9 11 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":175:6 -1
     (nil))

(insn 11 10 12 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":175:6 -1
     (nil))

(insn 12 11 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":175:6 -1
     (nil))

;; y_4 = ro_3(D) * 16;

(insn 13 12 14 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":176:6 -1
     (nil))

(insn 14 13 15 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":176:6 -1
     (nil))

(insn 15 14 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":176:6 -1
     (nil))

;; dchar (c_6(D), x_2, y_4);

(insn 16 15 17 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":178:4 -1
     (nil))

(insn 17 16 18 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":178:4 -1
     (nil))

(insn 18 17 19 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":178:4 -1
     (nil))

(insn 19 18 20 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":178:4 -1
     (nil))

(call_insn 20 19 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":178:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":173:1 -1
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":173:1 -1
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":173:1 -1
     (nil))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":173:1 -1
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":173:1 -1
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":175:6 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":175:6 -1
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":175:6 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":176:6 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":176:6 -1
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":176:6 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":178:4 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":178:4 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":178:4 -1
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":178:4 -1
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dchar") [flags 0x3]  <function_decl 0x7fd417ce1d00 dchar>) [0 dchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":178:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":180:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":180:1 -1
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":180:1 -1
     (nil))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":180:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function unkpchar (unkpchar, funcdef_no=8, decl_uid=4557, cgraph_uid=9, symbol_order=14)

int unkpchar (char c, int ro, int co)
{
  int y;
  int x;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_2 = co_1(D) * 8;
  y_4 = ro_3(D) * 16;
  undchar (c_6(D), x_2, y_4);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (co_1(D) - 1 )
Partition 2 (x_2 - 2 )
Partition 3 (ro_3(D) - 3 )
Partition 4 (y_4 - 4 )
Partition 6 (c_6(D) - 6 )
Partition 8 (_8(D) - 8 )


Coalescible Partition map 

Partition 0, base 0 (co_1(D) - 1 )
Partition 1, base 1 (ro_3(D) - 3 )
Partition 2, base 2 (c_6(D) - 6 )
Partition 3, base 3 (_8(D) - 8 )


Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (ro_3(D) - 3 )
Partition 2 (c_6(D) - 6 )
Partition 3 (_8(D) - 8 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (ro_3(D) - 3 )
Partition 2 (c_6(D) - 6 )
Partition 3 (_8(D) - 8 )

After Coalescing:

Partition map 

Partition 0 (co_1(D) - 1 )
Partition 1 (x_2 - 2 )
Partition 2 (ro_3(D) - 3 )
Partition 3 (y_4 - 4 )
Partition 4 (c_6(D) - 6 )
Partition 5 (_8(D) - 8 )

int unkpchar (char c, int ro, int co)
{
  int y;
  int x;
  int _8(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  x_2 = co_1(D) * 8;
  y_4 = ro_3(D) * 16;
  undchar (c_6(D), x_2, y_4);
  return;
;;    succ:       EXIT

}


Partition 1: size 4 align 4
	y_4
Partition 0: size 4 align 4
	x_2

;; Generating RTL for gimple basic block 2

;; x_2 = co_1(D) * 8;

(insn 10 9 11 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":185:6 -1
     (nil))

(insn 11 10 12 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":185:6 -1
     (nil))

(insn 12 11 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":185:6 -1
     (nil))

;; y_4 = ro_3(D) * 16;

(insn 13 12 14 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":186:6 -1
     (nil))

(insn 14 13 15 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":186:6 -1
     (nil))

(insn 15 14 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":186:6 -1
     (nil))

;; undchar (c_6(D), x_2, y_4);

(insn 16 15 17 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":188:4 -1
     (nil))

(insn 17 16 18 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":188:4 -1
     (nil))

(insn 18 17 19 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":188:4 -1
     (nil))

(insn 19 18 20 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":188:4 -1
     (nil))

(call_insn 20 19 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("undchar") [flags 0x3]  <function_decl 0x7fd417ce1f00 undchar>) [0 undchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":188:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 5 2 (set (reg:SI 114)
        (reg:SI 0 r0 [ c ])) "vid.c":183:1 -1
     (nil))
(insn 5 2 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])
        (reg:SI 1 r1 [ ro ])) "vid.c":183:1 -1
     (nil))
(insn 6 5 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])
        (reg:SI 2 r2 [ co ])) "vid.c":183:1 -1
     (nil))
(insn 3 6 4 2 (set (reg:QI 115)
        (subreg:QI (reg:SI 114) 0)) "vid.c":183:1 -1
     (nil))
(insn 4 3 7 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8])
        (reg:QI 115)) "vid.c":183:1 -1
     (nil))
(note 7 4 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -20 [0xffffffffffffffec])) [3 co+0 S4 A32])) "vid.c":185:6 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 116)
        (ashift:SI (reg:SI 117)
            (const_int 3 [0x3]))) "vid.c":185:6 -1
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 116)) "vid.c":185:6 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 119)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 ro+0 S4 A32])) "vid.c":186:6 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 118)
        (ashift:SI (reg:SI 119)
            (const_int 4 [0x4]))) "vid.c":186:6 -1
     (nil))
(insn 15 14 16 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 118)) "vid.c":186:6 -1
     (nil))
(insn 16 15 17 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -9 [0xfffffffffffffff7])) [0 c+0 S1 A8]))) "vid.c":188:4 -1
     (nil))
(insn 17 16 18 2 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":188:4 -1
     (nil))
(insn 18 17 19 2 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":188:4 -1
     (nil))
(insn 19 18 20 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":188:4 -1
     (nil))
(call_insn 20 19 23 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("undchar") [flags 0x3]  <function_decl 0x7fd417ce1f00 undchar>) [0 undchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":188:4 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 23 20 24 2 (clobber (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
(insn 24 23 27 2 (clobber (reg:SI 113 [ <retval> ])) "vid.c":189:1 -1
     (nil))
(insn 27 24 22 2 (const_int 0 [0]) "vid.c":189:1 -1
     (nil))
(insn 22 27 25 2 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":189:1 -1
     (nil))
(insn 25 22 0 2 (use (reg/i:SI 0 r0)) "vid.c":189:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function erasechar (erasechar, funcdef_no=9, decl_uid=4561, cgraph_uid=10, symbol_order=15)

int erasechar ()
{
  unsigned char byte;
  unsigned char * caddress;
  int y;
  int x;
  int bit;
  int r;
  int col.33_1;
  int row.34_2;
  int _3;
  int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  col.33_1 = col;
  x_10 = col.33_1 * 8;
  row.34_2 = row;
  y_11 = row.34_2 * 16;
  r_12 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  bit_13 = 0;
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  _3 = x_10 + bit_6;
  _4 = y_11 + r_5;
  clrpix (_3, _4);
  bit_16 = bit_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # bit_6 = PHI <bit_13(3), bit_16(4)>
  if (bit_6 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  r_14 = r_5 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # r_5 = PHI <r_12(2), r_14(6)>
  if (r_5 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (col.33_1 - 1 )
Partition 2 (row.34_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (r_5 - 5 )
Partition 6 (bit_6 - 6 )
Partition 10 (x_10 - 10 )
Partition 11 (y_11 - 11 )
Partition 12 (r_12 - 12 )
Partition 13 (bit_13 - 13 )
Partition 14 (r_14 - 14 )
Partition 16 (bit_16 - 16 )
Partition 17 (_17(D) - 17 )


Coalescible Partition map 

Partition 0, base 0 (r_5 - 5 12 14 )
Partition 1, base 1 (bit_6 - 6 13 16 )
Partition 6, base 2 (_17(D) - 17 )


Partition map 

Partition 0 (r_5 - 5 )
Partition 1 (bit_6 - 6 )
Partition 2 (r_12 - 12 )
Partition 3 (bit_13 - 13 )
Partition 4 (r_14 - 14 )
Partition 5 (bit_16 - 16 )
Partition 6 (_17(D) - 17 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) bit_6 <-> bit_13
(2147483646, 0) bit_6 <-> bit_16
(2147483646, 0) r_5 <-> r_12
(2147483646, 0) r_5 <-> r_14

Partition map 

Partition 0 (r_5 - 5 )
Partition 1 (bit_6 - 6 )
Partition 2 (r_12 - 12 )
Partition 3 (bit_13 - 13 )
Partition 4 (r_14 - 14 )
Partition 5 (bit_16 - 16 )
Partition 6 (_17(D) - 17 )

Coalesce list: (6)bit_6 & (13)bit_13 [map: 1, 3] : Success -> 1
Coalesce list: (6)bit_6 & (16)bit_16 [map: 1, 5] : Success -> 1
Coalesce list: (5)r_5 & (12)r_12 [map: 0, 2] : Success -> 0
Coalesce list: (5)r_5 & (14)r_14 [map: 0, 4] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (col.33_1 - 1 )
Partition 1 (row.34_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (r_5 - 5 12 14 )
Partition 5 (bit_6 - 6 13 16 )
Partition 6 (x_10 - 10 )
Partition 7 (y_11 - 11 )
Partition 8 (_17(D) - 17 )

int erasechar ()
{
  unsigned char byte;
  unsigned char * caddress;
  int y;
  int x;
  int bit;
  int r;
  int col.33_1;
  int row.34_2;
  int _3;
  int _4;
  int _17(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  col.33_1 = col;
  x_10 = col.33_1 * 8;
  row.34_2 = row;
  y_11 = row.34_2 * 16;
  r_12 = 0;
  goto <bb 7>; [INV]
;;    succ:       7

;;   basic block 3, loop depth 1
;;    pred:       7
  bit_13 = 0;
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 2
;;    pred:       5
  _3 = x_10 + bit_6;
  _4 = y_11 + r_5;
  clrpix (_3, _4);
  bit_16 = bit_6 + 1;
;;    succ:       5

;;   basic block 5, loop depth 2
;;    pred:       3
;;                4
  # bit_6 = PHI <bit_13(3), bit_16(4)>
  if (bit_6 <= 7)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       4
;;                6

;;   basic block 6, loop depth 1
;;    pred:       5
  r_14 = r_5 + 1;
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       2
;;                6
  # r_5 = PHI <r_12(2), r_14(6)>
  if (r_5 <= 15)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       3
;;                8

;;   basic block 8, loop depth 0
;;    pred:       7
  return;
;;    succ:       EXIT

}


Partition 3: size 4 align 4
	y_11
Partition 2: size 4 align 4
	x_10
Partition 1: size 4 align 4
	bit_6
Partition 0: size 4 align 4
	r_5

;; Generating RTL for gimple basic block 2

;; col.33_1 = col;

(insn 5 4 6 (set (reg/f:SI 118)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":197:10 -1
     (nil))

(insn 6 5 0 (set (reg:SI 113 [ col.33_1 ])
        (mem/c:SI (reg/f:SI 118) [3 col+0 S4 A32])) "vid.c":197:10 -1
     (nil))

;; x_10 = col.33_1 * 8;

(insn 7 6 8 (set (reg:SI 119)
        (ashift:SI (reg:SI 113 [ col.33_1 ])
            (const_int 3 [0x3]))) "vid.c":197:5 -1
     (nil))

(insn 8 7 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 119)) "vid.c":197:5 -1
     (nil))

;; row.34_2 = row;

(insn 9 8 10 (set (reg/f:SI 120)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":198:10 -1
     (nil))

(insn 10 9 0 (set (reg:SI 114 [ row.34_2 ])
        (mem/c:SI (reg/f:SI 120) [3 row+0 S4 A32])) "vid.c":198:10 -1
     (nil))

;; y_11 = row.34_2 * 16;

(insn 11 10 12 (set (reg:SI 121)
        (ashift:SI (reg:SI 114 [ row.34_2 ])
            (const_int 4 [0x4]))) "vid.c":198:5 -1
     (nil))

(insn 12 11 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 121)) "vid.c":198:5 -1
     (nil))

;; r_12 = 0;

(insn 13 12 14 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":202:9 -1
     (nil))

(insn 14 13 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 122)) "vid.c":202:9 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; bit_13 = 0;

(insn 18 17 19 (set (reg:SI 123)
        (const_int 0 [0])) "vid.c":203:14 -1
     (nil))

(insn 19 18 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 123)) "vid.c":203:14 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _3 = x_10 + bit_6;

(insn 23 22 24 (set (reg:SI 124)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":204:9 -1
     (nil))

(insn 24 23 25 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":204:9 -1
     (nil))

(insn 25 24 0 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 124)
            (reg:SI 125))) "vid.c":204:9 -1
     (nil))

;; _4 = y_11 + r_5;

(insn 26 25 27 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":204:9 -1
     (nil))

(insn 27 26 28 (set (reg:SI 127)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":204:9 -1
     (nil))

(insn 28 27 0 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 126)
            (reg:SI 127))) "vid.c":204:9 -1
     (nil))

;; clrpix (_3, _4);

(insn 29 28 30 (set (reg:SI 1 r1)
        (reg:SI 116 [ _4 ])) "vid.c":204:9 -1
     (nil))

(insn 30 29 31 (set (reg:SI 0 r0)
        (reg:SI 115 [ _3 ])) "vid.c":204:9 -1
     (nil))

(call_insn 31 30 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":204:9 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))

;; bit_16 = bit_6 + 1;

(insn 32 31 33 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:28 -1
     (nil))

(insn 33 32 34 (set (reg:SI 128)
        (plus:SI (reg:SI 129)
            (const_int 1 [0x1]))) "vid.c":203:28 -1
     (nil))

(insn 34 33 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 128)) "vid.c":203:28 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 35 34 36 47 (nil) [0 uses])

(note 36 35 0 NOTE_INSN_BASIC_BLOCK)

;; if (bit_6 <= 7)

(insn 40 36 41 (set (reg:SI 130)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:21 -1
     (nil))

(insn 41 40 42 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (const_int 7 [0x7]))) "vid.c":203:21 -1
     (nil))

(jump_insn 42 41 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "vid.c":203:21 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; r_14 = r_5 + 1;

(insn 44 43 45 (set (reg:SI 132)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:20 -1
     (nil))

(insn 45 44 46 (set (reg:SI 131)
        (plus:SI (reg:SI 132)
            (const_int 1 [0x1]))) "vid.c":202:20 -1
     (nil))

(insn 46 45 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 131)) "vid.c":202:20 -1
     (nil))

;; Generating RTL for gimple basic block 7

;; 

(code_label 47 46 48 46 (nil) [0 uses])

(note 48 47 0 NOTE_INSN_BASIC_BLOCK)

;; if (r_5 <= 15)

(insn 52 48 53 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:14 -1
     (nil))

(insn 53 52 54 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133)
            (const_int 15 [0xf]))) "vid.c":202:14 -1
     (nil))

(jump_insn 54 53 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "vid.c":202:14 -1
     (nil))

;; Generating RTL for gimple basic block 8


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 10 into block 9...
Merged blocks 9 and 10.
Merged 9 and 10 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":197:10 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ col.33_1 ])
        (mem/c:SI (reg/f:SI 118) [3 col+0 S4 A32])) "vid.c":197:10 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 119)
        (ashift:SI (reg:SI 113 [ col.33_1 ])
            (const_int 3 [0x3]))) "vid.c":197:5 -1
     (nil))
(insn 8 7 9 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])
        (reg:SI 119)) "vid.c":197:5 -1
     (nil))
(insn 9 8 10 2 (set (reg/f:SI 120)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":198:10 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 114 [ row.34_2 ])
        (mem/c:SI (reg/f:SI 120) [3 row+0 S4 A32])) "vid.c":198:10 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 121)
        (ashift:SI (reg:SI 114 [ row.34_2 ])
            (const_int 4 [0x4]))) "vid.c":198:5 -1
     (nil))
(insn 12 11 13 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])
        (reg:SI 121)) "vid.c":198:5 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":202:9 -1
     (nil))
(insn 14 13 15 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 122)) "vid.c":202:9 -1
     (nil))
(jump_insn 15 14 16 2 (set (pc)
        (label_ref 47)) "vid.c":202:3 -1
     (nil)
 -> 47)
;;  succ:       8

(barrier 16 15 49)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 49 16 17 4 49 (nil) [1 uses])
(note 17 49 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 4 (set (reg:SI 123)
        (const_int 0 [0])) "vid.c":203:14 -1
     (nil))
(insn 19 18 20 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 123)) "vid.c":203:14 -1
     (nil))
(jump_insn 20 19 21 4 (set (pc)
        (label_ref 35)) "vid.c":203:6 -1
     (nil)
 -> 35)
;;  succ:       6

(barrier 21 20 37)
;; basic block 5, loop depth 2, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
(code_label 37 21 22 5 48 (nil) [1 uses])
(note 22 37 23 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 23 22 24 5 (set (reg:SI 124)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [3 x+0 S4 A64])) "vid.c":204:9 -1
     (nil))
(insn 24 23 25 5 (set (reg:SI 125)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":204:9 -1
     (nil))
(insn 25 24 26 5 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 124)
            (reg:SI 125))) "vid.c":204:9 -1
     (nil))
(insn 26 25 27 5 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 y+0 S4 A32])) "vid.c":204:9 -1
     (nil))
(insn 27 26 28 5 (set (reg:SI 127)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":204:9 -1
     (nil))
(insn 28 27 29 5 (set (reg:SI 116 [ _4 ])
        (plus:SI (reg:SI 126)
            (reg:SI 127))) "vid.c":204:9 -1
     (nil))
(insn 29 28 30 5 (set (reg:SI 1 r1)
        (reg:SI 116 [ _4 ])) "vid.c":204:9 -1
     (nil))
(insn 30 29 31 5 (set (reg:SI 0 r0)
        (reg:SI 115 [ _3 ])) "vid.c":204:9 -1
     (nil))
(call_insn 31 30 32 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrpix") [flags 0x3]  <function_decl 0x7fd417ce1900 clrpix>) [0 clrpix S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":204:9 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (nil)))))
(insn 32 31 33 5 (set (reg:SI 129)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:28 -1
     (nil))
(insn 33 32 34 5 (set (reg:SI 128)
        (plus:SI (reg:SI 129)
            (const_int 1 [0x1]))) "vid.c":203:28 -1
     (nil))
(insn 34 33 35 5 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])
        (reg:SI 128)) "vid.c":203:28 -1
     (nil))
;;  succ:       6 (FALLTHRU,DFS_BACK)

;; basic block 6, loop depth 2, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
;;              5 (FALLTHRU,DFS_BACK)
(code_label 35 34 36 6 47 (nil) [1 uses])
(note 36 35 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 40 36 41 6 (set (reg:SI 130)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 bit+0 S4 A32])) "vid.c":203:21 -1
     (nil))
(insn 41 40 42 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 130)
            (const_int 7 [0x7]))) "vid.c":203:21 -1
     (nil))
(jump_insn 42 41 43 6 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) "vid.c":203:21 -1
     (nil)
 -> 37)
;;  succ:       5
;;              7 (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 132)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:20 -1
     (nil))
(insn 45 44 46 7 (set (reg:SI 131)
        (plus:SI (reg:SI 132)
            (const_int 1 [0x1]))) "vid.c":202:20 -1
     (nil))
(insn 46 45 47 7 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])
        (reg:SI 131)) "vid.c":202:20 -1
     (nil))
;;  succ:       8 (FALLTHRU,DFS_BACK)

;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              7 (FALLTHRU,DFS_BACK)
(code_label 47 46 48 8 46 (nil) [1 uses])
(note 48 47 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 52 48 53 8 (set (reg:SI 133)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -16 [0xfffffffffffffff0])) [3 r+0 S4 A64])) "vid.c":202:14 -1
     (nil))
(insn 53 52 54 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 133)
            (const_int 15 [0xf]))) "vid.c":202:14 -1
     (nil))
(jump_insn 54 53 55 8 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) "vid.c":202:14 -1
     (nil)
 -> 49)
;;  succ:       4
;;              9 (FALLTHRU)

;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
(note 55 54 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 58 55 59 9 (clobber (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
(insn 59 58 62 9 (clobber (reg:SI 117 [ <retval> ])) "vid.c":207:1 -1
     (nil))
(insn 62 59 57 9 (const_int 0 [0]) "vid.c":207:1 -1
     (nil))
(insn 57 62 60 9 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":207:1 -1
     (nil))
(insn 60 57 0 9 (use (reg/i:SI 0 r0)) "vid.c":207:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function clrcursor (clrcursor, funcdef_no=10, decl_uid=4577, cgraph_uid=11, symbol_order=16)

int clrcursor ()
{
  int row.35_1;
  int col.36_2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  row.35_1 = row;
  col.36_2 = col;
  unkpchar (127, row.35_1, col.36_2);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (row.35_1 - 1 )
Partition 2 (col.36_2 - 2 )
Partition 5 (_5(D) - 5 )


Coalescible Partition map 

Partition 0, base 0 (_5(D) - 5 )


Partition map 

Partition 0 (_5(D) - 5 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_5(D) - 5 )

After Coalescing:

Partition map 

Partition 0 (row.35_1 - 1 )
Partition 1 (col.36_2 - 2 )
Partition 2 (_5(D) - 5 )

int clrcursor ()
{
  int row.35_1;
  int col.36_2;
  int _5(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  row.35_1 = row;
  col.36_2 = col;
  unkpchar (127, row.35_1, col.36_2);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; row.35_1 = row;

(insn 5 4 6 (set (reg/f:SI 116)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":211:3 -1
     (nil))

(insn 6 5 0 (set (reg:SI 113 [ row.35_1 ])
        (mem/c:SI (reg/f:SI 116) [3 row+0 S4 A32])) "vid.c":211:3 -1
     (nil))

;; col.36_2 = col;

(insn 7 6 8 (set (reg/f:SI 117)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":211:3 -1
     (nil))

(insn 8 7 0 (set (reg:SI 114 [ col.36_2 ])
        (mem/c:SI (reg/f:SI 117) [3 col+0 S4 A32])) "vid.c":211:3 -1
     (nil))

;; unkpchar (127, row.35_1, col.36_2);

(insn 9 8 10 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.36_2 ])) "vid.c":211:3 -1
     (nil))

(insn 10 9 11 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.35_1 ])) "vid.c":211:3 -1
     (nil))

(insn 11 10 12 (set (reg:SI 0 r0)
        (const_int 127 [0x7f])) "vid.c":211:3 -1
     (nil))

(call_insn 12 11 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x3]  <function_decl 0x7fd417cfe700 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":211:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 116)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":211:3 -1
     (nil))
(insn 6 5 7 2 (set (reg:SI 113 [ row.35_1 ])
        (mem/c:SI (reg/f:SI 116) [3 row+0 S4 A32])) "vid.c":211:3 -1
     (nil))
(insn 7 6 8 2 (set (reg/f:SI 117)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":211:3 -1
     (nil))
(insn 8 7 9 2 (set (reg:SI 114 [ col.36_2 ])
        (mem/c:SI (reg/f:SI 117) [3 col+0 S4 A32])) "vid.c":211:3 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.36_2 ])) "vid.c":211:3 -1
     (nil))
(insn 10 9 11 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.35_1 ])) "vid.c":211:3 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 0 r0)
        (const_int 127 [0x7f])) "vid.c":211:3 -1
     (nil))
(call_insn 12 11 15 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("unkpchar") [flags 0x3]  <function_decl 0x7fd417cfe700 unkpchar>) [0 unkpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":211:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 15 12 16 2 (clobber (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
(insn 16 15 19 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":212:1 -1
     (nil))
(insn 19 16 14 2 (const_int 0 [0]) "vid.c":212:1 -1
     (nil))
(insn 14 19 17 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":212:1 -1
     (nil))
(insn 17 14 0 2 (use (reg/i:SI 0 r0)) "vid.c":212:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function putcursor (putcursor, funcdef_no=11, decl_uid=4580, cgraph_uid=12, symbol_order=17)

int putcursor (unsigned char c)
{
  int row.37_1;
  int col.38_2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  row.37_1 = row;
  col.38_2 = col;
  kpchar (c_4(D), row.37_1, col.38_2);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (row.37_1 - 1 )
Partition 2 (col.38_2 - 2 )
Partition 4 (c_4(D) - 4 )
Partition 6 (_6(D) - 6 )


Coalescible Partition map 

Partition 0, base 0 (c_4(D) - 4 )
Partition 1, base 1 (_6(D) - 6 )


Partition map 

Partition 0 (c_4(D) - 4 )
Partition 1 (_6(D) - 6 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (c_4(D) - 4 )
Partition 1 (_6(D) - 6 )

After Coalescing:

Partition map 

Partition 0 (row.37_1 - 1 )
Partition 1 (col.38_2 - 2 )
Partition 2 (c_4(D) - 4 )
Partition 3 (_6(D) - 6 )

int putcursor (unsigned char c)
{
  int row.37_1;
  int col.38_2;
  int _6(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  row.37_1 = row;
  col.38_2 = col;
  kpchar (c_4(D), row.37_1, col.38_2);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; row.37_1 = row;

(insn 8 7 9 (set (reg/f:SI 118)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":216:3 -1
     (nil))

(insn 9 8 0 (set (reg:SI 113 [ row.37_1 ])
        (mem/c:SI (reg/f:SI 118) [3 row+0 S4 A32])) "vid.c":216:3 -1
     (nil))

;; col.38_2 = col;

(insn 10 9 11 (set (reg/f:SI 119)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":216:3 -1
     (nil))

(insn 11 10 0 (set (reg:SI 114 [ col.38_2 ])
        (mem/c:SI (reg/f:SI 119) [3 col+0 S4 A32])) "vid.c":216:3 -1
     (nil))

;; kpchar (c_4(D), row.37_1, col.38_2);

(insn 12 11 13 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":216:3 -1
     (nil))

(insn 13 12 14 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.38_2 ])) "vid.c":216:3 -1
     (nil))

(insn 14 13 15 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.37_1 ])) "vid.c":216:3 -1
     (nil))

(insn 15 14 16 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":216:3 -1
     (nil))

(call_insn 16 15 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":216:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 4 into block 2...
Merged blocks 2 and 4.
Merged 2 and 4 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 116)
        (reg:SI 0 r0 [ c ])) "vid.c":215:1 -1
     (nil))
(insn 3 2 4 2 (set (reg:QI 117)
        (subreg:QI (reg:SI 116) 0)) "vid.c":215:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 117)) "vid.c":215:1 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:SI 118)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":216:3 -1
     (nil))
(insn 9 8 10 2 (set (reg:SI 113 [ row.37_1 ])
        (mem/c:SI (reg/f:SI 118) [3 row+0 S4 A32])) "vid.c":216:3 -1
     (nil))
(insn 10 9 11 2 (set (reg/f:SI 119)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":216:3 -1
     (nil))
(insn 11 10 12 2 (set (reg:SI 114 [ col.38_2 ])
        (mem/c:SI (reg/f:SI 119) [3 col+0 S4 A32])) "vid.c":216:3 -1
     (nil))
(insn 12 11 13 2 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":216:3 -1
     (nil))
(insn 13 12 14 2 (set (reg:SI 2 r2)
        (reg:SI 114 [ col.38_2 ])) "vid.c":216:3 -1
     (nil))
(insn 14 13 15 2 (set (reg:SI 1 r1)
        (reg:SI 113 [ row.37_1 ])) "vid.c":216:3 -1
     (nil))
(insn 15 14 16 2 (set (reg:SI 0 r0)
        (reg:SI 120)) "vid.c":216:3 -1
     (nil))
(call_insn 16 15 19 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":216:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 19 16 20 2 (clobber (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
(insn 20 19 23 2 (clobber (reg:SI 115 [ <retval> ])) "vid.c":217:1 -1
     (nil))
(insn 23 20 18 2 (const_int 0 [0]) "vid.c":217:1 -1
     (nil))
(insn 18 23 21 2 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":217:1 -1
     (nil))
(insn 21 18 0 2 (use (reg/i:SI 0 r0)) "vid.c":217:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kputc (kputc, funcdef_no=12, decl_uid=4583, cgraph_uid=13, symbol_order=18)

int kputc (char c)
{
  unsigned char cursor.39_1;
  int row.40_2;
  int _3;
  int row.41_4;
  unsigned char cursor.42_5;
  int col.43_6;
  int col.44_7;
  int _8;
  unsigned char cursor.45_9;
  int row.46_10;
  int col.47_11;
  int col.48_12;
  int _13;
  int col.49_14;
  int row.50_15;
  int _16;
  int row.51_17;
  unsigned char cursor.52_18;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  clrcursor ();
  if (c_25(D) == 13)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  col = 0;
  cursor.39_1 = cursor;
  putcursor (cursor.39_1);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 4, loop depth 0
;;    pred:       2
  if (c_25(D) == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       5
;;                8

;;   basic block 5, loop depth 0
;;    pred:       4
  row.40_2 = row;
  _3 = row.40_2 + 1;
  row = _3;
  row.41_4 = row;
  if (row.41_4 > 24)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  row = 24;
  scroll ();
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       5
;;                6
  cursor.42_5 = cursor;
  putcursor (cursor.42_5);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 8, loop depth 0
;;    pred:       4
  if (c_25(D) == 8)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       9
;;                12

;;   basic block 9, loop depth 0
;;    pred:       8
  col.43_6 = col;
  if (col.43_6 > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 0
;;    pred:       9
  col.44_7 = col;
  _8 = col.44_7 + -1;
  col = _8;
  erasechar ();
  cursor.45_9 = cursor;
  putcursor (cursor.45_9);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 12, loop depth 0
;;    pred:       8
  row.46_10 = row;
  col.47_11 = col;
  kpchar (c_25(D), row.46_10, col.47_11);
  col.48_12 = col;
  _13 = col.48_12 + 1;
  col = _13;
  col.49_14 = col;
  if (col.49_14 > 79)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       13
;;                15

;;   basic block 13, loop depth 0
;;    pred:       12
  col = 0;
  row.50_15 = row;
  _16 = row.50_15 + 1;
  row = _16;
  row.51_17 = row;
  if (row.51_17 > 24)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 0
;;    pred:       13
  row = 24;
  scroll ();
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       12
;;                13
;;                14
  cursor.52_18 = cursor;
  putcursor (cursor.52_18);
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       3
;;                7
;;                11
;;                15
<L14>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (cursor.39_1 - 1 )
Partition 2 (row.40_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (row.41_4 - 4 )
Partition 5 (cursor.42_5 - 5 )
Partition 6 (col.43_6 - 6 )
Partition 7 (col.44_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (cursor.45_9 - 9 )
Partition 10 (row.46_10 - 10 )
Partition 11 (col.47_11 - 11 )
Partition 12 (col.48_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (col.49_14 - 14 )
Partition 15 (row.50_15 - 15 )
Partition 16 (_16 - 16 )
Partition 17 (row.51_17 - 17 )
Partition 18 (cursor.52_18 - 18 )
Partition 25 (c_25(D) - 25 )
Partition 42 (_42(D) - 42 )


Coalescible Partition map 

Partition 0, base 0 (c_25(D) - 25 )
Partition 1, base 1 (_42(D) - 42 )


Partition map 

Partition 0 (c_25(D) - 25 )
Partition 1 (_42(D) - 42 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (c_25(D) - 25 )
Partition 1 (_42(D) - 42 )

After Coalescing:

Partition map 

Partition 0 (cursor.39_1 - 1 )
Partition 1 (row.40_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (row.41_4 - 4 )
Partition 4 (cursor.42_5 - 5 )
Partition 5 (col.43_6 - 6 )
Partition 6 (col.44_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (cursor.45_9 - 9 )
Partition 9 (row.46_10 - 10 )
Partition 10 (col.47_11 - 11 )
Partition 11 (col.48_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (col.49_14 - 14 )
Partition 14 (row.50_15 - 15 )
Partition 15 (_16 - 16 )
Partition 16 (row.51_17 - 17 )
Partition 17 (cursor.52_18 - 18 )
Partition 18 (c_25(D) - 25 )
Partition 19 (_42(D) - 42 )

int kputc (char c)
{
  unsigned char cursor.39_1;
  int row.40_2;
  int _3;
  int row.41_4;
  unsigned char cursor.42_5;
  int col.43_6;
  int col.44_7;
  int _8;
  unsigned char cursor.45_9;
  int row.46_10;
  int col.47_11;
  int col.48_12;
  int _13;
  int col.49_14;
  int row.50_15;
  int _16;
  int row.51_17;
  unsigned char cursor.52_18;
  int _42(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  clrcursor ();
  if (c_25(D) == 13)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  col = 0;
  cursor.39_1 = cursor;
  putcursor (cursor.39_1);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 4, loop depth 0
;;    pred:       2
  if (c_25(D) == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 8>; [INV]
;;    succ:       5
;;                8

;;   basic block 5, loop depth 0
;;    pred:       4
  row.40_2 = row;
  _3 = row.40_2 + 1;
  row = _3;
  row.41_4 = row;
  if (row.41_4 > 24)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       6
;;                7

;;   basic block 6, loop depth 0
;;    pred:       5
  row = 24;
  scroll ();
;;    succ:       7

;;   basic block 7, loop depth 0
;;    pred:       5
;;                6
  cursor.42_5 = cursor;
  putcursor (cursor.42_5);
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 8, loop depth 0
;;    pred:       4
  if (c_25(D) == 8)
    goto <bb 9>; [INV]
  else
    goto <bb 12>; [INV]
;;    succ:       9
;;                12

;;   basic block 9, loop depth 0
;;    pred:       8
  col.43_6 = col;
  if (col.43_6 > 0)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]
;;    succ:       10
;;                11

;;   basic block 10, loop depth 0
;;    pred:       9
  col.44_7 = col;
  _8 = col.44_7 + -1;
  col = _8;
  erasechar ();
  cursor.45_9 = cursor;
  putcursor (cursor.45_9);
;;    succ:       11

;;   basic block 11, loop depth 0
;;    pred:       9
;;                10
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 16>; [INV]
;;    succ:       16

;;   basic block 12, loop depth 0
;;    pred:       8
  row.46_10 = row;
  col.47_11 = col;
  kpchar (c_25(D), row.46_10, col.47_11);
  col.48_12 = col;
  _13 = col.48_12 + 1;
  col = _13;
  col.49_14 = col;
  if (col.49_14 > 79)
    goto <bb 13>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       13
;;                15

;;   basic block 13, loop depth 0
;;    pred:       12
  col = 0;
  row.50_15 = row;
  _16 = row.50_15 + 1;
  row = _16;
  row.51_17 = row;
  if (row.51_17 > 24)
    goto <bb 14>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       14
;;                15

;;   basic block 14, loop depth 0
;;    pred:       13
  row = 24;
  scroll ();
;;    succ:       15

;;   basic block 15, loop depth 0
;;    pred:       12
;;                13
;;                14
  cursor.52_18 = cursor;
  putcursor (cursor.52_18);
;;    succ:       16

;;   basic block 16, loop depth 0
;;    pred:       3
;;                7
;;                11
;;                15
<L14>:
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; clrcursor ();

(call_insn 8 7 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrcursor") [flags 0x3]  <function_decl 0x7fd417cfeb00 clrcursor>) [0 clrcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":221:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; if (c_25(D) == 13)

(insn 9 8 10 (set (reg:SI 134)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":222:6 -1
     (nil))

(insn 10 9 11 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134)
            (const_int 13 [0xd]))) "vid.c":222:6 -1
     (nil))

(jump_insn 11 10 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":222:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; col = 0;

(insn 13 12 14 (set (reg/f:SI 135)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":223:8 -1
     (nil))

(insn 14 13 15 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":223:8 -1
     (nil))

(insn 15 14 0 (set (mem/c:SI (reg/f:SI 135) [3 col+0 S4 A32])
        (reg:SI 136)) "vid.c":223:8 -1
     (nil))

;; cursor.39_1 = cursor;

(insn 16 15 17 (set (reg/f:SI 137)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":225:5 -1
     (nil))

(insn 17 16 0 (set (reg:SI 113 [ cursor.39_1 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 137) [0 cursor+0 S1 A8]))) "vid.c":225:5 -1
     (nil))

;; putcursor (cursor.39_1);

(insn 18 17 19 (set (reg:SI 0 r0)
        (reg:SI 113 [ cursor.39_1 ])) "vid.c":225:5 -1
     (nil))

(call_insn 19 18 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":225:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 22 21 23 59 (nil) [0 uses])

(note 23 22 0 NOTE_INSN_BASIC_BLOCK)

;; if (c_25(D) == 10)

(insn 24 23 25 (set (reg:SI 138)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":228:6 -1
     (nil))

(insn 25 24 26 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 138)
            (const_int 10 [0xa]))) "vid.c":228:6 -1
     (nil))

(jump_insn 26 25 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":228:6 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; row.40_2 = row;

(insn 28 27 29 (set (reg/f:SI 139)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 -1
     (nil))

(insn 29 28 0 (set (reg:SI 114 [ row.40_2 ])
        (mem/c:SI (reg/f:SI 139) [3 row+0 S4 A32])) "vid.c":229:8 -1
     (nil))

;; _3 = row.40_2 + 1;

(insn 30 29 0 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ row.40_2 ])
            (const_int 1 [0x1]))) "vid.c":229:8 -1
     (nil))

;; row = _3;

(insn 31 30 32 (set (reg/f:SI 140)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 -1
     (nil))

(insn 32 31 0 (set (mem/c:SI (reg/f:SI 140) [3 row+0 S4 A32])
        (reg:SI 115 [ _3 ])) "vid.c":229:8 -1
     (nil))

;; row.41_4 = row;

(insn 33 32 34 (set (reg/f:SI 141)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":230:12 -1
     (nil))

(insn 34 33 0 (set (reg:SI 116 [ row.41_4 ])
        (mem/c:SI (reg/f:SI 141) [3 row+0 S4 A32])) "vid.c":230:12 -1
     (nil))

;; if (row.41_4 > 24)

(insn 37 34 38 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ row.41_4 ])
            (const_int 24 [0x18]))) "vid.c":230:8 -1
     (nil))

(jump_insn 38 37 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":230:8 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; row = 24;

(insn 40 39 41 (set (reg/f:SI 142)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":231:11 -1
     (nil))

(insn 41 40 42 (set (reg:SI 143)
        (const_int 24 [0x18])) "vid.c":231:11 -1
     (nil))

(insn 42 41 0 (set (mem/c:SI (reg/f:SI 142) [3 row+0 S4 A32])
        (reg:SI 143)) "vid.c":231:11 -1
     (nil))

;; scroll ();

(call_insn 43 42 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":232:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 7

;; 

(code_label 44 43 45 62 (nil) [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; cursor.42_5 = cursor;

(insn 46 45 47 (set (reg/f:SI 144)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":235:5 -1
     (nil))

(insn 47 46 0 (set (reg:SI 117 [ cursor.42_5 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 144) [0 cursor+0 S1 A8]))) "vid.c":235:5 -1
     (nil))

;; putcursor (cursor.42_5);

(insn 48 47 49 (set (reg:SI 0 r0)
        (reg:SI 117 [ cursor.42_5 ])) "vid.c":235:5 -1
     (nil))

(call_insn 49 48 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":235:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 8

;; 

(code_label 52 51 53 61 (nil) [0 uses])

(note 53 52 0 NOTE_INSN_BASIC_BLOCK)

;; if (c_25(D) == 8)

(insn 54 53 55 (set (reg:SI 145)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":238:6 -1
     (nil))

(insn 55 54 56 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145)
            (const_int 8 [0x8]))) "vid.c":238:6 -1
     (nil))

(jump_insn 56 55 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":238:6 -1
     (nil))

;; Generating RTL for gimple basic block 9

;; col.43_6 = col;

(insn 58 57 59 (set (reg/f:SI 146)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":239:12 -1
     (nil))

(insn 59 58 0 (set (reg:SI 118 [ col.43_6 ])
        (mem/c:SI (reg/f:SI 146) [3 col+0 S4 A32])) "vid.c":239:12 -1
     (nil))

;; if (col.43_6 > 0)

(insn 62 59 63 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ col.43_6 ])
            (const_int 0 [0]))) "vid.c":239:8 -1
     (nil))

(jump_insn 63 62 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":239:8 -1
     (nil))

;; Generating RTL for gimple basic block 10

;; col.44_7 = col;

(insn 65 64 66 (set (reg/f:SI 147)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 -1
     (nil))

(insn 66 65 0 (set (reg:SI 119 [ col.44_7 ])
        (mem/c:SI (reg/f:SI 147) [3 col+0 S4 A32])) "vid.c":240:10 -1
     (nil))

;; _8 = col.44_7 + -1;

(insn 67 66 0 (set (reg:SI 120 [ _8 ])
        (plus:SI (reg:SI 119 [ col.44_7 ])
            (const_int -1 [0xffffffffffffffff]))) "vid.c":240:10 -1
     (nil))

;; col = _8;

(insn 68 67 69 (set (reg/f:SI 148)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 -1
     (nil))

(insn 69 68 0 (set (mem/c:SI (reg/f:SI 148) [3 col+0 S4 A32])
        (reg:SI 120 [ _8 ])) "vid.c":240:10 -1
     (nil))

;; erasechar ();

(call_insn 70 69 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("erasechar") [flags 0x3]  <function_decl 0x7fd417cfe900 erasechar>) [0 erasechar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":241:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; cursor.45_9 = cursor;

(insn 71 70 72 (set (reg/f:SI 149)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":242:7 -1
     (nil))

(insn 72 71 0 (set (reg:SI 121 [ cursor.45_9 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 149) [0 cursor+0 S1 A8]))) "vid.c":242:7 -1
     (nil))

;; putcursor (cursor.45_9);

(insn 73 72 74 (set (reg:SI 0 r0)
        (reg:SI 121 [ cursor.45_9 ])) "vid.c":242:7 -1
     (nil))

(call_insn 74 73 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":242:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 11

;; 

(code_label 75 74 76 64 (nil) [0 uses])

(note 76 75 0 NOTE_INSN_BASIC_BLOCK)

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 12

;; 

(code_label 79 78 80 63 (nil) [0 uses])

(note 80 79 0 NOTE_INSN_BASIC_BLOCK)

;; row.46_10 = row;

(insn 81 80 82 (set (reg/f:SI 150)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":247:3 -1
     (nil))

(insn 82 81 0 (set (reg:SI 122 [ row.46_10 ])
        (mem/c:SI (reg/f:SI 150) [3 row+0 S4 A32])) "vid.c":247:3 -1
     (nil))

;; col.47_11 = col;

(insn 83 82 84 (set (reg/f:SI 151)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":247:3 -1
     (nil))

(insn 84 83 0 (set (reg:SI 123 [ col.47_11 ])
        (mem/c:SI (reg/f:SI 151) [3 col+0 S4 A32])) "vid.c":247:3 -1
     (nil))

;; kpchar (c_25(D), row.46_10, col.47_11);

(insn 85 84 86 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":247:3 -1
     (nil))

(insn 86 85 87 (set (reg:SI 2 r2)
        (reg:SI 123 [ col.47_11 ])) "vid.c":247:3 -1
     (nil))

(insn 87 86 88 (set (reg:SI 1 r1)
        (reg:SI 122 [ row.46_10 ])) "vid.c":247:3 -1
     (nil))

(insn 88 87 89 (set (reg:SI 0 r0)
        (reg:SI 152)) "vid.c":247:3 -1
     (nil))

(call_insn 89 88 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":247:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))

;; col.48_12 = col;

(insn 90 89 91 (set (reg/f:SI 153)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 -1
     (nil))

(insn 91 90 0 (set (reg:SI 124 [ col.48_12 ])
        (mem/c:SI (reg/f:SI 153) [3 col+0 S4 A32])) "vid.c":248:6 -1
     (nil))

;; _13 = col.48_12 + 1;

(insn 92 91 0 (set (reg:SI 125 [ _13 ])
        (plus:SI (reg:SI 124 [ col.48_12 ])
            (const_int 1 [0x1]))) "vid.c":248:6 -1
     (nil))

;; col = _13;

(insn 93 92 94 (set (reg/f:SI 154)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 -1
     (nil))

(insn 94 93 0 (set (mem/c:SI (reg/f:SI 154) [3 col+0 S4 A32])
        (reg:SI 125 [ _13 ])) "vid.c":248:6 -1
     (nil))

;; col.49_14 = col;

(insn 95 94 96 (set (reg/f:SI 155)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":249:10 -1
     (nil))

(insn 96 95 0 (set (reg:SI 126 [ col.49_14 ])
        (mem/c:SI (reg/f:SI 155) [3 col+0 S4 A32])) "vid.c":249:10 -1
     (nil))

;; if (col.49_14 > 79)

(insn 99 96 100 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 126 [ col.49_14 ])
            (const_int 79 [0x4f]))) "vid.c":249:6 -1
     (nil))

(jump_insn 100 99 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":249:6 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; col = 0;

(insn 102 101 103 (set (reg/f:SI 156)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":250:9 -1
     (nil))

(insn 103 102 104 (set (reg:SI 157)
        (const_int 0 [0])) "vid.c":250:9 -1
     (nil))

(insn 104 103 0 (set (mem/c:SI (reg/f:SI 156) [3 col+0 S4 A32])
        (reg:SI 157)) "vid.c":250:9 -1
     (nil))

;; row.50_15 = row;

(insn 105 104 106 (set (reg/f:SI 158)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 -1
     (nil))

(insn 106 105 0 (set (reg:SI 127 [ row.50_15 ])
        (mem/c:SI (reg/f:SI 158) [3 row+0 S4 A32])) "vid.c":251:8 -1
     (nil))

;; _16 = row.50_15 + 1;

(insn 107 106 0 (set (reg:SI 128 [ _16 ])
        (plus:SI (reg:SI 127 [ row.50_15 ])
            (const_int 1 [0x1]))) "vid.c":251:8 -1
     (nil))

;; row = _16;

(insn 108 107 109 (set (reg/f:SI 159)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 -1
     (nil))

(insn 109 108 0 (set (mem/c:SI (reg/f:SI 159) [3 row+0 S4 A32])
        (reg:SI 128 [ _16 ])) "vid.c":251:8 -1
     (nil))

;; row.51_17 = row;

(insn 110 109 111 (set (reg/f:SI 160)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":252:13 -1
     (nil))

(insn 111 110 0 (set (reg:SI 129 [ row.51_17 ])
        (mem/c:SI (reg/f:SI 160) [3 row+0 S4 A32])) "vid.c":252:13 -1
     (nil))

;; if (row.51_17 > 24)

(insn 114 111 115 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ row.51_17 ])
            (const_int 24 [0x18]))) "vid.c":252:8 -1
     (nil))

(jump_insn 115 114 0 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":252:8 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; row = 24;

(insn 117 116 118 (set (reg/f:SI 161)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":253:11 -1
     (nil))

(insn 118 117 119 (set (reg:SI 162)
        (const_int 24 [0x18])) "vid.c":253:11 -1
     (nil))

(insn 119 118 0 (set (mem/c:SI (reg/f:SI 161) [3 row+0 S4 A32])
        (reg:SI 162)) "vid.c":253:11 -1
     (nil))

;; scroll ();

(call_insn 120 119 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":254:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

;; Generating RTL for gimple basic block 15

;; 

(code_label 121 120 122 65 (nil) [0 uses])

(note 122 121 0 NOTE_INSN_BASIC_BLOCK)

;; cursor.52_18 = cursor;

(insn 123 122 124 (set (reg/f:SI 163)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":257:3 -1
     (nil))

(insn 124 123 0 (set (reg:SI 130 [ cursor.52_18 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 163) [0 cursor+0 S1 A8]))) "vid.c":257:3 -1
     (nil))

;; putcursor (cursor.52_18);

(insn 125 124 126 (set (reg:SI 0 r0)
        (reg:SI 130 [ cursor.52_18 ])) "vid.c":257:3 -1
     (nil))

(call_insn 126 125 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":257:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 16

;; <L14>:

(code_label 127 126 128 60 (nil) [0 uses])

(note 128 127 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 10->12 redirected to 17
Merging block 12 into block 11...
Merged blocks 11 and 12.
Merged 11 and 12 without moving.
Merging block 18 into block 17...
Merged blocks 17 and 18.
Merged 17 and 18 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 3 2 (set (reg:SI 132)
        (reg:SI 0 r0 [ c ])) "vid.c":220:1 -1
     (nil))
(insn 3 2 4 2 (set (reg:QI 133)
        (subreg:QI (reg:SI 132) 0)) "vid.c":220:1 -1
     (nil))
(insn 4 3 5 2 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 133)) "vid.c":220:1 -1
     (nil))
(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 8 5 9 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("clrcursor") [flags 0x3]  <function_decl 0x7fd417cfeb00 clrcursor>) [0 clrcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":221:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 9 8 10 2 (set (reg:SI 134)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":222:6 -1
     (nil))
(insn 10 9 11 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 134)
            (const_int 13 [0xd]))) "vid.c":222:6 -1
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) "vid.c":222:6 -1
     (nil)
 -> 22)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:SI 135)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":223:8 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 136)
        (const_int 0 [0])) "vid.c":223:8 -1
     (nil))
(insn 15 14 16 4 (set (mem/c:SI (reg/f:SI 135) [3 col+0 S4 A32])
        (reg:SI 136)) "vid.c":223:8 -1
     (nil))
(insn 16 15 17 4 (set (reg/f:SI 137)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":225:5 -1
     (nil))
(insn 17 16 18 4 (set (reg:SI 113 [ cursor.39_1 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 137) [0 cursor+0 S1 A8]))) "vid.c":225:5 -1
     (nil))
(insn 18 17 19 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ cursor.39_1 ])) "vid.c":225:5 -1
     (nil))
(call_insn 19 18 20 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":225:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 20 19 21 4 (set (pc)
        (label_ref 127)) "vid.c":226:5 -1
     (nil)
 -> 127)
;;  succ:       17

(barrier 21 20 22)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 22 21 23 5 59 (nil) [1 uses])
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 5 (set (reg:SI 138)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":228:6 -1
     (nil))
(insn 25 24 26 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 138)
            (const_int 10 [0xa]))) "vid.c":228:6 -1
     (nil))
(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "vid.c":228:6 -1
     (nil)
 -> 52)
;;  succ:       6 (FALLTHRU)
;;              9

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 6 (set (reg/f:SI 139)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 -1
     (nil))
(insn 29 28 30 6 (set (reg:SI 114 [ row.40_2 ])
        (mem/c:SI (reg/f:SI 139) [3 row+0 S4 A32])) "vid.c":229:8 -1
     (nil))
(insn 30 29 31 6 (set (reg:SI 115 [ _3 ])
        (plus:SI (reg:SI 114 [ row.40_2 ])
            (const_int 1 [0x1]))) "vid.c":229:8 -1
     (nil))
(insn 31 30 32 6 (set (reg/f:SI 140)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":229:8 -1
     (nil))
(insn 32 31 33 6 (set (mem/c:SI (reg/f:SI 140) [3 row+0 S4 A32])
        (reg:SI 115 [ _3 ])) "vid.c":229:8 -1
     (nil))
(insn 33 32 34 6 (set (reg/f:SI 141)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":230:12 -1
     (nil))
(insn 34 33 37 6 (set (reg:SI 116 [ row.41_4 ])
        (mem/c:SI (reg/f:SI 141) [3 row+0 S4 A32])) "vid.c":230:12 -1
     (nil))
(insn 37 34 38 6 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 116 [ row.41_4 ])
            (const_int 24 [0x18]))) "vid.c":230:8 -1
     (nil))
(jump_insn 38 37 39 6 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "vid.c":230:8 -1
     (nil)
 -> 44)
;;  succ:       7 (FALLTHRU)
;;              8

;; basic block 7, loop depth 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       6 (FALLTHRU)
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg/f:SI 142)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":231:11 -1
     (nil))
(insn 41 40 42 7 (set (reg:SI 143)
        (const_int 24 [0x18])) "vid.c":231:11 -1
     (nil))
(insn 42 41 43 7 (set (mem/c:SI (reg/f:SI 142) [3 row+0 S4 A32])
        (reg:SI 143)) "vid.c":231:11 -1
     (nil))
(call_insn 43 42 44 7 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":232:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       8 (FALLTHRU)

;; basic block 8, loop depth 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       6
;;              7 (FALLTHRU)
(code_label 44 43 45 8 62 (nil) [1 uses])
(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 45 47 8 (set (reg/f:SI 144)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":235:5 -1
     (nil))
(insn 47 46 48 8 (set (reg:SI 117 [ cursor.42_5 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 144) [0 cursor+0 S1 A8]))) "vid.c":235:5 -1
     (nil))
(insn 48 47 49 8 (set (reg:SI 0 r0)
        (reg:SI 117 [ cursor.42_5 ])) "vid.c":235:5 -1
     (nil))
(call_insn 49 48 50 8 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":235:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 50 49 51 8 (set (pc)
        (label_ref 127)) "vid.c":236:5 -1
     (nil)
 -> 127)
;;  succ:       17

(barrier 51 50 52)
;; basic block 9, loop depth 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 52 51 53 9 61 (nil) [1 uses])
(note 53 52 54 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 9 (set (reg:SI 145)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":238:6 -1
     (nil))
(insn 55 54 56 9 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 145)
            (const_int 8 [0x8]))) "vid.c":238:6 -1
     (nil))
(jump_insn 56 55 57 9 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) "vid.c":238:6 -1
     (nil)
 -> 79)
;;  succ:       10 (FALLTHRU)
;;              13

;; basic block 10, loop depth 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 57 56 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 58 57 59 10 (set (reg/f:SI 146)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":239:12 -1
     (nil))
(insn 59 58 62 10 (set (reg:SI 118 [ col.43_6 ])
        (mem/c:SI (reg/f:SI 146) [3 col+0 S4 A32])) "vid.c":239:12 -1
     (nil))
(insn 62 59 63 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118 [ col.43_6 ])
            (const_int 0 [0]))) "vid.c":239:8 -1
     (nil))
(jump_insn 63 62 64 10 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref:SI 127)
            (pc))) "vid.c":239:8 273 {arm_cond_branch}
     (nil)
 -> 127)
;;  succ:       11 (FALLTHRU)
;;              17

;; basic block 11, loop depth 0, maybe hot
;;  prev block 10, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       10 (FALLTHRU)
(note 64 63 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 65 64 66 11 (set (reg/f:SI 147)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 -1
     (nil))
(insn 66 65 67 11 (set (reg:SI 119 [ col.44_7 ])
        (mem/c:SI (reg/f:SI 147) [3 col+0 S4 A32])) "vid.c":240:10 -1
     (nil))
(insn 67 66 68 11 (set (reg:SI 120 [ _8 ])
        (plus:SI (reg:SI 119 [ col.44_7 ])
            (const_int -1 [0xffffffffffffffff]))) "vid.c":240:10 -1
     (nil))
(insn 68 67 69 11 (set (reg/f:SI 148)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":240:10 -1
     (nil))
(insn 69 68 70 11 (set (mem/c:SI (reg/f:SI 148) [3 col+0 S4 A32])
        (reg:SI 120 [ _8 ])) "vid.c":240:10 -1
     (nil))
(call_insn 70 69 71 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("erasechar") [flags 0x3]  <function_decl 0x7fd417cfe900 erasechar>) [0 erasechar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":241:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 71 70 72 11 (set (reg/f:SI 149)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":242:7 -1
     (nil))
(insn 72 71 73 11 (set (reg:SI 121 [ cursor.45_9 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 149) [0 cursor+0 S1 A8]))) "vid.c":242:7 -1
     (nil))
(insn 73 72 74 11 (set (reg:SI 0 r0)
        (reg:SI 121 [ cursor.45_9 ])) "vid.c":242:7 -1
     (nil))
(call_insn 74 73 77 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":242:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 77 74 78 11 (set (pc)
        (label_ref 127)) "vid.c":244:5 -1
     (nil)
 -> 127)
;;  succ:       17

(barrier 78 77 79)
;; basic block 13, loop depth 0, maybe hot
;;  prev block 11, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 79 78 80 13 63 (nil) [1 uses])
(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 81 80 82 13 (set (reg/f:SI 150)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":247:3 -1
     (nil))
(insn 82 81 83 13 (set (reg:SI 122 [ row.46_10 ])
        (mem/c:SI (reg/f:SI 150) [3 row+0 S4 A32])) "vid.c":247:3 -1
     (nil))
(insn 83 82 84 13 (set (reg/f:SI 151)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":247:3 -1
     (nil))
(insn 84 83 85 13 (set (reg:SI 123 [ col.47_11 ])
        (mem/c:SI (reg/f:SI 151) [3 col+0 S4 A32])) "vid.c":247:3 -1
     (nil))
(insn 85 84 86 13 (set (reg:SI 152)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":247:3 -1
     (nil))
(insn 86 85 87 13 (set (reg:SI 2 r2)
        (reg:SI 123 [ col.47_11 ])) "vid.c":247:3 -1
     (nil))
(insn 87 86 88 13 (set (reg:SI 1 r1)
        (reg:SI 122 [ row.46_10 ])) "vid.c":247:3 -1
     (nil))
(insn 88 87 89 13 (set (reg:SI 0 r0)
        (reg:SI 152)) "vid.c":247:3 -1
     (nil))
(call_insn 89 88 90 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kpchar") [flags 0x3]  <function_decl 0x7fd417cfe500 kpchar>) [0 kpchar S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":247:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (expr_list:SI (use (reg:SI 1 r1))
                (expr_list:SI (use (reg:SI 2 r2))
                    (nil))))))
(insn 90 89 91 13 (set (reg/f:SI 153)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 -1
     (nil))
(insn 91 90 92 13 (set (reg:SI 124 [ col.48_12 ])
        (mem/c:SI (reg/f:SI 153) [3 col+0 S4 A32])) "vid.c":248:6 -1
     (nil))
(insn 92 91 93 13 (set (reg:SI 125 [ _13 ])
        (plus:SI (reg:SI 124 [ col.48_12 ])
            (const_int 1 [0x1]))) "vid.c":248:6 -1
     (nil))
(insn 93 92 94 13 (set (reg/f:SI 154)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":248:6 -1
     (nil))
(insn 94 93 95 13 (set (mem/c:SI (reg/f:SI 154) [3 col+0 S4 A32])
        (reg:SI 125 [ _13 ])) "vid.c":248:6 -1
     (nil))
(insn 95 94 96 13 (set (reg/f:SI 155)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":249:10 -1
     (nil))
(insn 96 95 99 13 (set (reg:SI 126 [ col.49_14 ])
        (mem/c:SI (reg/f:SI 155) [3 col+0 S4 A32])) "vid.c":249:10 -1
     (nil))
(insn 99 96 100 13 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 126 [ col.49_14 ])
            (const_int 79 [0x4f]))) "vid.c":249:6 -1
     (nil))
(jump_insn 100 99 101 13 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":249:6 -1
     (nil)
 -> 121)
;;  succ:       14 (FALLTHRU)
;;              16

;; basic block 14, loop depth 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       13 (FALLTHRU)
(note 101 100 102 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 103 14 (set (reg/f:SI 156)
        (symbol_ref:SI ("col") [flags 0x2]  <var_decl 0x7fd4189cce10 col>)) "vid.c":250:9 -1
     (nil))
(insn 103 102 104 14 (set (reg:SI 157)
        (const_int 0 [0])) "vid.c":250:9 -1
     (nil))
(insn 104 103 105 14 (set (mem/c:SI (reg/f:SI 156) [3 col+0 S4 A32])
        (reg:SI 157)) "vid.c":250:9 -1
     (nil))
(insn 105 104 106 14 (set (reg/f:SI 158)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 -1
     (nil))
(insn 106 105 107 14 (set (reg:SI 127 [ row.50_15 ])
        (mem/c:SI (reg/f:SI 158) [3 row+0 S4 A32])) "vid.c":251:8 -1
     (nil))
(insn 107 106 108 14 (set (reg:SI 128 [ _16 ])
        (plus:SI (reg:SI 127 [ row.50_15 ])
            (const_int 1 [0x1]))) "vid.c":251:8 -1
     (nil))
(insn 108 107 109 14 (set (reg/f:SI 159)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":251:8 -1
     (nil))
(insn 109 108 110 14 (set (mem/c:SI (reg/f:SI 159) [3 row+0 S4 A32])
        (reg:SI 128 [ _16 ])) "vid.c":251:8 -1
     (nil))
(insn 110 109 111 14 (set (reg/f:SI 160)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":252:13 -1
     (nil))
(insn 111 110 114 14 (set (reg:SI 129 [ row.51_17 ])
        (mem/c:SI (reg/f:SI 160) [3 row+0 S4 A32])) "vid.c":252:13 -1
     (nil))
(insn 114 111 115 14 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 129 [ row.51_17 ])
            (const_int 24 [0x18]))) "vid.c":252:8 -1
     (nil))
(jump_insn 115 114 116 14 (set (pc)
        (if_then_else (le (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 121)
            (pc))) "vid.c":252:8 -1
     (nil)
 -> 121)
;;  succ:       15 (FALLTHRU)
;;              16

;; basic block 15, loop depth 0, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       14 (FALLTHRU)
(note 116 115 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 117 116 118 15 (set (reg/f:SI 161)
        (symbol_ref:SI ("row") [flags 0x2]  <var_decl 0x7fd4189ccd80 row>)) "vid.c":253:11 -1
     (nil))
(insn 118 117 119 15 (set (reg:SI 162)
        (const_int 24 [0x18])) "vid.c":253:11 -1
     (nil))
(insn 119 118 120 15 (set (mem/c:SI (reg/f:SI 161) [3 row+0 S4 A32])
        (reg:SI 162)) "vid.c":253:11 -1
     (nil))
(call_insn 120 119 121 15 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("scroll") [flags 0x3]  <function_decl 0x7fd417cfe300 scroll>) [0 scroll S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":254:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
;;  succ:       16 (FALLTHRU)

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 17, flags: (NEW, REACHABLE, RTL)
;;  pred:       13
;;              14
;;              15 (FALLTHRU)
(code_label 121 120 122 16 65 (nil) [2 uses])
(note 122 121 123 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 124 16 (set (reg/f:SI 163)
        (symbol_ref:SI ("cursor") [flags 0x2]  <var_decl 0x7fd4189ccbd0 cursor>)) "vid.c":257:3 -1
     (nil))
(insn 124 123 125 16 (set (reg:SI 130 [ cursor.52_18 ])
        (zero_extend:SI (mem/c:QI (reg/f:SI 163) [0 cursor+0 S1 A8]))) "vid.c":257:3 -1
     (nil))
(insn 125 124 126 16 (set (reg:SI 0 r0)
        (reg:SI 130 [ cursor.52_18 ])) "vid.c":257:3 -1
     (nil))
(call_insn 126 125 127 16 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("putcursor") [flags 0x3]  <function_decl 0x7fd417cfed00 putcursor>) [0 putcursor S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":257:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       17 (FALLTHRU)

;; basic block 17, loop depth 0, maybe hot
;;  prev block 16, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              8
;;              11
;;              16 (FALLTHRU)
;;              10
(code_label 127 126 128 17 60 (nil) [4 uses])
(note 128 127 131 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 131 128 132 17 (clobber (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
(insn 132 131 130 17 (clobber (reg:SI 131 [ <retval> ])) "vid.c":259:1 -1
     (nil))
(insn 130 132 133 17 (set (reg/i:SI 0 r0)
        (reg:SI 131 [ <retval> ])) "vid.c":259:1 -1
     (nil))
(insn 133 130 0 17 (use (reg/i:SI 0 r0)) "vid.c":259:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprints (kprints, funcdef_no=13, decl_uid=4586, cgraph_uid=14, symbol_order=19)

int kprints (char * s)
{
  char _1;
  char _2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  kputc (_1);
  s_8 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_5(D)(2), s_8(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (s_3 - 3 )
Partition 5 (s_5(D) - 5 )
Partition 8 (s_8 - 8 )
Partition 9 (_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (s_3 - 3 5 8 )
Partition 3, base 1 (_9(D) - 9 )


Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (s_5(D) - 5 )
Partition 2 (s_8 - 8 )
Partition 3 (_9(D) - 9 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_3 <-> s_5(D)
(2147483647, 0) s_3 <-> s_8

Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (s_5(D) - 5 )
Partition 2 (s_8 - 8 )
Partition 3 (_9(D) - 9 )

Coalesce list: (3)s_3 & (5)s_5(D) [map: 0, 1] : Success -> 0
Coalesce list: (3)s_3 & (8)s_8 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (s_3 - 3 5 8 )
Partition 3 (_9(D) - 9 )

int kprints (char * s)
{
  char _1;
  char _2;
  int _9(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  kputc (_1);
  s_8 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_5(D)(2), s_8(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; _1 = *s_3;

(insn 9 8 10 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":264:5 -1
     (nil))

(insn 10 9 0 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":264:5 -1
     (nil))

;; kputc (_1);

(insn 11 10 12 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":264:5 -1
     (nil))

(call_insn 12 11 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":264:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; s_8 = s_3 + 1;

(insn 13 12 14 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":265:6 -1
     (nil))

(insn 14 13 15 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":265:6 -1
     (nil))

(insn 15 14 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":265:6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 16 15 17 70 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = *s_3;

(insn 18 17 19 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":263:9 -1
     (nil))

(insn 19 18 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":263:9 -1
     (nil))

;; if (_2 != 0)

(insn 21 19 22 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":263:9 -1
     (nil))

(jump_insn 22 21 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":263:9 -1
     (nil))

;; Generating RTL for gimple basic block 5


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":262:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 6 3 7 2 (set (pc)
        (label_ref 16)) "vid.c":263:8 -1
     (nil)
 -> 16)
;;  succ:       5

(barrier 7 6 20)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 20 7 8 4 71 (nil) [1 uses])
(note 8 20 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":264:5 -1
     (nil))
(insn 10 9 11 4 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":264:5 -1
     (nil))
(insn 11 10 12 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":264:5 -1
     (nil))
(call_insn 12 11 13 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":264:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 4 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":265:6 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":265:6 -1
     (nil))
(insn 15 14 16 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":265:6 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 16 15 17 5 70 (nil) [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":263:9 -1
     (nil))
(insn 19 18 21 5 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":263:9 -1
     (nil))
(insn 21 19 22 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":263:9 -1
     (nil))
(jump_insn 22 21 23 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":263:9 -1
     (nil)
 -> 20)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 6 (clobber (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
(insn 27 26 30 6 (clobber (reg:SI 115 [ <retval> ])) "vid.c":267:1 -1
     (nil))
(insn 30 27 25 6 (const_int 0 [0]) "vid.c":267:1 -1
     (nil))
(insn 25 30 28 6 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":267:1 -1
     (nil))
(insn 28 25 0 6 (use (reg/i:SI 0 r0)) "vid.c":267:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function prints (prints, funcdef_no=14, decl_uid=4592, cgraph_uid=15, symbol_order=20)

int prints (char * s)
{
  char _1;
  char _2;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  kputc (_1);
  s_8 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_5(D)(2), s_8(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (s_3 - 3 )
Partition 5 (s_5(D) - 5 )
Partition 8 (s_8 - 8 )
Partition 9 (_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (s_3 - 3 5 8 )
Partition 3, base 1 (_9(D) - 9 )


Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (s_5(D) - 5 )
Partition 2 (s_8 - 8 )
Partition 3 (_9(D) - 9 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_3 <-> s_5(D)
(2147483647, 0) s_3 <-> s_8

Partition map 

Partition 0 (s_3 - 3 )
Partition 1 (s_5(D) - 5 )
Partition 2 (s_8 - 8 )
Partition 3 (_9(D) - 9 )

Coalesce list: (3)s_3 & (5)s_5(D) [map: 0, 1] : Success -> 0
Coalesce list: (3)s_3 & (8)s_8 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (s_3 - 3 5 8 )
Partition 3 (_9(D) - 9 )

int prints (char * s)
{
  char _1;
  char _2;
  int _9(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  _1 = *s_3;
  kputc (_1);
  s_8 = s_3 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_3 = PHI <s_5(D)(2), s_8(3)>
  _2 = *s_3;
  if (_2 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; _1 = *s_3;

(insn 9 8 10 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":271:5 -1
     (nil))

(insn 10 9 0 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":271:5 -1
     (nil))

;; kputc (_1);

(insn 11 10 12 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":271:5 -1
     (nil))

(call_insn 12 11 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":271:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; s_8 = s_3 + 1;

(insn 13 12 14 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":272:6 -1
     (nil))

(insn 14 13 15 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":272:6 -1
     (nil))

(insn 15 14 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":272:6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 16 15 17 73 (nil) [0 uses])

(note 17 16 0 NOTE_INSN_BASIC_BLOCK)

;; _2 = *s_3;

(insn 18 17 19 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":270:9 -1
     (nil))

(insn 19 18 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":270:9 -1
     (nil))

;; if (_2 != 0)

(insn 21 19 22 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":270:9 -1
     (nil))

(jump_insn 22 21 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":270:9 -1
     (nil))

;; Generating RTL for gimple basic block 5


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":269:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 6 3 7 2 (set (pc)
        (label_ref 16)) "vid.c":270:8 -1
     (nil)
 -> 16)
;;  succ:       5

(barrier 7 6 20)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 20 7 8 4 74 (nil) [1 uses])
(note 8 20 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg/f:SI 116)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":271:5 -1
     (nil))
(insn 10 9 11 4 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 116) [0 *s_3+0 S1 A8]))) "vid.c":271:5 -1
     (nil))
(insn 11 10 12 4 (set (reg:SI 0 r0)
        (reg:SI 113 [ _1 ])) "vid.c":271:5 -1
     (nil))
(call_insn 12 11 13 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":271:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 13 12 14 4 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":272:6 -1
     (nil))
(insn 14 13 15 4 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":272:6 -1
     (nil))
(insn 15 14 16 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":272:6 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 16 15 17 5 73 (nil) [1 uses])
(note 17 16 18 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 18 17 19 5 (set (reg/f:SI 119)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 s+0 S4 A32])) "vid.c":270:9 -1
     (nil))
(insn 19 18 21 5 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 119) [0 *s_3+0 S1 A8]))) "vid.c":270:9 -1
     (nil))
(insn 21 19 22 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114 [ _2 ])
            (const_int 0 [0]))) "vid.c":270:9 -1
     (nil))
(jump_insn 22 21 23 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) "vid.c":270:9 -1
     (nil)
 -> 20)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 23 27 6 (clobber (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
(insn 27 26 30 6 (clobber (reg:SI 115 [ <retval> ])) "vid.c":274:1 -1
     (nil))
(insn 30 27 25 6 (const_int 0 [0]) "vid.c":274:1 -1
     (nil))
(insn 25 30 28 6 (set (reg/i:SI 0 r0)
        (reg:SI 115 [ <retval> ])) "vid.c":274:1 -1
     (nil))
(insn 28 25 0 6 (use (reg/i:SI 0 r0)) "vid.c":274:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function krpx (krpx, funcdef_no=15, decl_uid=4598, cgraph_uid=16, symbol_order=21)

int krpx (u32 x)
{
  char c;
  char * tab.53_1;
  sizetype _2;
  char * _3;
  unsigned int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  tab.53_1 = tab;
  _2 = x_6(D) & 15;
  _3 = tab.53_1 + _2;
  c_8 = *_3;
  _4 = x_6(D) / 16;
  krpx (_4);
  kputc (c_8);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (tab.53_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 6 (x_6(D) - 6 )
Partition 8 (c_8 - 8 )
Partition 11 (_11(D) - 11 )


Coalescible Partition map 

Partition 0, base 0 (x_6(D) - 6 )
Partition 1, base 1 (_11(D) - 11 )


Partition map 

Partition 0 (x_6(D) - 6 )
Partition 1 (_11(D) - 11 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (x_6(D) - 6 )
Partition 1 (_11(D) - 11 )

After Coalescing:

Partition map 

Partition 0 (tab.53_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (x_6(D) - 6 )
Partition 5 (c_8 - 8 )
Partition 6 (_11(D) - 11 )

int krpx (u32 x)
{
  char c;
  char * tab.53_1;
  sizetype _2;
  char * _3;
  unsigned int _4;
  int _11(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  tab.53_1 = tab;
  _2 = x_6(D) & 15;
  _3 = tab.53_1 + _2;
  c_8 = *_3;
  _4 = x_6(D) / 16;
  krpx (_4);
  kputc (c_8);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}


Partition 0: size 1 align 1
	c_8

;; Generating RTL for gimple basic block 2

;; if (x_6(D) == 0)

(insn 6 5 7 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":279:6 -1
     (nil))

(insn 7 6 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":279:6 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":279:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 76 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; tab.53_1 = tab;

(insn 14 13 15 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":281:10 -1
     (nil))

(insn 15 14 0 (set (reg/f:SI 113 [ tab.53_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":281:10 -1
     (nil))

;; _2 = x_6(D) & 15;

(insn 16 15 17 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":281:13 -1
     (nil))

(insn 17 16 0 (set (reg:SI 114 [ _2 ])
        (and:SI (reg:SI 120)
            (const_int 15 [0xf]))) "vid.c":281:13 -1
     (nil))

;; _3 = tab.53_1 + _2;

(insn 18 17 0 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.53_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":281:10 -1
     (nil))

;; c_8 = *_3;

(insn 19 18 20 (set (reg:QI 121)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":281:5 -1
     (nil))

(insn 20 19 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 121)) "vid.c":281:5 -1
     (nil))

;; _4 = x_6(D) / 16;

(insn 21 20 22 (set (reg:SI 122)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":282:3 -1
     (nil))

(insn 22 21 0 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 122)
            (const_int 4 [0x4]))) "vid.c":282:3 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 122)
            (const_int 16 [0x10]))
        (nil)))

;; krpx (_4);

(insn 23 22 24 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":282:3 -1
     (nil))

(call_insn 24 23 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":282:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; kputc (c_8);

(insn 25 24 26 (set (reg:SI 123)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":283:3 -1
     (nil))

(insn 26 25 27 (set (reg:SI 0 r0)
        (reg:SI 123)) "vid.c":283:3 -1
     (nil))

(call_insn 27 26 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":283:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 5

;; <L2>:

(code_label 28 27 29 77 (nil) [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 6 failed.
Forwarding edge 2->4 to 6 failed.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 6 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":277:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":279:6 -1
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":279:6 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "vid.c":279:6 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 28)) "vid.c":280:6 -1
     (nil)
 -> 28)
;;  succ:       6

(barrier 11 10 12)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 11 13 5 76 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":281:10 -1
     (nil))
(insn 15 14 16 5 (set (reg/f:SI 113 [ tab.53_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":281:10 -1
     (nil))
(insn 16 15 17 5 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":281:13 -1
     (nil))
(insn 17 16 18 5 (set (reg:SI 114 [ _2 ])
        (and:SI (reg:SI 120)
            (const_int 15 [0xf]))) "vid.c":281:13 -1
     (nil))
(insn 18 17 19 5 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.53_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":281:10 -1
     (nil))
(insn 19 18 20 5 (set (reg:QI 121)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":281:5 -1
     (nil))
(insn 20 19 21 5 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 121)) "vid.c":281:5 -1
     (nil))
(insn 21 20 22 5 (set (reg:SI 122)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":282:3 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 122)
            (const_int 4 [0x4]))) "vid.c":282:3 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 122)
            (const_int 16 [0x10]))
        (nil)))
(insn 23 22 24 5 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":282:3 -1
     (nil))
(call_insn 24 23 25 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":282:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 25 24 26 5 (set (reg:SI 123)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":283:3 -1
     (nil))
(insn 26 25 27 5 (set (reg:SI 0 r0)
        (reg:SI 123)) "vid.c":283:3 -1
     (nil))
(call_insn 27 26 28 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":283:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 28 27 29 6 77 (nil) [1 uses])
(note 29 28 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 32 29 33 6 (clobber (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
(insn 33 32 31 6 (clobber (reg:SI 117 [ <retval> ])) "vid.c":284:1 -1
     (nil))
(insn 31 33 34 6 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":284:1 -1
     (nil))
(insn 34 31 0 6 (use (reg/i:SI 0 r0)) "vid.c":284:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintx (kprintx, funcdef_no=16, decl_uid=4602, cgraph_uid=17, symbol_order=22)

int kprintx (u32 x)
{
;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kputc (48);
  kputc (120);
  if (x_5(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (48);
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  krpx (x_5(D));
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  kputc (32);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 5 (x_5(D) - 5 )
Partition 9 (_9(D) - 9 )


Coalescible Partition map 

Partition 0, base 0 (x_5(D) - 5 )
Partition 1, base 1 (_9(D) - 9 )


Partition map 

Partition 0 (x_5(D) - 5 )
Partition 1 (_9(D) - 9 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (x_5(D) - 5 )
Partition 1 (_9(D) - 9 )

After Coalescing:

Partition map 

Partition 0 (x_5(D) - 5 )
Partition 1 (_9(D) - 9 )

int kprintx (u32 x)
{
  int _9(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  kputc (48);
  kputc (120);
  if (x_5(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (48);
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  krpx (x_5(D));
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  kputc (32);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; kputc (48);

(insn 6 5 7 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":288:3 -1
     (nil))

(call_insn 7 6 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; kputc (120);

(insn 8 7 9 (set (reg:SI 0 r0)
        (const_int 120 [0x78])) "vid.c":288:15 -1
     (nil))

(call_insn 9 8 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; if (x_5(D) == 0)

(insn 10 9 11 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":289:6 -1
     (nil))

(insn 11 10 12 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":289:6 -1
     (nil))

(jump_insn 12 11 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":289:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; kputc (48);

(insn 14 13 15 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":290:5 -1
     (nil))

(call_insn 15 14 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":290:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 17 19 82 (nil) [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; krpx (x_5(D));

(insn 20 19 21 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":292:5 -1
     (nil))

(call_insn 21 20 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":292:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 5

;; 

(code_label 22 21 23 83 (nil) [0 uses])

(note 23 22 0 NOTE_INSN_BASIC_BLOCK)

;; kputc (32);

(insn 24 23 25 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":293:3 -1
     (nil))

(call_insn 25 24 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":293:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":287:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":288:3 -1
     (nil))
(call_insn 7 6 8 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 8 7 9 2 (set (reg:SI 0 r0)
        (const_int 120 [0x78])) "vid.c":288:15 -1
     (nil))
(call_insn 9 8 10 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":288:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 10 9 11 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":289:6 -1
     (nil))
(insn 11 10 12 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":289:6 -1
     (nil))
(jump_insn 12 11 13 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 18)
            (pc))) "vid.c":289:6 -1
     (nil)
 -> 18)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 13 12 14 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 4 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":290:5 -1
     (nil))
(call_insn 15 14 16 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":290:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 16 15 17 4 (set (pc)
        (label_ref 22)) -1
     (nil)
 -> 22)
;;  succ:       6

(barrier 17 16 18)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 18 17 19 5 82 (nil) [1 uses])
(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 5 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":292:5 -1
     (nil))
(call_insn 21 20 22 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpx") [flags 0x3]  <function_decl 0x7fd417d04500 krpx>) [0 krpx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":292:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 22 21 23 6 83 (nil) [1 uses])
(note 23 22 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 6 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":293:3 -1
     (nil))
(call_insn 25 24 28 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":293:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 28 25 29 6 (clobber (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
(insn 29 28 32 6 (clobber (reg:SI 113 [ <retval> ])) "vid.c":294:1 -1
     (nil))
(insn 32 29 27 6 (const_int 0 [0]) "vid.c":294:1 -1
     (nil))
(insn 27 32 30 6 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":294:1 -1
     (nil))
(insn 30 27 0 6 (use (reg/i:SI 0 r0)) "vid.c":294:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function krpu (krpu, funcdef_no=17, decl_uid=4605, cgraph_uid=18, symbol_order=23)

int krpu (u32 x)
{
  char c;
  char * tab.54_1;
  unsigned int _2;
  char * _3;
  unsigned int _4;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  tab.54_1 = tab;
  _2 = x_6(D) % 10;
  _3 = tab.54_1 + _2;
  c_8 = *_3;
  _4 = x_6(D) / 10;
  krpu (_4);
  kputc (c_8);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (tab.54_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 6 (x_6(D) - 6 )
Partition 8 (c_8 - 8 )
Partition 11 (_11(D) - 11 )


Coalescible Partition map 

Partition 0, base 0 (x_6(D) - 6 )
Partition 1, base 1 (_11(D) - 11 )


Partition map 

Partition 0 (x_6(D) - 6 )
Partition 1 (_11(D) - 11 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (x_6(D) - 6 )
Partition 1 (_11(D) - 11 )

After Coalescing:

Partition map 

Partition 0 (tab.54_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (x_6(D) - 6 )
Partition 5 (c_8 - 8 )
Partition 6 (_11(D) - 11 )

int krpu (u32 x)
{
  char c;
  char * tab.54_1;
  unsigned int _2;
  char * _3;
  unsigned int _4;
  int _11(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_6(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  tab.54_1 = tab;
  _2 = x_6(D) % 10;
  _3 = tab.54_1 + _2;
  c_8 = *_3;
  _4 = x_6(D) / 10;
  krpu (_4);
  kputc (c_8);
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
<L2>:
  return;
;;    succ:       EXIT

}


Partition 0: size 1 align 1
	c_8

;; Generating RTL for gimple basic block 2

;; if (x_6(D) == 0)

(insn 6 5 7 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":299:6 -1
     (nil))

(insn 7 6 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":299:6 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":299:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; // predicted unlikely by early return (on trees) predictor.

(nil)

;; Generating RTL for gimple basic block 4

;; 

(code_label 12 11 13 85 (nil) [0 uses])

(note 13 12 0 NOTE_INSN_BASIC_BLOCK)

;; tab.54_1 = tab;

(insn 14 13 15 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":301:10 -1
     (nil))

(insn 15 14 0 (set (reg/f:SI 113 [ tab.54_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":301:10 -1
     (nil))

;; _2 = x_6(D) % 10;

(insn 16 15 17 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":301:13 -1
     (nil))

(insn 17 16 18 (set (reg:SI 122)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":301:13 -1
     (nil))

(insn 18 17 19 (parallel [
            (set (reg:SI 121)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 120))
                            (zero_extend:DI (reg:SI 122)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":301:13 -1
     (nil))

(insn 19 18 20 (set (reg:SI 114 [ _2 ])
        (lshiftrt:SI (reg:SI 121)
            (const_int 3 [0x3]))) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 120)
            (const_int 10 [0xa]))
        (nil)))

(insn 20 19 21 (set (reg:SI 123)
        (reg:SI 114 [ _2 ])) "vid.c":301:13 -1
     (nil))

(insn 21 20 22 (set (reg:SI 123)
        (ashift:SI (reg:SI 123)
            (const_int 2 [0x2]))) "vid.c":301:13 -1
     (nil))

(insn 22 21 23 (set (reg:SI 123)
        (plus:SI (reg:SI 123)
            (reg:SI 114 [ _2 ]))) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 5 [0x5]))
        (nil)))

(insn 23 22 24 (set (reg:SI 124)
        (ashift:SI (reg:SI 123)
            (const_int 1 [0x1]))) "vid.c":301:13 -1
     (nil))

(insn 24 23 25 (set (reg:SI 123)
        (reg:SI 124)) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 10 [0xa]))
        (nil)))

(insn 25 24 0 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 120)
            (reg:SI 123))) "vid.c":301:13 -1
     (nil))

;; _3 = tab.54_1 + _2;

(insn 26 25 0 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.54_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":301:10 -1
     (nil))

;; c_8 = *_3;

(insn 27 26 28 (set (reg:QI 125)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":301:5 -1
     (nil))

(insn 28 27 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 125)) "vid.c":301:5 -1
     (nil))

;; _4 = x_6(D) / 10;

(insn 29 28 30 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":302:3 -1
     (nil))

(insn 30 29 31 (set (reg:SI 128)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":302:3 -1
     (nil))

(insn 31 30 32 (parallel [
            (set (reg:SI 127)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 126))
                            (zero_extend:DI (reg:SI 128)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":302:3 -1
     (nil))

(insn 32 31 0 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 127)
            (const_int 3 [0x3]))) "vid.c":302:3 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 126)
            (const_int 10 [0xa]))
        (nil)))

;; krpu (_4);

(insn 33 32 34 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":302:3 -1
     (nil))

(call_insn 34 33 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":302:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; kputc (c_8);

(insn 35 34 36 (set (reg:SI 129)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":303:3 -1
     (nil))

(insn 36 35 37 (set (reg:SI 0 r0)
        (reg:SI 129)) "vid.c":303:3 -1
     (nil))

(call_insn 37 36 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":303:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 5

;; <L2>:

(code_label 38 37 39 86 (nil) [0 uses])

(note 39 38 0 NOTE_INSN_BASIC_BLOCK)


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Forwarding edge 2->4 to 6 failed.
Forwarding edge 2->4 to 6 failed.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->4 to 6 failed.
fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":297:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 118)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":299:6 -1
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 118)
            (const_int 0 [0]))) "vid.c":299:6 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 12)
            (pc))) "vid.c":299:6 -1
     (nil)
 -> 12)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 10 9 11 4 (set (pc)
        (label_ref 38)) "vid.c":300:6 -1
     (nil)
 -> 38)
;;  succ:       6

(barrier 11 10 12)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 12 11 13 5 85 (nil) [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 15 5 (set (reg/f:SI 119)
        (symbol_ref:SI ("tab") [flags 0x40]  <var_decl 0x7fd4189cc510 tab>)) "vid.c":301:10 -1
     (nil))
(insn 15 14 16 5 (set (reg/f:SI 113 [ tab.54_1 ])
        (mem/f/c:SI (reg/f:SI 119) [5 tab+0 S4 A32])) "vid.c":301:10 -1
     (nil))
(insn 16 15 17 5 (set (reg:SI 120)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":301:13 -1
     (nil))
(insn 17 16 18 5 (set (reg:SI 122)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":301:13 -1
     (nil))
(insn 18 17 19 5 (parallel [
            (set (reg:SI 121)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 120))
                            (zero_extend:DI (reg:SI 122)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":301:13 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 114 [ _2 ])
        (lshiftrt:SI (reg:SI 121)
            (const_int 3 [0x3]))) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 120)
            (const_int 10 [0xa]))
        (nil)))
(insn 20 19 21 5 (set (reg:SI 123)
        (reg:SI 114 [ _2 ])) "vid.c":301:13 -1
     (nil))
(insn 21 20 22 5 (set (reg:SI 123)
        (ashift:SI (reg:SI 123)
            (const_int 2 [0x2]))) "vid.c":301:13 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 123)
        (plus:SI (reg:SI 123)
            (reg:SI 114 [ _2 ]))) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 5 [0x5]))
        (nil)))
(insn 23 22 24 5 (set (reg:SI 124)
        (ashift:SI (reg:SI 123)
            (const_int 1 [0x1]))) "vid.c":301:13 -1
     (nil))
(insn 24 23 25 5 (set (reg:SI 123)
        (reg:SI 124)) "vid.c":301:13 -1
     (expr_list:REG_EQUAL (mult:SI (reg:SI 114 [ _2 ])
            (const_int 10 [0xa]))
        (nil)))
(insn 25 24 26 5 (set (reg:SI 114 [ _2 ])
        (minus:SI (reg:SI 120)
            (reg:SI 123))) "vid.c":301:13 -1
     (nil))
(insn 26 25 27 5 (set (reg/f:SI 115 [ _3 ])
        (plus:SI (reg/f:SI 113 [ tab.54_1 ])
            (reg:SI 114 [ _2 ]))) "vid.c":301:10 -1
     (nil))
(insn 27 26 28 5 (set (reg:QI 125)
        (mem:QI (reg/f:SI 115 [ _3 ]) [0 *_3+0 S1 A8])) "vid.c":301:5 -1
     (nil))
(insn 28 27 29 5 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 125)) "vid.c":301:5 -1
     (nil))
(insn 29 28 30 5 (set (reg:SI 126)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [3 x+0 S4 A32])) "vid.c":302:3 -1
     (nil))
(insn 30 29 31 5 (set (reg:SI 128)
        (const_int -858993459 [0xffffffffcccccccd])) "vid.c":302:3 -1
     (nil))
(insn 31 30 32 5 (parallel [
            (set (reg:SI 127)
                (truncate:SI (lshiftrt:DI (mult:DI (zero_extend:DI (reg:SI 126))
                            (zero_extend:DI (reg:SI 128)))
                        (const_int 32 [0x20]))))
            (clobber (scratch:SI))
        ]) "vid.c":302:3 -1
     (nil))
(insn 32 31 33 5 (set (reg:SI 116 [ _4 ])
        (lshiftrt:SI (reg:SI 127)
            (const_int 3 [0x3]))) "vid.c":302:3 -1
     (expr_list:REG_EQUAL (udiv:SI (reg:SI 126)
            (const_int 10 [0xa]))
        (nil)))
(insn 33 32 34 5 (set (reg:SI 0 r0)
        (reg:SI 116 [ _4 ])) "vid.c":302:3 -1
     (nil))
(call_insn 34 33 35 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":302:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 35 34 36 5 (set (reg:SI 129)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":303:3 -1
     (nil))
(insn 36 35 37 5 (set (reg:SI 0 r0)
        (reg:SI 129)) "vid.c":303:3 -1
     (nil))
(call_insn 37 36 38 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":303:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 38 37 39 6 86 (nil) [1 uses])
(note 39 38 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 42 39 43 6 (clobber (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
(insn 43 42 41 6 (clobber (reg:SI 117 [ <retval> ])) "vid.c":304:1 -1
     (nil))
(insn 41 43 44 6 (set (reg/i:SI 0 r0)
        (reg:SI 117 [ <retval> ])) "vid.c":304:1 -1
     (nil))
(insn 44 41 0 6 (use (reg/i:SI 0 r0)) "vid.c":304:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintu (kprintu, funcdef_no=18, decl_uid=4609, cgraph_uid=19, symbol_order=24)

int kprintu (u32 x)
{
;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_2(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (48);
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  krpu (x_2(D));
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  kputc (32);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 2 (x_2(D) - 2 )
Partition 7 (_7(D) - 7 )


Coalescible Partition map 

Partition 0, base 0 (x_2(D) - 2 )
Partition 1, base 1 (_7(D) - 7 )


Partition map 

Partition 0 (x_2(D) - 2 )
Partition 1 (_7(D) - 7 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (x_2(D) - 2 )
Partition 1 (_7(D) - 7 )

After Coalescing:

Partition map 

Partition 0 (x_2(D) - 2 )
Partition 1 (_7(D) - 7 )

int kprintu (u32 x)
{
  int _7(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_2(D) == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (48);
  goto <bb 5>; [INV]
;;    succ:       5

;;   basic block 4, loop depth 0
;;    pred:       2
  krpu (x_2(D));
;;    succ:       5

;;   basic block 5, loop depth 0
;;    pred:       3
;;                4
  kputc (32);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (x_2(D) == 0)

(insn 6 5 7 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":308:6 -1
     (nil))

(insn 7 6 8 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":308:6 -1
     (nil))

(jump_insn 8 7 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":308:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; kputc (48);

(insn 10 9 11 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":309:5 -1
     (nil))

(call_insn 11 10 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":309:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 14 13 15 91 (nil) [0 uses])

(note 15 14 0 NOTE_INSN_BASIC_BLOCK)

;; krpu (x_2(D));

(insn 16 15 17 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":312:5 -1
     (nil))

(call_insn 17 16 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":312:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 5

;; 

(code_label 18 17 19 92 (nil) [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; kputc (32);

(insn 20 19 21 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":313:3 -1
     (nil))

(call_insn 21 20 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":313:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":307:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:SI 114)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":308:6 -1
     (nil))
(insn 7 6 8 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 114)
            (const_int 0 [0]))) "vid.c":308:6 -1
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 14)
            (pc))) "vid.c":308:6 -1
     (nil)
 -> 14)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 4 (set (reg:SI 0 r0)
        (const_int 48 [0x30])) "vid.c":309:5 -1
     (nil))
(call_insn 11 10 12 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":309:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 12 11 13 4 (set (pc)
        (label_ref 18)) -1
     (nil)
 -> 18)
;;  succ:       6

(barrier 13 12 14)
;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
(code_label 14 13 15 5 91 (nil) [1 uses])
(note 15 14 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 5 (set (reg:SI 0 r0)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":312:5 -1
     (nil))
(call_insn 17 16 18 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("krpu") [flags 0x3]  <function_decl 0x7fd417d04900 krpu>) [0 krpu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":312:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4
;;              5 (FALLTHRU)
(code_label 18 17 19 6 92 (nil) [1 uses])
(note 19 18 20 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 20 19 21 6 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":313:3 -1
     (nil))
(call_insn 21 20 24 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":313:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 24 21 25 6 (clobber (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
(insn 25 24 28 6 (clobber (reg:SI 113 [ <retval> ])) "vid.c":314:1 -1
     (nil))
(insn 28 25 23 6 (const_int 0 [0]) "vid.c":314:1 -1
     (nil))
(insn 23 28 26 6 (set (reg/i:SI 0 r0)
        (reg:SI 113 [ <retval> ])) "vid.c":314:1 -1
     (nil))
(insn 26 23 0 6 (use (reg/i:SI 0 r0)) "vid.c":314:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprinti (kprinti, funcdef_no=19, decl_uid=4612, cgraph_uid=20, symbol_order=25)

int kprinti (int x)
{
  unsigned int x.55_1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_4(D) < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (32);
  kputc (45);
  x_8 = -x_4(D);
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # x_2 = PHI <x_4(D)(2), x_8(3)>
  x.55_1 = (unsigned int) x_2;
  kprintu (x.55_1);
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (x.55_1 - 1 )
Partition 2 (x_2 - 2 )
Partition 4 (x_4(D) - 4 )
Partition 8 (x_8 - 8 )
Partition 10 (_10(D) - 10 )


Coalescible Partition map 

Partition 0, base 0 (x_2 - 2 4 8 )
Partition 3, base 1 (_10(D) - 10 )


Partition map 

Partition 0 (x_2 - 2 )
Partition 1 (x_4(D) - 4 )
Partition 2 (x_8 - 8 )
Partition 3 (_10(D) - 10 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) x_2 <-> x_4(D)
(2147483647, 0) x_2 <-> x_8

Partition map 

Partition 0 (x_2 - 2 )
Partition 1 (x_4(D) - 4 )
Partition 2 (x_8 - 8 )
Partition 3 (_10(D) - 10 )

Coalesce list: (2)x_2 & (4)x_4(D) [map: 0, 1] : Success -> 0
Coalesce list: (2)x_2 & (8)x_8 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (x.55_1 - 1 )
Partition 1 (x_2 - 2 4 8 )
Partition 2 (_10(D) - 10 )

int kprinti (int x)
{
  unsigned int x.55_1;
  int _10(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  if (x_4(D) < 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]
;;    succ:       3
;;                4

;;   basic block 3, loop depth 0
;;    pred:       2
  kputc (32);
  kputc (45);
  x_8 = -x_4(D);
;;    succ:       4

;;   basic block 4, loop depth 0
;;    pred:       2
;;                3
  # x_2 = PHI <x_4(D)(2), x_8(3)>
  x.55_1 = (unsigned int) x_2;
  kprintu (x.55_1);
  return;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; if (x_4(D) < 0)

(insn 8 5 9 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":318:6 -1
     (nil))

(insn 9 8 10 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115)
            (const_int 0 [0]))) "vid.c":318:6 -1
     (nil))

(jump_insn 10 9 0 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":318:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; kputc (32);

(insn 12 11 13 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":319:5 -1
     (nil))

(call_insn 13 12 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":319:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; kputc (45);

(insn 14 13 15 (set (reg:SI 0 r0)
        (const_int 45 [0x2d])) "vid.c":320:5 -1
     (nil))

(call_insn 15 14 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":320:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; x_8 = -x_4(D);

(insn 16 15 17 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":321:7 -1
     (nil))

(insn 17 16 18 (set (reg:SI 116)
        (neg:SI (reg:SI 117))) "vid.c":321:7 -1
     (nil))

(insn 18 17 0 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 116)) "vid.c":321:7 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 19 18 20 94 (nil) [0 uses])

(note 20 19 0 NOTE_INSN_BASIC_BLOCK)

;; x.55_1 = (unsigned int) x_2;

(insn 21 20 0 (set (reg:SI 113 [ x.55_1 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":323:3 -1
     (nil))

;; kprintu (x.55_1);

(insn 22 21 23 (set (reg:SI 0 r0)
        (reg:SI 113 [ x.55_1 ])) "vid.c":323:3 -1
     (nil))

(call_insn 23 22 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":323:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 6 into block 5...
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 0 r0 [ x ])) "vid.c":317:1 -1
     (nil))
(note 3 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 3 9 2 (set (reg:SI 115)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":318:6 -1
     (nil))
(insn 9 8 10 2 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115)
            (const_int 0 [0]))) "vid.c":318:6 -1
     (nil))
(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ge (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "vid.c":318:6 -1
     (nil)
 -> 19)
;;  succ:       4 (FALLTHRU)
;;              5

;; basic block 4, loop depth 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       2 (FALLTHRU)
(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg:SI 0 r0)
        (const_int 32 [0x20])) "vid.c":319:5 -1
     (nil))
(call_insn 13 12 14 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":319:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 14 13 15 4 (set (reg:SI 0 r0)
        (const_int 45 [0x2d])) "vid.c":320:5 -1
     (nil))
(call_insn 15 14 16 4 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":320:5 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 16 15 17 4 (set (reg:SI 117)
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":321:7 -1
     (nil))
(insn 17 16 18 4 (set (reg:SI 116)
        (neg:SI (reg:SI 117))) "vid.c":321:7 -1
     (nil))
(insn 18 17 19 4 (set (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])
        (reg:SI 116)) "vid.c":321:7 -1
     (nil))
;;  succ:       5 (FALLTHRU)

;; basic block 5, loop depth 0, maybe hot
;;  prev block 4, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;;              4 (FALLTHRU)
(code_label 19 18 20 5 94 (nil) [1 uses])
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 5 (set (reg:SI 113 [ x.55_1 ])
        (mem/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [3 x+0 S4 A32])) "vid.c":323:3 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 0 r0)
        (reg:SI 113 [ x.55_1 ])) "vid.c":323:3 -1
     (nil))
(call_insn 23 22 26 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":323:3 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(insn 26 23 27 5 (clobber (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
(insn 27 26 30 5 (clobber (reg:SI 114 [ <retval> ])) "vid.c":324:1 -1
     (nil))
(insn 30 27 25 5 (const_int 0 [0]) "vid.c":324:1 -1
     (nil))
(insn 25 30 28 5 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":324:1 -1
     (nil))
(insn 28 25 0 5 (use (reg/i:SI 0 r0)) "vid.c":324:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function kprintf (kprintf, funcdef_no=20, decl_uid=4615, cgraph_uid=21, symbol_order=26)

int kprintf (char * fmt)
{
  char * cp;
  int * ip;
  char _1;
  char _2;
  char _3;
  char _4;
  int _5;
  int _6;
  char _7;
  int _8;
  char * _9;
  int _10;
  int _11;
  unsigned int _12;
  int _13;
  unsigned int _14;
  char _15;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  cp_22 = fmt;
  ip_23 = &fmt + 4;
  goto <bb 14>; [INV]
;;    succ:       14

;;   basic block 3, loop depth 1
;;    pred:       14
  _1 = *cp_17;
  if (_1 != 37)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       4
;;                7

;;   basic block 4, loop depth 1
;;    pred:       3
  _2 = *cp_17;
  kputc (_2);
  _3 = *cp_17;
  if (_3 == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 1
;;    pred:       4
  kputc (13);
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       4
;;                5
  cp_34 = cp_17 + 1;
  // predicted unlikely by continue predictor.
  goto <bb 14>; [INV]
;;    succ:       14

;;   basic block 7, loop depth 1
;;    pred:       3
  cp_24 = cp_17 + 1;
  _4 = *cp_24;
  _5 = (int) _4;
  switch (_5) <default: <L10> [77.27%], case 99: <L5> [4.55%], case 100: <L7> [4.55%], case 115: <L6> [4.55%], case 117: <L8> [4.55%], case 120: <L9> [4.55%]>
;;    succ:       13
;;                8
;;                10
;;                9
;;                11
;;                12

;;   basic block 8, loop depth 1
;;    pred:       7
<L5>:
  _6 = *ip_16;
  _7 = (char) _6;
  kputc (_7);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 9, loop depth 1
;;    pred:       7
<L6>:
  _8 = *ip_16;
  _9 = (char *) _8;
  kprints (_9);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 10, loop depth 1
;;    pred:       7
<L7>:
  _10 = *ip_16;
  kprinti (_10);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 11, loop depth 1
;;    pred:       7
<L8>:
  _11 = *ip_16;
  _12 = (unsigned int) _11;
  kprintu (_12);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 12, loop depth 1
;;    pred:       7
<L9>:
  _13 = *ip_16;
  _14 = (unsigned int) _13;
  kprintx (_14);
;;    succ:       13

;;   basic block 13, loop depth 1
;;    pred:       7
;;                8
;;                9
;;                10
;;                11
;;                12
<L10>:
  cp_30 = cp_24 + 1;
  ip_31 = ip_16 + 4;
;;    succ:       14

;;   basic block 14, loop depth 1
;;    pred:       2
;;                6
;;                13
  # ip_16 = PHI <ip_23(2), ip_16(6), ip_31(13)>
  # cp_17 = PHI <cp_22(2), cp_34(6), cp_30(13)>
  _15 = *cp_17;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       3
;;                15

;;   basic block 15, loop depth 0
;;    pred:       14
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (_2 - 2 )
Partition 3 (_3 - 3 )
Partition 4 (_4 - 4 )
Partition 5 (_5 - 5 )
Partition 6 (_6 - 6 )
Partition 7 (_7 - 7 )
Partition 8 (_8 - 8 )
Partition 9 (_9 - 9 )
Partition 10 (_10 - 10 )
Partition 11 (_11 - 11 )
Partition 12 (_12 - 12 )
Partition 13 (_13 - 13 )
Partition 14 (_14 - 14 )
Partition 15 (_15 - 15 )
Partition 16 (ip_16 - 16 )
Partition 17 (cp_17 - 17 )
Partition 22 (cp_22 - 22 )
Partition 23 (ip_23 - 23 )
Partition 24 (cp_24 - 24 )
Partition 30 (cp_30 - 30 )
Partition 31 (ip_31 - 31 )
Partition 34 (cp_34 - 34 )
Partition 35 (_35(D) - 35 )


Coalescible Partition map 

Partition 0, base 0 (ip_16 - 16 23 31 )
Partition 1, base 1 (cp_17 - 17 22 24 30 34 )
Partition 8, base 2 (_35(D) - 35 )


Partition map 

Partition 0 (ip_16 - 16 )
Partition 1 (cp_17 - 17 )
Partition 2 (cp_22 - 22 )
Partition 3 (ip_23 - 23 )
Partition 4 (cp_24 - 24 )
Partition 5 (cp_30 - 30 )
Partition 6 (ip_31 - 31 )
Partition 7 (cp_34 - 34 )
Partition 8 (_35(D) - 35 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483646, 0) ip_16 <-> ip_23
(2147483646, 0) ip_16 <-> ip_31
(2147483646, 0) cp_17 <-> cp_22
(2147483646, 0) cp_17 <-> cp_34
(2147483646, 0) cp_17 <-> cp_30
(2147483646, 0) cp_17 <-> cp_24

Partition map 

Partition 0 (ip_16 - 16 )
Partition 1 (cp_17 - 17 )
Partition 2 (cp_22 - 22 )
Partition 3 (ip_23 - 23 )
Partition 4 (cp_24 - 24 )
Partition 5 (cp_30 - 30 )
Partition 6 (ip_31 - 31 )
Partition 7 (cp_34 - 34 )
Partition 8 (_35(D) - 35 )

Coalesce list: (16)ip_16 & (23)ip_23 [map: 0, 3] : Success -> 0
Coalesce list: (16)ip_16 & (31)ip_31 [map: 0, 6] : Success -> 0
Coalesce list: (17)cp_17 & (22)cp_22 [map: 1, 2] : Success -> 1
Coalesce list: (17)cp_17 & (34)cp_34 [map: 1, 7] : Success -> 1
Coalesce list: (17)cp_17 & (30)cp_30 [map: 1, 5] : Success -> 1
Coalesce list: (17)cp_17 & (24)cp_24 [map: 1, 4] : Success -> 1
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (_2 - 2 )
Partition 2 (_3 - 3 )
Partition 3 (_4 - 4 )
Partition 4 (_5 - 5 )
Partition 5 (_6 - 6 )
Partition 6 (_7 - 7 )
Partition 7 (_8 - 8 )
Partition 8 (_9 - 9 )
Partition 9 (_10 - 10 )
Partition 10 (_11 - 11 )
Partition 11 (_12 - 12 )
Partition 12 (_13 - 13 )
Partition 13 (_14 - 14 )
Partition 14 (_15 - 15 )
Partition 15 (ip_16 - 16 23 31 )
Partition 16 (cp_17 - 17 22 24 30 34 )
Partition 17 (_35(D) - 35 )

int kprintf (char * fmt)
{
  char * cp;
  int * ip;
  char _1;
  char _2;
  char _3;
  char _4;
  int _5;
  int _6;
  char _7;
  int _8;
  char * _9;
  int _10;
  int _11;
  unsigned int _12;
  int _13;
  unsigned int _14;
  char _15;
  int _35(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  cp_22 = fmt;
  ip_23 = &fmt + 4;
  goto <bb 14>; [INV]
;;    succ:       14

;;   basic block 3, loop depth 1
;;    pred:       14
  _1 = *cp_17;
  if (_1 != 37)
    goto <bb 4>; [INV]
  else
    goto <bb 7>; [INV]
;;    succ:       4
;;                7

;;   basic block 4, loop depth 1
;;    pred:       3
  _2 = *cp_17;
  kputc (_2);
  _3 = *cp_17;
  if (_3 == 10)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]
;;    succ:       5
;;                6

;;   basic block 5, loop depth 1
;;    pred:       4
  kputc (13);
;;    succ:       6

;;   basic block 6, loop depth 1
;;    pred:       4
;;                5
  cp_34 = cp_17 + 1;
  // predicted unlikely by continue predictor.
  goto <bb 14>; [INV]
;;    succ:       14

;;   basic block 7, loop depth 1
;;    pred:       3
  cp_24 = cp_17 + 1;
  _4 = *cp_24;
  _5 = (int) _4;
  switch (_5) <default: <L10> [77.27%], case 99: <L5> [4.55%], case 100: <L7> [4.55%], case 115: <L6> [4.55%], case 117: <L8> [4.55%], case 120: <L9> [4.55%]>
;;    succ:       13
;;                8
;;                10
;;                9
;;                11
;;                12

;;   basic block 8, loop depth 1
;;    pred:       7
<L5>:
  _6 = *ip_16;
  _7 = (char) _6;
  kputc (_7);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 9, loop depth 1
;;    pred:       7
<L6>:
  _8 = *ip_16;
  _9 = (char *) _8;
  kprints (_9);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 10, loop depth 1
;;    pred:       7
<L7>:
  _10 = *ip_16;
  kprinti (_10);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 11, loop depth 1
;;    pred:       7
<L8>:
  _11 = *ip_16;
  _12 = (unsigned int) _11;
  kprintu (_12);
  goto <bb 13>; [INV]
;;    succ:       13

;;   basic block 12, loop depth 1
;;    pred:       7
<L9>:
  _13 = *ip_16;
  _14 = (unsigned int) _13;
  kprintx (_14);
;;    succ:       13

;;   basic block 13, loop depth 1
;;    pred:       7
;;                8
;;                9
;;                10
;;                11
;;                12
<L10>:
  cp_30 = cp_24 + 1;
  ip_31 = ip_16 + 4;
;;    succ:       14

;;   basic block 14, loop depth 1
;;    pred:       2
;;                6
;;                13
  # ip_16 = PHI <ip_23(2), ip_16(6), ip_31(13)>
  # cp_17 = PHI <cp_22(2), cp_34(6), cp_30(13)>
  _15 = *cp_17;
  if (_15 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]
;;    succ:       3
;;                15

;;   basic block 15, loop depth 0
;;    pred:       14
  return;
;;    succ:       EXIT

}


Partition 1: size 4 align 4
	cp_17
Partition 0: size 4 align 4
	ip_16

;; Generating RTL for gimple basic block 2

;; cp_22 = fmt;

(insn 5 4 6 (set (reg/f:SI 129)
        (mem/f/c:SI (reg/f:SI 107 virtual-incoming-args) [5 fmt+0 S4 A64])) "vid.c":330:6 -1
     (nil))

(insn 6 5 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg/f:SI 129)) "vid.c":330:6 -1
     (nil))

;; ip_23 = &fmt + 4;

(insn 7 6 8 (set (reg:SI 130)
        (plus:SI (reg/f:SI 107 virtual-incoming-args)
            (const_int 4 [0x4]))) "vid.c":331:6 -1
     (nil))

(insn 8 7 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 130)) "vid.c":331:6 -1
     (nil))

;; Generating RTL for gimple basic block 3

;; _1 = *cp_17;

(insn 12 11 13 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":334:9 -1
     (nil))

(insn 13 12 0 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_17+0 S1 A8]))) "vid.c":334:9 -1
     (nil))

;; if (_1 != 37)

(insn 14 13 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "vid.c":334:8 -1
     (nil))

(jump_insn 15 14 0 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":334:8 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; _2 = *cp_17;

(insn 17 16 18 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":335:7 -1
     (nil))

(insn 18 17 0 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 132) [0 *cp_17+0 S1 A8]))) "vid.c":335:7 -1
     (nil))

;; kputc (_2);

(insn 19 18 20 (set (reg:SI 0 r0)
        (reg:SI 114 [ _2 ])) "vid.c":335:7 -1
     (nil))

(call_insn 20 19 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":335:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; _3 = *cp_17;

(insn 21 20 22 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":336:11 -1
     (nil))

(insn 22 21 0 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 133) [0 *cp_17+0 S1 A8]))) "vid.c":336:11 -1
     (nil))

;; if (_3 == 10)

(insn 23 22 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "vid.c":336:10 -1
     (nil))

(jump_insn 24 23 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) "vid.c":336:10 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; kputc (13);

(insn 26 25 27 (set (reg:SI 0 r0)
        (const_int 13 [0xd])) "vid.c":337:2 -1
     (nil))

(call_insn 27 26 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":337:2 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 28 27 29 98 (nil) [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)

;; cp_34 = cp_17 + 1;

(insn 30 29 31 (set (reg:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":338:9 -1
     (nil))

(insn 31 30 32 (set (reg:SI 134)
        (plus:SI (reg:SI 135)
            (const_int 1 [0x1]))) "vid.c":338:9 -1
     (nil))

(insn 32 31 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 134)) "vid.c":338:9 -1
     (nil))

;; // predicted unlikely by continue predictor.

(nil)

;; Generating RTL for gimple basic block 7

;; 

(code_label 35 34 36 97 (nil) [0 uses])

(note 36 35 0 NOTE_INSN_BASIC_BLOCK)

;; cp_24 = cp_17 + 1;

(insn 37 36 38 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":341:7 -1
     (nil))

(insn 38 37 39 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 1 [0x1]))) "vid.c":341:7 -1
     (nil))

(insn 39 38 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 136)) "vid.c":341:7 -1
     (nil))

;; _4 = *cp_24;

(insn 40 39 41 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":342:12 -1
     (nil))

(insn 41 40 0 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 138) [0 *cp_24+0 S1 A8]))) "vid.c":342:12 -1
     (nil))

;; _5 = (int) _4;

(insn 42 41 0 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "vid.c":342:12 -1
     (nil))

;; switch (_5) <default: <L10> [62.96%], case 99: <L5> [7.41%], case 100: <L7> [7.41%], case 115: <L6> [7.41%], case 117: <L8> [7.41%], case 120: <L9> [7.41%]>

(insn 43 42 44 (set (reg:SI 139)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "vid.c":342:5 -1
     (nil))

(jump_insn 44 43 45 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 139)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 139)
                                (const_int 4 [0x4]))
                            (label_ref:SI 45)) [0  S4 A32])
                    (label_ref:SI 0)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 45))
        ]) "vid.c":342:5 -1
     (nil))

(code_label 45 44 46 101 (nil) [0 uses])

(jump_table_data 46 45 47 (addr_vec:SI [
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
            (label_ref:SI 0)
        ]))

(barrier 47 46 0)

;; Generating RTL for gimple basic block 8

;; <L5>:

(code_label 48 47 49 105 (nil) [0 uses])

(note 49 48 0 NOTE_INSN_BASIC_BLOCK)

;; _6 = *ip_16;

(insn 50 49 51 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":343:27 -1
     (nil))

(insn 51 50 0 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 140) [3 *ip_16+0 S4 A32])) "vid.c":343:27 -1
     (nil))

;; _7 = (char) _6;

(insn 52 51 0 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "vid.c":343:15 -1
     (nil))

;; kputc (_7);

(insn 53 52 54 (set (reg:SI 0 r0)
        (reg:SI 119 [ _7 ])) "vid.c":343:15 -1
     (nil))

(call_insn 54 53 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":343:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 9

;; <L6>:

(code_label 57 56 58 103 (nil) [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; _8 = *ip_16;

(insn 59 58 60 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":344:31 -1
     (nil))

(insn 60 59 0 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 141) [3 *ip_16+0 S4 A32])) "vid.c":344:31 -1
     (nil))

;; _9 = (char *) _8;

(insn 61 60 0 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "vid.c":344:15 -1
     (nil))

;; kprints (_9);

(insn 62 61 63 (set (reg:SI 0 r0)
        (reg/f:SI 121 [ _9 ])) "vid.c":344:15 -1
     (nil))

(call_insn 63 62 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprints") [flags 0x3]  <function_decl 0x7fd417d04100 kprints>) [0 kprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":344:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 10

;; <L7>:

(code_label 66 65 67 104 (nil) [0 uses])

(note 67 66 0 NOTE_INSN_BASIC_BLOCK)

;; _10 = *ip_16;

(insn 68 67 69 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":345:15 -1
     (nil))

(insn 69 68 0 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 142) [3 *ip_16+0 S4 A32])) "vid.c":345:15 -1
     (nil))

;; kprinti (_10);

(insn 70 69 71 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":345:15 -1
     (nil))

(call_insn 71 70 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprinti") [flags 0x3]  <function_decl 0x7fd417d04d00 kprinti>) [0 kprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":345:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 11

;; <L8>:

(code_label 74 73 75 102 (nil) [0 uses])

(note 75 74 0 NOTE_INSN_BASIC_BLOCK)

;; _11 = *ip_16;

(insn 76 75 77 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":346:23 -1
     (nil))

(insn 77 76 0 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 143) [3 *ip_16+0 S4 A32])) "vid.c":346:23 -1
     (nil))

;; _12 = (unsigned int) _11;

(insn 78 77 0 (set (reg:SI 124 [ _12 ])
        (reg:SI 123 [ _11 ])) "vid.c":346:15 -1
     (nil))

;; kprintu (_12);

(insn 79 78 80 (set (reg:SI 0 r0)
        (reg:SI 124 [ _12 ])) "vid.c":346:15 -1
     (nil))

(call_insn 80 79 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":346:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 12

;; <L9>:

(code_label 83 82 84 100 (nil) [0 uses])

(note 84 83 0 NOTE_INSN_BASIC_BLOCK)

;; _13 = *ip_16;

(insn 85 84 86 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":347:23 -1
     (nil))

(insn 86 85 0 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 144) [3 *ip_16+0 S4 A32])) "vid.c":347:23 -1
     (nil))

;; _14 = (unsigned int) _13;

(insn 87 86 0 (set (reg:SI 126 [ _14 ])
        (reg:SI 125 [ _13 ])) "vid.c":347:15 -1
     (nil))

;; kprintx (_14);

(insn 88 87 89 (set (reg:SI 0 r0)
        (reg:SI 126 [ _14 ])) "vid.c":347:15 -1
     (nil))

(call_insn 89 88 0 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintx") [flags 0x3]  <function_decl 0x7fd417d04700 kprintx>) [0 kprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":347:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 13

;; <L10>:

(code_label 90 89 91 99 (nil) [0 uses])

(note 91 90 0 NOTE_INSN_BASIC_BLOCK)

;; cp_30 = cp_24 + 1;

(insn 92 91 93 (set (reg:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":349:7 -1
     (nil))

(insn 93 92 94 (set (reg:SI 145)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) "vid.c":349:7 -1
     (nil))

(insn 94 93 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 145)) "vid.c":349:7 -1
     (nil))

;; ip_31 = ip_16 + 4;

(insn 95 94 96 (set (reg:SI 148)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":349:13 -1
     (nil))

(insn 96 95 97 (set (reg:SI 147)
        (plus:SI (reg:SI 148)
            (const_int 4 [0x4]))) "vid.c":349:13 -1
     (nil))

(insn 97 96 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 147)) "vid.c":349:13 -1
     (nil))

;; Generating RTL for gimple basic block 14

;; 

(code_label 98 97 99 96 (nil) [0 uses])

(note 99 98 0 NOTE_INSN_BASIC_BLOCK)

;; _15 = *cp_17;

(insn 100 99 101 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":333:9 -1
     (nil))

(insn 101 100 0 (set (reg:SI 127 [ _15 ])
        (zero_extend:SI (mem:QI (reg/f:SI 149) [0 *cp_17+0 S1 A8]))) "vid.c":333:9 -1
     (nil))

;; if (_15 != 0)

(insn 103 101 104 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 127 [ _15 ])
            (const_int 0 [0]))) "vid.c":333:9 -1
     (nil))

(jump_insn 104 103 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "vid.c":333:9 -1
     (nil))

;; Generating RTL for gimple basic block 15


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 17 into block 16...
Merged blocks 16 and 17.
Merged 16 and 17 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg/f:SI 129)
        (mem/f/c:SI (reg/f:SI 107 virtual-incoming-args) [5 fmt+0 S4 A64])) "vid.c":330:6 -1
     (nil))
(insn 6 5 7 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg/f:SI 129)) "vid.c":330:6 -1
     (nil))
(insn 7 6 8 2 (set (reg:SI 130)
        (plus:SI (reg/f:SI 107 virtual-incoming-args)
            (const_int 4 [0x4]))) "vid.c":331:6 -1
     (nil))
(insn 8 7 9 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 130)) "vid.c":331:6 -1
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (label_ref 98)) "vid.c":333:8 -1
     (nil)
 -> 98)
;;  succ:       15

(barrier 10 9 102)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       15
(code_label 102 10 11 4 106 (nil) [1 uses])
(note 11 102 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 12 11 13 4 (set (reg/f:SI 131)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":334:9 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 113 [ _1 ])
        (zero_extend:SI (mem:QI (reg/f:SI 131) [0 *cp_17+0 S1 A8]))) "vid.c":334:9 -1
     (nil))
(insn 14 13 15 4 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 113 [ _1 ])
            (const_int 37 [0x25]))) "vid.c":334:8 -1
     (nil))
(jump_insn 15 14 16 4 (set (pc)
        (if_then_else (eq (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) "vid.c":334:8 -1
     (nil)
 -> 35)
;;  succ:       5 (FALLTHRU)
;;              8

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       4 (FALLTHRU)
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 17 16 18 5 (set (reg/f:SI 132)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":335:7 -1
     (nil))
(insn 18 17 19 5 (set (reg:SI 114 [ _2 ])
        (zero_extend:SI (mem:QI (reg/f:SI 132) [0 *cp_17+0 S1 A8]))) "vid.c":335:7 -1
     (nil))
(insn 19 18 20 5 (set (reg:SI 0 r0)
        (reg:SI 114 [ _2 ])) "vid.c":335:7 -1
     (nil))
(call_insn 20 19 21 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":335:7 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(insn 21 20 22 5 (set (reg/f:SI 133)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":336:11 -1
     (nil))
(insn 22 21 23 5 (set (reg:SI 115 [ _3 ])
        (zero_extend:SI (mem:QI (reg/f:SI 133) [0 *cp_17+0 S1 A8]))) "vid.c":336:11 -1
     (nil))
(insn 23 22 24 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 115 [ _3 ])
            (const_int 10 [0xa]))) "vid.c":336:10 -1
     (nil))
(jump_insn 24 23 25 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "vid.c":336:10 -1
     (nil)
 -> 28)
;;  succ:       6 (FALLTHRU)
;;              7

;; basic block 6, loop depth 1, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL)
;;  pred:       5 (FALLTHRU)
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg:SI 0 r0)
        (const_int 13 [0xd])) "vid.c":337:2 -1
     (nil))
(call_insn 27 26 28 6 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":337:2 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       7 (FALLTHRU)

;; basic block 7, loop depth 1, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
;;              6 (FALLTHRU)
(code_label 28 27 29 7 98 (nil) [1 uses])
(note 29 28 30 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 7 (set (reg:SI 135)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":338:9 -1
     (nil))
(insn 31 30 32 7 (set (reg:SI 134)
        (plus:SI (reg:SI 135)
            (const_int 1 [0x1]))) "vid.c":338:9 -1
     (nil))
(insn 32 31 33 7 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 134)) "vid.c":338:9 -1
     (nil))
(jump_insn 33 32 34 7 (set (pc)
        (label_ref 98)) "vid.c":339:7 -1
     (nil)
 -> 98)
;;  succ:       15 (DFS_BACK)

(barrier 34 33 35)
;; basic block 8, loop depth 1, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 35 34 36 8 97 (nil) [1 uses])
(note 36 35 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 37 36 38 8 (set (reg:SI 137)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":341:7 -1
     (nil))
(insn 38 37 39 8 (set (reg:SI 136)
        (plus:SI (reg:SI 137)
            (const_int 1 [0x1]))) "vid.c":341:7 -1
     (nil))
(insn 39 38 40 8 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 136)) "vid.c":341:7 -1
     (nil))
(insn 40 39 41 8 (set (reg/f:SI 138)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":342:12 -1
     (nil))
(insn 41 40 42 8 (set (reg:SI 116 [ _4 ])
        (zero_extend:SI (mem:QI (reg/f:SI 138) [0 *cp_24+0 S1 A8]))) "vid.c":342:12 -1
     (nil))
(insn 42 41 43 8 (set (reg:SI 117 [ _5 ])
        (reg:SI 116 [ _4 ])) "vid.c":342:12 -1
     (nil))
(insn 43 42 44 8 (set (reg:SI 139)
        (plus:SI (reg:SI 117 [ _5 ])
            (const_int -99 [0xffffffffffffff9d]))) "vid.c":342:5 -1
     (nil))
(jump_insn 44 43 45 8 (parallel [
            (set (pc)
                (if_then_else (leu (reg:SI 139)
                        (const_int 21 [0x15]))
                    (mem/u/c:SI (plus:SI (mult:SI (reg:SI 139)
                                (const_int 4 [0x4]))
                            (label_ref:SI 45)) [0  S4 A32])
                    (label_ref:SI 90)))
            (clobber (reg:CC 100 cc))
            (use (label_ref:SI 45))
        ]) "vid.c":342:5 -1
     (insn_list:REG_LABEL_TARGET 90 (nil))
 -> 45)
;;  succ:       14 [63.0% (adjusted)] 
;;              9 [7.4% (adjusted)] 
;;              11 [7.4% (adjusted)] 
;;              10 [7.4% (adjusted)] 
;;              12 [7.4% (adjusted)] 
;;              13 [7.4% (adjusted)] 

;; Insn is not within a basic block
(code_label 45 44 46 101 (nil) [2 uses])
;; Insn is not within a basic block
(jump_table_data 46 45 47 (addr_vec:SI [
            (label_ref:SI 48)
            (label_ref:SI 66)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 57)
            (label_ref:SI 90)
            (label_ref:SI 74)
            (label_ref:SI 90)
            (label_ref:SI 90)
            (label_ref:SI 83)
        ]))
(barrier 47 46 48)
;; basic block 9, loop depth 1, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [7.4% (adjusted)] 
(code_label 48 47 49 9 105 (nil) [1 uses])
(note 49 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 9 (set (reg/f:SI 140)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":343:27 -1
     (nil))
(insn 51 50 52 9 (set (reg:SI 118 [ _6 ])
        (mem:SI (reg/f:SI 140) [3 *ip_16+0 S4 A32])) "vid.c":343:27 -1
     (nil))
(insn 52 51 53 9 (set (reg:SI 119 [ _7 ])
        (and:SI (reg:SI 118 [ _6 ])
            (const_int 255 [0xff]))) "vid.c":343:15 -1
     (nil))
(insn 53 52 54 9 (set (reg:SI 0 r0)
        (reg:SI 119 [ _7 ])) "vid.c":343:15 -1
     (nil))
(call_insn 54 53 55 9 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kputc") [flags 0x3]  <function_decl 0x7fd417cfef00 kputc>) [0 kputc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":343:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:QI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 55 54 56 9 (set (pc)
        (label_ref 90)) "vid.c":343:38 -1
     (nil)
 -> 90)
;;  succ:       14

(barrier 56 55 57)
;; basic block 10, loop depth 1, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [7.4% (adjusted)] 
(code_label 57 56 58 10 103 (nil) [1 uses])
(note 58 57 59 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 10 (set (reg/f:SI 141)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":344:31 -1
     (nil))
(insn 60 59 61 10 (set (reg:SI 120 [ _8 ])
        (mem:SI (reg/f:SI 141) [3 *ip_16+0 S4 A32])) "vid.c":344:31 -1
     (nil))
(insn 61 60 62 10 (set (reg/f:SI 121 [ _9 ])
        (reg:SI 120 [ _8 ])) "vid.c":344:15 -1
     (nil))
(insn 62 61 63 10 (set (reg:SI 0 r0)
        (reg/f:SI 121 [ _9 ])) "vid.c":344:15 -1
     (nil))
(call_insn 63 62 64 10 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprints") [flags 0x3]  <function_decl 0x7fd417d04100 kprints>) [0 kprints S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":344:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 64 63 65 10 (set (pc)
        (label_ref 90)) "vid.c":344:38 -1
     (nil)
 -> 90)
;;  succ:       14

(barrier 65 64 66)
;; basic block 11, loop depth 1, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [7.4% (adjusted)] 
(code_label 66 65 67 11 104 (nil) [1 uses])
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 68 67 69 11 (set (reg/f:SI 142)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":345:15 -1
     (nil))
(insn 69 68 70 11 (set (reg:SI 122 [ _10 ])
        (mem:SI (reg/f:SI 142) [3 *ip_16+0 S4 A32])) "vid.c":345:15 -1
     (nil))
(insn 70 69 71 11 (set (reg:SI 0 r0)
        (reg:SI 122 [ _10 ])) "vid.c":345:15 -1
     (nil))
(call_insn 71 70 72 11 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprinti") [flags 0x3]  <function_decl 0x7fd417d04d00 kprinti>) [0 kprinti S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":345:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 72 71 73 11 (set (pc)
        (label_ref 90)) "vid.c":345:38 -1
     (nil)
 -> 90)
;;  succ:       14

(barrier 73 72 74)
;; basic block 12, loop depth 1, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [7.4% (adjusted)] 
(code_label 74 73 75 12 102 (nil) [1 uses])
(note 75 74 76 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 12 (set (reg/f:SI 143)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":346:23 -1
     (nil))
(insn 77 76 78 12 (set (reg:SI 123 [ _11 ])
        (mem:SI (reg/f:SI 143) [3 *ip_16+0 S4 A32])) "vid.c":346:23 -1
     (nil))
(insn 78 77 79 12 (set (reg:SI 124 [ _12 ])
        (reg:SI 123 [ _11 ])) "vid.c":346:15 -1
     (nil))
(insn 79 78 80 12 (set (reg:SI 0 r0)
        (reg:SI 124 [ _12 ])) "vid.c":346:15 -1
     (nil))
(call_insn 80 79 81 12 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintu") [flags 0x3]  <function_decl 0x7fd417d04b00 kprintu>) [0 kprintu S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":346:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
(jump_insn 81 80 82 12 (set (pc)
        (label_ref 90)) "vid.c":346:38 -1
     (nil)
 -> 90)
;;  succ:       14

(barrier 82 81 83)
;; basic block 13, loop depth 1, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [7.4% (adjusted)] 
(code_label 83 82 84 13 100 (nil) [1 uses])
(note 84 83 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 85 84 86 13 (set (reg/f:SI 144)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":347:23 -1
     (nil))
(insn 86 85 87 13 (set (reg:SI 125 [ _13 ])
        (mem:SI (reg/f:SI 144) [3 *ip_16+0 S4 A32])) "vid.c":347:23 -1
     (nil))
(insn 87 86 88 13 (set (reg:SI 126 [ _14 ])
        (reg:SI 125 [ _13 ])) "vid.c":347:15 -1
     (nil))
(insn 88 87 89 13 (set (reg:SI 0 r0)
        (reg:SI 126 [ _14 ])) "vid.c":347:15 -1
     (nil))
(call_insn 89 88 90 13 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kprintx") [flags 0x3]  <function_decl 0x7fd417d04700 kprintx>) [0 kprintx S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":347:15 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (expr_list:SI (use (reg:SI 0 r0))
            (nil))))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 1, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       8 [63.0% (adjusted)] 
;;              9
;;              10
;;              11
;;              12
;;              13 (FALLTHRU)
(code_label 90 89 91 14 99 (nil) [22 uses])
(note 91 90 92 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 14 (set (reg:SI 146)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":349:7 -1
     (nil))
(insn 93 92 94 14 (set (reg:SI 145)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) "vid.c":349:7 -1
     (nil))
(insn 94 93 95 14 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])
        (reg:SI 145)) "vid.c":349:7 -1
     (nil))
(insn 95 94 96 14 (set (reg:SI 148)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])) "vid.c":349:13 -1
     (nil))
(insn 96 95 97 14 (set (reg:SI 147)
        (plus:SI (reg:SI 148)
            (const_int 4 [0x4]))) "vid.c":349:13 -1
     (nil))
(insn 97 96 98 14 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -8 [0xfffffffffffffff8])) [1 ip+0 S4 A64])
        (reg:SI 147)) "vid.c":349:13 -1
     (nil))
;;  succ:       15 (FALLTHRU,DFS_BACK)

;; basic block 15, loop depth 1, maybe hot
;;  prev block 14, next block 16, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              7 (DFS_BACK)
;;              14 (FALLTHRU,DFS_BACK)
(code_label 98 97 99 15 96 (nil) [2 uses])
(note 99 98 100 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 100 99 101 15 (set (reg/f:SI 149)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -4 [0xfffffffffffffffc])) [5 cp+0 S4 A32])) "vid.c":333:9 -1
     (nil))
(insn 101 100 103 15 (set (reg:SI 127 [ _15 ])
        (zero_extend:SI (mem:QI (reg/f:SI 149) [0 *cp_17+0 S1 A8]))) "vid.c":333:9 -1
     (nil))
(insn 103 101 104 15 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 127 [ _15 ])
            (const_int 0 [0]))) "vid.c":333:9 -1
     (nil))
(jump_insn 104 103 105 15 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) "vid.c":333:9 -1
     (nil)
 -> 102)
;;  succ:       4
;;              16 (FALLTHRU)

;; basic block 16, loop depth 0, maybe hot
;;  prev block 15, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       15 (FALLTHRU)
(note 105 104 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 108 105 109 16 (clobber (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
(insn 109 108 112 16 (clobber (reg:SI 128 [ <retval> ])) "vid.c":351:1 -1
     (nil))
(insn 112 109 107 16 (const_int 0 [0]) "vid.c":351:1 -1
     (nil))
(insn 107 112 110 16 (set (reg/i:SI 0 r0)
        (reg:SI 128 [ <retval> ])) "vid.c":351:1 -1
     (nil))
(insn 110 107 0 16 (use (reg/i:SI 0 r0)) "vid.c":351:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)


;; Function stestring (stestring, funcdef_no=21, decl_uid=4629, cgraph_uid=22, symbol_order=27)

int stestring (char * s)
{
  char c;
  int _1;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  *s_2 = c_7;
  s_10 = s_2 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_2 = PHI <s_4(D)(2), s_10(3)>
  _1 = kgetc ();
  c_7 = (char) _1;
  if (c_7 != 13)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  *s_2 = 0;
  return;
;;    succ:       EXIT

}



Partition map 

Partition 1 (_1 - 1 )
Partition 2 (s_2 - 2 )
Partition 4 (s_4(D) - 4 )
Partition 7 (c_7 - 7 )
Partition 10 (s_10 - 10 )
Partition 11 (_11(D) - 11 )


Coalescible Partition map 

Partition 0, base 0 (s_2 - 2 4 10 )
Partition 3, base 1 (_11(D) - 11 )


Partition map 

Partition 0 (s_2 - 2 )
Partition 1 (s_4(D) - 4 )
Partition 2 (s_10 - 10 )
Partition 3 (_11(D) - 11 )


Conflict graph:

After sorting:
Sorted Coalesce list:
(2147483647, 0) s_2 <-> s_4(D)
(2147483647, 0) s_2 <-> s_10

Partition map 

Partition 0 (s_2 - 2 )
Partition 1 (s_4(D) - 4 )
Partition 2 (s_10 - 10 )
Partition 3 (_11(D) - 11 )

Coalesce list: (2)s_2 & (4)s_4(D) [map: 0, 1] : Success -> 0
Coalesce list: (2)s_2 & (10)s_10 [map: 0, 2] : Success -> 0
After Coalescing:

Partition map 

Partition 0 (_1 - 1 )
Partition 1 (s_2 - 2 4 10 )
Partition 2 (c_7 - 7 )
Partition 3 (_11(D) - 11 )

int stestring (char * s)
{
  char c;
  int _1;
  int _11(D);

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  goto <bb 4>; [INV]
;;    succ:       4

;;   basic block 3, loop depth 1
;;    pred:       4
  *s_2 = c_7;
  s_10 = s_2 + 1;
;;    succ:       4

;;   basic block 4, loop depth 1
;;    pred:       2
;;                3
  # s_2 = PHI <s_4(D)(2), s_10(3)>
  _1 = kgetc ();
  c_7 = (char) _1;
  if (c_7 != 13)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]
;;    succ:       3
;;                5

;;   basic block 5, loop depth 0
;;    pred:       4
  *s_2 = 0;
  return;
;;    succ:       EXIT

}


Partition 0: size 1 align 1
	c_7

;; Generating RTL for gimple basic block 2

;; Generating RTL for gimple basic block 3

;; *s_2 = c_7;

(insn 9 8 10 (set (reg/f:SI 115)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":357:8 -1
     (nil))

(insn 10 9 11 (set (reg:QI 116)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "vid.c":357:8 -1
     (nil))

(insn 11 10 0 (set (mem:QI (reg/f:SI 115) [0 *s_2+0 S1 A8])
        (reg:QI 116)) "vid.c":357:8 -1
     (nil))

;; s_10 = s_2 + 1;

(insn 12 11 13 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":358:6 -1
     (nil))

(insn 13 12 14 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":358:6 -1
     (nil))

(insn 14 13 0 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":358:6 -1
     (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 15 14 16 108 (nil) [0 uses])

(note 16 15 0 NOTE_INSN_BASIC_BLOCK)

;; _1 = kgetc ();

(call_insn 17 16 18 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x41]  <function_decl 0x7fd417d0a300 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":356:12 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))

(insn 18 17 0 (set (reg:SI 113 [ _1 ])
        (reg:SI 0 r0)) "vid.c":356:12 -1
     (nil))

;; c_7 = (char) _1;

(insn 19 18 20 (set (reg:QI 119)
        (subreg:QI (reg:SI 113 [ _1 ]) 0)) "vid.c":356:11 -1
     (nil))

(insn 20 19 0 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 119)) "vid.c":356:11 -1
     (nil))

;; if (c_7 != 13)

(insn 22 20 23 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":356:21 -1
     (nil))

(insn 23 22 24 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "vid.c":356:21 -1
     (nil))

(jump_insn 24 23 0 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "vid.c":356:21 -1
     (nil))

;; Generating RTL for gimple basic block 5

;; *s_2 = 0;

(insn 26 25 27 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":360:6 -1
     (nil))

(insn 27 26 28 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":360:6 -1
     (nil))

(insn 28 27 29 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "vid.c":360:6 -1
     (nil))

(insn 29 28 0 (set (mem:QI (reg/f:SI 121) [0 *s_2+0 S1 A8])
        (reg:QI 123)) "vid.c":360:6 -1
     (nil))


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Merging block 7 into block 6...
Merged blocks 6 and 7.
Merged 6 and 7 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 0 r0 [ s ])) "vid.c":354:1 -1
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(jump_insn 6 3 7 2 (set (pc)
        (label_ref 15)) "vid.c":356:8 -1
     (nil)
 -> 15)
;;  succ:       5

(barrier 7 6 21)
;; basic block 4, loop depth 1, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL)
;;  pred:       5
(code_label 21 7 8 4 109 (nil) [1 uses])
(note 8 21 9 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 4 (set (reg/f:SI 115)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":357:8 -1
     (nil))
(insn 10 9 11 4 (set (reg:QI 116)
        (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])) "vid.c":357:8 -1
     (nil))
(insn 11 10 12 4 (set (mem:QI (reg/f:SI 115) [0 *s_2+0 S1 A8])
        (reg:QI 116)) "vid.c":357:8 -1
     (nil))
(insn 12 11 13 4 (set (reg:SI 118)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":358:6 -1
     (nil))
(insn 13 12 14 4 (set (reg:SI 117)
        (plus:SI (reg:SI 118)
            (const_int 1 [0x1]))) "vid.c":358:6 -1
     (nil))
(insn 14 13 15 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])
        (reg:SI 117)) "vid.c":358:6 -1
     (nil))
;;  succ:       5 (FALLTHRU,DFS_BACK)

;; basic block 5, loop depth 1, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              4 (FALLTHRU,DFS_BACK)
(code_label 15 14 16 5 108 (nil) [1 uses])
(note 16 15 17 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 17 16 18 5 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kgetc") [flags 0x41]  <function_decl 0x7fd417d0a300 kgetc>) [0 kgetc S4 A32])
                    (const_int 0 [0])))
            (use (const_int 0 [0]))
            (clobber (reg:SI 14 lr))
        ]) "vid.c":356:12 -1
     (nil)
    (expr_list (clobber (reg:SI 12 ip))
        (nil)))
(insn 18 17 19 5 (set (reg:SI 113 [ _1 ])
        (reg:SI 0 r0)) "vid.c":356:12 -1
     (nil))
(insn 19 18 20 5 (set (reg:QI 119)
        (subreg:QI (reg:SI 113 [ _1 ]) 0)) "vid.c":356:11 -1
     (nil))
(insn 20 19 22 5 (set (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8])
        (reg:QI 119)) "vid.c":356:11 -1
     (nil))
(insn 22 20 23 5 (set (reg:SI 120)
        (zero_extend:SI (mem/c:QI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                    (const_int -1 [0xffffffffffffffff])) [0 c+0 S1 A8]))) "vid.c":356:21 -1
     (nil))
(insn 23 22 24 5 (set (reg:CC 100 cc)
        (compare:CC (reg:SI 120)
            (const_int 13 [0xd]))) "vid.c":356:21 -1
     (nil))
(jump_insn 24 23 25 5 (set (pc)
        (if_then_else (ne (reg:CC 100 cc)
                (const_int 0 [0]))
            (label_ref 21)
            (pc))) "vid.c":356:21 -1
     (nil)
 -> 21)
;;  succ:       4
;;              6 (FALLTHRU)

;; basic block 6, loop depth 0, maybe hot
;;  prev block 5, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 6 (set (reg/f:SI 121)
        (mem/f/c:SI (plus:SI (reg/f:SI 108 virtual-stack-vars)
                (const_int -12 [0xfffffffffffffff4])) [5 s+0 S4 A32])) "vid.c":360:6 -1
     (nil))
(insn 27 26 28 6 (set (reg:SI 122)
        (const_int 0 [0])) "vid.c":360:6 -1
     (nil))
(insn 28 27 29 6 (set (reg:QI 123)
        (subreg:QI (reg:SI 122) 0)) "vid.c":360:6 -1
     (nil))
(insn 29 28 32 6 (set (mem:QI (reg/f:SI 121) [0 *s_2+0 S1 A8])
        (reg:QI 123)) "vid.c":360:6 -1
     (nil))
(insn 32 29 33 6 (clobber (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
(insn 33 32 36 6 (clobber (reg:SI 114 [ <retval> ])) "vid.c":361:1 -1
     (nil))
(insn 36 33 31 6 (const_int 0 [0]) "vid.c":361:1 -1
     (nil))
(insn 31 36 34 6 (set (reg/i:SI 0 r0)
        (reg:SI 114 [ <retval> ])) "vid.c":361:1 -1
     (nil))
(insn 34 31 0 6 (use (reg/i:SI 0 r0)) "vid.c":361:1 -1
     (nil))
;;  succ:       EXIT [always]  (FALLTHRU)

